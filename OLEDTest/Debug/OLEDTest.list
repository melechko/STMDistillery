
OLEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018fc  08009fa8  08009fa8  00019fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a4  0800b8a4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8ac  0800b8ac  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8ac  0800b8ac  0001b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8b0  0800b8b0  0001b8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b8b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001f0  0800baa4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800baa4  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017169  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003019  00000000  00000000  00037382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017240  00000000  00000000  0003c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f5d  00000000  00000000  00053b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078fe4  00000000  00000000  00067a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  000e0abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f90 	.word	0x08009f90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08009f90 	.word	0x08009f90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_ldivmod>:
 8000f44:	b97b      	cbnz	r3, 8000f66 <__aeabi_ldivmod+0x22>
 8000f46:	b972      	cbnz	r2, 8000f66 <__aeabi_ldivmod+0x22>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bfbe      	ittt	lt
 8000f4c:	2000      	movlt	r0, #0
 8000f4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f52:	e006      	blt.n	8000f62 <__aeabi_ldivmod+0x1e>
 8000f54:	bf08      	it	eq
 8000f56:	2800      	cmpeq	r0, #0
 8000f58:	bf1c      	itt	ne
 8000f5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f62:	f000 b9a1 	b.w	80012a8 <__aeabi_idiv0>
 8000f66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	db09      	blt.n	8000f86 <__aeabi_ldivmod+0x42>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db1a      	blt.n	8000fac <__aeabi_ldivmod+0x68>
 8000f76:	f000 f835 	bl	8000fe4 <__udivmoddi4>
 8000f7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f82:	b004      	add	sp, #16
 8000f84:	4770      	bx	lr
 8000f86:	4240      	negs	r0, r0
 8000f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db1b      	blt.n	8000fc8 <__aeabi_ldivmod+0x84>
 8000f90:	f000 f828 	bl	8000fe4 <__udivmoddi4>
 8000f94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa4:	4252      	negs	r2, r2
 8000fa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f817 	bl	8000fe4 <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc6:	4770      	bx	lr
 8000fc8:	4252      	negs	r2, r2
 8000fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fce:	f000 f809 	bl	8000fe4 <__udivmoddi4>
 8000fd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fda:	b004      	add	sp, #16
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	4770      	bx	lr

08000fe4 <__udivmoddi4>:
 8000fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe8:	9e08      	ldr	r6, [sp, #32]
 8000fea:	460d      	mov	r5, r1
 8000fec:	4604      	mov	r4, r0
 8000fee:	468e      	mov	lr, r1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f040 8083 	bne.w	80010fc <__udivmoddi4+0x118>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	4617      	mov	r7, r2
 8000ffa:	d947      	bls.n	800108c <__udivmoddi4+0xa8>
 8000ffc:	fab2 f382 	clz	r3, r2
 8001000:	b14b      	cbz	r3, 8001016 <__udivmoddi4+0x32>
 8001002:	f1c3 0120 	rsb	r1, r3, #32
 8001006:	fa05 fe03 	lsl.w	lr, r5, r3
 800100a:	fa20 f101 	lsr.w	r1, r0, r1
 800100e:	409f      	lsls	r7, r3
 8001010:	ea41 0e0e 	orr.w	lr, r1, lr
 8001014:	409c      	lsls	r4, r3
 8001016:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800101a:	fbbe fcf8 	udiv	ip, lr, r8
 800101e:	fa1f f987 	uxth.w	r9, r7
 8001022:	fb08 e21c 	mls	r2, r8, ip, lr
 8001026:	fb0c f009 	mul.w	r0, ip, r9
 800102a:	0c21      	lsrs	r1, r4, #16
 800102c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001030:	4290      	cmp	r0, r2
 8001032:	d90a      	bls.n	800104a <__udivmoddi4+0x66>
 8001034:	18ba      	adds	r2, r7, r2
 8001036:	f10c 31ff 	add.w	r1, ip, #4294967295
 800103a:	f080 8118 	bcs.w	800126e <__udivmoddi4+0x28a>
 800103e:	4290      	cmp	r0, r2
 8001040:	f240 8115 	bls.w	800126e <__udivmoddi4+0x28a>
 8001044:	f1ac 0c02 	sub.w	ip, ip, #2
 8001048:	443a      	add	r2, r7
 800104a:	1a12      	subs	r2, r2, r0
 800104c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001050:	fb08 2210 	mls	r2, r8, r0, r2
 8001054:	fb00 f109 	mul.w	r1, r0, r9
 8001058:	b2a4      	uxth	r4, r4
 800105a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800105e:	42a1      	cmp	r1, r4
 8001060:	d909      	bls.n	8001076 <__udivmoddi4+0x92>
 8001062:	193c      	adds	r4, r7, r4
 8001064:	f100 32ff 	add.w	r2, r0, #4294967295
 8001068:	f080 8103 	bcs.w	8001272 <__udivmoddi4+0x28e>
 800106c:	42a1      	cmp	r1, r4
 800106e:	f240 8100 	bls.w	8001272 <__udivmoddi4+0x28e>
 8001072:	3802      	subs	r0, #2
 8001074:	443c      	add	r4, r7
 8001076:	1a64      	subs	r4, r4, r1
 8001078:	2100      	movs	r1, #0
 800107a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800107e:	b11e      	cbz	r6, 8001088 <__udivmoddi4+0xa4>
 8001080:	2200      	movs	r2, #0
 8001082:	40dc      	lsrs	r4, r3
 8001084:	e9c6 4200 	strd	r4, r2, [r6]
 8001088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xac>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f382 	clz	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d14f      	bne.n	8001138 <__udivmoddi4+0x154>
 8001098:	1a8d      	subs	r5, r1, r2
 800109a:	2101      	movs	r1, #1
 800109c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010a0:	fa1f f882 	uxth.w	r8, r2
 80010a4:	fbb5 fcfe 	udiv	ip, r5, lr
 80010a8:	fb0e 551c 	mls	r5, lr, ip, r5
 80010ac:	fb08 f00c 	mul.w	r0, r8, ip
 80010b0:	0c22      	lsrs	r2, r4, #16
 80010b2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010b6:	42a8      	cmp	r0, r5
 80010b8:	d907      	bls.n	80010ca <__udivmoddi4+0xe6>
 80010ba:	197d      	adds	r5, r7, r5
 80010bc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80010c0:	d202      	bcs.n	80010c8 <__udivmoddi4+0xe4>
 80010c2:	42a8      	cmp	r0, r5
 80010c4:	f200 80e9 	bhi.w	800129a <__udivmoddi4+0x2b6>
 80010c8:	4694      	mov	ip, r2
 80010ca:	1a2d      	subs	r5, r5, r0
 80010cc:	fbb5 f0fe 	udiv	r0, r5, lr
 80010d0:	fb0e 5510 	mls	r5, lr, r0, r5
 80010d4:	fb08 f800 	mul.w	r8, r8, r0
 80010d8:	b2a4      	uxth	r4, r4
 80010da:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010de:	45a0      	cmp	r8, r4
 80010e0:	d907      	bls.n	80010f2 <__udivmoddi4+0x10e>
 80010e2:	193c      	adds	r4, r7, r4
 80010e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80010e8:	d202      	bcs.n	80010f0 <__udivmoddi4+0x10c>
 80010ea:	45a0      	cmp	r8, r4
 80010ec:	f200 80d9 	bhi.w	80012a2 <__udivmoddi4+0x2be>
 80010f0:	4610      	mov	r0, r2
 80010f2:	eba4 0408 	sub.w	r4, r4, r8
 80010f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010fa:	e7c0      	b.n	800107e <__udivmoddi4+0x9a>
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x12e>
 8001100:	2e00      	cmp	r6, #0
 8001102:	f000 80b1 	beq.w	8001268 <__udivmoddi4+0x284>
 8001106:	2100      	movs	r1, #0
 8001108:	e9c6 0500 	strd	r0, r5, [r6]
 800110c:	4608      	mov	r0, r1
 800110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001112:	fab3 f183 	clz	r1, r3
 8001116:	2900      	cmp	r1, #0
 8001118:	d14b      	bne.n	80011b2 <__udivmoddi4+0x1ce>
 800111a:	42ab      	cmp	r3, r5
 800111c:	d302      	bcc.n	8001124 <__udivmoddi4+0x140>
 800111e:	4282      	cmp	r2, r0
 8001120:	f200 80b9 	bhi.w	8001296 <__udivmoddi4+0x2b2>
 8001124:	1a84      	subs	r4, r0, r2
 8001126:	eb65 0303 	sbc.w	r3, r5, r3
 800112a:	2001      	movs	r0, #1
 800112c:	469e      	mov	lr, r3
 800112e:	2e00      	cmp	r6, #0
 8001130:	d0aa      	beq.n	8001088 <__udivmoddi4+0xa4>
 8001132:	e9c6 4e00 	strd	r4, lr, [r6]
 8001136:	e7a7      	b.n	8001088 <__udivmoddi4+0xa4>
 8001138:	409f      	lsls	r7, r3
 800113a:	f1c3 0220 	rsb	r2, r3, #32
 800113e:	40d1      	lsrs	r1, r2
 8001140:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001144:	fbb1 f0fe 	udiv	r0, r1, lr
 8001148:	fa1f f887 	uxth.w	r8, r7
 800114c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001150:	fa24 f202 	lsr.w	r2, r4, r2
 8001154:	409d      	lsls	r5, r3
 8001156:	fb00 fc08 	mul.w	ip, r0, r8
 800115a:	432a      	orrs	r2, r5
 800115c:	0c15      	lsrs	r5, r2, #16
 800115e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001162:	45ac      	cmp	ip, r5
 8001164:	fa04 f403 	lsl.w	r4, r4, r3
 8001168:	d909      	bls.n	800117e <__udivmoddi4+0x19a>
 800116a:	197d      	adds	r5, r7, r5
 800116c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001170:	f080 808f 	bcs.w	8001292 <__udivmoddi4+0x2ae>
 8001174:	45ac      	cmp	ip, r5
 8001176:	f240 808c 	bls.w	8001292 <__udivmoddi4+0x2ae>
 800117a:	3802      	subs	r0, #2
 800117c:	443d      	add	r5, r7
 800117e:	eba5 050c 	sub.w	r5, r5, ip
 8001182:	fbb5 f1fe 	udiv	r1, r5, lr
 8001186:	fb0e 5c11 	mls	ip, lr, r1, r5
 800118a:	fb01 f908 	mul.w	r9, r1, r8
 800118e:	b295      	uxth	r5, r2
 8001190:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001194:	45a9      	cmp	r9, r5
 8001196:	d907      	bls.n	80011a8 <__udivmoddi4+0x1c4>
 8001198:	197d      	adds	r5, r7, r5
 800119a:	f101 32ff 	add.w	r2, r1, #4294967295
 800119e:	d274      	bcs.n	800128a <__udivmoddi4+0x2a6>
 80011a0:	45a9      	cmp	r9, r5
 80011a2:	d972      	bls.n	800128a <__udivmoddi4+0x2a6>
 80011a4:	3902      	subs	r1, #2
 80011a6:	443d      	add	r5, r7
 80011a8:	eba5 0509 	sub.w	r5, r5, r9
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	e778      	b.n	80010a4 <__udivmoddi4+0xc0>
 80011b2:	f1c1 0720 	rsb	r7, r1, #32
 80011b6:	408b      	lsls	r3, r1
 80011b8:	fa22 fc07 	lsr.w	ip, r2, r7
 80011bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80011c0:	fa25 f407 	lsr.w	r4, r5, r7
 80011c4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011c8:	fbb4 f9fe 	udiv	r9, r4, lr
 80011cc:	fa1f f88c 	uxth.w	r8, ip
 80011d0:	fb0e 4419 	mls	r4, lr, r9, r4
 80011d4:	fa20 f307 	lsr.w	r3, r0, r7
 80011d8:	fb09 fa08 	mul.w	sl, r9, r8
 80011dc:	408d      	lsls	r5, r1
 80011de:	431d      	orrs	r5, r3
 80011e0:	0c2b      	lsrs	r3, r5, #16
 80011e2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011e6:	45a2      	cmp	sl, r4
 80011e8:	fa02 f201 	lsl.w	r2, r2, r1
 80011ec:	fa00 f301 	lsl.w	r3, r0, r1
 80011f0:	d909      	bls.n	8001206 <__udivmoddi4+0x222>
 80011f2:	eb1c 0404 	adds.w	r4, ip, r4
 80011f6:	f109 30ff 	add.w	r0, r9, #4294967295
 80011fa:	d248      	bcs.n	800128e <__udivmoddi4+0x2aa>
 80011fc:	45a2      	cmp	sl, r4
 80011fe:	d946      	bls.n	800128e <__udivmoddi4+0x2aa>
 8001200:	f1a9 0902 	sub.w	r9, r9, #2
 8001204:	4464      	add	r4, ip
 8001206:	eba4 040a 	sub.w	r4, r4, sl
 800120a:	fbb4 f0fe 	udiv	r0, r4, lr
 800120e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001212:	fb00 fa08 	mul.w	sl, r0, r8
 8001216:	b2ad      	uxth	r5, r5
 8001218:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800121c:	45a2      	cmp	sl, r4
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0x24e>
 8001220:	eb1c 0404 	adds.w	r4, ip, r4
 8001224:	f100 35ff 	add.w	r5, r0, #4294967295
 8001228:	d22d      	bcs.n	8001286 <__udivmoddi4+0x2a2>
 800122a:	45a2      	cmp	sl, r4
 800122c:	d92b      	bls.n	8001286 <__udivmoddi4+0x2a2>
 800122e:	3802      	subs	r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001236:	fba0 8902 	umull	r8, r9, r0, r2
 800123a:	eba4 040a 	sub.w	r4, r4, sl
 800123e:	454c      	cmp	r4, r9
 8001240:	46c6      	mov	lr, r8
 8001242:	464d      	mov	r5, r9
 8001244:	d319      	bcc.n	800127a <__udivmoddi4+0x296>
 8001246:	d016      	beq.n	8001276 <__udivmoddi4+0x292>
 8001248:	b15e      	cbz	r6, 8001262 <__udivmoddi4+0x27e>
 800124a:	ebb3 020e 	subs.w	r2, r3, lr
 800124e:	eb64 0405 	sbc.w	r4, r4, r5
 8001252:	fa04 f707 	lsl.w	r7, r4, r7
 8001256:	fa22 f301 	lsr.w	r3, r2, r1
 800125a:	431f      	orrs	r7, r3
 800125c:	40cc      	lsrs	r4, r1
 800125e:	e9c6 7400 	strd	r7, r4, [r6]
 8001262:	2100      	movs	r1, #0
 8001264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001268:	4631      	mov	r1, r6
 800126a:	4630      	mov	r0, r6
 800126c:	e70c      	b.n	8001088 <__udivmoddi4+0xa4>
 800126e:	468c      	mov	ip, r1
 8001270:	e6eb      	b.n	800104a <__udivmoddi4+0x66>
 8001272:	4610      	mov	r0, r2
 8001274:	e6ff      	b.n	8001076 <__udivmoddi4+0x92>
 8001276:	4543      	cmp	r3, r8
 8001278:	d2e6      	bcs.n	8001248 <__udivmoddi4+0x264>
 800127a:	ebb8 0e02 	subs.w	lr, r8, r2
 800127e:	eb69 050c 	sbc.w	r5, r9, ip
 8001282:	3801      	subs	r0, #1
 8001284:	e7e0      	b.n	8001248 <__udivmoddi4+0x264>
 8001286:	4628      	mov	r0, r5
 8001288:	e7d3      	b.n	8001232 <__udivmoddi4+0x24e>
 800128a:	4611      	mov	r1, r2
 800128c:	e78c      	b.n	80011a8 <__udivmoddi4+0x1c4>
 800128e:	4681      	mov	r9, r0
 8001290:	e7b9      	b.n	8001206 <__udivmoddi4+0x222>
 8001292:	4608      	mov	r0, r1
 8001294:	e773      	b.n	800117e <__udivmoddi4+0x19a>
 8001296:	4608      	mov	r0, r1
 8001298:	e749      	b.n	800112e <__udivmoddi4+0x14a>
 800129a:	f1ac 0c02 	sub.w	ip, ip, #2
 800129e:	443d      	add	r5, r7
 80012a0:	e713      	b.n	80010ca <__udivmoddi4+0xe6>
 80012a2:	3802      	subs	r0, #2
 80012a4:	443c      	add	r4, r7
 80012a6:	e724      	b.n	80010f2 <__udivmoddi4+0x10e>

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x28>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f923 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f005 fc7e 	bl	8006bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f93b 	bl	8001572 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f903 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000001c 	.word	0x2000001c
 8001330:	20000004 	.word	0x20000004
 8001334:	20000000 	.word	0x20000000

08001338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x1c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x20>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a03      	ldr	r2, [pc, #12]	; (8001358 <HAL_IncTick+0x20>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000004 	.word	0x20000004
 8001358:	20000620 	.word	0x20000620

0800135c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <HAL_GetTick+0x10>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000620 	.word	0x20000620

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4906      	ldr	r1, [pc, #24]	; (8001408 <__NVIC_EnableIRQ+0x34>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2d 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff42 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff35 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e043      	b.n	800162a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_DMA_Init+0xa8>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_DMA_Init+0xac>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1f      	ldr	r2, [pc, #124]	; (800163c <HAL_DMA_Init+0xb0>)
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	bffdfff8 	.word	0xbffdfff8
 8001638:	cccccccd 	.word	0xcccccccd
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2204      	movs	r2, #4
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d04f      	beq.n	8001708 <HAL_DMA_IRQHandler+0xc8>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04a      	beq.n	8001708 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a66      	ldr	r2, [pc, #408]	; (8001830 <HAL_DMA_IRQHandler+0x1f0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d029      	beq.n	80016ee <HAL_DMA_IRQHandler+0xae>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_DMA_IRQHandler+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <HAL_DMA_IRQHandler+0xaa>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a63      	ldr	r2, [pc, #396]	; (8001838 <HAL_DMA_IRQHandler+0x1f8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xa4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a62      	ldr	r2, [pc, #392]	; (800183c <HAL_DMA_IRQHandler+0x1fc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d012      	beq.n	80016de <HAL_DMA_IRQHandler+0x9e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a60      	ldr	r2, [pc, #384]	; (8001840 <HAL_DMA_IRQHandler+0x200>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x98>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <HAL_DMA_IRQHandler+0x204>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x92>
 80016cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d0:	e00e      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016d6:	e00b      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016dc:	e008      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e2:	e005      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e8:	e002      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016ea:	2340      	movs	r3, #64	; 0x40
 80016ec:	e000      	b.n	80016f0 <HAL_DMA_IRQHandler+0xb0>
 80016ee:	2304      	movs	r3, #4
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <HAL_DMA_IRQHandler+0x208>)
 80016f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8094 	beq.w	8001826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001706:	e08e      	b.n	8001826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2202      	movs	r2, #2
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d056      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x186>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d051      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10b      	bne.n	8001748 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020a 	bic.w	r2, r2, #10
 800173e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_DMA_IRQHandler+0x1f0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d029      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x166>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a37      	ldr	r2, [pc, #220]	; (8001834 <HAL_DMA_IRQHandler+0x1f4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x162>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a35      	ldr	r2, [pc, #212]	; (8001838 <HAL_DMA_IRQHandler+0x1f8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01a      	beq.n	800179c <HAL_DMA_IRQHandler+0x15c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a34      	ldr	r2, [pc, #208]	; (800183c <HAL_DMA_IRQHandler+0x1fc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d012      	beq.n	8001796 <HAL_DMA_IRQHandler+0x156>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a32      	ldr	r2, [pc, #200]	; (8001840 <HAL_DMA_IRQHandler+0x200>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00a      	beq.n	8001790 <HAL_DMA_IRQHandler+0x150>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a31      	ldr	r2, [pc, #196]	; (8001844 <HAL_DMA_IRQHandler+0x204>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d102      	bne.n	800178a <HAL_DMA_IRQHandler+0x14a>
 8001784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001788:	e00e      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 800178a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178e:	e00b      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	e008      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 8001796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179a:	e005      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	e002      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 80017a2:	2320      	movs	r3, #32
 80017a4:	e000      	b.n	80017a8 <HAL_DMA_IRQHandler+0x168>
 80017a6:	2302      	movs	r3, #2
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_DMA_IRQHandler+0x208>)
 80017aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d034      	beq.n	8001826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017c4:	e02f      	b.n	8001826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2208      	movs	r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d028      	beq.n	8001828 <HAL_DMA_IRQHandler+0x1e8>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d023      	beq.n	8001828 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 020e 	bic.w	r2, r2, #14
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2101      	movs	r1, #1
 80017fa:	fa01 f202 	lsl.w	r2, r1, r2
 80017fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    }
  }
  return;
 8001826:	bf00      	nop
 8001828:	bf00      	nop
}
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020008 	.word	0x40020008
 8001834:	4002001c 	.word	0x4002001c
 8001838:	40020030 	.word	0x40020030
 800183c:	40020044 	.word	0x40020044
 8001840:	40020058 	.word	0x40020058
 8001844:	4002006c 	.word	0x4002006c
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e169      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8158 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a9a      	ldr	r2, [pc, #616]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4a98      	ldr	r2, [pc, #608]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4a98      	ldr	r2, [pc, #608]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a96      	ldr	r2, [pc, #600]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a96      	ldr	r2, [pc, #600]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a94      	ldr	r2, [pc, #592]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a94      	ldr	r2, [pc, #592]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a92      	ldr	r2, [pc, #584]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a92      	ldr	r2, [pc, #584]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a90      	ldr	r2, [pc, #576]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a79      	ldr	r2, [pc, #484]	; (8001b00 <HAL_GPIO_Init+0x2b4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80b1 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3d      	ldr	r2, [pc, #244]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4a:	492f      	ldr	r1, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	492c      	ldr	r1, [pc, #176]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4928      	ldr	r1, [pc, #160]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	491e      	ldr	r1, [pc, #120]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d021      	beq.n	8001b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e021      	b.n	8001b2e <HAL_GPIO_Init+0x2e2>
 8001aea:	bf00      	nop
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10220000 	.word	0x10220000
 8001af8:	10210000 	.word	0x10210000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10110000 	.word	0x10110000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4909      	ldr	r1, [pc, #36]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f47f ae8e 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	372c      	adds	r7, #44	; 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e11b      	b.n	8001dce <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f005 f83e 	bl	8006c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc8:	f001 fde6 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8001bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a81      	ldr	r2, [pc, #516]	; (8001dd8 <HAL_I2C_Init+0x254>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d807      	bhi.n	8001be8 <HAL_I2C_Init+0x64>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a80      	ldr	r2, [pc, #512]	; (8001ddc <HAL_I2C_Init+0x258>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e006      	b.n	8001bf6 <HAL_I2C_Init+0x72>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a7d      	ldr	r2, [pc, #500]	; (8001de0 <HAL_I2C_Init+0x25c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bf94      	ite	ls
 8001bf0:	2301      	movls	r3, #1
 8001bf2:	2300      	movhi	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0e7      	b.n	8001dce <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a78      	ldr	r2, [pc, #480]	; (8001de4 <HAL_I2C_Init+0x260>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	; (8001dd8 <HAL_I2C_Init+0x254>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d802      	bhi.n	8001c38 <HAL_I2C_Init+0xb4>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3301      	adds	r3, #1
 8001c36:	e009      	b.n	8001c4c <HAL_I2C_Init+0xc8>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4a69      	ldr	r2, [pc, #420]	; (8001de8 <HAL_I2C_Init+0x264>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	495c      	ldr	r1, [pc, #368]	; (8001dd8 <HAL_I2C_Init+0x254>)
 8001c68:	428b      	cmp	r3, r1
 8001c6a:	d819      	bhi.n	8001ca0 <HAL_I2C_Init+0x11c>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e59      	subs	r1, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c80:	400b      	ands	r3, r1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_I2C_Init+0x118>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e59      	subs	r1, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9a:	e051      	b.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e04f      	b.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <HAL_I2C_Init+0x148>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e012      	b.n	8001cf2 <HAL_I2C_Init+0x16e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	0099      	lsls	r1, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Init+0x176>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e022      	b.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10e      	bne.n	8001d20 <HAL_I2C_Init+0x19c>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e58      	subs	r0, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	440b      	add	r3, r1
 8001d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	e00f      	b.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	6809      	ldr	r1, [r1, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6911      	ldr	r1, [r2, #16]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68d2      	ldr	r2, [r2, #12]
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	001e847f 	.word	0x001e847f
 8001de0:	003d08ff 	.word	0x003d08ff
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	10624dd3 	.word	0x10624dd3

08001dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	461a      	mov	r2, r3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	817b      	strh	r3, [r7, #10]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff faac 	bl	800135c <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	f040 80e0 	bne.w	8001fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2319      	movs	r3, #25
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4970      	ldr	r1, [pc, #448]	; (8001fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 ff0a 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e0d3      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0x50>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0cc      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d007      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2221      	movs	r2, #33	; 0x21
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	893a      	ldrh	r2, [r7, #8]
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a50      	ldr	r2, [pc, #320]	; (8001fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fcf4 	bl	8002898 <I2C_MasterRequestWrite>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e08d      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ed0:	e066      	b.n	8001fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	6a39      	ldr	r1, [r7, #32]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 ff84 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00d      	beq.n	8001efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d107      	bne.n	8001efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e06b      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <HAL_I2C_Master_Transmit+0x188>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d017      	beq.n	8001f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6a39      	ldr	r1, [r7, #32]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 ff74 	bl	8002e66 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d107      	bne.n	8001f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e01a      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d194      	bne.n	8001ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	00100002 	.word	0x00100002
 8001fe4:	ffff0000 	.word	0xffff0000

08001fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	817b      	strh	r3, [r7, #10]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	813b      	strh	r3, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002002:	f7ff f9ab 	bl	800135c <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	f040 80d9 	bne.w	80021c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2319      	movs	r3, #25
 800201c:	2201      	movs	r2, #1
 800201e:	496d      	ldr	r1, [pc, #436]	; (80021d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fe09 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
 800202e:	e0cc      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_I2C_Mem_Write+0x56>
 800203a:	2302      	movs	r3, #2
 800203c:	e0c5      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d007      	beq.n	8002064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_I2C_Mem_Write+0x1f0>)
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a6:	88f8      	ldrh	r0, [r7, #6]
 80020a8:	893a      	ldrh	r2, [r7, #8]
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4603      	mov	r3, r0
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fc64 	bl	8002984 <I2C_RequestMemoryWrite>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d052      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e081      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fe8a 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_I2C_Mem_Write+0x180>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1aa      	bne.n	80020c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fe76 	bl	8002e66 <I2C_WaitOnBTFFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e016      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000

080021dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f6:	f7ff f8b1 	bl	800135c <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 821e 	bne.w	8002646 <HAL_I2C_Mem_Read+0x46a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2319      	movs	r3, #25
 8002210:	2201      	movs	r2, #1
 8002212:	4982      	ldr	r1, [pc, #520]	; (800241c <HAL_I2C_Mem_Read+0x240>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fd0f 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	e211      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_I2C_Mem_Read+0x56>
 800222e:	2302      	movs	r3, #2
 8002230:	e20a      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d007      	beq.n	8002258 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2222      	movs	r2, #34	; 0x22
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a62      	ldr	r2, [pc, #392]	; (8002420 <HAL_I2C_Mem_Read+0x244>)
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229a:	88f8      	ldrh	r0, [r7, #6]
 800229c:	893a      	ldrh	r2, [r7, #8]
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4603      	mov	r3, r0
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fbf4 	bl	8002a98 <I2C_RequestMemoryRead>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1c6      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
    }

    if (hi2c->XferSize == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d113      	bne.n	80022ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e19a      	b.n	8002620 <HAL_I2C_Mem_Read+0x444>
    }
    else if (hi2c->XferSize == 1U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d11e      	bne.n	8002330 <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002300:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002302:	b672      	cpsid	i
}
 8002304:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800232c:	b662      	cpsie	i
}
 800232e:	e035      	b.n	800239c <HAL_I2C_Mem_Read+0x1c0>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b02      	cmp	r3, #2
 8002336:	d11e      	bne.n	8002376 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002370:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002372:	b662      	cpsie	i
}
 8002374:	e012      	b.n	800239c <HAL_I2C_Mem_Read+0x1c0>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002384:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800239c:	e140      	b.n	8002620 <HAL_I2C_Mem_Read+0x444>
    {
      if (hi2c->XferSize <= 3U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	f200 80f9 	bhi.w	800259a <HAL_I2C_Mem_Read+0x3be>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d123      	bne.n	80023f8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fd97 	bl	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e141      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f6:	e113      	b.n	8002620 <HAL_I2C_Mem_Read+0x444>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d152      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x2ca>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	2200      	movs	r2, #0
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_I2C_Mem_Read+0x248>)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fc14 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e116      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
 800241a:	bf00      	nop
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000
 8002424:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002428:	b672      	cpsid	i
}
 800242a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800246e:	b662      	cpsie	i
}
 8002470:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a4:	e0bc      	b.n	8002620 <HAL_I2C_Mem_Read+0x444>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2200      	movs	r2, #0
 80024ae:	4968      	ldr	r1, [pc, #416]	; (8002650 <HAL_I2C_Mem_Read+0x474>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fbc1 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x2e4>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0c3      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	2200      	movs	r2, #0
 800250e:	4950      	ldr	r1, [pc, #320]	; (8002650 <HAL_I2C_Mem_Read+0x474>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fb91 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Read+0x344>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e093      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002562:	b662      	cpsie	i
}
 8002564:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002598:	e042      	b.n	8002620 <HAL_I2C_Mem_Read+0x444>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fca2 	bl	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Mem_Read+0x3d2>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e04c      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d118      	bne.n	8002620 <HAL_I2C_Mem_Read+0x444>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f aeba 	bne.w	800239e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_I2C_Mem_Read+0x46c>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	00010004 	.word	0x00010004

08002654 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7fe fe7a 	bl	800135c <HAL_GetTick>
 8002668:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800266a:	2301      	movs	r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	f040 8105 	bne.w	8002886 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2319      	movs	r3, #25
 8002682:	2201      	movs	r2, #1
 8002684:	4982      	ldr	r1, [pc, #520]	; (8002890 <HAL_I2C_IsDeviceReady+0x23c>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fad6 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	e0f8      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_I2C_IsDeviceReady+0x50>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e0f1      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d007      	beq.n	80026ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2224      	movs	r2, #36	; 0x24
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_I2C_IsDeviceReady+0x240>)
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fa94 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0b6      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002728:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe fe17 	bl	800135c <HAL_GetTick>
 800272e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800275e:	e025      	b.n	80027ac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7fe fdfc 	bl	800135c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <HAL_I2C_IsDeviceReady+0x122>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22a0      	movs	r2, #160	; 0xa0
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2ba0      	cmp	r3, #160	; 0xa0
 80027b6:	d005      	beq.n	80027c4 <HAL_I2C_IsDeviceReady+0x170>
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_I2C_IsDeviceReady+0x170>
 80027be:	7dbb      	ldrb	r3, [r7, #22]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0cd      	beq.n	8002760 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d129      	bne.n	800282e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2319      	movs	r3, #25
 8002806:	2201      	movs	r2, #1
 8002808:	4921      	ldr	r1, [pc, #132]	; (8002890 <HAL_I2C_IsDeviceReady+0x23c>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa14 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e036      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e02c      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002846:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	490f      	ldr	r1, [pc, #60]	; (8002890 <HAL_I2C_IsDeviceReady+0x23c>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9f0 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e012      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3301      	adds	r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	f4ff af3e 	bcc.w	80026ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	00100002 	.word	0x00100002
 8002894:	ffff0000 	.word	0xffff0000

08002898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d006      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d003      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c0:	d108      	bne.n	80028d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e00b      	b.n	80028ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d107      	bne.n	80028ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f99d 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e035      	b.n	8002974 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d108      	bne.n	8002924 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	e01b      	b.n	800295c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	11db      	asrs	r3, r3, #7
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 0306 	and.w	r3, r3, #6
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f063 030f 	orn	r3, r3, #15
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <I2C_MasterRequestWrite+0xe4>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9cf 	bl	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e010      	b.n	8002974 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <I2C_MasterRequestWrite+0xe8>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f9bf 	bl	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	00010008 	.word	0x00010008
 8002980:	00010002 	.word	0x00010002

08002984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f93c 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e05f      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	492d      	ldr	r1, [pc, #180]	; (8002a94 <I2C_RequestMemoryWrite+0x110>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f980 	bl	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04c      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f9ea 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02b      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f9c4 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e005      	b.n	8002a8a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	00010002 	.word	0x00010002

08002a98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8aa 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e09e      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	494c      	ldr	r1, [pc, #304]	; (8002c34 <I2C_RequestMemoryRead+0x19c>)
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8ee 	bl	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e08b      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f958 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06a      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e021      	b.n	8002bac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f932 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e044      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f917 	bl	8002de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e029      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f81f 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e013      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	4906      	ldr	r1, [pc, #24]	; (8002c34 <I2C_RequestMemoryRead+0x19c>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f863 	bl	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	00010002 	.word	0x00010002

08002c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c48:	e025      	b.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d021      	beq.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe fb83 	bl	800135c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e023      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d10d      	bne.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	e00c      	b.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0b6      	beq.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf4:	e051      	b.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d123      	bne.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e046      	b.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d021      	beq.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fb01 	bl	800135c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e020      	b.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e00b      	b.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d18d      	bne.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df0:	e02d      	b.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8ce 	bl	8002f94 <I2C_IsAcknowledgeFailed>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e02d      	b.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d021      	beq.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7fe faa7 	bl	800135c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e007      	b.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d1ca      	bne.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e72:	e02d      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f88d 	bl	8002f94 <I2C_IsAcknowledgeFailed>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e02d      	b.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d021      	beq.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8c:	f7fe fa66 	bl	800135c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e007      	b.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d1ca      	bne.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef4:	e042      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d119      	bne.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0210 	mvn.w	r2, #16
 8002f0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e029      	b.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7fe fa10 	bl	800135c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d1b5      	bne.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d11b      	bne.n	8002fe4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e26c      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8087 	beq.w	800311e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003010:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b04      	cmp	r3, #4
 800301a:	d00c      	beq.n	8003036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d112      	bne.n	800304e <HAL_RCC_OscConfig+0x5e>
 8003028:	4b8c      	ldr	r3, [pc, #560]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d10b      	bne.n	800304e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003036:	4b89      	ldr	r3, [pc, #548]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d06c      	beq.n	800311c <HAL_RCC_OscConfig+0x12c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d168      	bne.n	800311c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e246      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x76>
 8003058:	4b80      	ldr	r3, [pc, #512]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7f      	ldr	r2, [pc, #508]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e02e      	b.n	80030c4 <HAL_RCC_OscConfig+0xd4>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b7b      	ldr	r3, [pc, #492]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7a      	ldr	r2, [pc, #488]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b78      	ldr	r3, [pc, #480]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a77      	ldr	r2, [pc, #476]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e01d      	b.n	80030c4 <HAL_RCC_OscConfig+0xd4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0xbc>
 8003092:	4b72      	ldr	r3, [pc, #456]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a71      	ldr	r2, [pc, #452]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0xd4>
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6a      	ldr	r2, [pc, #424]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a67      	ldr	r2, [pc, #412]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe f946 	bl	800135c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe f942 	bl	800135c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1fa      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe4>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe f932 	bl	800135c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe f92e 	bl	800135c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1e6      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x10c>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d063      	beq.n	80031f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11c      	bne.n	800317c <HAL_RCC_OscConfig+0x18c>
 8003142:	4b46      	ldr	r3, [pc, #280]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x176>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e1ba      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4939      	ldr	r1, [pc, #228]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	e03a      	b.n	80031f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCC_OscConfig+0x270>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe f8e7 	bl	800135c <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003192:	f7fe f8e3 	bl	800135c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e19b      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4927      	ldr	r1, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_RCC_OscConfig+0x270>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe f8c6 	bl	800135c <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d4:	f7fe f8c2 	bl	800135c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e17a      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d03a      	beq.n	8003274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d019      	beq.n	800323a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_RCC_OscConfig+0x274>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe f8a6 	bl	800135c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7fe f8a2 	bl	800135c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e15a      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCC_OscConfig+0x26c>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f000 fad8 	bl	80037e8 <RCC_Delay>
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_RCC_OscConfig+0x274>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003240:	f7fe f88c 	bl	800135c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003246:	e00f      	b.n	8003268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fe f888 	bl	800135c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d908      	bls.n	8003268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e140      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	42420000 	.word	0x42420000
 8003264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e9      	bne.n	8003248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a6 	beq.w	80033ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b97      	ldr	r3, [pc, #604]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b94      	ldr	r3, [pc, #592]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a93      	ldr	r2, [pc, #588]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	61d3      	str	r3, [r2, #28]
 800329e:	4b91      	ldr	r3, [pc, #580]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b8e      	ldr	r3, [pc, #568]	; (80034e8 <HAL_RCC_OscConfig+0x4f8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a8a      	ldr	r2, [pc, #552]	; (80034e8 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe f849 	bl	800135c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe f845 	bl	800135c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	; 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0fd      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x312>
 80032f4:	4b7b      	ldr	r3, [pc, #492]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a7a      	ldr	r2, [pc, #488]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	e02d      	b.n	800335e <HAL_RCC_OscConfig+0x36e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x334>
 800330a:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a75      	ldr	r2, [pc, #468]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	4b73      	ldr	r3, [pc, #460]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a72      	ldr	r2, [pc, #456]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	e01c      	b.n	800335e <HAL_RCC_OscConfig+0x36e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x356>
 800332c:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a6c      	ldr	r2, [pc, #432]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6213      	str	r3, [r2, #32]
 8003338:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a69      	ldr	r2, [pc, #420]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0x36e>
 8003346:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a66      	ldr	r2, [pc, #408]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a63      	ldr	r2, [pc, #396]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fd fff9 	bl	800135c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fd fff5 	bl	800135c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0ab      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCC_OscConfig+0x37e>
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fd ffe3 	bl	800135c <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fd ffdf 	bl	800135c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e095      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b48      	ldr	r3, [pc, #288]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a47      	ldr	r2, [pc, #284]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8081 	beq.w	80034da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d061      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d146      	bne.n	800347a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_OscConfig+0x4fc>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fd ffb3 	bl	800135c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fd ffaf 	bl	800135c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e067      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d108      	bne.n	8003434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003422:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	492d      	ldr	r1, [pc, #180]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003434:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a19      	ldr	r1, [r3, #32]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	430b      	orrs	r3, r1
 8003446:	4927      	ldr	r1, [pc, #156]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x4fc>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fd ff83 	bl	800135c <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd ff7f 	bl	800135c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e037      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x46a>
 8003478:	e02f      	b.n	80034da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCC_OscConfig+0x4fc>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd ff6c 	bl	800135c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd ff68 	bl	800135c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e020      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x498>
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	42420060 	.word	0x42420060

080034f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0d0      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d910      	bls.n	8003534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4965      	ldr	r1, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800356e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d040      	beq.n	8003610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e073      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06b      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fd febc 	bl	800135c <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd feb8 	bl	800135c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e053      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d210      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4922      	ldr	r1, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1cc>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fe1a 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	0800b4ac 	.word	0x0800b4ac
 80036bc:	2000001c 	.word	0x2000001c
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b490      	push	{r4, r7}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036cc:	1d3c      	adds	r4, r7, #4
 80036ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036d4:	f240 2301 	movw	r3, #513	; 0x201
 80036d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d003      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x46>
 8003702:	e02d      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003706:	623b      	str	r3, [r7, #32]
      break;
 8003708:	e02d      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	0c9b      	lsrs	r3, r3, #18
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003716:	4413      	add	r3, r2
 8003718:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800371c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_RCC_GetSysClockFreq+0xb4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c5b      	lsrs	r3, r3, #17
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003736:	4413      	add	r3, r2
 8003738:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800373c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003742:	fb02 f203 	mul.w	r2, r2, r3
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	e004      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	623b      	str	r3, [r7, #32]
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003762:	623b      	str	r3, [r7, #32]
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6a3b      	ldr	r3, [r7, #32]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bc90      	pop	{r4, r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	08009fa8 	.word	0x08009fa8
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <HAL_RCC_GetHCLKFreq+0x10>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	2000001c 	.word	0x2000001c

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff2 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	0800b4bc 	.word	0x0800b4bc

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffde 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0adb      	lsrs	r3, r3, #11
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	0800b4bc 	.word	0x0800b4bc

080037e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCC_Delay+0x34>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <RCC_Delay+0x38>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003804:	bf00      	nop
  }
  while (Delay --);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f9      	bne.n	8003804 <RCC_Delay+0x1c>
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	2000001c 	.word	0x2000001c
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e053      	b.n	80038de <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f003 fa29 	bl	8006ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	ea42 0103 	orr.w	r1, r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0c1a      	lsrs	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 0204 	and.w	r2, r2, #4
 80038bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_SPI_Transmit+0x22>
 8003904:	2302      	movs	r3, #2
 8003906:	e11e      	b.n	8003b46 <HAL_SPI_Transmit+0x260>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003910:	f7fd fd24 	bl	800135c <HAL_GetTick>
 8003914:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d002      	beq.n	800392c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
    goto error;
 800392a:	e103      	b.n	8003b34 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x52>
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800393c:	e0fa      	b.n	8003b34 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2203      	movs	r2, #3
 8003942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003984:	d107      	bne.n	8003996 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039bc:	d14b      	bne.n	8003a56 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0xe6>
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d13e      	bne.n	8003a4a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f0:	e02b      	b.n	8003a4a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d112      	bne.n	8003a26 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a24:	e011      	b.n	8003a4a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a26:	f7fd fc99 	bl	800135c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d803      	bhi.n	8003a3e <HAL_SPI_Transmit+0x158>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Transmit+0x15e>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a48:	e074      	b.n	8003b34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ce      	bne.n	80039f2 <HAL_SPI_Transmit+0x10c>
 8003a54:	e04c      	b.n	8003af0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_Transmit+0x17e>
 8003a5e:	8afb      	ldrh	r3, [r7, #22]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d140      	bne.n	8003ae6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a8a:	e02c      	b.n	8003ae6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d113      	bne.n	8003ac2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac0:	e011      	b.n	8003ae6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac2:	f7fd fc4b 	bl	800135c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d803      	bhi.n	8003ada <HAL_SPI_Transmit+0x1f4>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d102      	bne.n	8003ae0 <HAL_SPI_Transmit+0x1fa>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ae4:	e026      	b.n	8003b34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1cd      	bne.n	8003a8c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fb91 	bl	800421c <SPI_EndRxTxTransaction>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e000      	b.n	8003b34 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6a:	d112      	bne.n	8003b92 <HAL_SPI_Receive+0x44>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10e      	bne.n	8003b92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2204      	movs	r2, #4
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f8e9 	bl	8003d60 <HAL_SPI_TransmitReceive>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e0e2      	b.n	8003d58 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_SPI_Receive+0x52>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0db      	b.n	8003d58 <HAL_SPI_Receive+0x20a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba8:	f7fd fbd8 	bl	800135c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bbe:	e0c2      	b.n	8003d46 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Receive+0x7e>
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bd0:	e0b9      	b.n	8003d46 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	d107      	bne.n	8003c2a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d007      	beq.n	8003c48 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d162      	bne.n	8003d16 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c50:	e02e      	b.n	8003cb0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d115      	bne.n	8003c8c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f103 020c 	add.w	r2, r3, #12
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c8a:	e011      	b.n	8003cb0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8c:	f7fd fb66 	bl	800135c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_Receive+0x156>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Receive+0x15c>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cae:	e04a      	b.n	8003d46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1cb      	bne.n	8003c52 <HAL_SPI_Receive+0x104>
 8003cba:	e031      	b.n	8003d20 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d113      	bne.n	8003cf2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf0:	e011      	b.n	8003d16 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf2:	f7fd fb33 	bl	800135c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d803      	bhi.n	8003d0a <HAL_SPI_Receive+0x1bc>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d102      	bne.n	8003d10 <HAL_SPI_Receive+0x1c2>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d14:	e017      	b.n	8003d46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cd      	bne.n	8003cbc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fa27 	bl	8004178 <SPI_EndRxTransaction>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
 8003d42:	e000      	b.n	8003d46 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003d44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_SPI_TransmitReceive+0x26>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e18a      	b.n	800409c <HAL_SPI_TransmitReceive+0x33c>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d8e:	f7fd fae5 	bl	800135c <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d00f      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x70>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d107      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x68>
 8003dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d003      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dce:	e15b      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_SPI_TransmitReceive+0x82>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_TransmitReceive+0x82>
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003de8:	e14e      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d003      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	887a      	ldrh	r2, [r7, #2]
 8003e26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d007      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d178      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x10a>
 8003e64:	8b7b      	ldrh	r3, [r7, #26]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d166      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e8e:	e053      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x176>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d016      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x176>
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d113      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d119      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x1b8>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	1c9a      	adds	r2, r3, #2
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f14:	2301      	movs	r3, #1
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f18:	f7fd fa20 	bl	800135c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d807      	bhi.n	8003f38 <HAL_SPI_TransmitReceive+0x1d8>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d003      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f36:	e0a7      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1a6      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x130>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1a1      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x130>
 8003f4c:	e07c      	b.n	8004048 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_TransmitReceive+0x1fc>
 8003f56:	8b7b      	ldrh	r3, [r7, #26]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d16b      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f82:	e057      	b.n	8004034 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d11c      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x26c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x26c>
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d114      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d119      	bne.n	800400e <HAL_SPI_TransmitReceive+0x2ae>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d014      	beq.n	800400e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800400a:	2301      	movs	r3, #1
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800400e:	f7fd f9a5 	bl	800135c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401a:	429a      	cmp	r2, r3
 800401c:	d803      	bhi.n	8004026 <HAL_SPI_TransmitReceive+0x2c6>
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d102      	bne.n	800402c <HAL_SPI_TransmitReceive+0x2cc>
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004032:	e029      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1a2      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x224>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d19d      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8e5 	bl	800421c <SPI_EndRxTxTransaction>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004064:	e010      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10b      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	e000      	b.n	8004088 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004086:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800409c:	4618      	mov	r0, r3
 800409e:	3730      	adds	r7, #48	; 0x30
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b4:	e04c      	b.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d048      	beq.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80040be:	f7fd f94d 	bl	800135c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d902      	bls.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d13d      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ec:	d111      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d004      	beq.n	8004102 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d107      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d10f      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e00f      	b.n	8004170 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1a3      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418c:	d111      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d004      	beq.n	80041a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d107      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ba:	d117      	bne.n	80041ec <SPI_EndRxTransaction+0x74>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d112      	bne.n	80041ec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2101      	movs	r1, #1
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ff67 	bl	80040a4 <SPI_WaitFlagStateUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01a      	beq.n	8004212 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e013      	b.n	8004214 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff ff54 	bl	80040a4 <SPI_WaitFlagStateUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e000      	b.n	8004214 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2200      	movs	r2, #0
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ff36 	bl	80040a4 <SPI_WaitFlagStateUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e000      	b.n	8004250 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e01d      	b.n	80042a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f002 fd52 	bl	8006d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fb6e 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d007      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e01d      	b.n	8004342 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f815 	bl	800434a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f000 fb20 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d841      	bhi.n	80043f0 <HAL_TIM_OC_Start_IT+0x94>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_TIM_OC_Start_IT+0x18>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043f1 	.word	0x080043f1
 800437c:	080043f1 	.word	0x080043f1
 8004380:	080043f1 	.word	0x080043f1
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043f1 	.word	0x080043f1
 800438c:	080043f1 	.word	0x080043f1
 8004390:	080043f1 	.word	0x080043f1
 8004394:	080043cd 	.word	0x080043cd
 8004398:	080043f1 	.word	0x080043f1
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043df 	.word	0x080043df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0202 	orr.w	r2, r2, #2
 80043b6:	60da      	str	r2, [r3, #12]
      break;
 80043b8:	e01b      	b.n	80043f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0204 	orr.w	r2, r2, #4
 80043c8:	60da      	str	r2, [r3, #12]
      break;
 80043ca:	e012      	b.n	80043f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	60da      	str	r2, [r3, #12]
      break;
 80043dc:	e009      	b.n	80043f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0210 	orr.w	r2, r2, #16
 80043ec:	60da      	str	r2, [r3, #12]
      break;
 80043ee:	e000      	b.n	80043f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80043f0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd3c 	bl	8004e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a10      	ldr	r2, [pc, #64]	; (8004448 <HAL_TIM_OC_Start_IT+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d007      	beq.n	800443c <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00

0800444c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e02d      	b.n	80044bc <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f825 	bl	80044c4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 fa73 	bl	8004978 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0208 	bic.w	r2, r2, #8
 80044a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d122      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d11b      	bne.n	8004532 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0202 	mvn.w	r2, #2
 8004502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa12 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
 800451e:	e005      	b.n	800452c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa05 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa14 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d122      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d11b      	bne.n	8004586 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0204 	mvn.w	r2, #4
 8004556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f9e8 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
 8004572:	e005      	b.n	8004580 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9db 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9ea 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d122      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11b      	bne.n	80045da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0208 	mvn.w	r2, #8
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9be 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
 80045c6:	e005      	b.n	80045d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f9b1 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f9c0 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d122      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d11b      	bne.n	800462e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0210 	mvn.w	r2, #16
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2208      	movs	r2, #8
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f994 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f987 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f996 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0201 	mvn.w	r2, #1
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 fcfb 	bl	8006050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fcbb 	bl	8004ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d10e      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f95a 	bl	8004966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d10e      	bne.n	80046de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d107      	bne.n	80046de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0220 	mvn.w	r2, #32
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fc86 	bl	8004fea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_OC_ConfigChannel+0x1a>
 80046fe:	2302      	movs	r3, #2
 8004700:	e04e      	b.n	80047a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d839      	bhi.n	800478c <HAL_TIM_OC_ConfigChannel+0xa4>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_TIM_OC_ConfigChannel+0x38>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004755 	.word	0x08004755
 8004724:	0800478d 	.word	0x0800478d
 8004728:	0800478d 	.word	0x0800478d
 800472c:	0800478d 	.word	0x0800478d
 8004730:	08004763 	.word	0x08004763
 8004734:	0800478d 	.word	0x0800478d
 8004738:	0800478d 	.word	0x0800478d
 800473c:	0800478d 	.word	0x0800478d
 8004740:	08004771 	.word	0x08004771
 8004744:	0800478d 	.word	0x0800478d
 8004748:	0800478d 	.word	0x0800478d
 800474c:	0800478d 	.word	0x0800478d
 8004750:	0800477f 	.word	0x0800477f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f96e 	bl	8004a3c <TIM_OC1_SetConfig>
      break;
 8004760:	e015      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f9cd 	bl	8004b08 <TIM_OC2_SetConfig>
      break;
 800476e:	e00e      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fa30 	bl	8004bdc <TIM_OC3_SetConfig>
      break;
 800477c:	e007      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fa93 	bl	8004cb0 <TIM_OC4_SetConfig>
      break;
 800478a:	e000      	b.n	800478e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800478c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_ConfigClockSource+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e0b3      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x180>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d03e      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0xd0>
 80047fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fe:	f200 8087 	bhi.w	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	f000 8085 	beq.w	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d87f      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004810:	2b70      	cmp	r3, #112	; 0x70
 8004812:	d01a      	beq.n	800484a <HAL_TIM_ConfigClockSource+0xa2>
 8004814:	2b70      	cmp	r3, #112	; 0x70
 8004816:	d87b      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004818:	2b60      	cmp	r3, #96	; 0x60
 800481a:	d050      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x116>
 800481c:	2b60      	cmp	r3, #96	; 0x60
 800481e:	d877      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d03c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xf6>
 8004824:	2b50      	cmp	r3, #80	; 0x50
 8004826:	d873      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d058      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x136>
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d86f      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d064      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x156>
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d86b      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d060      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x156>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d867      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05c      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x156>
 8004844:	2b10      	cmp	r3, #16
 8004846:	d05a      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004848:	e062      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f000 faee 	bl	8004e3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800486c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	609a      	str	r2, [r3, #8]
      break;
 8004876:	e04e      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6899      	ldr	r1, [r3, #8]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f000 fad7 	bl	8004e3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800489a:	609a      	str	r2, [r3, #8]
      break;
 800489c:	e03b      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 fa4e 	bl	8004d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2150      	movs	r1, #80	; 0x50
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 faa5 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 80048bc:	e02b      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 fa6c 	bl	8004da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2160      	movs	r1, #96	; 0x60
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fa95 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 80048dc:	e01b      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 fa2e 	bl	8004d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fa85 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e00b      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 fa7c 	bl	8004e06 <TIM_ITRx_SetConfig>
      break;
 800490e:	e002      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004914:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <TIM_Base_SetConfig+0xb8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00b      	beq.n	80049a8 <TIM_Base_SetConfig+0x30>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d007      	beq.n	80049a8 <TIM_Base_SetConfig+0x30>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <TIM_Base_SetConfig+0xbc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0x30>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <TIM_Base_SetConfig+0xc0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d108      	bne.n	80049ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <TIM_Base_SetConfig+0xb8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0x62>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0x62>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <TIM_Base_SetConfig+0xbc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0x62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <TIM_Base_SetConfig+0xc0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <TIM_Base_SetConfig+0xb8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800

08004a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f023 0302 	bic.w	r3, r3, #2
 8004a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <TIM_OC1_SetConfig+0xc8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10c      	bne.n	8004ab2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0308 	bic.w	r3, r3, #8
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <TIM_OC1_SetConfig+0xc8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40012c00 	.word	0x40012c00

08004b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0320 	bic.w	r3, r3, #32
 8004b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <TIM_OC2_SetConfig+0xd0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10d      	bne.n	8004b84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <TIM_OC2_SetConfig+0xd0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d113      	bne.n	8004bb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	40012c00 	.word	0x40012c00

08004bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <TIM_OC3_SetConfig+0xd0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10d      	bne.n	8004c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <TIM_OC3_SetConfig+0xd0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d113      	bne.n	8004c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00

08004cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <TIM_OC4_SetConfig+0x98>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d109      	bne.n	8004d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f023 030a 	bic.w	r3, r3, #10
 8004d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f043 0307 	orr.w	r3, r3, #7
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	609a      	str	r2, [r3, #8]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e032      	b.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f10:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e03d      	b.n	8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e047      	b.n	80050b0 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 feed 	bl	8006e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005050:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f830 	bl	80050b8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005066:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005076:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005096:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050f2:	f023 030c 	bic.w	r3, r3, #12
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a52      	ldr	r2, [pc, #328]	; (8005264 <UART_SetConfig+0x1ac>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d14e      	bne.n	80051be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7fe fb4e 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8005124:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	4a4a      	ldr	r2, [pc, #296]	; (8005268 <UART_SetConfig+0x1b0>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	0119      	lsls	r1, r3, #4
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009a      	lsls	r2, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	fbb2 f2f3 	udiv	r2, r2, r3
 800515c:	4b42      	ldr	r3, [pc, #264]	; (8005268 <UART_SetConfig+0x1b0>)
 800515e:	fba3 0302 	umull	r0, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2064      	movs	r0, #100	; 0x64
 8005166:	fb00 f303 	mul.w	r3, r0, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a3d      	ldr	r2, [pc, #244]	; (8005268 <UART_SetConfig+0x1b0>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517c:	4419      	add	r1, r3
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	fbb2 f2f3 	udiv	r2, r2, r3
 8005194:	4b34      	ldr	r3, [pc, #208]	; (8005268 <UART_SetConfig+0x1b0>)
 8005196:	fba3 0302 	umull	r0, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2064      	movs	r0, #100	; 0x64
 800519e:	fb00 f303 	mul.w	r3, r0, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	3332      	adds	r3, #50	; 0x32
 80051a8:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <UART_SetConfig+0x1b0>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	440a      	add	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80051bc:	e04d      	b.n	800525a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80051be:	f7fe faeb 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80051c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009a      	lsls	r2, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	4a23      	ldr	r2, [pc, #140]	; (8005268 <UART_SetConfig+0x1b0>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	0119      	lsls	r1, r3, #4
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009a      	lsls	r2, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <UART_SetConfig+0x1b0>)
 80051fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2064      	movs	r0, #100	; 0x64
 8005204:	fb00 f303 	mul.w	r3, r0, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a16      	ldr	r2, [pc, #88]	; (8005268 <UART_SetConfig+0x1b0>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	4419      	add	r1, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009a      	lsls	r2, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <UART_SetConfig+0x1b0>)
 8005234:	fba3 0302 	umull	r0, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	2064      	movs	r0, #100	; 0x64
 800523c:	fb00 f303 	mul.w	r3, r0, r3
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	3332      	adds	r3, #50	; 0x32
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <UART_SetConfig+0x1b0>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	440a      	add	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40013800 	.word	0x40013800
 8005268:	51eb851f 	.word	0x51eb851f

0800526c <Error>:
//extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0

}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af04      	add	r7, sp, #16
 800527e:	4603      	mov	r3, r0
 8005280:	80fb      	strh	r3, [r7, #6]
 8005282:	460b      	mov	r3, r1
 8005284:	717b      	strb	r3, [r7, #5]
 8005286:	4613      	mov	r3, r2
 8005288:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800528e:	797b      	ldrb	r3, [r7, #5]
 8005290:	b29a      	uxth	r2, r3
 8005292:	88f9      	ldrh	r1, [r7, #6]
 8005294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	2301      	movs	r3, #1
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2301      	movs	r3, #1
 80052a4:	4806      	ldr	r0, [pc, #24]	; (80052c0 <I2Cx_WriteData+0x48>)
 80052a6:	f7fc fe9f 	bl	8001fe8 <HAL_I2C_Mem_Write>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <I2Cx_WriteData+0x40>
 80052b4:	f7ff ffda 	bl	800526c <Error>
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000740 	.word	0x20000740

080052c4 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af04      	add	r7, sp, #16
 80052ca:	4603      	mov	r3, r0
 80052cc:	460a      	mov	r2, r1
 80052ce:	80fb      	strh	r3, [r7, #6]
 80052d0:	4613      	mov	r3, r2
 80052d2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80052dc:	797b      	ldrb	r3, [r7, #5]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	88f9      	ldrh	r1, [r7, #6]
 80052e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052e6:	9302      	str	r3, [sp, #8]
 80052e8:	2301      	movs	r3, #1
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f107 030e 	add.w	r3, r7, #14
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2301      	movs	r3, #1
 80052f4:	4807      	ldr	r0, [pc, #28]	; (8005314 <I2Cx_ReadData+0x50>)
 80052f6:	f7fc ff71 	bl	80021dc <HAL_I2C_Mem_Read>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <I2Cx_ReadData+0x44>
 8005304:	f7ff ffb2 	bl	800526c <Error>
  return value;
 8005308:	7bbb      	ldrb	r3, [r7, #14]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000740 	.word	0x20000740

08005318 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af04      	add	r7, sp, #16
 800531e:	4603      	mov	r3, r0
 8005320:	603a      	str	r2, [r7, #0]
 8005322:	80fb      	strh	r3, [r7, #6]
 8005324:	460b      	mov	r3, r1
 8005326:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 800532c:	797b      	ldrb	r3, [r7, #5]
 800532e:	b29a      	uxth	r2, r3
 8005330:	88f9      	ldrh	r1, [r7, #6]
 8005332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	2302      	movs	r3, #2
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	4807      	ldr	r0, [pc, #28]	; (8005360 <I2Cx_ReadData16+0x48>)
 8005344:	f7fc ff4a 	bl	80021dc <HAL_I2C_Mem_Read>
 8005348:	4603      	mov	r3, r0
 800534a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2Cx_ReadData16+0x3e>
 8005352:	f7ff ff8b 	bl	800526c <Error>
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000740 	.word	0x20000740

08005364 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af04      	add	r7, sp, #16
 800536a:	4603      	mov	r3, r0
 800536c:	603a      	str	r2, [r7, #0]
 800536e:	80fb      	strh	r3, [r7, #6]
 8005370:	460b      	mov	r3, r1
 8005372:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8005378:	797b      	ldrb	r3, [r7, #5]
 800537a:	b29a      	uxth	r2, r3
 800537c:	88f9      	ldrh	r1, [r7, #6]
 800537e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	2303      	movs	r3, #3
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2301      	movs	r3, #1
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <I2Cx_ReadData24+0x48>)
 8005390:	f7fc ff24 	bl	80021dc <HAL_I2C_Mem_Read>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <I2Cx_ReadData24+0x3e>
 800539e:	f7ff ff65 	bl	800526c <Error>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000740 	.word	0x20000740

080053b0 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	460a      	mov	r2, r1
 80053ba:	71fb      	strb	r3, [r7, #7]
 80053bc:	4613      	mov	r3, r2
 80053be:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80053c0:	79ba      	ldrb	r2, [r7, #6]
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	4619      	mov	r1, r3
 80053c6:	20ec      	movs	r0, #236	; 0xec
 80053c8:	f7ff ff56 	bl	8005278 <I2Cx_WriteData>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	4619      	mov	r1, r3
 80053e2:	20ec      	movs	r0, #236	; 0xec
 80053e4:	f7ff ff6e 	bl	80052c4 <I2Cx_ReadData>
 80053e8:	4603      	mov	r3, r0
 80053ea:	73fb      	strb	r3, [r7, #15]
  return res;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	6039      	str	r1, [r7, #0]
 8005400:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	20ec      	movs	r0, #236	; 0xec
 800540a:	f7ff ff85 	bl	8005318 <I2Cx_ReadData16>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	6039      	str	r1, [r7, #0]
 8005420:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	4619      	mov	r1, r3
 8005428:	20ec      	movs	r0, #236	; 0xec
 800542a:	f7ff ff75 	bl	8005318 <I2Cx_ReadData16>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	4603      	mov	r3, r0
 800543e:	6039      	str	r1, [r7, #0]
 8005440:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	20ec      	movs	r0, #236	; 0xec
 800544a:	f7ff ff65 	bl	8005318 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	b29b      	uxth	r3, r3
 8005456:	b21a      	sxth	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b21b      	sxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b21b      	sxth	r3, r3
 8005464:	b29a      	uxth	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	801a      	strh	r2, [r3, #0]
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	6039      	str	r1, [r7, #0]
 800547c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	20ec      	movs	r0, #236	; 0xec
 8005486:	f7ff ff6d 	bl	8005364 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	b2da      	uxtb	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800549a:	431a      	orrs	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	601a      	str	r2, [r3, #0]
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 80054be:	20f3      	movs	r0, #243	; 0xf3
 80054c0:	f7ff ff88 	bl	80053d4 <BME280_ReadReg>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f003 0309 	and.w	r3, r3, #9
 80054ca:	71fb      	strb	r3, [r7, #7]
  return res;
 80054cc:	79fb      	ldrb	r3, [r7, #7]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 80054d8:	b598      	push	{r3, r4, r7, lr}
 80054da:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 80054dc:	4937      	ldr	r1, [pc, #220]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 80054de:	2088      	movs	r0, #136	; 0x88
 80054e0:	f7ff ff89 	bl	80053f6 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 80054e4:	4936      	ldr	r1, [pc, #216]	; (80055c0 <BME280_ReadCoefficients+0xe8>)
 80054e6:	208a      	movs	r0, #138	; 0x8a
 80054e8:	f7ff ff95 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 80054ec:	4935      	ldr	r1, [pc, #212]	; (80055c4 <BME280_ReadCoefficients+0xec>)
 80054ee:	208c      	movs	r0, #140	; 0x8c
 80054f0:	f7ff ff91 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80054f4:	4934      	ldr	r1, [pc, #208]	; (80055c8 <BME280_ReadCoefficients+0xf0>)
 80054f6:	208e      	movs	r0, #142	; 0x8e
 80054f8:	f7ff ff7d 	bl	80053f6 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80054fc:	4933      	ldr	r1, [pc, #204]	; (80055cc <BME280_ReadCoefficients+0xf4>)
 80054fe:	2090      	movs	r0, #144	; 0x90
 8005500:	f7ff ff89 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005504:	4932      	ldr	r1, [pc, #200]	; (80055d0 <BME280_ReadCoefficients+0xf8>)
 8005506:	2092      	movs	r0, #146	; 0x92
 8005508:	f7ff ff85 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 800550c:	4931      	ldr	r1, [pc, #196]	; (80055d4 <BME280_ReadCoefficients+0xfc>)
 800550e:	2094      	movs	r0, #148	; 0x94
 8005510:	f7ff ff81 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005514:	4930      	ldr	r1, [pc, #192]	; (80055d8 <BME280_ReadCoefficients+0x100>)
 8005516:	2096      	movs	r0, #150	; 0x96
 8005518:	f7ff ff7d 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 800551c:	492f      	ldr	r1, [pc, #188]	; (80055dc <BME280_ReadCoefficients+0x104>)
 800551e:	2098      	movs	r0, #152	; 0x98
 8005520:	f7ff ff79 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005524:	492e      	ldr	r1, [pc, #184]	; (80055e0 <BME280_ReadCoefficients+0x108>)
 8005526:	209a      	movs	r0, #154	; 0x9a
 8005528:	f7ff ff75 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800552c:	492d      	ldr	r1, [pc, #180]	; (80055e4 <BME280_ReadCoefficients+0x10c>)
 800552e:	209c      	movs	r0, #156	; 0x9c
 8005530:	f7ff ff71 	bl	8005416 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005534:	492c      	ldr	r1, [pc, #176]	; (80055e8 <BME280_ReadCoefficients+0x110>)
 8005536:	209e      	movs	r0, #158	; 0x9e
 8005538:	f7ff ff6d 	bl	8005416 <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 800553c:	20a1      	movs	r0, #161	; 0xa1
 800553e:	f7ff ff49 	bl	80053d4 <BME280_ReadReg>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 8005548:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 800554a:	4928      	ldr	r1, [pc, #160]	; (80055ec <BME280_ReadCoefficients+0x114>)
 800554c:	20e1      	movs	r0, #225	; 0xe1
 800554e:	f7ff ff62 	bl	8005416 <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8005552:	20e3      	movs	r0, #227	; 0xe3
 8005554:	f7ff ff3e 	bl	80053d4 <BME280_ReadReg>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 800555e:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8005560:	20e4      	movs	r0, #228	; 0xe4
 8005562:	f7ff ff37 	bl	80053d4 <BME280_ReadReg>
 8005566:	4603      	mov	r3, r0
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	b21c      	sxth	r4, r3
 800556c:	20e5      	movs	r0, #229	; 0xe5
 800556e:	f7ff ff31 	bl	80053d4 <BME280_ReadReg>
 8005572:	4603      	mov	r3, r0
 8005574:	b21b      	sxth	r3, r3
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	b21b      	sxth	r3, r3
 800557c:	4323      	orrs	r3, r4
 800557e:	b21a      	sxth	r2, r3
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 8005582:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8005584:	20e6      	movs	r0, #230	; 0xe6
 8005586:	f7ff ff25 	bl	80053d4 <BME280_ReadReg>
 800558a:	4603      	mov	r3, r0
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	b21c      	sxth	r4, r3
 8005590:	20e5      	movs	r0, #229	; 0xe5
 8005592:	f7ff ff1f 	bl	80053d4 <BME280_ReadReg>
 8005596:	4603      	mov	r3, r0
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	b2db      	uxtb	r3, r3
 800559c:	b21b      	sxth	r3, r3
 800559e:	4323      	orrs	r3, r4
 80055a0:	b21a      	sxth	r2, r3
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 80055a4:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80055a6:	20e7      	movs	r0, #231	; 0xe7
 80055a8:	f7ff ff14 	bl	80053d4 <BME280_ReadReg>
 80055ac:	4603      	mov	r3, r0
 80055ae:	b25a      	sxtb	r2, r3
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <BME280_ReadCoefficients+0xe4>)
 80055b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80055b6:	bf00      	nop
 80055b8:	bd98      	pop	{r3, r4, r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000624 	.word	0x20000624
 80055c0:	20000626 	.word	0x20000626
 80055c4:	20000628 	.word	0x20000628
 80055c8:	2000062a 	.word	0x2000062a
 80055cc:	2000062c 	.word	0x2000062c
 80055d0:	2000062e 	.word	0x2000062e
 80055d4:	20000630 	.word	0x20000630
 80055d8:	20000632 	.word	0x20000632
 80055dc:	20000634 	.word	0x20000634
 80055e0:	20000636 	.word	0x20000636
 80055e4:	20000638 	.word	0x20000638
 80055e8:	2000063a 	.word	0x2000063a
 80055ec:	2000063e 	.word	0x2000063e

080055f0 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 80055fa:	20f5      	movs	r0, #245	; 0xf5
 80055fc:	f7ff feea 	bl	80053d4 <BME280_ReadReg>
 8005600:	4603      	mov	r3, r0
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	f023 031f 	bic.w	r3, r3, #31
 8005610:	b25a      	sxtb	r2, r3
 8005612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005616:	4313      	orrs	r3, r2
 8005618:	b25b      	sxtb	r3, r3
 800561a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	4619      	mov	r1, r3
 8005620:	20f5      	movs	r0, #245	; 0xf5
 8005622:	f7ff fec5 	bl	80053b0 <BME280_WriteReg>
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	4603      	mov	r3, r0
 8005636:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8005638:	20f5      	movs	r0, #245	; 0xf5
 800563a:	f7ff fecb 	bl	80053d4 <BME280_ReadReg>
 800563e:	4603      	mov	r3, r0
 8005640:	f023 031c 	bic.w	r3, r3, #28
 8005644:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	f003 031c 	and.w	r3, r3, #28
 800564e:	b25a      	sxtb	r2, r3
 8005650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005654:	4313      	orrs	r3, r2
 8005656:	b25b      	sxtb	r3, r3
 8005658:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	4619      	mov	r1, r3
 800565e:	20f5      	movs	r0, #245	; 0xf5
 8005660:	f7ff fea6 	bl	80053b0 <BME280_WriteReg>
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8005676:	20f4      	movs	r0, #244	; 0xf4
 8005678:	f7ff feac 	bl	80053d4 <BME280_ReadReg>
 800567c:	4603      	mov	r3, r0
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8005684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005688:	f023 031f 	bic.w	r3, r3, #31
 800568c:	b25a      	sxtb	r2, r3
 800568e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005692:	4313      	orrs	r3, r2
 8005694:	b25b      	sxtb	r3, r3
 8005696:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	4619      	mov	r1, r3
 800569c:	20f4      	movs	r0, #244	; 0xf4
 800569e:	f7ff fe87 	bl	80053b0 <BME280_WriteReg>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80056b4:	20f4      	movs	r0, #244	; 0xf4
 80056b6:	f7ff fe8d 	bl	80053d4 <BME280_ReadReg>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f023 031c 	bic.w	r3, r3, #28
 80056c0:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	f003 031c 	and.w	r3, r3, #28
 80056ca:	b25a      	sxtb	r2, r3
 80056cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	4619      	mov	r1, r3
 80056da:	20f4      	movs	r0, #244	; 0xf4
 80056dc:	f7ff fe68 	bl	80053b0 <BME280_WriteReg>
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80056f2:	20f2      	movs	r0, #242	; 0xf2
 80056f4:	f7ff fe6e 	bl	80053d4 <BME280_ReadReg>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	b25a      	sxtb	r2, r3
 800570a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570e:	4313      	orrs	r3, r2
 8005710:	b25b      	sxtb	r3, r3
 8005712:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	4619      	mov	r1, r3
 8005718:	20f2      	movs	r0, #242	; 0xf2
 800571a:	f7ff fe49 	bl	80053b0 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800571e:	20f4      	movs	r0, #244	; 0xf4
 8005720:	f7ff fe58 	bl	80053d4 <BME280_ReadReg>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	4619      	mov	r1, r3
 800572c:	20f4      	movs	r0, #244	; 0xf4
 800572e:	f7ff fe3f 	bl	80053b0 <BME280_WriteReg>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	4603      	mov	r3, r0
 8005742:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8005744:	20f4      	movs	r0, #244	; 0xf4
 8005746:	f7ff fe45 	bl	80053d4 <BME280_ReadReg>
 800574a:	4603      	mov	r3, r0
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8005752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	b25a      	sxtb	r2, r3
 800575c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005760:	4313      	orrs	r3, r2
 8005762:	b25b      	sxtb	r3, r3
 8005764:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	4619      	mov	r1, r3
 800576a:	20f4      	movs	r0, #244	; 0xf4
 800576c:	f7ff fe20 	bl	80053b0 <BME280_WriteReg>
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8005784:	463b      	mov	r3, r7
 8005786:	4619      	mov	r1, r3
 8005788:	20fa      	movs	r0, #250	; 0xfa
 800578a:	f7ff fe72 	bl	8005472 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	08db      	lsrs	r3, r3, #3
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <BME280_ReadTemperature+0x98>)
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	0052      	lsls	r2, r2, #1
 800579e:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 80057a0:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <BME280_ReadTemperature+0x98>)
 80057a2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80057aa:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80057ac:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <BME280_ReadTemperature+0x98>)
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	0912      	lsrs	r2, r2, #4
 80057bc:	4914      	ldr	r1, [pc, #80]	; (8005810 <BME280_ReadTemperature+0x98>)
 80057be:	8809      	ldrh	r1, [r1, #0]
 80057c0:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80057c6:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 80057c8:	4a11      	ldr	r2, [pc, #68]	; (8005810 <BME280_ReadTemperature+0x98>)
 80057ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 80057d2:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80057d4:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	4a0d      	ldr	r2, [pc, #52]	; (8005814 <BME280_ReadTemperature+0x9c>)
 80057de:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <BME280_ReadTemperature+0x9c>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	3380      	adds	r3, #128	; 0x80
 80057ec:	121b      	asrs	r3, r3, #8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fb fa04 	bl	8000bfc <__aeabi_i2f>
 80057f4:	4603      	mov	r3, r0
 80057f6:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 80057f8:	4907      	ldr	r1, [pc, #28]	; (8005818 <BME280_ReadTemperature+0xa0>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7fb fb06 	bl	8000e0c <__aeabi_fdiv>
 8005800:	4603      	mov	r3, r0
 8005802:	60fb      	str	r3, [r7, #12]
  return temper_float;
 8005804:	68fb      	ldr	r3, [r7, #12]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000624 	.word	0x20000624
 8005814:	20000648 	.word	0x20000648
 8005818:	42c80000 	.word	0x42c80000

0800581c <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b09e      	sub	sp, #120	; 0x78
 8005822:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 800582a:	f7ff ffa5 	bl	8005778 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800582e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005832:	4619      	mov	r1, r3
 8005834:	20f7      	movs	r0, #247	; 0xf7
 8005836:	f7ff fe1c 	bl	8005472 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 800583a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	653b      	str	r3, [r7, #80]	; 0x50
	val1 = ((int64_t) temper_int) - 128000;
 8005840:	4b6b      	ldr	r3, [pc, #428]	; (80059f0 <BME280_ReadPressure+0x1d4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800584a:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800584e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8005852:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8005856:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585a:	fb03 f102 	mul.w	r1, r3, r2
 800585e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005862:	fb03 f302 	mul.w	r3, r3, r2
 8005866:	18ca      	adds	r2, r1, r3
 8005868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586a:	fba3 4503 	umull	r4, r5, r3, r3
 800586e:	1953      	adds	r3, r2, r5
 8005870:	461d      	mov	r5, r3
 8005872:	4b60      	ldr	r3, [pc, #384]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 8005874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005878:	b21a      	sxth	r2, r3
 800587a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800587e:	fb02 f005 	mul.w	r0, r2, r5
 8005882:	fb04 f103 	mul.w	r1, r4, r3
 8005886:	4401      	add	r1, r0
 8005888:	fba4 2302 	umull	r2, r3, r4, r2
 800588c:	4419      	add	r1, r3
 800588e:	460b      	mov	r3, r1
 8005890:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005894:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8005898:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 800589a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800589e:	b21a      	sxth	r2, r3
 80058a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a6:	fb03 f001 	mul.w	r0, r3, r1
 80058aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80058ac:	fb02 f101 	mul.w	r1, r2, r1
 80058b0:	4408      	add	r0, r1
 80058b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058b4:	fba1 2302 	umull	r2, r3, r1, r2
 80058b8:	18c1      	adds	r1, r0, r3
 80058ba:	460b      	mov	r3, r1
 80058bc:	f04f 0000 	mov.w	r0, #0
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	0459      	lsls	r1, r3, #17
 80058c6:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80058ca:	0450      	lsls	r0, r2, #17
 80058cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80058d0:	eb12 0800 	adds.w	r8, r2, r0
 80058d4:	eb43 0901 	adc.w	r9, r3, r1
 80058d8:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 80058dc:	4b45      	ldr	r3, [pc, #276]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 80058de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058e8:	f04f 0000 	mov.w	r0, #0
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	00d1      	lsls	r1, r2, #3
 80058f2:	2000      	movs	r0, #0
 80058f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80058f8:	1814      	adds	r4, r2, r0
 80058fa:	61bc      	str	r4, [r7, #24]
 80058fc:	414b      	adcs	r3, r1
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005904:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8005908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800590a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800590c:	fb03 f102 	mul.w	r1, r3, r2
 8005910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005914:	fb03 f302 	mul.w	r3, r3, r2
 8005918:	18ca      	adds	r2, r1, r3
 800591a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800591c:	fba3 4503 	umull	r4, r5, r3, r3
 8005920:	1953      	adds	r3, r2, r5
 8005922:	461d      	mov	r5, r3
 8005924:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 8005926:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800592a:	b21a      	sxth	r2, r3
 800592c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005930:	fb02 f005 	mul.w	r0, r2, r5
 8005934:	fb04 f103 	mul.w	r1, r4, r3
 8005938:	4401      	add	r1, r0
 800593a:	fba4 2302 	umull	r2, r3, r4, r2
 800593e:	4419      	add	r1, r3
 8005940:	460b      	mov	r3, r1
 8005942:	f04f 0800 	mov.w	r8, #0
 8005946:	f04f 0900 	mov.w	r9, #0
 800594a:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800594e:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8005952:	ea4f 2923 	mov.w	r9, r3, asr #8
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 8005958:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800595c:	b21a      	sxth	r2, r3
 800595e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005964:	fb03 f001 	mul.w	r0, r3, r1
 8005968:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800596a:	fb02 f101 	mul.w	r1, r2, r1
 800596e:	1844      	adds	r4, r0, r1
 8005970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005972:	fba1 0102 	umull	r0, r1, r1, r2
 8005976:	1863      	adds	r3, r4, r1
 8005978:	4619      	mov	r1, r3
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	030b      	lsls	r3, r1, #12
 8005984:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8005988:	0302      	lsls	r2, r0, #12
 800598a:	eb18 0102 	adds.w	r1, r8, r2
 800598e:	6139      	str	r1, [r7, #16]
 8005990:	eb49 0303 	adc.w	r3, r9, r3
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800599a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 800599e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80059a2:	1c11      	adds	r1, r2, #0
 80059a4:	64b9      	str	r1, [r7, #72]	; 0x48
 80059a6:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <BME280_ReadPressure+0x1d8>)
 80059ae:	88db      	ldrh	r3, [r3, #6]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80059ba:	4629      	mov	r1, r5
 80059bc:	fb02 f001 	mul.w	r0, r2, r1
 80059c0:	4621      	mov	r1, r4
 80059c2:	fb01 f103 	mul.w	r1, r1, r3
 80059c6:	4401      	add	r1, r0
 80059c8:	4620      	mov	r0, r4
 80059ca:	fba0 2302 	umull	r2, r3, r0, r2
 80059ce:	4419      	add	r1, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f04f 0100 	mov.w	r1, #0
 80059da:	1058      	asrs	r0, r3, #1
 80059dc:	17d9      	asrs	r1, r3, #31
 80059de:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	if (val1 == 0) {
 80059e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d106      	bne.n	80059f8 <BME280_ReadPressure+0x1dc>
		return 0; // avoid exception caused by division by zero
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e123      	b.n	8005c38 <BME280_ReadPressure+0x41c>
 80059f0:	20000648 	.word	0x20000648
 80059f4:	20000624 	.word	0x20000624
	}
	p = 1048576 - press_raw;
 80059f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fa:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80059fe:	461a      	mov	r2, r3
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - val2) * 3125) / val1;
 8005a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a10:	07db      	lsls	r3, r3, #31
 8005a12:	643b      	str	r3, [r7, #64]	; 0x40
 8005a14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a18:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	ebb1 0a02 	subs.w	sl, r1, r2
 8005a22:	4629      	mov	r1, r5
 8005a24:	eb61 0b03 	sbc.w	fp, r1, r3
 8005a28:	4652      	mov	r2, sl
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	415b      	adcs	r3, r3
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a38:	eb12 020a 	adds.w	r2, r2, sl
 8005a3c:	eb43 030b 	adc.w	r3, r3, fp
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	f04f 0100 	mov.w	r1, #0
 8005a48:	0199      	lsls	r1, r3, #6
 8005a4a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8005a4e:	0190      	lsls	r0, r2, #6
 8005a50:	1812      	adds	r2, r2, r0
 8005a52:	eb41 0303 	adc.w	r3, r1, r3
 8005a56:	f04f 0000 	mov.w	r0, #0
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	0099      	lsls	r1, r3, #2
 8005a60:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005a64:	0090      	lsls	r0, r2, #2
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	eb12 020a 	adds.w	r2, r2, sl
 8005a6e:	eb43 030b 	adc.w	r3, r3, fp
 8005a72:	f04f 0000 	mov.w	r0, #0
 8005a76:	f04f 0100 	mov.w	r1, #0
 8005a7a:	0099      	lsls	r1, r3, #2
 8005a7c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005a80:	0090      	lsls	r0, r2, #2
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	eb12 010a 	adds.w	r1, r2, sl
 8005a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a8c:	eb43 030b 	adc.w	r3, r3, fp
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005a96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a9a:	f7fb fa53 	bl	8000f44 <__aeabi_ldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8005aa6:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <BME280_ReadPressure+0x428>)
 8005aa8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005aac:	b218      	sxth	r0, r3
 8005aae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005ab2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	0b62      	lsrs	r2, r4, #13
 8005ac0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8005ac4:	136b      	asrs	r3, r5, #13
 8005ac6:	fb02 f501 	mul.w	r5, r2, r1
 8005aca:	fb00 f403 	mul.w	r4, r0, r3
 8005ace:	442c      	add	r4, r5
 8005ad0:	fba0 0102 	umull	r0, r1, r0, r2
 8005ad4:	1863      	adds	r3, r4, r1
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	0b62      	lsrs	r2, r4, #13
 8005ae6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8005aea:	136b      	asrs	r3, r5, #13
 8005aec:	fb02 f501 	mul.w	r5, r2, r1
 8005af0:	fb00 f403 	mul.w	r4, r0, r3
 8005af4:	442c      	add	r4, r5
 8005af6:	fba0 0102 	umull	r0, r1, r0, r2
 8005afa:	1863      	adds	r3, r4, r1
 8005afc:	4619      	mov	r1, r3
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	0e42      	lsrs	r2, r0, #25
 8005b08:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005b0c:	164b      	asrs	r3, r1, #25
 8005b0e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8005b12:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <BME280_ReadPressure+0x428>)
 8005b14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005b18:	b21a      	sxth	r2, r3
 8005b1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b20:	fb03 f001 	mul.w	r0, r3, r1
 8005b24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005b26:	fb02 f101 	mul.w	r1, r2, r1
 8005b2a:	1844      	adds	r4, r0, r1
 8005b2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b2e:	fba1 0102 	umull	r0, r1, r1, r2
 8005b32:	1863      	adds	r3, r4, r1
 8005b34:	4619      	mov	r1, r3
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	0cc2      	lsrs	r2, r0, #19
 8005b40:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005b44:	14cb      	asrs	r3, r1, #19
 8005b46:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8005b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005b52:	1884      	adds	r4, r0, r2
 8005b54:	633c      	str	r4, [r7, #48]	; 0x30
 8005b56:	eb41 0303 	adc.w	r3, r1, r3
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b64:	4621      	mov	r1, r4
 8005b66:	1889      	adds	r1, r1, r2
 8005b68:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	eb43 0101 	adc.w	r1, r3, r1
 8005b70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005b7e:	4623      	mov	r3, r4
 8005b80:	0a18      	lsrs	r0, r3, #8
 8005b82:	462b      	mov	r3, r5
 8005b84:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005b88:	462b      	mov	r3, r5
 8005b8a:	1219      	asrs	r1, r3, #8
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <BME280_ReadPressure+0x428>)
 8005b8e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b92:	b21c      	sxth	r4, r3
 8005b94:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	012b      	lsls	r3, r5, #4
 8005ba2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005ba6:	0122      	lsls	r2, r4, #4
 8005ba8:	1884      	adds	r4, r0, r2
 8005baa:	603c      	str	r4, [r7, #0]
 8005bac:	eb41 0303 	adc.w	r3, r1, r3
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005bb6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8005bba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	0a02      	lsrs	r2, r0, #8
 8005bc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005bcc:	120b      	asrs	r3, r1, #8
 8005bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bd2:	fb03 f402 	mul.w	r4, r3, r2
 8005bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bda:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8005bde:	f04f 0100 	mov.w	r1, #0
 8005be2:	ea02 0500 	and.w	r5, r2, r0
 8005be6:	623d      	str	r5, [r7, #32]
 8005be8:	400b      	ands	r3, r1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <BME280_ReadPressure+0x42c>)
 8005bee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bf2:	464a      	mov	r2, r9
 8005bf4:	fb03 f202 	mul.w	r2, r3, r2
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	fb03 f301 	mul.w	r3, r3, r1
 8005c00:	4413      	add	r3, r2
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <BME280_ReadPressure+0x42c>)
 8005c04:	4641      	mov	r1, r8
 8005c06:	fba1 0102 	umull	r0, r1, r1, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <BME280_ReadPressure+0x430>)
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	f7fb f996 	bl	8000f44 <__aeabi_ldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	4423      	add	r3, r4
 8005c20:	657b      	str	r3, [r7, #84]	; 0x54
	press_float = pres_int / 100.0f;
 8005c22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c24:	f7fa ffe6 	bl	8000bf4 <__aeabi_ui2f>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4909      	ldr	r1, [pc, #36]	; (8005c50 <BME280_ReadPressure+0x434>)
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fb f8ed 	bl	8000e0c <__aeabi_fdiv>
 8005c32:	4603      	mov	r3, r0
 8005c34:	677b      	str	r3, [r7, #116]	; 0x74
  return press_float;
 8005c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3778      	adds	r7, #120	; 0x78
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c42:	bf00      	nop
 8005c44:	20000624 	.word	0x20000624
 8005c48:	0005f5e1 	.word	0x0005f5e1
 8005c4c:	000186a0 	.word	0x000186a0
 8005c50:	42c80000 	.word	0x42c80000

08005c54 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8005c60:	f7ff fd8a 	bl	8005778 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8005c64:	1cbb      	adds	r3, r7, #2
 8005c66:	4619      	mov	r1, r3
 8005c68:	20fd      	movs	r0, #253	; 0xfd
 8005c6a:	f7ff fbe4 	bl	8005436 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8005c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8005c76:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <BME280_ReadHumidity+0xec>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8005c7e:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	039a      	lsls	r2, r3, #14
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005c86:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005c8a:	051b      	lsls	r3, r3, #20
 8005c8c:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005c90:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005c94:	4619      	mov	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8005c9c:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8005c9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005ca2:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005ca6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8005caa:	4611      	mov	r1, r2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	fb02 f201 	mul.w	r2, r2, r1
 8005cb2:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8005cb4:	4923      	ldr	r1, [pc, #140]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005cb6:	7f09      	ldrb	r1, [r1, #28]
 8005cb8:	4608      	mov	r0, r1
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	fb01 f100 	mul.w	r1, r1, r0
 8005cc0:	12c9      	asrs	r1, r1, #11
 8005cc2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8005cc6:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8005cca:	1292      	asrs	r2, r2, #10
 8005ccc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8005cd0:	491c      	ldr	r1, [pc, #112]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005cd2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8005cd6:	fb01 f202 	mul.w	r2, r1, r2
 8005cda:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005cde:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	13db      	asrs	r3, r3, #15
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	13d2      	asrs	r2, r2, #15
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
 8005cf2:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8005cf4:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <BME280_ReadHumidity+0xf0>)
 8005cf6:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8005cfc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d0a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8005d12:	bfa8      	it	ge
 8005d14:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8005d18:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	131b      	asrs	r3, r3, #12
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa ff6c 	bl	8000bfc <__aeabi_i2f>
 8005d24:	4603      	mov	r3, r0
 8005d26:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8005d28:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7fb f86d 	bl	8000e0c <__aeabi_fdiv>
 8005d32:	4603      	mov	r3, r0
 8005d34:	60fb      	str	r3, [r7, #12]
  return hum_float;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000648 	.word	0x20000648
 8005d44:	20000624 	.word	0x20000624

08005d48 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]

	value = BME280_ReadReg(BME280_REG_ID);
 8005d56:	20d0      	movs	r0, #208	; 0xd0
 8005d58:	f7ff fb3c 	bl	80053d4 <BME280_ReadReg>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71fb      	strb	r3, [r7, #7]
	if(value !=BME280_ID)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d002      	beq.n	8005d6c <BME280_Init+0x24>
	{
		Error();
 8005d66:	f7ff fa81 	bl	800526c <Error>
		return;
 8005d6a:	e02d      	b.n	8005dc8 <BME280_Init+0x80>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8005d6c:	21b6      	movs	r1, #182	; 0xb6
 8005d6e:	20e0      	movs	r0, #224	; 0xe0
 8005d70:	f7ff fb1e 	bl	80053b0 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8005d74:	bf00      	nop
 8005d76:	f7ff fb9f 	bl	80054b8 <BME280_ReadStatus>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f8      	bne.n	8005d76 <BME280_Init+0x2e>
	BME280_ReadCoefficients();
 8005d84:	f7ff fba8 	bl	80054d8 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8005d88:	20a0      	movs	r0, #160	; 0xa0
 8005d8a:	f7ff fc31 	bl	80055f0 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8005d8e:	2008      	movs	r0, #8
 8005d90:	f7ff fc4d 	bl	800562e <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8005d94:	2060      	movs	r0, #96	; 0x60
 8005d96:	f7ff fc69 	bl	800566c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8005d9a:	2008      	movs	r0, #8
 8005d9c:	f7ff fc85 	bl	80056aa <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8005da0:	2001      	movs	r0, #1
 8005da2:	f7ff fca1 	bl	80056e8 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8005da6:	20f4      	movs	r0, #244	; 0xf4
 8005da8:	f7ff fb14 	bl	80053d4 <BME280_ReadReg>
 8005dac:	4603      	mov	r3, r0
 8005dae:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8005db0:	20f2      	movs	r0, #242	; 0xf2
 8005db2:	f7ff fb0f 	bl	80053d4 <BME280_ReadReg>
 8005db6:	4603      	mov	r3, r0
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	461a      	mov	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	603b      	str	r3, [r7, #0]
	BME280_SetMode(BME280_MODE_NORMAL);
 8005dc2:	2003      	movs	r0, #3
 8005dc4:	f7ff fcb9 	bl	800573a <BME280_SetMode>
}
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <TM1638_Init>:
uint8_t  tm1638_keys;
SPI_HandleTypeDef *pSPI=&hspi2;

void TM1638WriteBuff();

void TM1638_Init(){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
	tm1638_keys=0;
 8005dd4:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <TM1638_Init+0x4c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
	memset(tm1638_buff,0x00,16);
 8005dda:	2210      	movs	r2, #16
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4810      	ldr	r0, [pc, #64]	; (8005e20 <TM1638_Init+0x50>)
 8005de0:	f001 fa44 	bl	800726c <memset>
	tm1638_command=0x88;
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <TM1638_Init+0x54>)
 8005de6:	2288      	movs	r2, #136	; 0x88
 8005de8:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005dea:	2200      	movs	r2, #0
 8005dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <TM1638_Init+0x58>)
 8005df2:	f7fb feaf 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <TM1638_Init+0x5c>)
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4908      	ldr	r1, [pc, #32]	; (8005e24 <TM1638_Init+0x54>)
 8005e02:	f7fd fd70 	bl	80038e6 <HAL_SPI_Transmit>
	CS_H;
 8005e06:	2201      	movs	r2, #1
 8005e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e0c:	4806      	ldr	r0, [pc, #24]	; (8005e28 <TM1638_Init+0x58>)
 8005e0e:	f7fb fea1 	bl	8001b54 <HAL_GPIO_WritePin>
	TM1638WriteBuff();
 8005e12:	f000 f831 	bl	8005e78 <TM1638WriteBuff>
};
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000661 	.word	0x20000661
 8005e20:	20000650 	.word	0x20000650
 8005e24:	20000660 	.word	0x20000660
 8005e28:	40010c00 	.word	0x40010c00
 8005e2c:	20000008 	.word	0x20000008

08005e30 <TM1638_Led>:

void TM1638_Led(uint8_t num, uint8_t value){
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	460a      	mov	r2, r1
 8005e3a:	71fb      	strb	r3, [r7, #7]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71bb      	strb	r3, [r7, #6]
	if(num>7)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b07      	cmp	r3, #7
 8005e44:	d80b      	bhi.n	8005e5e <TM1638_Led+0x2e>
		return;
	tm1638_buff[1+num*2]=value?0x0f:0;
 8005e46:	79bb      	ldrb	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <TM1638_Led+0x20>
 8005e4c:	210f      	movs	r1, #15
 8005e4e:	e000      	b.n	8005e52 <TM1638_Led+0x22>
 8005e50:	2100      	movs	r1, #0
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	3301      	adds	r3, #1
 8005e58:	4a03      	ldr	r2, [pc, #12]	; (8005e68 <TM1638_Led+0x38>)
 8005e5a:	54d1      	strb	r1, [r2, r3]
 8005e5c:	e000      	b.n	8005e60 <TM1638_Led+0x30>
		return;
 8005e5e:	bf00      	nop
};
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr
 8005e68:	20000650 	.word	0x20000650

08005e6c <TM1638_Update>:
void TM1638_Update(){
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
	TM1638WriteBuff();
 8005e70:	f000 f802 	bl	8005e78 <TM1638WriteBuff>
};
 8005e74:	bf00      	nop
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <TM1638WriteBuff>:

void TM1638WriteBuff(){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
	tm1638_command=0x40;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <TM1638WriteBuff+0x74>)
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	701a      	strb	r2, [r3, #0]
	tm1638_addr=0xc0;
 8005e82:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <TM1638WriteBuff+0x78>)
 8005e84:	22c0      	movs	r2, #192	; 0xc0
 8005e86:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e8e:	4819      	ldr	r0, [pc, #100]	; (8005ef4 <TM1638WriteBuff+0x7c>)
 8005e90:	f7fb fe60 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <TM1638WriteBuff+0x80>)
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4913      	ldr	r1, [pc, #76]	; (8005eec <TM1638WriteBuff+0x74>)
 8005ea0:	f7fd fd21 	bl	80038e6 <HAL_SPI_Transmit>
	CS_H;
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eaa:	4812      	ldr	r0, [pc, #72]	; (8005ef4 <TM1638WriteBuff+0x7c>)
 8005eac:	f7fb fe52 	bl	8001b54 <HAL_GPIO_WritePin>

	CS_L;
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eb6:	480f      	ldr	r0, [pc, #60]	; (8005ef4 <TM1638WriteBuff+0x7c>)
 8005eb8:	f7fb fe4c 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_addr,1,500);
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <TM1638WriteBuff+0x80>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	490a      	ldr	r1, [pc, #40]	; (8005ef0 <TM1638WriteBuff+0x78>)
 8005ec8:	f7fd fd0d 	bl	80038e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pSPI,tm1638_buff,16,500);
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <TM1638WriteBuff+0x80>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	4909      	ldr	r1, [pc, #36]	; (8005efc <TM1638WriteBuff+0x84>)
 8005ed8:	f7fd fd05 	bl	80038e6 <HAL_SPI_Transmit>

	CS_H;
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ee2:	4804      	ldr	r0, [pc, #16]	; (8005ef4 <TM1638WriteBuff+0x7c>)
 8005ee4:	f7fb fe36 	bl	8001b54 <HAL_GPIO_WritePin>



};
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000660 	.word	0x20000660
 8005ef0:	2000064c 	.word	0x2000064c
 8005ef4:	40010c00 	.word	0x40010c00
 8005ef8:	20000008 	.word	0x20000008
 8005efc:	20000650 	.word	0x20000650

08005f00 <TM1638_ReadKey>:
uint16_t TM1638_ReadKey(){
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
	uint8_t keys=0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4];
	tm1638_command=0x42;
 8005f0a:	4b38      	ldr	r3, [pc, #224]	; (8005fec <TM1638_ReadKey+0xec>)
 8005f0c:	2242      	movs	r2, #66	; 0x42
 8005f0e:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005f10:	2200      	movs	r2, #0
 8005f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f16:	4836      	ldr	r0, [pc, #216]	; (8005ff0 <TM1638_ReadKey+0xf0>)
 8005f18:	f7fb fe1c 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005f1c:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005f24:	2201      	movs	r2, #1
 8005f26:	4931      	ldr	r1, [pc, #196]	; (8005fec <TM1638_ReadKey+0xec>)
 8005f28:	f7fd fcdd 	bl	80038e6 <HAL_SPI_Transmit>
	pSPI->Instance->CR1 &= ~SPI_CR1_BIDIOE;
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f3e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive(pSPI,data,4,500);
 8005f40:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	1d39      	adds	r1, r7, #4
 8005f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	f7fd fdff 	bl	8003b4e <HAL_SPI_Receive>
	pSPI->Instance->CR1 |= SPI_CR1_BIDIOE;
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b26      	ldr	r3, [pc, #152]	; (8005ff4 <TM1638_ReadKey+0xf4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f62:	601a      	str	r2, [r3, #0]
	CS_H;
 8005f64:	2201      	movs	r2, #1
 8005f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f6a:	4821      	ldr	r0, [pc, #132]	; (8005ff0 <TM1638_ReadKey+0xf0>)
 8005f6c:	f7fb fdf2 	bl	8001b54 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	e011      	b.n	8005f9a <TM1638_ReadKey+0x9a>
		keys |= (data[i]&0x11)<<i;
 8005f76:	1d3a      	adds	r2, r7, #4
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 0211 	and.w	r2, r3, #17
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	b25a      	sxtb	r2, r3
 8005f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<4;i++)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	ddea      	ble.n	8005f76 <TM1638_ReadKey+0x76>
	if(keys==tm1638_keys){
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <TM1638_ReadKey+0xf8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	7bfa      	ldrb	r2, [r7, #15]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d101      	bne.n	8005fae <TM1638_ReadKey+0xae>
		return 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e01a      	b.n	8005fe4 <TM1638_ReadKey+0xe4>
	}

		data[0]=(keys^tm1638_keys)&keys;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <TM1638_ReadKey+0xf8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	713b      	strb	r3, [r7, #4]
		data[1]=(keys^tm1638_keys)&tm1638_keys;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <TM1638_ReadKey+0xf8>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	717b      	strb	r3, [r7, #5]
	    tm1638_keys=keys;
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <TM1638_ReadKey+0xf8>)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	7013      	strb	r3, [r2, #0]
	    return (data[1]<<8)|data[0];
 8005fd4:	797b      	ldrb	r3, [r7, #5]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	b21a      	sxth	r2, r3
 8005fda:	793b      	ldrb	r3, [r7, #4]
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b21b      	sxth	r3, r3
 8005fe2:	b29b      	uxth	r3, r3
	////for(int i=0;i<8;i++){
	//	TM1638_Led(i,tm1638_keys&(1<<i));
	//}
	//TM1638_Update();
	//return 1;
};
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000660 	.word	0x20000660
 8005ff0:	40010c00 	.word	0x40010c00
 8005ff4:	20000008 	.word	0x20000008
 8005ff8:	20000661 	.word	0x20000661

08005ffc <__NVIC_SetPriority>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db0a      	blt.n	8006026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	490c      	ldr	r1, [pc, #48]	; (8006048 <__NVIC_SetPriority+0x4c>)
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	0112      	lsls	r2, r2, #4
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	440b      	add	r3, r1
 8006020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006024:	e00a      	b.n	800603c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <__NVIC_SetPriority+0x50>)
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	3b04      	subs	r3, #4
 8006034:	0112      	lsls	r2, r2, #4
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	440b      	add	r3, r1
 800603a:	761a      	strb	r2, [r3, #24]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	e000e100 	.word	0xe000e100
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  }
  if (htim->Instance==TIM4) //check if the interrupt comes from TIM1
    {
	  GetDeviceData();
    }*/
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
	...

08006064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006064:	b5b0      	push	{r4, r5, r7, lr}
 8006066:	b098      	sub	sp, #96	; 0x60
 8006068:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800606a:	f7fb f91f 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800606e:	f000 f8a3 	bl	80061b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006072:	f000 fa97 	bl	80065a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006076:	f000 fa6f 	bl	8006558 <MX_DMA_Init>
  MX_I2C1_Init();
 800607a:	f000 f8e3 	bl	8006244 <MX_I2C1_Init>
  MX_TIM1_Init();
 800607e:	f000 f947 	bl	8006310 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8006082:	f000 fa3f 	bl	8006504 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8006086:	f000 f9ef 	bl	8006468 <MX_TIM4_Init>
  MX_SPI2_Init();
 800608a:	f000 f909 	bl	80062a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800608e:	f000 fafd 	bl	800668c <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8006092:	2100      	movs	r1, #0
 8006094:	2000      	movs	r0, #0
 8006096:	f000 fc61 	bl	800695c <SSD1306_GotoXY>
  SSD1306_Puts ("Start...", &Font_11x18, 1);
 800609a:	2201      	movs	r2, #1
 800609c:	493d      	ldr	r1, [pc, #244]	; (8006194 <main+0x130>)
 800609e:	483e      	ldr	r0, [pc, #248]	; (8006198 <main+0x134>)
 80060a0:	f000 fcf2 	bl	8006a88 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80060a4:	f000 fbb6 	bl	8006814 <SSD1306_UpdateScreen>
  NVIC_SetPriority(TIM4_IRQn, 15);
 80060a8:	210f      	movs	r1, #15
 80060aa:	201e      	movs	r0, #30
 80060ac:	f7ff ffa6 	bl	8005ffc <__NVIC_SetPriority>
 // ds18b20_init();
  BME280_Init();
 80060b0:	f7ff fe4a 	bl	8005d48 <BME280_Init>

 //
  HAL_TIM_Base_Start_IT(&htim1);
 80060b4:	4839      	ldr	r0, [pc, #228]	; (800619c <main+0x138>)
 80060b6:	f7fe f8fa 	bl	80042ae <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80060ba:	4839      	ldr	r0, [pc, #228]	; (80061a0 <main+0x13c>)
 80060bc:	f7fe f8f7 	bl	80042ae <HAL_TIM_Base_Start_IT>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80060c0:	2100      	movs	r1, #0
 80060c2:	4836      	ldr	r0, [pc, #216]	; (800619c <main+0x138>)
 80060c4:	f7fe f94a 	bl	800435c <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t n=0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint8_t buff[16];
  uint8_t str1[64];
  TM1638_Init();
 80060ce:	f7ff fe7f 	bl	8005dd0 <TM1638_Init>

  while (1)
  {

	  if(TM1638_ReadKey()){
 80060d2:	f7ff ff15 	bl	8005f00 <TM1638_ReadKey>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01a      	beq.n	8006112 <main+0xae>
			for(int i=0;i<8;i++){
 80060dc:	2300      	movs	r3, #0
 80060de:	657b      	str	r3, [r7, #84]	; 0x54
 80060e0:	e012      	b.n	8006108 <main+0xa4>
				TM1638_Led(i,tm1638_keys&(1<<i));
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e4:	b2d8      	uxtb	r0, r3
 80060e6:	2201      	movs	r2, #1
 80060e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	b25a      	sxtb	r2, r3
 80060f0:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <main+0x140>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b25b      	sxtb	r3, r3
 80060f6:	4013      	ands	r3, r2
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	f7ff fe97 	bl	8005e30 <TM1638_Led>
			for(int i=0;i<8;i++){
 8006102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006104:	3301      	adds	r3, #1
 8006106:	657b      	str	r3, [r7, #84]	; 0x54
 8006108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610a:	2b07      	cmp	r3, #7
 800610c:	dde9      	ble.n	80060e2 <main+0x7e>
			}
			TM1638_Update();
 800610e:	f7ff fead 	bl	8005e6c <TM1638_Update>
	  }
	  }
	  }
	  }*/

	  sprintf(str1,"%.2f'C %.2fmm    ",BME280_ReadTemperature(),BME280_ReadPressure()*0.000750061683f);
 8006112:	f7ff fb31 	bl	8005778 <BME280_ReadTemperature>
 8006116:	4603      	mov	r3, r0
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa f985 	bl	8000428 <__aeabi_f2d>
 800611e:	4604      	mov	r4, r0
 8006120:	460d      	mov	r5, r1
 8006122:	f7ff fb7b 	bl	800581c <BME280_ReadPressure>
 8006126:	4603      	mov	r3, r0
 8006128:	491f      	ldr	r1, [pc, #124]	; (80061a8 <main+0x144>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa fdba 	bl	8000ca4 <__aeabi_fmul>
 8006130:	4603      	mov	r3, r0
 8006132:	4618      	mov	r0, r3
 8006134:	f7fa f978 	bl	8000428 <__aeabi_f2d>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4638      	mov	r0, r7
 800613e:	e9cd 2300 	strd	r2, r3, [sp]
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	4919      	ldr	r1, [pc, #100]	; (80061ac <main+0x148>)
 8006148:	f001 fcf8 	bl	8007b3c <siprintf>
	  SSD1306_GotoXY (0,2*20);
 800614c:	2128      	movs	r1, #40	; 0x28
 800614e:	2000      	movs	r0, #0
 8006150:	f000 fc04 	bl	800695c <SSD1306_GotoXY>
	  SSD1306_Puts (str1, &Font_7x10, 1);
 8006154:	463b      	mov	r3, r7
 8006156:	2201      	movs	r2, #1
 8006158:	4915      	ldr	r1, [pc, #84]	; (80061b0 <main+0x14c>)
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc94 	bl	8006a88 <SSD1306_Puts>
	  sprintf(str1,"%.1f%%     ",BME280_ReadHumidity());
 8006160:	f7ff fd78 	bl	8005c54 <BME280_ReadHumidity>
 8006164:	4603      	mov	r3, r0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa f95e 	bl	8000428 <__aeabi_f2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4638      	mov	r0, r7
 8006172:	4910      	ldr	r1, [pc, #64]	; (80061b4 <main+0x150>)
 8006174:	f001 fce2 	bl	8007b3c <siprintf>
	  SSD1306_GotoXY (0,2*20+10);
 8006178:	2132      	movs	r1, #50	; 0x32
 800617a:	2000      	movs	r0, #0
 800617c:	f000 fbee 	bl	800695c <SSD1306_GotoXY>
	  SSD1306_Puts (str1, &Font_7x10, 1);
 8006180:	463b      	mov	r3, r7
 8006182:	2201      	movs	r2, #1
 8006184:	490a      	ldr	r1, [pc, #40]	; (80061b0 <main+0x14c>)
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fc7e 	bl	8006a88 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800618c:	f000 fb42 	bl	8006814 <SSD1306_UpdateScreen>
	  if(TM1638_ReadKey()){
 8006190:	e79f      	b.n	80060d2 <main+0x6e>
 8006192:	bf00      	nop
 8006194:	20000014 	.word	0x20000014
 8006198:	08009fb8 	.word	0x08009fb8
 800619c:	200007d8 	.word	0x200007d8
 80061a0:	20000700 	.word	0x20000700
 80061a4:	20000661 	.word	0x20000661
 80061a8:	3a449fca 	.word	0x3a449fca
 80061ac:	08009fc4 	.word	0x08009fc4
 80061b0:	2000000c 	.word	0x2000000c
 80061b4:	08009fd8 	.word	0x08009fd8

080061b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b090      	sub	sp, #64	; 0x40
 80061bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061be:	f107 0318 	add.w	r3, r7, #24
 80061c2:	2228      	movs	r2, #40	; 0x28
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f850 	bl	800726c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	605a      	str	r2, [r3, #4]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061da:	2301      	movs	r3, #1
 80061dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80061e4:	2300      	movs	r3, #0
 80061e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061e8:	2301      	movs	r3, #1
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061ec:	2302      	movs	r3, #2
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80061f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061fc:	f107 0318 	add.w	r3, r7, #24
 8006200:	4618      	mov	r0, r3
 8006202:	f7fc fef5 	bl	8002ff0 <HAL_RCC_OscConfig>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800620c:	f000 fa38 	bl	8006680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006210:	230f      	movs	r3, #15
 8006212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006214:	2302      	movs	r3, #2
 8006216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800621c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f7fd f960 	bl	80034f0 <HAL_RCC_ClockConfig>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006236:	f000 fa23 	bl	8006680 <Error_Handler>
  }
}
 800623a:	bf00      	nop
 800623c:	3740      	adds	r7, #64	; 0x40
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <MX_I2C1_Init+0x50>)
 800624a:	4a13      	ldr	r2, [pc, #76]	; (8006298 <MX_I2C1_Init+0x54>)
 800624c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800624e:	4b11      	ldr	r3, [pc, #68]	; (8006294 <MX_I2C1_Init+0x50>)
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <MX_I2C1_Init+0x58>)
 8006252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <MX_I2C1_Init+0x50>)
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800625a:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <MX_I2C1_Init+0x50>)
 800625c:	2200      	movs	r2, #0
 800625e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <MX_I2C1_Init+0x50>)
 8006262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <MX_I2C1_Init+0x50>)
 800626a:	2200      	movs	r2, #0
 800626c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <MX_I2C1_Init+0x50>)
 8006270:	2200      	movs	r2, #0
 8006272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <MX_I2C1_Init+0x50>)
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <MX_I2C1_Init+0x50>)
 800627c:	2200      	movs	r2, #0
 800627e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006280:	4804      	ldr	r0, [pc, #16]	; (8006294 <MX_I2C1_Init+0x50>)
 8006282:	f7fb fc7f 	bl	8001b84 <HAL_I2C_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800628c:	f000 f9f8 	bl	8006680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000740 	.word	0x20000740
 8006298:	40005400 	.word	0x40005400
 800629c:	00061a80 	.word	0x00061a80

080062a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80062a4:	4b18      	ldr	r3, [pc, #96]	; (8006308 <MX_SPI2_Init+0x68>)
 80062a6:	4a19      	ldr	r2, [pc, #100]	; (800630c <MX_SPI2_Init+0x6c>)
 80062a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <MX_SPI2_Init+0x68>)
 80062ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <MX_SPI2_Init+0x68>)
 80062b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80062ba:	4b13      	ldr	r3, [pc, #76]	; (8006308 <MX_SPI2_Init+0x68>)
 80062bc:	2200      	movs	r2, #0
 80062be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <MX_SPI2_Init+0x68>)
 80062c2:	2202      	movs	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <MX_SPI2_Init+0x68>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80062cc:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <MX_SPI2_Init+0x68>)
 80062ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <MX_SPI2_Init+0x68>)
 80062d6:	2228      	movs	r2, #40	; 0x28
 80062d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <MX_SPI2_Init+0x68>)
 80062dc:	2280      	movs	r2, #128	; 0x80
 80062de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <MX_SPI2_Init+0x68>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <MX_SPI2_Init+0x68>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <MX_SPI2_Init+0x68>)
 80062ee:	220a      	movs	r2, #10
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062f2:	4805      	ldr	r0, [pc, #20]	; (8006308 <MX_SPI2_Init+0x68>)
 80062f4:	f7fd fa96 	bl	8003824 <HAL_SPI_Init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80062fe:	f000 f9bf 	bl	8006680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006302:	bf00      	nop
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200006a8 	.word	0x200006a8
 800630c:	40003800 	.word	0x40003800

08006310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b096      	sub	sp, #88	; 0x58
 8006314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	605a      	str	r2, [r3, #4]
 8006320:	609a      	str	r2, [r3, #8]
 8006322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800632e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	611a      	str	r2, [r3, #16]
 800633e:	615a      	str	r2, [r3, #20]
 8006340:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	2220      	movs	r2, #32
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f000 ff8f 	bl	800726c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800634e:	4b44      	ldr	r3, [pc, #272]	; (8006460 <MX_TIM1_Init+0x150>)
 8006350:	4a44      	ldr	r2, [pc, #272]	; (8006464 <MX_TIM1_Init+0x154>)
 8006352:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8006354:	4b42      	ldr	r3, [pc, #264]	; (8006460 <MX_TIM1_Init+0x150>)
 8006356:	f240 22cf 	movw	r2, #719	; 0x2cf
 800635a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800635c:	4b40      	ldr	r3, [pc, #256]	; (8006460 <MX_TIM1_Init+0x150>)
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8006362:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <MX_TIM1_Init+0x150>)
 8006364:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800636a:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <MX_TIM1_Init+0x150>)
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8006370:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <MX_TIM1_Init+0x150>)
 8006372:	2203      	movs	r2, #3
 8006374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006376:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <MX_TIM1_Init+0x150>)
 8006378:	2200      	movs	r2, #0
 800637a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800637c:	4838      	ldr	r0, [pc, #224]	; (8006460 <MX_TIM1_Init+0x150>)
 800637e:	f7fd ff6b 	bl	8004258 <HAL_TIM_Base_Init>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006388:	f000 f97a 	bl	8006680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800638c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006390:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006396:	4619      	mov	r1, r3
 8006398:	4831      	ldr	r0, [pc, #196]	; (8006460 <MX_TIM1_Init+0x150>)
 800639a:	f7fe fa05 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80063a4:	f000 f96c 	bl	8006680 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80063a8:	482d      	ldr	r0, [pc, #180]	; (8006460 <MX_TIM1_Init+0x150>)
 80063aa:	f7fd ffa3 	bl	80042f4 <HAL_TIM_OC_Init>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80063b4:	f000 f964 	bl	8006680 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80063b8:	2108      	movs	r1, #8
 80063ba:	4829      	ldr	r0, [pc, #164]	; (8006460 <MX_TIM1_Init+0x150>)
 80063bc:	f7fe f846 	bl	800444c <HAL_TIM_OnePulse_Init>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80063c6:	f000 f95b 	bl	8006680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80063d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063d6:	4619      	mov	r1, r3
 80063d8:	4821      	ldr	r0, [pc, #132]	; (8006460 <MX_TIM1_Init+0x150>)
 80063da:	f7fe fd71 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80063e4:	f000 f94c 	bl	8006680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80063e8:	2330      	movs	r3, #48	; 0x30
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25000;
 80063ec:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80063f2:	2302      	movs	r3, #2
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063f6:	2300      	movs	r3, #0
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063fe:	2300      	movs	r3, #0
 8006400:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	4619      	mov	r1, r3
 800640e:	4814      	ldr	r0, [pc, #80]	; (8006460 <MX_TIM1_Init+0x150>)
 8006410:	f7fe f96a 	bl	80046e8 <HAL_TIM_OC_ConfigChannel>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800641a:	f000 f931 	bl	8006680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4807      	ldr	r0, [pc, #28]	; (8006460 <MX_TIM1_Init+0x150>)
 8006442:	f7fe fd81 	bl	8004f48 <HAL_TIMEx_ConfigBreakDeadTime>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800644c:	f000 f918 	bl	8006680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006450:	4803      	ldr	r0, [pc, #12]	; (8006460 <MX_TIM1_Init+0x150>)
 8006452:	f000 fcab 	bl	8006dac <HAL_TIM_MspPostInit>

}
 8006456:	bf00      	nop
 8006458:	3758      	adds	r7, #88	; 0x58
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200007d8 	.word	0x200007d8
 8006464:	40012c00 	.word	0x40012c00

08006468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	605a      	str	r2, [r3, #4]
 8006478:	609a      	str	r2, [r3, #8]
 800647a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800647c:	463b      	mov	r3, r7
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <MX_TIM4_Init+0x94>)
 8006486:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <MX_TIM4_Init+0x98>)
 8006488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 800648a:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <MX_TIM4_Init+0x94>)
 800648c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006490:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006492:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <MX_TIM4_Init+0x94>)
 8006494:	2200      	movs	r2, #0
 8006496:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8006498:	4b18      	ldr	r3, [pc, #96]	; (80064fc <MX_TIM4_Init+0x94>)
 800649a:	f242 720f 	movw	r2, #9999	; 0x270f
 800649e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064a0:	4b16      	ldr	r3, [pc, #88]	; (80064fc <MX_TIM4_Init+0x94>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064a6:	4b15      	ldr	r3, [pc, #84]	; (80064fc <MX_TIM4_Init+0x94>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80064ac:	4813      	ldr	r0, [pc, #76]	; (80064fc <MX_TIM4_Init+0x94>)
 80064ae:	f7fd fed3 	bl	8004258 <HAL_TIM_Base_Init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80064b8:	f000 f8e2 	bl	8006680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4619      	mov	r1, r3
 80064c8:	480c      	ldr	r0, [pc, #48]	; (80064fc <MX_TIM4_Init+0x94>)
 80064ca:	f7fe f96d 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80064d4:	f000 f8d4 	bl	8006680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064d8:	2300      	movs	r3, #0
 80064da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80064e0:	463b      	mov	r3, r7
 80064e2:	4619      	mov	r1, r3
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <MX_TIM4_Init+0x94>)
 80064e6:	f7fe fceb 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80064f0:	f000 f8c6 	bl	8006680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000700 	.word	0x20000700
 8006500:	40000800 	.word	0x40000800

08006504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <MX_USART2_UART_Init+0x50>)
 800650c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 8006510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006516:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 800651e:	2200      	movs	r2, #0
 8006520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 8006524:	2200      	movs	r2, #0
 8006526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 800652a:	220c      	movs	r2, #12
 800652c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 8006530:	2200      	movs	r2, #0
 8006532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 8006536:	2200      	movs	r2, #0
 8006538:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800653a:	4805      	ldr	r0, [pc, #20]	; (8006550 <MX_USART2_UART_Init+0x4c>)
 800653c:	f7fe fd67 	bl	800500e <HAL_HalfDuplex_Init>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006546:	f000 f89b 	bl	8006680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000818 	.word	0x20000818
 8006554:	40004400 	.word	0x40004400

08006558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800655e:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <MX_DMA_Init+0x48>)
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	4a0f      	ldr	r2, [pc, #60]	; (80065a0 <MX_DMA_Init+0x48>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	6153      	str	r3, [r2, #20]
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <MX_DMA_Init+0x48>)
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	2010      	movs	r0, #16
 800657c:	f7fa ffcf 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8006580:	2010      	movs	r0, #16
 8006582:	f7fa ffe8 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8006586:	2200      	movs	r2, #0
 8006588:	2100      	movs	r1, #0
 800658a:	2011      	movs	r0, #17
 800658c:	f7fa ffc7 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8006590:	2011      	movs	r0, #17
 8006592:	f7fa ffe0 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000

080065a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	605a      	str	r2, [r3, #4]
 80065b4:	609a      	str	r2, [r3, #8]
 80065b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065b8:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065be:	f043 0310 	orr.w	r3, r3, #16
 80065c2:	6193      	str	r3, [r2, #24]
 80065c4:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065d0:	4b28      	ldr	r3, [pc, #160]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065d6:	f043 0320 	orr.w	r3, r3, #32
 80065da:	6193      	str	r3, [r2, #24]
 80065dc:	4b25      	ldr	r3, [pc, #148]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e8:	4b22      	ldr	r3, [pc, #136]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065ee:	f043 0304 	orr.w	r3, r3, #4
 80065f2:	6193      	str	r3, [r2, #24]
 80065f4:	4b1f      	ldr	r3, [pc, #124]	; (8006674 <MX_GPIO_Init+0xd0>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <MX_GPIO_Init+0xd0>)
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <MX_GPIO_Init+0xd0>)
 8006606:	f043 0308 	orr.w	r3, r3, #8
 800660a:	6193      	str	r3, [r2, #24]
 800660c:	4b19      	ldr	r3, [pc, #100]	; (8006674 <MX_GPIO_Init+0xd0>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006618:	2200      	movs	r2, #0
 800661a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800661e:	4816      	ldr	r0, [pc, #88]	; (8006678 <MX_GPIO_Init+0xd4>)
 8006620:	f7fb fa98 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8006624:	2200      	movs	r2, #0
 8006626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800662a:	4814      	ldr	r0, [pc, #80]	; (800667c <MX_GPIO_Init+0xd8>)
 800662c:	f7fb fa92 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006636:	2301      	movs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800663e:	2302      	movs	r3, #2
 8006640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006642:	f107 0310 	add.w	r3, r7, #16
 8006646:	4619      	mov	r1, r3
 8006648:	480b      	ldr	r0, [pc, #44]	; (8006678 <MX_GPIO_Init+0xd4>)
 800664a:	f7fb f8ff 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800664e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006654:	2301      	movs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800665c:	2303      	movs	r3, #3
 800665e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006660:	f107 0310 	add.w	r3, r7, #16
 8006664:	4619      	mov	r1, r3
 8006666:	4805      	ldr	r0, [pc, #20]	; (800667c <MX_GPIO_Init+0xd8>)
 8006668:	f7fb f8f0 	bl	800184c <HAL_GPIO_Init>

}
 800666c:	bf00      	nop
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40021000 	.word	0x40021000
 8006678:	40011000 	.word	0x40011000
 800667c:	40010c00 	.word	0x40010c00

08006680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006692:	f000 fa1f 	bl	8006ad4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006696:	f644 6320 	movw	r3, #20000	; 0x4e20
 800669a:	2201      	movs	r2, #1
 800669c:	2178      	movs	r1, #120	; 0x78
 800669e:	485b      	ldr	r0, [pc, #364]	; (800680c <SSD1306_Init+0x180>)
 80066a0:	f7fb ffd8 	bl	8002654 <HAL_I2C_IsDeviceReady>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e0a9      	b.n	8006802 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80066ae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80066b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80066b4:	e002      	b.n	80066bc <SSD1306_Init+0x30>
		p--;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f9      	bne.n	80066b6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80066c2:	22ae      	movs	r2, #174	; 0xae
 80066c4:	2100      	movs	r1, #0
 80066c6:	2078      	movs	r0, #120	; 0x78
 80066c8:	f000 fa60 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80066cc:	2220      	movs	r2, #32
 80066ce:	2100      	movs	r1, #0
 80066d0:	2078      	movs	r0, #120	; 0x78
 80066d2:	f000 fa5b 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80066d6:	2210      	movs	r2, #16
 80066d8:	2100      	movs	r1, #0
 80066da:	2078      	movs	r0, #120	; 0x78
 80066dc:	f000 fa56 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80066e0:	22b0      	movs	r2, #176	; 0xb0
 80066e2:	2100      	movs	r1, #0
 80066e4:	2078      	movs	r0, #120	; 0x78
 80066e6:	f000 fa51 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80066ea:	22c8      	movs	r2, #200	; 0xc8
 80066ec:	2100      	movs	r1, #0
 80066ee:	2078      	movs	r0, #120	; 0x78
 80066f0:	f000 fa4c 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	2078      	movs	r0, #120	; 0x78
 80066fa:	f000 fa47 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80066fe:	2210      	movs	r2, #16
 8006700:	2100      	movs	r1, #0
 8006702:	2078      	movs	r0, #120	; 0x78
 8006704:	f000 fa42 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006708:	2240      	movs	r2, #64	; 0x40
 800670a:	2100      	movs	r1, #0
 800670c:	2078      	movs	r0, #120	; 0x78
 800670e:	f000 fa3d 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006712:	2281      	movs	r2, #129	; 0x81
 8006714:	2100      	movs	r1, #0
 8006716:	2078      	movs	r0, #120	; 0x78
 8006718:	f000 fa38 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800671c:	22ff      	movs	r2, #255	; 0xff
 800671e:	2100      	movs	r1, #0
 8006720:	2078      	movs	r0, #120	; 0x78
 8006722:	f000 fa33 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006726:	22a1      	movs	r2, #161	; 0xa1
 8006728:	2100      	movs	r1, #0
 800672a:	2078      	movs	r0, #120	; 0x78
 800672c:	f000 fa2e 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006730:	22a6      	movs	r2, #166	; 0xa6
 8006732:	2100      	movs	r1, #0
 8006734:	2078      	movs	r0, #120	; 0x78
 8006736:	f000 fa29 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800673a:	22a8      	movs	r2, #168	; 0xa8
 800673c:	2100      	movs	r1, #0
 800673e:	2078      	movs	r0, #120	; 0x78
 8006740:	f000 fa24 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	2100      	movs	r1, #0
 8006748:	2078      	movs	r0, #120	; 0x78
 800674a:	f000 fa1f 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800674e:	22a4      	movs	r2, #164	; 0xa4
 8006750:	2100      	movs	r1, #0
 8006752:	2078      	movs	r0, #120	; 0x78
 8006754:	f000 fa1a 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006758:	22d3      	movs	r2, #211	; 0xd3
 800675a:	2100      	movs	r1, #0
 800675c:	2078      	movs	r0, #120	; 0x78
 800675e:	f000 fa15 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	2078      	movs	r0, #120	; 0x78
 8006768:	f000 fa10 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800676c:	22d5      	movs	r2, #213	; 0xd5
 800676e:	2100      	movs	r1, #0
 8006770:	2078      	movs	r0, #120	; 0x78
 8006772:	f000 fa0b 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006776:	22f0      	movs	r2, #240	; 0xf0
 8006778:	2100      	movs	r1, #0
 800677a:	2078      	movs	r0, #120	; 0x78
 800677c:	f000 fa06 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006780:	22d9      	movs	r2, #217	; 0xd9
 8006782:	2100      	movs	r1, #0
 8006784:	2078      	movs	r0, #120	; 0x78
 8006786:	f000 fa01 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800678a:	2222      	movs	r2, #34	; 0x22
 800678c:	2100      	movs	r1, #0
 800678e:	2078      	movs	r0, #120	; 0x78
 8006790:	f000 f9fc 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006794:	22da      	movs	r2, #218	; 0xda
 8006796:	2100      	movs	r1, #0
 8006798:	2078      	movs	r0, #120	; 0x78
 800679a:	f000 f9f7 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800679e:	2212      	movs	r2, #18
 80067a0:	2100      	movs	r1, #0
 80067a2:	2078      	movs	r0, #120	; 0x78
 80067a4:	f000 f9f2 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80067a8:	22db      	movs	r2, #219	; 0xdb
 80067aa:	2100      	movs	r1, #0
 80067ac:	2078      	movs	r0, #120	; 0x78
 80067ae:	f000 f9ed 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80067b2:	2220      	movs	r2, #32
 80067b4:	2100      	movs	r1, #0
 80067b6:	2078      	movs	r0, #120	; 0x78
 80067b8:	f000 f9e8 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80067bc:	228d      	movs	r2, #141	; 0x8d
 80067be:	2100      	movs	r1, #0
 80067c0:	2078      	movs	r0, #120	; 0x78
 80067c2:	f000 f9e3 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80067c6:	2214      	movs	r2, #20
 80067c8:	2100      	movs	r1, #0
 80067ca:	2078      	movs	r0, #120	; 0x78
 80067cc:	f000 f9de 	bl	8006b8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80067d0:	22af      	movs	r2, #175	; 0xaf
 80067d2:	2100      	movs	r1, #0
 80067d4:	2078      	movs	r0, #120	; 0x78
 80067d6:	f000 f9d9 	bl	8006b8c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80067da:	222e      	movs	r2, #46	; 0x2e
 80067dc:	2100      	movs	r1, #0
 80067de:	2078      	movs	r0, #120	; 0x78
 80067e0:	f000 f9d4 	bl	8006b8c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80067e4:	2000      	movs	r0, #0
 80067e6:	f000 f843 	bl	8006870 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80067ea:	f000 f813 	bl	8006814 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <SSD1306_Init+0x184>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <SSD1306_Init+0x184>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <SSD1306_Init+0x184>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006800:	2301      	movs	r3, #1
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000740 	.word	0x20000740
 8006810:	2000060c 	.word	0x2000060c

08006814 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800681a:	2300      	movs	r3, #0
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	e01d      	b.n	800685c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	3b50      	subs	r3, #80	; 0x50
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	2100      	movs	r1, #0
 800682a:	2078      	movs	r0, #120	; 0x78
 800682c:	f000 f9ae 	bl	8006b8c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	2078      	movs	r0, #120	; 0x78
 8006836:	f000 f9a9 	bl	8006b8c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800683a:	2210      	movs	r2, #16
 800683c:	2100      	movs	r1, #0
 800683e:	2078      	movs	r0, #120	; 0x78
 8006840:	f000 f9a4 	bl	8006b8c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	01db      	lsls	r3, r3, #7
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <SSD1306_UpdateScreen+0x58>)
 800684a:	441a      	add	r2, r3
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	2140      	movs	r1, #64	; 0x40
 8006850:	2078      	movs	r0, #120	; 0x78
 8006852:	f000 f953 	bl	8006afc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	3301      	adds	r3, #1
 800685a:	71fb      	strb	r3, [r7, #7]
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	2b07      	cmp	r3, #7
 8006860:	d9de      	bls.n	8006820 <SSD1306_UpdateScreen+0xc>
	}
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	2000020c 	.word	0x2000020c

08006870 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <SSD1306_Fill+0x14>
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <SSD1306_Fill+0x16>
 8006884:	23ff      	movs	r3, #255	; 0xff
 8006886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800688a:	4619      	mov	r1, r3
 800688c:	4803      	ldr	r0, [pc, #12]	; (800689c <SSD1306_Fill+0x2c>)
 800688e:	f000 fced 	bl	800726c <memset>
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2000020c 	.word	0x2000020c

080068a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	80fb      	strh	r3, [r7, #6]
 80068aa:	460b      	mov	r3, r1
 80068ac:	80bb      	strh	r3, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	70fb      	strb	r3, [r7, #3]
	if (
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b7f      	cmp	r3, #127	; 0x7f
 80068b6:	d848      	bhi.n	800694a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80068b8:	88bb      	ldrh	r3, [r7, #4]
 80068ba:	2b3f      	cmp	r3, #63	; 0x3f
 80068bc:	d845      	bhi.n	800694a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80068be:	4b25      	ldr	r3, [pc, #148]	; (8006954 <SSD1306_DrawPixel+0xb4>)
 80068c0:	791b      	ldrb	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d006      	beq.n	80068d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d11a      	bne.n	8006910 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	88bb      	ldrh	r3, [r7, #4]
 80068de:	08db      	lsrs	r3, r3, #3
 80068e0:	b298      	uxth	r0, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	01db      	lsls	r3, r3, #7
 80068e6:	4413      	add	r3, r2
 80068e8:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <SSD1306_DrawPixel+0xb8>)
 80068ea:	5cd3      	ldrb	r3, [r2, r3]
 80068ec:	b25a      	sxtb	r2, r3
 80068ee:	88bb      	ldrh	r3, [r7, #4]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	b259      	sxtb	r1, r3
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	4603      	mov	r3, r0
 8006904:	01db      	lsls	r3, r3, #7
 8006906:	4413      	add	r3, r2
 8006908:	b2c9      	uxtb	r1, r1
 800690a:	4a13      	ldr	r2, [pc, #76]	; (8006958 <SSD1306_DrawPixel+0xb8>)
 800690c:	54d1      	strb	r1, [r2, r3]
 800690e:	e01d      	b.n	800694c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006910:	88fa      	ldrh	r2, [r7, #6]
 8006912:	88bb      	ldrh	r3, [r7, #4]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	b298      	uxth	r0, r3
 8006918:	4603      	mov	r3, r0
 800691a:	01db      	lsls	r3, r3, #7
 800691c:	4413      	add	r3, r2
 800691e:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <SSD1306_DrawPixel+0xb8>)
 8006920:	5cd3      	ldrb	r3, [r2, r3]
 8006922:	b25a      	sxtb	r2, r3
 8006924:	88bb      	ldrh	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2101      	movs	r1, #1
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	b25b      	sxtb	r3, r3
 8006932:	43db      	mvns	r3, r3
 8006934:	b25b      	sxtb	r3, r3
 8006936:	4013      	ands	r3, r2
 8006938:	b259      	sxtb	r1, r3
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	4603      	mov	r3, r0
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	4413      	add	r3, r2
 8006942:	b2c9      	uxtb	r1, r1
 8006944:	4a04      	ldr	r2, [pc, #16]	; (8006958 <SSD1306_DrawPixel+0xb8>)
 8006946:	54d1      	strb	r1, [r2, r3]
 8006948:	e000      	b.n	800694c <SSD1306_DrawPixel+0xac>
		return;
 800694a:	bf00      	nop
	}
}
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	2000060c 	.word	0x2000060c
 8006958:	2000020c 	.word	0x2000020c

0800695c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	460a      	mov	r2, r1
 8006966:	80fb      	strh	r3, [r7, #6]
 8006968:	4613      	mov	r3, r2
 800696a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800696c:	4a05      	ldr	r2, [pc, #20]	; (8006984 <SSD1306_GotoXY+0x28>)
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006972:	4a04      	ldr	r2, [pc, #16]	; (8006984 <SSD1306_GotoXY+0x28>)
 8006974:	88bb      	ldrh	r3, [r7, #4]
 8006976:	8053      	strh	r3, [r2, #2]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000060c 	.word	0x2000060c

08006988 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	71fb      	strb	r3, [r7, #7]
 8006994:	4613      	mov	r3, r2
 8006996:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006998:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <SSD1306_Putc+0xfc>)
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4413      	add	r3, r2
	if (
 80069a4:	2b7f      	cmp	r3, #127	; 0x7f
 80069a6:	dc07      	bgt.n	80069b8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80069a8:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <SSD1306_Putc+0xfc>)
 80069aa:	885b      	ldrh	r3, [r3, #2]
 80069ac:	461a      	mov	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80069b4:	2b3f      	cmp	r3, #63	; 0x3f
 80069b6:	dd01      	ble.n	80069bc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e05e      	b.n	8006a7a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e04b      	b.n	8006a5a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	3b20      	subs	r3, #32
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	7849      	ldrb	r1, [r1, #1]
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4619      	mov	r1, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	440b      	add	r3, r1
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	e030      	b.n	8006a48 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <SSD1306_Putc+0xfc>)
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	b298      	uxth	r0, r3
 8006a02:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <SSD1306_Putc+0xfc>)
 8006a04:	885a      	ldrh	r2, [r3, #2]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	79ba      	ldrb	r2, [r7, #6]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7ff ff45 	bl	80068a0 <SSD1306_DrawPixel>
 8006a16:	e014      	b.n	8006a42 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <SSD1306_Putc+0xfc>)
 8006a1a:	881a      	ldrh	r2, [r3, #0]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	b298      	uxth	r0, r3
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <SSD1306_Putc+0xfc>)
 8006a26:	885a      	ldrh	r2, [r3, #2]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b299      	uxth	r1, r3
 8006a30:	79bb      	ldrb	r3, [r7, #6]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf0c      	ite	eq
 8006a36:	2301      	moveq	r3, #1
 8006a38:	2300      	movne	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f7ff ff2f 	bl	80068a0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	3301      	adds	r3, #1
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d3c8      	bcc.n	80069e6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	3301      	adds	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d3ad      	bcc.n	80069c2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <SSD1306_Putc+0xfc>)
 8006a68:	881a      	ldrh	r2, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <SSD1306_Putc+0xfc>)
 8006a76:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8006a78:	79fb      	ldrb	r3, [r7, #7]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	2000060c 	.word	0x2000060c

08006a88 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006a96:	e012      	b.n	8006abe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	79fa      	ldrb	r2, [r7, #7]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff ff71 	bl	8006988 <SSD1306_Putc>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d002      	beq.n	8006ab8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	e008      	b.n	8006aca <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e8      	bne.n	8006a98 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <ssd1306_I2C_Init+0x24>)
 8006adc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006ade:	e002      	b.n	8006ae6 <ssd1306_I2C_Init+0x12>
		p--;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f9      	bne.n	8006ae0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	0003d090 	.word	0x0003d090

08006afc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b0c7      	sub	sp, #284	; 0x11c
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	4639      	mov	r1, r7
 8006b08:	600a      	str	r2, [r1, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	1dfb      	adds	r3, r7, #7
 8006b0e:	4622      	mov	r2, r4
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	1dbb      	adds	r3, r7, #6
 8006b14:	4602      	mov	r2, r0
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	1d3b      	adds	r3, r7, #4
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8006b1e:	f107 030c 	add.w	r3, r7, #12
 8006b22:	1dba      	adds	r2, r7, #6
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006b2e:	e010      	b.n	8006b52 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8006b30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006b34:	463a      	mov	r2, r7
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	441a      	add	r2, r3
 8006b3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006b3e:	3301      	adds	r3, #1
 8006b40:	7811      	ldrb	r1, [r2, #0]
 8006b42:	f107 020c 	add.w	r2, r7, #12
 8006b46:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8006b48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8006b52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	1d3a      	adds	r2, r7, #4
 8006b5a:	8812      	ldrh	r2, [r2, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d8e7      	bhi.n	8006b30 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8006b60:	1dfb      	adds	r3, r7, #7
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b299      	uxth	r1, r3
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f107 020c 	add.w	r2, r7, #12
 8006b72:	200a      	movs	r0, #10
 8006b74:	9000      	str	r0, [sp, #0]
 8006b76:	4804      	ldr	r0, [pc, #16]	; (8006b88 <ssd1306_I2C_WriteMulti+0x8c>)
 8006b78:	f7fb f938 	bl	8001dec <HAL_I2C_Master_Transmit>
}
 8006b7c:	bf00      	nop
 8006b7e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd90      	pop	{r4, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000740 	.word	0x20000740

08006b8c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	4603      	mov	r3, r0
 8006b94:	71fb      	strb	r3, [r7, #7]
 8006b96:	460b      	mov	r3, r1
 8006b98:	71bb      	strb	r3, [r7, #6]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006b9e:	79bb      	ldrb	r3, [r7, #6]
 8006ba0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006ba2:	797b      	ldrb	r3, [r7, #5]
 8006ba4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	f107 020c 	add.w	r2, r7, #12
 8006bae:	230a      	movs	r3, #10
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	4803      	ldr	r0, [pc, #12]	; (8006bc4 <ssd1306_I2C_Write+0x38>)
 8006bb6:	f7fb f919 	bl	8001dec <HAL_I2C_Master_Transmit>
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000740 	.word	0x20000740

08006bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <HAL_MspInit+0x5c>)
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <HAL_MspInit+0x5c>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6193      	str	r3, [r2, #24]
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_MspInit+0x5c>)
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <HAL_MspInit+0x5c>)
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <HAL_MspInit+0x5c>)
 8006bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	61d3      	str	r3, [r2, #28]
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <HAL_MspInit+0x5c>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_MspInit+0x60>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	4a04      	ldr	r2, [pc, #16]	; (8006c28 <HAL_MspInit+0x60>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40010000 	.word	0x40010000

08006c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <HAL_I2C_MspInit+0x70>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d123      	bne.n	8006c94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c52:	f043 0308 	orr.w	r3, r3, #8
 8006c56:	6193      	str	r3, [r2, #24]
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c64:	23c0      	movs	r3, #192	; 0xc0
 8006c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c68:	2312      	movs	r3, #18
 8006c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c70:	f107 0310 	add.w	r3, r7, #16
 8006c74:	4619      	mov	r1, r3
 8006c76:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <HAL_I2C_MspInit+0x78>)
 8006c78:	f7fa fde8 	bl	800184c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c86:	61d3      	str	r3, [r2, #28]
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <HAL_I2C_MspInit+0x74>)
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006c94:	bf00      	nop
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40005400 	.word	0x40005400
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40010c00 	.word	0x40010c00

08006ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb0:	f107 0310 	add.w	r3, r7, #16
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	609a      	str	r2, [r3, #8]
 8006cbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a16      	ldr	r2, [pc, #88]	; (8006d1c <HAL_SPI_MspInit+0x74>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d124      	bne.n	8006d12 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006cc8:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cd2:	61d3      	str	r3, [r2, #28]
 8006cd4:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006ce6:	f043 0308 	orr.w	r3, r3, #8
 8006cea:	6193      	str	r3, [r2, #24]
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_SPI_MspInit+0x78>)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006cf8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d02:	2303      	movs	r3, #3
 8006d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4805      	ldr	r0, [pc, #20]	; (8006d24 <HAL_SPI_MspInit+0x7c>)
 8006d0e:	f7fa fd9d 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006d12:	bf00      	nop
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40003800 	.word	0x40003800
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40010c00 	.word	0x40010c00

08006d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <HAL_TIM_Base_MspInit+0x78>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d114      	bne.n	8006d64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d44:	6193      	str	r3, [r2, #24]
 8006d46:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2100      	movs	r1, #0
 8006d56:	2019      	movs	r0, #25
 8006d58:	f7fa fbe1 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006d5c:	2019      	movs	r0, #25
 8006d5e:	f7fa fbfa 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006d62:	e018      	b.n	8006d96 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <HAL_TIM_Base_MspInit+0x80>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d113      	bne.n	8006d96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d74:	f043 0304 	orr.w	r3, r3, #4
 8006d78:	61d3      	str	r3, [r2, #28]
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_TIM_Base_MspInit+0x7c>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	201e      	movs	r0, #30
 8006d8c:	f7fa fbc7 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006d90:	201e      	movs	r0, #30
 8006d92:	f7fa fbe0 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40000800 	.word	0x40000800

08006dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <HAL_TIM_MspPostInit+0x5c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d118      	bne.n	8006dfe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <HAL_TIM_MspPostInit+0x60>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4a0e      	ldr	r2, [pc, #56]	; (8006e0c <HAL_TIM_MspPostInit+0x60>)
 8006dd2:	f043 0304 	orr.w	r3, r3, #4
 8006dd6:	6193      	str	r3, [r2, #24]
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <HAL_TIM_MspPostInit+0x60>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dea:	2302      	movs	r3, #2
 8006dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dee:	2302      	movs	r3, #2
 8006df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df2:	f107 0310 	add.w	r3, r7, #16
 8006df6:	4619      	mov	r1, r3
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <HAL_TIM_MspPostInit+0x64>)
 8006dfa:	f7fa fd27 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006dfe:	bf00      	nop
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	40010800 	.word	0x40010800

08006e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1c:	f107 0310 	add.w	r3, r7, #16
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3b      	ldr	r2, [pc, #236]	; (8006f1c <HAL_UART_MspInit+0x108>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d16f      	bne.n	8006f14 <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e34:	4b3a      	ldr	r3, [pc, #232]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	4a39      	ldr	r2, [pc, #228]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3e:	61d3      	str	r3, [r2, #28]
 8006e40:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e4c:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	4a33      	ldr	r2, [pc, #204]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e52:	f043 0304 	orr.w	r3, r3, #4
 8006e56:	6193      	str	r3, [r2, #24]
 8006e58:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <HAL_UART_MspInit+0x10c>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e64:	2304      	movs	r3, #4
 8006e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e68:	2312      	movs	r3, #18
 8006e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e70:	f107 0310 	add.w	r3, r7, #16
 8006e74:	4619      	mov	r1, r3
 8006e76:	482b      	ldr	r0, [pc, #172]	; (8006f24 <HAL_UART_MspInit+0x110>)
 8006e78:	f7fa fce8 	bl	800184c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006e7c:	4b2a      	ldr	r3, [pc, #168]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e7e:	4a2b      	ldr	r2, [pc, #172]	; (8006f2c <HAL_UART_MspInit+0x118>)
 8006e80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e82:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e84:	2210      	movs	r2, #16
 8006e86:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e8e:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e90:	2280      	movs	r2, #128	; 0x80
 8006e92:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e94:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e9a:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006eac:	481e      	ldr	r0, [pc, #120]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006eae:	f7fa fb6d 	bl	800158c <HAL_DMA_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8006eb8:	f7ff fbe2 	bl	8006680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1a      	ldr	r2, [pc, #104]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec2:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <HAL_UART_MspInit+0x114>)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006eca:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <HAL_UART_MspInit+0x120>)
 8006ecc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ece:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ed4:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ee0:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006ef8:	480d      	ldr	r0, [pc, #52]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006efa:	f7fa fb47 	bl	800158c <HAL_DMA_Init>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8006f04:	f7ff fbbc 	bl	8006680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <HAL_UART_MspInit+0x11c>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f14:	bf00      	nop
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40004400 	.word	0x40004400
 8006f20:	40021000 	.word	0x40021000
 8006f24:	40010800 	.word	0x40010800
 8006f28:	20000794 	.word	0x20000794
 8006f2c:	40020080 	.word	0x40020080
 8006f30:	20000664 	.word	0x20000664
 8006f34:	4002006c 	.word	0x4002006c

08006f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr

08006f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f48:	e7fe      	b.n	8006f48 <HardFault_Handler+0x4>

08006f4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f4e:	e7fe      	b.n	8006f4e <MemManage_Handler+0x4>

08006f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f54:	e7fe      	b.n	8006f54 <BusFault_Handler+0x4>

08006f56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f56:	b480      	push	{r7}
 8006f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f5a:	e7fe      	b.n	8006f5a <UsageFault_Handler+0x4>

08006f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f6c:	bf00      	nop
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f84:	f7fa f9d8 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f88:	bf00      	nop
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006f90:	4802      	ldr	r0, [pc, #8]	; (8006f9c <DMA1_Channel6_IRQHandler+0x10>)
 8006f92:	f7fa fb55 	bl	8001640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000664 	.word	0x20000664

08006fa0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006fa4:	4802      	ldr	r0, [pc, #8]	; (8006fb0 <DMA1_Channel7_IRQHandler+0x10>)
 8006fa6:	f7fa fb4b 	bl	8001640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000794 	.word	0x20000794

08006fb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006fb8:	4802      	ldr	r0, [pc, #8]	; (8006fc4 <TIM1_UP_IRQHandler+0x10>)
 8006fba:	f7fd fa8c 	bl	80044d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200007d8 	.word	0x200007d8

08006fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006fcc:	4802      	ldr	r0, [pc, #8]	; (8006fd8 <TIM4_IRQHandler+0x10>)
 8006fce:	f7fd fa82 	bl	80044d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000700 	.word	0x20000700

08006fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
	return 1;
 8006fe0:	2301      	movs	r3, #1
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <_kill>:

int _kill(int pid, int sig)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006ff4:	f000 f902 	bl	80071fc <__errno>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2216      	movs	r2, #22
 8006ffc:	601a      	str	r2, [r3, #0]
	return -1;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <_exit>:

void _exit (int status)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007012:	f04f 31ff 	mov.w	r1, #4294967295
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ffe7 	bl	8006fea <_kill>
	while (1) {}		/* Make sure we hang here */
 800701c:	e7fe      	b.n	800701c <_exit+0x12>

0800701e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e00a      	b.n	8007046 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007030:	f3af 8000 	nop.w
 8007034:	4601      	mov	r1, r0
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	60ba      	str	r2, [r7, #8]
 800703c:	b2ca      	uxtb	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3301      	adds	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	dbf0      	blt.n	8007030 <_read+0x12>
	}

return len;
 800704e:	687b      	ldr	r3, [r7, #4]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e009      	b.n	800707e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	60ba      	str	r2, [r7, #8]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3301      	adds	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	dbf1      	blt.n	800706a <_write+0x12>
	}
	return len;
 8007086:	687b      	ldr	r3, [r7, #4]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_close>:

int _close(int file)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	return -1;
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070b6:	605a      	str	r2, [r3, #4]
	return 0;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <_isatty>:

int _isatty(int file)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	return 1;
 80070cc:	2301      	movs	r3, #1
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80070f8:	4b11      	ldr	r3, [pc, #68]	; (8007140 <_sbrk+0x50>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <_sbrk+0x16>
		heap_end = &end;
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <_sbrk+0x50>)
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <_sbrk+0x54>)
 8007104:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007106:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <_sbrk+0x50>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800710c:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <_sbrk+0x50>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	466a      	mov	r2, sp
 8007116:	4293      	cmp	r3, r2
 8007118:	d907      	bls.n	800712a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800711a:	f000 f86f 	bl	80071fc <__errno>
 800711e:	4603      	mov	r3, r0
 8007120:	220c      	movs	r2, #12
 8007122:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007124:	f04f 33ff 	mov.w	r3, #4294967295
 8007128:	e006      	b.n	8007138 <_sbrk+0x48>
	}

	heap_end += incr;
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <_sbrk+0x50>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	4a03      	ldr	r2, [pc, #12]	; (8007140 <_sbrk+0x50>)
 8007134:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000614 	.word	0x20000614
 8007144:	20000868 	.word	0x20000868

08007148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800714c:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <SystemInit+0x5c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a14      	ldr	r2, [pc, #80]	; (80071a4 <SystemInit+0x5c>)
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007158:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <SystemInit+0x5c>)
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	4911      	ldr	r1, [pc, #68]	; (80071a4 <SystemInit+0x5c>)
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <SystemInit+0x60>)
 8007160:	4013      	ands	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <SystemInit+0x5c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <SystemInit+0x5c>)
 800716a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800716e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007172:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007174:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <SystemInit+0x5c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <SystemInit+0x5c>)
 800717a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <SystemInit+0x5c>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a07      	ldr	r2, [pc, #28]	; (80071a4 <SystemInit+0x5c>)
 8007186:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800718a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <SystemInit+0x5c>)
 800718e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007192:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <SystemInit+0x64>)
 8007196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800719a:	609a      	str	r2, [r3, #8]
#endif 
}
 800719c:	bf00      	nop
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	40021000 	.word	0x40021000
 80071a8:	f8ff0000 	.word	0xf8ff0000
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80071b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80071b2:	e003      	b.n	80071bc <LoopCopyDataInit>

080071b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80071b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80071b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80071ba:	3104      	adds	r1, #4

080071bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80071bc:	480a      	ldr	r0, [pc, #40]	; (80071e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80071be:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80071c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80071c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80071c4:	d3f6      	bcc.n	80071b4 <CopyDataInit>
  ldr r2, =_sbss
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80071c8:	e002      	b.n	80071d0 <LoopFillZerobss>

080071ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80071ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80071cc:	f842 3b04 	str.w	r3, [r2], #4

080071d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80071d0:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80071d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80071d4:	d3f9      	bcc.n	80071ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80071d6:	f7ff ffb7 	bl	8007148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071da:	f000 f815 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80071de:	f7fe ff41 	bl	8006064 <main>
  bx lr
 80071e2:	4770      	bx	lr
  ldr r3, =_sidata
 80071e4:	0800b8b4 	.word	0x0800b8b4
  ldr r0, =_sdata
 80071e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80071ec:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 80071f0:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 80071f4:	20000868 	.word	0x20000868

080071f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80071f8:	e7fe      	b.n	80071f8 <ADC1_2_IRQHandler>
	...

080071fc <__errno>:
 80071fc:	4b01      	ldr	r3, [pc, #4]	; (8007204 <__errno+0x8>)
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000020 	.word	0x20000020

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	2600      	movs	r6, #0
 800720c:	4d0c      	ldr	r5, [pc, #48]	; (8007240 <__libc_init_array+0x38>)
 800720e:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	f002 feba 	bl	8009f90 <_init>
 800721c:	2600      	movs	r6, #0
 800721e:	4d0a      	ldr	r5, [pc, #40]	; (8007248 <__libc_init_array+0x40>)
 8007220:	4c0a      	ldr	r4, [pc, #40]	; (800724c <__libc_init_array+0x44>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	0800b8ac 	.word	0x0800b8ac
 8007244:	0800b8ac 	.word	0x0800b8ac
 8007248:	0800b8ac 	.word	0x0800b8ac
 800724c:	0800b8b0 	.word	0x0800b8b0

08007250 <memcpy>:
 8007250:	440a      	add	r2, r1
 8007252:	4291      	cmp	r1, r2
 8007254:	f100 33ff 	add.w	r3, r0, #4294967295
 8007258:	d100      	bne.n	800725c <memcpy+0xc>
 800725a:	4770      	bx	lr
 800725c:	b510      	push	{r4, lr}
 800725e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007262:	4291      	cmp	r1, r2
 8007264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007268:	d1f9      	bne.n	800725e <memcpy+0xe>
 800726a:	bd10      	pop	{r4, pc}

0800726c <memset>:
 800726c:	4603      	mov	r3, r0
 800726e:	4402      	add	r2, r0
 8007270:	4293      	cmp	r3, r2
 8007272:	d100      	bne.n	8007276 <memset+0xa>
 8007274:	4770      	bx	lr
 8007276:	f803 1b01 	strb.w	r1, [r3], #1
 800727a:	e7f9      	b.n	8007270 <memset+0x4>

0800727c <__cvt>:
 800727c:	2b00      	cmp	r3, #0
 800727e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007282:	461f      	mov	r7, r3
 8007284:	bfbb      	ittet	lt
 8007286:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800728a:	461f      	movlt	r7, r3
 800728c:	2300      	movge	r3, #0
 800728e:	232d      	movlt	r3, #45	; 0x2d
 8007290:	b088      	sub	sp, #32
 8007292:	4614      	mov	r4, r2
 8007294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007296:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007298:	7013      	strb	r3, [r2, #0]
 800729a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800729c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80072a0:	f023 0820 	bic.w	r8, r3, #32
 80072a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a8:	d005      	beq.n	80072b6 <__cvt+0x3a>
 80072aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ae:	d100      	bne.n	80072b2 <__cvt+0x36>
 80072b0:	3501      	adds	r5, #1
 80072b2:	2302      	movs	r3, #2
 80072b4:	e000      	b.n	80072b8 <__cvt+0x3c>
 80072b6:	2303      	movs	r3, #3
 80072b8:	aa07      	add	r2, sp, #28
 80072ba:	9204      	str	r2, [sp, #16]
 80072bc:	aa06      	add	r2, sp, #24
 80072be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072c2:	e9cd 3500 	strd	r3, r5, [sp]
 80072c6:	4622      	mov	r2, r4
 80072c8:	463b      	mov	r3, r7
 80072ca:	f000 fce5 	bl	8007c98 <_dtoa_r>
 80072ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072d2:	4606      	mov	r6, r0
 80072d4:	d102      	bne.n	80072dc <__cvt+0x60>
 80072d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072d8:	07db      	lsls	r3, r3, #31
 80072da:	d522      	bpl.n	8007322 <__cvt+0xa6>
 80072dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072e0:	eb06 0905 	add.w	r9, r6, r5
 80072e4:	d110      	bne.n	8007308 <__cvt+0x8c>
 80072e6:	7833      	ldrb	r3, [r6, #0]
 80072e8:	2b30      	cmp	r3, #48	; 0x30
 80072ea:	d10a      	bne.n	8007302 <__cvt+0x86>
 80072ec:	2200      	movs	r2, #0
 80072ee:	2300      	movs	r3, #0
 80072f0:	4620      	mov	r0, r4
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f9 fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80072f8:	b918      	cbnz	r0, 8007302 <__cvt+0x86>
 80072fa:	f1c5 0501 	rsb	r5, r5, #1
 80072fe:	f8ca 5000 	str.w	r5, [sl]
 8007302:	f8da 3000 	ldr.w	r3, [sl]
 8007306:	4499      	add	r9, r3
 8007308:	2200      	movs	r2, #0
 800730a:	2300      	movs	r3, #0
 800730c:	4620      	mov	r0, r4
 800730e:	4639      	mov	r1, r7
 8007310:	f7f9 fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8007314:	b108      	cbz	r0, 800731a <__cvt+0x9e>
 8007316:	f8cd 901c 	str.w	r9, [sp, #28]
 800731a:	2230      	movs	r2, #48	; 0x30
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	454b      	cmp	r3, r9
 8007320:	d307      	bcc.n	8007332 <__cvt+0xb6>
 8007322:	4630      	mov	r0, r6
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007328:	1b9b      	subs	r3, r3, r6
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	b008      	add	sp, #32
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	9107      	str	r1, [sp, #28]
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e7f0      	b.n	800731c <__cvt+0xa0>

0800733a <__exponent>:
 800733a:	4603      	mov	r3, r0
 800733c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733e:	2900      	cmp	r1, #0
 8007340:	f803 2b02 	strb.w	r2, [r3], #2
 8007344:	bfb6      	itet	lt
 8007346:	222d      	movlt	r2, #45	; 0x2d
 8007348:	222b      	movge	r2, #43	; 0x2b
 800734a:	4249      	neglt	r1, r1
 800734c:	2909      	cmp	r1, #9
 800734e:	7042      	strb	r2, [r0, #1]
 8007350:	dd2b      	ble.n	80073aa <__exponent+0x70>
 8007352:	f10d 0407 	add.w	r4, sp, #7
 8007356:	46a4      	mov	ip, r4
 8007358:	270a      	movs	r7, #10
 800735a:	fb91 f6f7 	sdiv	r6, r1, r7
 800735e:	460a      	mov	r2, r1
 8007360:	46a6      	mov	lr, r4
 8007362:	fb07 1516 	mls	r5, r7, r6, r1
 8007366:	2a63      	cmp	r2, #99	; 0x63
 8007368:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800736c:	4631      	mov	r1, r6
 800736e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007376:	dcf0      	bgt.n	800735a <__exponent+0x20>
 8007378:	3130      	adds	r1, #48	; 0x30
 800737a:	f1ae 0502 	sub.w	r5, lr, #2
 800737e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007382:	4629      	mov	r1, r5
 8007384:	1c44      	adds	r4, r0, #1
 8007386:	4561      	cmp	r1, ip
 8007388:	d30a      	bcc.n	80073a0 <__exponent+0x66>
 800738a:	f10d 0209 	add.w	r2, sp, #9
 800738e:	eba2 020e 	sub.w	r2, r2, lr
 8007392:	4565      	cmp	r5, ip
 8007394:	bf88      	it	hi
 8007396:	2200      	movhi	r2, #0
 8007398:	4413      	add	r3, r2
 800739a:	1a18      	subs	r0, r3, r0
 800739c:	b003      	add	sp, #12
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073a8:	e7ed      	b.n	8007386 <__exponent+0x4c>
 80073aa:	2330      	movs	r3, #48	; 0x30
 80073ac:	3130      	adds	r1, #48	; 0x30
 80073ae:	7083      	strb	r3, [r0, #2]
 80073b0:	70c1      	strb	r1, [r0, #3]
 80073b2:	1d03      	adds	r3, r0, #4
 80073b4:	e7f1      	b.n	800739a <__exponent+0x60>
	...

080073b8 <_printf_float>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	b091      	sub	sp, #68	; 0x44
 80073be:	460c      	mov	r4, r1
 80073c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80073c4:	4616      	mov	r6, r2
 80073c6:	461f      	mov	r7, r3
 80073c8:	4605      	mov	r5, r0
 80073ca:	f001 fa53 	bl	8008874 <_localeconv_r>
 80073ce:	6803      	ldr	r3, [r0, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	f7f8 febc 	bl	8000150 <strlen>
 80073d8:	2300      	movs	r3, #0
 80073da:	930e      	str	r3, [sp, #56]	; 0x38
 80073dc:	f8d8 3000 	ldr.w	r3, [r8]
 80073e0:	900a      	str	r0, [sp, #40]	; 0x28
 80073e2:	3307      	adds	r3, #7
 80073e4:	f023 0307 	bic.w	r3, r3, #7
 80073e8:	f103 0208 	add.w	r2, r3, #8
 80073ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073f0:	f8d4 b000 	ldr.w	fp, [r4]
 80073f4:	f8c8 2000 	str.w	r2, [r8]
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007400:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007404:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007408:	930b      	str	r3, [sp, #44]	; 0x2c
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	4640      	mov	r0, r8
 8007410:	4b9c      	ldr	r3, [pc, #624]	; (8007684 <_printf_float+0x2cc>)
 8007412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007414:	f7f9 fafa 	bl	8000a0c <__aeabi_dcmpun>
 8007418:	bb70      	cbnz	r0, 8007478 <_printf_float+0xc0>
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	4640      	mov	r0, r8
 8007420:	4b98      	ldr	r3, [pc, #608]	; (8007684 <_printf_float+0x2cc>)
 8007422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007424:	f7f9 fad4 	bl	80009d0 <__aeabi_dcmple>
 8007428:	bb30      	cbnz	r0, 8007478 <_printf_float+0xc0>
 800742a:	2200      	movs	r2, #0
 800742c:	2300      	movs	r3, #0
 800742e:	4640      	mov	r0, r8
 8007430:	4651      	mov	r1, sl
 8007432:	f7f9 fac3 	bl	80009bc <__aeabi_dcmplt>
 8007436:	b110      	cbz	r0, 800743e <_printf_float+0x86>
 8007438:	232d      	movs	r3, #45	; 0x2d
 800743a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800743e:	4b92      	ldr	r3, [pc, #584]	; (8007688 <_printf_float+0x2d0>)
 8007440:	4892      	ldr	r0, [pc, #584]	; (800768c <_printf_float+0x2d4>)
 8007442:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007446:	bf94      	ite	ls
 8007448:	4698      	movls	r8, r3
 800744a:	4680      	movhi	r8, r0
 800744c:	2303      	movs	r3, #3
 800744e:	f04f 0a00 	mov.w	sl, #0
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	f02b 0304 	bic.w	r3, fp, #4
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	4633      	mov	r3, r6
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	9700      	str	r7, [sp, #0]
 8007462:	aa0f      	add	r2, sp, #60	; 0x3c
 8007464:	f000 f9d4 	bl	8007810 <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	f040 8090 	bne.w	800758e <_printf_float+0x1d6>
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	b011      	add	sp, #68	; 0x44
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	4642      	mov	r2, r8
 800747a:	4653      	mov	r3, sl
 800747c:	4640      	mov	r0, r8
 800747e:	4651      	mov	r1, sl
 8007480:	f7f9 fac4 	bl	8000a0c <__aeabi_dcmpun>
 8007484:	b148      	cbz	r0, 800749a <_printf_float+0xe2>
 8007486:	f1ba 0f00 	cmp.w	sl, #0
 800748a:	bfb8      	it	lt
 800748c:	232d      	movlt	r3, #45	; 0x2d
 800748e:	4880      	ldr	r0, [pc, #512]	; (8007690 <_printf_float+0x2d8>)
 8007490:	bfb8      	it	lt
 8007492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007496:	4b7f      	ldr	r3, [pc, #508]	; (8007694 <_printf_float+0x2dc>)
 8007498:	e7d3      	b.n	8007442 <_printf_float+0x8a>
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	d142      	bne.n	800752a <_printf_float+0x172>
 80074a4:	2306      	movs	r3, #6
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	9206      	str	r2, [sp, #24]
 80074ac:	aa0e      	add	r2, sp, #56	; 0x38
 80074ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80074b2:	aa0d      	add	r2, sp, #52	; 0x34
 80074b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80074b8:	9203      	str	r2, [sp, #12]
 80074ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80074be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	4642      	mov	r2, r8
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	4628      	mov	r0, r5
 80074cc:	4653      	mov	r3, sl
 80074ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80074d0:	f7ff fed4 	bl	800727c <__cvt>
 80074d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074d6:	4680      	mov	r8, r0
 80074d8:	2947      	cmp	r1, #71	; 0x47
 80074da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80074dc:	d108      	bne.n	80074f0 <_printf_float+0x138>
 80074de:	1cc8      	adds	r0, r1, #3
 80074e0:	db02      	blt.n	80074e8 <_printf_float+0x130>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	4299      	cmp	r1, r3
 80074e6:	dd40      	ble.n	800756a <_printf_float+0x1b2>
 80074e8:	f1a9 0902 	sub.w	r9, r9, #2
 80074ec:	fa5f f989 	uxtb.w	r9, r9
 80074f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074f4:	d81f      	bhi.n	8007536 <_printf_float+0x17e>
 80074f6:	464a      	mov	r2, r9
 80074f8:	3901      	subs	r1, #1
 80074fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074fe:	910d      	str	r1, [sp, #52]	; 0x34
 8007500:	f7ff ff1b 	bl	800733a <__exponent>
 8007504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007506:	4682      	mov	sl, r0
 8007508:	1813      	adds	r3, r2, r0
 800750a:	2a01      	cmp	r2, #1
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	dc02      	bgt.n	8007516 <_printf_float+0x15e>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	07d2      	lsls	r2, r2, #31
 8007514:	d501      	bpl.n	800751a <_printf_float+0x162>
 8007516:	3301      	adds	r3, #1
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800751e:	2b00      	cmp	r3, #0
 8007520:	d09b      	beq.n	800745a <_printf_float+0xa2>
 8007522:	232d      	movs	r3, #45	; 0x2d
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	e797      	b.n	800745a <_printf_float+0xa2>
 800752a:	2947      	cmp	r1, #71	; 0x47
 800752c:	d1bc      	bne.n	80074a8 <_printf_float+0xf0>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ba      	bne.n	80074a8 <_printf_float+0xf0>
 8007532:	2301      	movs	r3, #1
 8007534:	e7b7      	b.n	80074a6 <_printf_float+0xee>
 8007536:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800753a:	d118      	bne.n	800756e <_printf_float+0x1b6>
 800753c:	2900      	cmp	r1, #0
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	dd0b      	ble.n	800755a <_printf_float+0x1a2>
 8007542:	6121      	str	r1, [r4, #16]
 8007544:	b913      	cbnz	r3, 800754c <_printf_float+0x194>
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	07d0      	lsls	r0, r2, #31
 800754a:	d502      	bpl.n	8007552 <_printf_float+0x19a>
 800754c:	3301      	adds	r3, #1
 800754e:	440b      	add	r3, r1
 8007550:	6123      	str	r3, [r4, #16]
 8007552:	f04f 0a00 	mov.w	sl, #0
 8007556:	65a1      	str	r1, [r4, #88]	; 0x58
 8007558:	e7df      	b.n	800751a <_printf_float+0x162>
 800755a:	b913      	cbnz	r3, 8007562 <_printf_float+0x1aa>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	07d2      	lsls	r2, r2, #31
 8007560:	d501      	bpl.n	8007566 <_printf_float+0x1ae>
 8007562:	3302      	adds	r3, #2
 8007564:	e7f4      	b.n	8007550 <_printf_float+0x198>
 8007566:	2301      	movs	r3, #1
 8007568:	e7f2      	b.n	8007550 <_printf_float+0x198>
 800756a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800756e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007570:	4299      	cmp	r1, r3
 8007572:	db05      	blt.n	8007580 <_printf_float+0x1c8>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	6121      	str	r1, [r4, #16]
 8007578:	07d8      	lsls	r0, r3, #31
 800757a:	d5ea      	bpl.n	8007552 <_printf_float+0x19a>
 800757c:	1c4b      	adds	r3, r1, #1
 800757e:	e7e7      	b.n	8007550 <_printf_float+0x198>
 8007580:	2900      	cmp	r1, #0
 8007582:	bfcc      	ite	gt
 8007584:	2201      	movgt	r2, #1
 8007586:	f1c1 0202 	rsble	r2, r1, #2
 800758a:	4413      	add	r3, r2
 800758c:	e7e0      	b.n	8007550 <_printf_float+0x198>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	055a      	lsls	r2, r3, #21
 8007592:	d407      	bmi.n	80075a4 <_printf_float+0x1ec>
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	4642      	mov	r2, r8
 8007598:	4631      	mov	r1, r6
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	d12b      	bne.n	80075fa <_printf_float+0x242>
 80075a2:	e764      	b.n	800746e <_printf_float+0xb6>
 80075a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075a8:	f240 80dd 	bls.w	8007766 <_printf_float+0x3ae>
 80075ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	f7f9 f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d033      	beq.n	8007624 <_printf_float+0x26c>
 80075bc:	2301      	movs	r3, #1
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	4a35      	ldr	r2, [pc, #212]	; (8007698 <_printf_float+0x2e0>)
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af51 	beq.w	800746e <_printf_float+0xb6>
 80075cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075d0:	429a      	cmp	r2, r3
 80075d2:	db02      	blt.n	80075da <_printf_float+0x222>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	07d8      	lsls	r0, r3, #31
 80075d8:	d50f      	bpl.n	80075fa <_printf_float+0x242>
 80075da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f af42 	beq.w	800746e <_printf_float+0xb6>
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	f104 091a 	add.w	r9, r4, #26
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	3b01      	subs	r3, #1
 80075f6:	4543      	cmp	r3, r8
 80075f8:	dc09      	bgt.n	800760e <_printf_float+0x256>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	079b      	lsls	r3, r3, #30
 80075fe:	f100 8102 	bmi.w	8007806 <_printf_float+0x44e>
 8007602:	68e0      	ldr	r0, [r4, #12]
 8007604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007606:	4298      	cmp	r0, r3
 8007608:	bfb8      	it	lt
 800760a:	4618      	movlt	r0, r3
 800760c:	e731      	b.n	8007472 <_printf_float+0xba>
 800760e:	2301      	movs	r3, #1
 8007610:	464a      	mov	r2, r9
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	f43f af28 	beq.w	800746e <_printf_float+0xb6>
 800761e:	f108 0801 	add.w	r8, r8, #1
 8007622:	e7e6      	b.n	80075f2 <_printf_float+0x23a>
 8007624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007626:	2b00      	cmp	r3, #0
 8007628:	dc38      	bgt.n	800769c <_printf_float+0x2e4>
 800762a:	2301      	movs	r3, #1
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <_printf_float+0x2e0>)
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f af1a 	beq.w	800746e <_printf_float+0xb6>
 800763a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800763e:	4313      	orrs	r3, r2
 8007640:	d102      	bne.n	8007648 <_printf_float+0x290>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	07d9      	lsls	r1, r3, #31
 8007646:	d5d8      	bpl.n	80075fa <_printf_float+0x242>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f af0b 	beq.w	800746e <_printf_float+0xb6>
 8007658:	f04f 0900 	mov.w	r9, #0
 800765c:	f104 0a1a 	add.w	sl, r4, #26
 8007660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007662:	425b      	negs	r3, r3
 8007664:	454b      	cmp	r3, r9
 8007666:	dc01      	bgt.n	800766c <_printf_float+0x2b4>
 8007668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800766a:	e794      	b.n	8007596 <_printf_float+0x1de>
 800766c:	2301      	movs	r3, #1
 800766e:	4652      	mov	r2, sl
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f aef9 	beq.w	800746e <_printf_float+0xb6>
 800767c:	f109 0901 	add.w	r9, r9, #1
 8007680:	e7ee      	b.n	8007660 <_printf_float+0x2a8>
 8007682:	bf00      	nop
 8007684:	7fefffff 	.word	0x7fefffff
 8007688:	0800b4c8 	.word	0x0800b4c8
 800768c:	0800b4cc 	.word	0x0800b4cc
 8007690:	0800b4d4 	.word	0x0800b4d4
 8007694:	0800b4d0 	.word	0x0800b4d0
 8007698:	0800b4d8 	.word	0x0800b4d8
 800769c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800769e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bfa8      	it	ge
 80076a4:	461a      	movge	r2, r3
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	4691      	mov	r9, r2
 80076aa:	dc37      	bgt.n	800771c <_printf_float+0x364>
 80076ac:	f04f 0b00 	mov.w	fp, #0
 80076b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076b4:	f104 021a 	add.w	r2, r4, #26
 80076b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80076bc:	ebaa 0309 	sub.w	r3, sl, r9
 80076c0:	455b      	cmp	r3, fp
 80076c2:	dc33      	bgt.n	800772c <_printf_float+0x374>
 80076c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076c8:	429a      	cmp	r2, r3
 80076ca:	db3b      	blt.n	8007744 <_printf_float+0x38c>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d438      	bmi.n	8007744 <_printf_float+0x38c>
 80076d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076d6:	eba2 030a 	sub.w	r3, r2, sl
 80076da:	eba2 0901 	sub.w	r9, r2, r1
 80076de:	4599      	cmp	r9, r3
 80076e0:	bfa8      	it	ge
 80076e2:	4699      	movge	r9, r3
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	dc34      	bgt.n	8007754 <_printf_float+0x39c>
 80076ea:	f04f 0800 	mov.w	r8, #0
 80076ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076f2:	f104 0a1a 	add.w	sl, r4, #26
 80076f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	eba3 0309 	sub.w	r3, r3, r9
 8007700:	4543      	cmp	r3, r8
 8007702:	f77f af7a 	ble.w	80075fa <_printf_float+0x242>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f aeac 	beq.w	800746e <_printf_float+0xb6>
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	e7ec      	b.n	80076f6 <_printf_float+0x33e>
 800771c:	4613      	mov	r3, r2
 800771e:	4631      	mov	r1, r6
 8007720:	4642      	mov	r2, r8
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	d1c0      	bne.n	80076ac <_printf_float+0x2f4>
 800772a:	e6a0      	b.n	800746e <_printf_float+0xb6>
 800772c:	2301      	movs	r3, #1
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	920b      	str	r2, [sp, #44]	; 0x2c
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f ae99 	beq.w	800746e <_printf_float+0xb6>
 800773c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800773e:	f10b 0b01 	add.w	fp, fp, #1
 8007742:	e7b9      	b.n	80076b8 <_printf_float+0x300>
 8007744:	4631      	mov	r1, r6
 8007746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d1bf      	bne.n	80076d2 <_printf_float+0x31a>
 8007752:	e68c      	b.n	800746e <_printf_float+0xb6>
 8007754:	464b      	mov	r3, r9
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	eb08 020a 	add.w	r2, r8, sl
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	d1c2      	bne.n	80076ea <_printf_float+0x332>
 8007764:	e683      	b.n	800746e <_printf_float+0xb6>
 8007766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007768:	2a01      	cmp	r2, #1
 800776a:	dc01      	bgt.n	8007770 <_printf_float+0x3b8>
 800776c:	07db      	lsls	r3, r3, #31
 800776e:	d537      	bpl.n	80077e0 <_printf_float+0x428>
 8007770:	2301      	movs	r3, #1
 8007772:	4642      	mov	r2, r8
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f ae77 	beq.w	800746e <_printf_float+0xb6>
 8007780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f ae6f 	beq.w	800746e <_printf_float+0xb6>
 8007790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	f7f9 f906 	bl	80009a8 <__aeabi_dcmpeq>
 800779c:	b9d8      	cbnz	r0, 80077d6 <_printf_float+0x41e>
 800779e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a0:	f108 0201 	add.w	r2, r8, #1
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	d10e      	bne.n	80077ce <_printf_float+0x416>
 80077b0:	e65d      	b.n	800746e <_printf_float+0xb6>
 80077b2:	2301      	movs	r3, #1
 80077b4:	464a      	mov	r2, r9
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f ae56 	beq.w	800746e <_printf_float+0xb6>
 80077c2:	f108 0801 	add.w	r8, r8, #1
 80077c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c8:	3b01      	subs	r3, #1
 80077ca:	4543      	cmp	r3, r8
 80077cc:	dcf1      	bgt.n	80077b2 <_printf_float+0x3fa>
 80077ce:	4653      	mov	r3, sl
 80077d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077d4:	e6e0      	b.n	8007598 <_printf_float+0x1e0>
 80077d6:	f04f 0800 	mov.w	r8, #0
 80077da:	f104 091a 	add.w	r9, r4, #26
 80077de:	e7f2      	b.n	80077c6 <_printf_float+0x40e>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4642      	mov	r2, r8
 80077e4:	e7df      	b.n	80077a6 <_printf_float+0x3ee>
 80077e6:	2301      	movs	r3, #1
 80077e8:	464a      	mov	r2, r9
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae3c 	beq.w	800746e <_printf_float+0xb6>
 80077f6:	f108 0801 	add.w	r8, r8, #1
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077fe:	1a5b      	subs	r3, r3, r1
 8007800:	4543      	cmp	r3, r8
 8007802:	dcf0      	bgt.n	80077e6 <_printf_float+0x42e>
 8007804:	e6fd      	b.n	8007602 <_printf_float+0x24a>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	f104 0919 	add.w	r9, r4, #25
 800780e:	e7f4      	b.n	80077fa <_printf_float+0x442>

08007810 <_printf_common>:
 8007810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	4616      	mov	r6, r2
 8007816:	4699      	mov	r9, r3
 8007818:	688a      	ldr	r2, [r1, #8]
 800781a:	690b      	ldr	r3, [r1, #16]
 800781c:	4607      	mov	r7, r0
 800781e:	4293      	cmp	r3, r2
 8007820:	bfb8      	it	lt
 8007822:	4613      	movlt	r3, r2
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800782a:	460c      	mov	r4, r1
 800782c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007830:	b10a      	cbz	r2, 8007836 <_printf_common+0x26>
 8007832:	3301      	adds	r3, #1
 8007834:	6033      	str	r3, [r6, #0]
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	0699      	lsls	r1, r3, #26
 800783a:	bf42      	ittt	mi
 800783c:	6833      	ldrmi	r3, [r6, #0]
 800783e:	3302      	addmi	r3, #2
 8007840:	6033      	strmi	r3, [r6, #0]
 8007842:	6825      	ldr	r5, [r4, #0]
 8007844:	f015 0506 	ands.w	r5, r5, #6
 8007848:	d106      	bne.n	8007858 <_printf_common+0x48>
 800784a:	f104 0a19 	add.w	sl, r4, #25
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	6832      	ldr	r2, [r6, #0]
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	42ab      	cmp	r3, r5
 8007856:	dc28      	bgt.n	80078aa <_printf_common+0x9a>
 8007858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800785c:	1e13      	subs	r3, r2, #0
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	bf18      	it	ne
 8007862:	2301      	movne	r3, #1
 8007864:	0692      	lsls	r2, r2, #26
 8007866:	d42d      	bmi.n	80078c4 <_printf_common+0xb4>
 8007868:	4649      	mov	r1, r9
 800786a:	4638      	mov	r0, r7
 800786c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007870:	47c0      	blx	r8
 8007872:	3001      	adds	r0, #1
 8007874:	d020      	beq.n	80078b8 <_printf_common+0xa8>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	68e5      	ldr	r5, [r4, #12]
 800787a:	f003 0306 	and.w	r3, r3, #6
 800787e:	2b04      	cmp	r3, #4
 8007880:	bf18      	it	ne
 8007882:	2500      	movne	r5, #0
 8007884:	6832      	ldr	r2, [r6, #0]
 8007886:	f04f 0600 	mov.w	r6, #0
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	bf08      	it	eq
 800788e:	1aad      	subeq	r5, r5, r2
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	bf08      	it	eq
 8007894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007898:	4293      	cmp	r3, r2
 800789a:	bfc4      	itt	gt
 800789c:	1a9b      	subgt	r3, r3, r2
 800789e:	18ed      	addgt	r5, r5, r3
 80078a0:	341a      	adds	r4, #26
 80078a2:	42b5      	cmp	r5, r6
 80078a4:	d11a      	bne.n	80078dc <_printf_common+0xcc>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e008      	b.n	80078bc <_printf_common+0xac>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4652      	mov	r2, sl
 80078ae:	4649      	mov	r1, r9
 80078b0:	4638      	mov	r0, r7
 80078b2:	47c0      	blx	r8
 80078b4:	3001      	adds	r0, #1
 80078b6:	d103      	bne.n	80078c0 <_printf_common+0xb0>
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c0:	3501      	adds	r5, #1
 80078c2:	e7c4      	b.n	800784e <_printf_common+0x3e>
 80078c4:	2030      	movs	r0, #48	; 0x30
 80078c6:	18e1      	adds	r1, r4, r3
 80078c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d2:	4422      	add	r2, r4
 80078d4:	3302      	adds	r3, #2
 80078d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078da:	e7c5      	b.n	8007868 <_printf_common+0x58>
 80078dc:	2301      	movs	r3, #1
 80078de:	4622      	mov	r2, r4
 80078e0:	4649      	mov	r1, r9
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	3001      	adds	r0, #1
 80078e8:	d0e6      	beq.n	80078b8 <_printf_common+0xa8>
 80078ea:	3601      	adds	r6, #1
 80078ec:	e7d9      	b.n	80078a2 <_printf_common+0x92>
	...

080078f0 <_printf_i>:
 80078f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	7e27      	ldrb	r7, [r4, #24]
 80078f8:	4691      	mov	r9, r2
 80078fa:	2f78      	cmp	r7, #120	; 0x78
 80078fc:	4680      	mov	r8, r0
 80078fe:	469a      	mov	sl, r3
 8007900:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007906:	d807      	bhi.n	8007918 <_printf_i+0x28>
 8007908:	2f62      	cmp	r7, #98	; 0x62
 800790a:	d80a      	bhi.n	8007922 <_printf_i+0x32>
 800790c:	2f00      	cmp	r7, #0
 800790e:	f000 80d9 	beq.w	8007ac4 <_printf_i+0x1d4>
 8007912:	2f58      	cmp	r7, #88	; 0x58
 8007914:	f000 80a4 	beq.w	8007a60 <_printf_i+0x170>
 8007918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800791c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007920:	e03a      	b.n	8007998 <_printf_i+0xa8>
 8007922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007926:	2b15      	cmp	r3, #21
 8007928:	d8f6      	bhi.n	8007918 <_printf_i+0x28>
 800792a:	a001      	add	r0, pc, #4	; (adr r0, 8007930 <_printf_i+0x40>)
 800792c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007930:	08007989 	.word	0x08007989
 8007934:	0800799d 	.word	0x0800799d
 8007938:	08007919 	.word	0x08007919
 800793c:	08007919 	.word	0x08007919
 8007940:	08007919 	.word	0x08007919
 8007944:	08007919 	.word	0x08007919
 8007948:	0800799d 	.word	0x0800799d
 800794c:	08007919 	.word	0x08007919
 8007950:	08007919 	.word	0x08007919
 8007954:	08007919 	.word	0x08007919
 8007958:	08007919 	.word	0x08007919
 800795c:	08007aab 	.word	0x08007aab
 8007960:	080079cd 	.word	0x080079cd
 8007964:	08007a8d 	.word	0x08007a8d
 8007968:	08007919 	.word	0x08007919
 800796c:	08007919 	.word	0x08007919
 8007970:	08007acd 	.word	0x08007acd
 8007974:	08007919 	.word	0x08007919
 8007978:	080079cd 	.word	0x080079cd
 800797c:	08007919 	.word	0x08007919
 8007980:	08007919 	.word	0x08007919
 8007984:	08007a95 	.word	0x08007a95
 8007988:	680b      	ldr	r3, [r1, #0]
 800798a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	600a      	str	r2, [r1, #0]
 8007994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007998:	2301      	movs	r3, #1
 800799a:	e0a4      	b.n	8007ae6 <_printf_i+0x1f6>
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	6808      	ldr	r0, [r1, #0]
 80079a0:	062e      	lsls	r6, r5, #24
 80079a2:	f100 0304 	add.w	r3, r0, #4
 80079a6:	d50a      	bpl.n	80079be <_printf_i+0xce>
 80079a8:	6805      	ldr	r5, [r0, #0]
 80079aa:	600b      	str	r3, [r1, #0]
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	da03      	bge.n	80079b8 <_printf_i+0xc8>
 80079b0:	232d      	movs	r3, #45	; 0x2d
 80079b2:	426d      	negs	r5, r5
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b8:	230a      	movs	r3, #10
 80079ba:	485e      	ldr	r0, [pc, #376]	; (8007b34 <_printf_i+0x244>)
 80079bc:	e019      	b.n	80079f2 <_printf_i+0x102>
 80079be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079c2:	6805      	ldr	r5, [r0, #0]
 80079c4:	600b      	str	r3, [r1, #0]
 80079c6:	bf18      	it	ne
 80079c8:	b22d      	sxthne	r5, r5
 80079ca:	e7ef      	b.n	80079ac <_printf_i+0xbc>
 80079cc:	680b      	ldr	r3, [r1, #0]
 80079ce:	6825      	ldr	r5, [r4, #0]
 80079d0:	1d18      	adds	r0, r3, #4
 80079d2:	6008      	str	r0, [r1, #0]
 80079d4:	0628      	lsls	r0, r5, #24
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0xec>
 80079d8:	681d      	ldr	r5, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0xf2>
 80079dc:	0669      	lsls	r1, r5, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0xe8>
 80079e0:	881d      	ldrh	r5, [r3, #0]
 80079e2:	2f6f      	cmp	r7, #111	; 0x6f
 80079e4:	bf0c      	ite	eq
 80079e6:	2308      	moveq	r3, #8
 80079e8:	230a      	movne	r3, #10
 80079ea:	4852      	ldr	r0, [pc, #328]	; (8007b34 <_printf_i+0x244>)
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079f2:	6866      	ldr	r6, [r4, #4]
 80079f4:	2e00      	cmp	r6, #0
 80079f6:	bfa8      	it	ge
 80079f8:	6821      	ldrge	r1, [r4, #0]
 80079fa:	60a6      	str	r6, [r4, #8]
 80079fc:	bfa4      	itt	ge
 80079fe:	f021 0104 	bicge.w	r1, r1, #4
 8007a02:	6021      	strge	r1, [r4, #0]
 8007a04:	b90d      	cbnz	r5, 8007a0a <_printf_i+0x11a>
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	d04d      	beq.n	8007aa6 <_printf_i+0x1b6>
 8007a0a:	4616      	mov	r6, r2
 8007a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a10:	fb03 5711 	mls	r7, r3, r1, r5
 8007a14:	5dc7      	ldrb	r7, [r0, r7]
 8007a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	42bb      	cmp	r3, r7
 8007a1e:	460d      	mov	r5, r1
 8007a20:	d9f4      	bls.n	8007a0c <_printf_i+0x11c>
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d10b      	bne.n	8007a3e <_printf_i+0x14e>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07df      	lsls	r7, r3, #31
 8007a2a:	d508      	bpl.n	8007a3e <_printf_i+0x14e>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	6861      	ldr	r1, [r4, #4]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	bfde      	ittt	le
 8007a34:	2330      	movle	r3, #48	; 0x30
 8007a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a3e:	1b92      	subs	r2, r2, r6
 8007a40:	6122      	str	r2, [r4, #16]
 8007a42:	464b      	mov	r3, r9
 8007a44:	4621      	mov	r1, r4
 8007a46:	4640      	mov	r0, r8
 8007a48:	f8cd a000 	str.w	sl, [sp]
 8007a4c:	aa03      	add	r2, sp, #12
 8007a4e:	f7ff fedf 	bl	8007810 <_printf_common>
 8007a52:	3001      	adds	r0, #1
 8007a54:	d14c      	bne.n	8007af0 <_printf_i+0x200>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	b004      	add	sp, #16
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	4834      	ldr	r0, [pc, #208]	; (8007b34 <_printf_i+0x244>)
 8007a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a66:	680e      	ldr	r6, [r1, #0]
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a6e:	061f      	lsls	r7, r3, #24
 8007a70:	600e      	str	r6, [r1, #0]
 8007a72:	d514      	bpl.n	8007a9e <_printf_i+0x1ae>
 8007a74:	07d9      	lsls	r1, r3, #31
 8007a76:	bf44      	itt	mi
 8007a78:	f043 0320 	orrmi.w	r3, r3, #32
 8007a7c:	6023      	strmi	r3, [r4, #0]
 8007a7e:	b91d      	cbnz	r5, 8007a88 <_printf_i+0x198>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	f023 0320 	bic.w	r3, r3, #32
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	2310      	movs	r3, #16
 8007a8a:	e7af      	b.n	80079ec <_printf_i+0xfc>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	f043 0320 	orr.w	r3, r3, #32
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2378      	movs	r3, #120	; 0x78
 8007a96:	4828      	ldr	r0, [pc, #160]	; (8007b38 <_printf_i+0x248>)
 8007a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a9c:	e7e3      	b.n	8007a66 <_printf_i+0x176>
 8007a9e:	065e      	lsls	r6, r3, #25
 8007aa0:	bf48      	it	mi
 8007aa2:	b2ad      	uxthmi	r5, r5
 8007aa4:	e7e6      	b.n	8007a74 <_printf_i+0x184>
 8007aa6:	4616      	mov	r6, r2
 8007aa8:	e7bb      	b.n	8007a22 <_printf_i+0x132>
 8007aaa:	680b      	ldr	r3, [r1, #0]
 8007aac:	6826      	ldr	r6, [r4, #0]
 8007aae:	1d1d      	adds	r5, r3, #4
 8007ab0:	6960      	ldr	r0, [r4, #20]
 8007ab2:	600d      	str	r5, [r1, #0]
 8007ab4:	0635      	lsls	r5, r6, #24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	d501      	bpl.n	8007abe <_printf_i+0x1ce>
 8007aba:	6018      	str	r0, [r3, #0]
 8007abc:	e002      	b.n	8007ac4 <_printf_i+0x1d4>
 8007abe:	0671      	lsls	r1, r6, #25
 8007ac0:	d5fb      	bpl.n	8007aba <_printf_i+0x1ca>
 8007ac2:	8018      	strh	r0, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4616      	mov	r6, r2
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	e7ba      	b.n	8007a42 <_printf_i+0x152>
 8007acc:	680b      	ldr	r3, [r1, #0]
 8007ace:	1d1a      	adds	r2, r3, #4
 8007ad0:	600a      	str	r2, [r1, #0]
 8007ad2:	681e      	ldr	r6, [r3, #0]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	6862      	ldr	r2, [r4, #4]
 8007ada:	f000 fed7 	bl	800888c <memchr>
 8007ade:	b108      	cbz	r0, 8007ae4 <_printf_i+0x1f4>
 8007ae0:	1b80      	subs	r0, r0, r6
 8007ae2:	6060      	str	r0, [r4, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aee:	e7a8      	b.n	8007a42 <_printf_i+0x152>
 8007af0:	4632      	mov	r2, r6
 8007af2:	4649      	mov	r1, r9
 8007af4:	4640      	mov	r0, r8
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	47d0      	blx	sl
 8007afa:	3001      	adds	r0, #1
 8007afc:	d0ab      	beq.n	8007a56 <_printf_i+0x166>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	079b      	lsls	r3, r3, #30
 8007b02:	d413      	bmi.n	8007b2c <_printf_i+0x23c>
 8007b04:	68e0      	ldr	r0, [r4, #12]
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	4618      	movlt	r0, r3
 8007b0e:	e7a4      	b.n	8007a5a <_printf_i+0x16a>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4632      	mov	r2, r6
 8007b14:	4649      	mov	r1, r9
 8007b16:	4640      	mov	r0, r8
 8007b18:	47d0      	blx	sl
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d09b      	beq.n	8007a56 <_printf_i+0x166>
 8007b1e:	3501      	adds	r5, #1
 8007b20:	68e3      	ldr	r3, [r4, #12]
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	1a5b      	subs	r3, r3, r1
 8007b26:	42ab      	cmp	r3, r5
 8007b28:	dcf2      	bgt.n	8007b10 <_printf_i+0x220>
 8007b2a:	e7eb      	b.n	8007b04 <_printf_i+0x214>
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	f104 0619 	add.w	r6, r4, #25
 8007b32:	e7f5      	b.n	8007b20 <_printf_i+0x230>
 8007b34:	0800b4da 	.word	0x0800b4da
 8007b38:	0800b4eb 	.word	0x0800b4eb

08007b3c <siprintf>:
 8007b3c:	b40e      	push	{r1, r2, r3}
 8007b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b42:	b500      	push	{lr}
 8007b44:	b09c      	sub	sp, #112	; 0x70
 8007b46:	ab1d      	add	r3, sp, #116	; 0x74
 8007b48:	9002      	str	r0, [sp, #8]
 8007b4a:	9006      	str	r0, [sp, #24]
 8007b4c:	9107      	str	r1, [sp, #28]
 8007b4e:	9104      	str	r1, [sp, #16]
 8007b50:	4808      	ldr	r0, [pc, #32]	; (8007b74 <siprintf+0x38>)
 8007b52:	4909      	ldr	r1, [pc, #36]	; (8007b78 <siprintf+0x3c>)
 8007b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b58:	9105      	str	r1, [sp, #20]
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	a902      	add	r1, sp, #8
 8007b5e:	9301      	str	r3, [sp, #4]
 8007b60:	f001 fb34 	bl	80091cc <_svfiprintf_r>
 8007b64:	2200      	movs	r2, #0
 8007b66:	9b02      	ldr	r3, [sp, #8]
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	b01c      	add	sp, #112	; 0x70
 8007b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b70:	b003      	add	sp, #12
 8007b72:	4770      	bx	lr
 8007b74:	20000020 	.word	0x20000020
 8007b78:	ffff0208 	.word	0xffff0208

08007b7c <quorem>:
 8007b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	6903      	ldr	r3, [r0, #16]
 8007b82:	690c      	ldr	r4, [r1, #16]
 8007b84:	4607      	mov	r7, r0
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	f2c0 8083 	blt.w	8007c92 <quorem+0x116>
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	f100 0514 	add.w	r5, r0, #20
 8007b92:	f101 0814 	add.w	r8, r1, #20
 8007b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb4:	d332      	bcc.n	8007c1c <quorem+0xa0>
 8007bb6:	f04f 0e00 	mov.w	lr, #0
 8007bba:	4640      	mov	r0, r8
 8007bbc:	46ac      	mov	ip, r5
 8007bbe:	46f2      	mov	sl, lr
 8007bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bc4:	b293      	uxth	r3, r2
 8007bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8007bca:	0c12      	lsrs	r2, r2, #16
 8007bcc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bd0:	fb06 e202 	mla	r2, r6, r2, lr
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	ebaa 0303 	sub.w	r3, sl, r3
 8007bda:	f8dc a000 	ldr.w	sl, [ip]
 8007bde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007be2:	fa1f fa8a 	uxth.w	sl, sl
 8007be6:	4453      	add	r3, sl
 8007be8:	fa1f fa82 	uxth.w	sl, r2
 8007bec:	f8dc 2000 	ldr.w	r2, [ip]
 8007bf0:	4581      	cmp	r9, r0
 8007bf2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007bf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c04:	f84c 3b04 	str.w	r3, [ip], #4
 8007c08:	d2da      	bcs.n	8007bc0 <quorem+0x44>
 8007c0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c0e:	b92b      	cbnz	r3, 8007c1c <quorem+0xa0>
 8007c10:	9b01      	ldr	r3, [sp, #4]
 8007c12:	3b04      	subs	r3, #4
 8007c14:	429d      	cmp	r5, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	d32f      	bcc.n	8007c7a <quorem+0xfe>
 8007c1a:	613c      	str	r4, [r7, #16]
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f001 f8bd 	bl	8008d9c <__mcmp>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	db25      	blt.n	8007c72 <quorem+0xf6>
 8007c26:	4628      	mov	r0, r5
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007c32:	f8d0 e000 	ldr.w	lr, [r0]
 8007c36:	b28b      	uxth	r3, r1
 8007c38:	ebac 0303 	sub.w	r3, ip, r3
 8007c3c:	fa1f f28e 	uxth.w	r2, lr
 8007c40:	4413      	add	r3, r2
 8007c42:	0c0a      	lsrs	r2, r1, #16
 8007c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c52:	45c1      	cmp	r9, r8
 8007c54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c58:	f840 3b04 	str.w	r3, [r0], #4
 8007c5c:	d2e7      	bcs.n	8007c2e <quorem+0xb2>
 8007c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c66:	b922      	cbnz	r2, 8007c72 <quorem+0xf6>
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	d30a      	bcc.n	8007c86 <quorem+0x10a>
 8007c70:	613c      	str	r4, [r7, #16]
 8007c72:	4630      	mov	r0, r6
 8007c74:	b003      	add	sp, #12
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d1cb      	bne.n	8007c1a <quorem+0x9e>
 8007c82:	3c01      	subs	r4, #1
 8007c84:	e7c6      	b.n	8007c14 <quorem+0x98>
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f0      	bne.n	8007c70 <quorem+0xf4>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	e7eb      	b.n	8007c6a <quorem+0xee>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e7ee      	b.n	8007c74 <quorem+0xf8>
	...

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ca2:	b099      	sub	sp, #100	; 0x64
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007caa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007cae:	b974      	cbnz	r4, 8007cce <_dtoa_r+0x36>
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f000 fde3 	bl	800887c <malloc>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	6268      	str	r0, [r5, #36]	; 0x24
 8007cba:	b920      	cbnz	r0, 8007cc6 <_dtoa_r+0x2e>
 8007cbc:	21ea      	movs	r1, #234	; 0xea
 8007cbe:	4bae      	ldr	r3, [pc, #696]	; (8007f78 <_dtoa_r+0x2e0>)
 8007cc0:	48ae      	ldr	r0, [pc, #696]	; (8007f7c <_dtoa_r+0x2e4>)
 8007cc2:	f001 fb93 	bl	80093ec <__assert_func>
 8007cc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cca:	6004      	str	r4, [r0, #0]
 8007ccc:	60c4      	str	r4, [r0, #12]
 8007cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	b151      	cbz	r1, 8007cea <_dtoa_r+0x52>
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4093      	lsls	r3, r2
 8007cda:	604a      	str	r2, [r1, #4]
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fe22 	bl	8008928 <_Bfree>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	1e3b      	subs	r3, r7, #0
 8007cec:	bfaf      	iteee	ge
 8007cee:	2300      	movge	r3, #0
 8007cf0:	2201      	movlt	r2, #1
 8007cf2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cf6:	9305      	strlt	r3, [sp, #20]
 8007cf8:	bfa8      	it	ge
 8007cfa:	f8c8 3000 	strge.w	r3, [r8]
 8007cfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007d02:	4b9f      	ldr	r3, [pc, #636]	; (8007f80 <_dtoa_r+0x2e8>)
 8007d04:	bfb8      	it	lt
 8007d06:	f8c8 2000 	strlt.w	r2, [r8]
 8007d0a:	ea33 0309 	bics.w	r3, r3, r9
 8007d0e:	d119      	bne.n	8007d44 <_dtoa_r+0xac>
 8007d10:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d1c:	4333      	orrs	r3, r6
 8007d1e:	f000 8580 	beq.w	8008822 <_dtoa_r+0xb8a>
 8007d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d24:	b953      	cbnz	r3, 8007d3c <_dtoa_r+0xa4>
 8007d26:	4b97      	ldr	r3, [pc, #604]	; (8007f84 <_dtoa_r+0x2ec>)
 8007d28:	e022      	b.n	8007d70 <_dtoa_r+0xd8>
 8007d2a:	4b97      	ldr	r3, [pc, #604]	; (8007f88 <_dtoa_r+0x2f0>)
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	9808      	ldr	r0, [sp, #32]
 8007d36:	b019      	add	sp, #100	; 0x64
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	4b91      	ldr	r3, [pc, #580]	; (8007f84 <_dtoa_r+0x2ec>)
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	3303      	adds	r3, #3
 8007d42:	e7f5      	b.n	8007d30 <_dtoa_r+0x98>
 8007d44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	f7f8 fe28 	bl	80009a8 <__aeabi_dcmpeq>
 8007d58:	4680      	mov	r8, r0
 8007d5a:	b158      	cbz	r0, 8007d74 <_dtoa_r+0xdc>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8559 	beq.w	800881c <_dtoa_r+0xb84>
 8007d6a:	4888      	ldr	r0, [pc, #544]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d6c:	6018      	str	r0, [r3, #0]
 8007d6e:	1e43      	subs	r3, r0, #1
 8007d70:	9308      	str	r3, [sp, #32]
 8007d72:	e7df      	b.n	8007d34 <_dtoa_r+0x9c>
 8007d74:	ab16      	add	r3, sp, #88	; 0x58
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	ab17      	add	r3, sp, #92	; 0x5c
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d82:	f001 f8b7 	bl	8008ef4 <__d2b>
 8007d86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d8a:	4682      	mov	sl, r0
 8007d8c:	2c00      	cmp	r4, #0
 8007d8e:	d07e      	beq.n	8007e8e <_dtoa_r+0x1f6>
 8007d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007da2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007da6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b78      	ldr	r3, [pc, #480]	; (8007f90 <_dtoa_r+0x2f8>)
 8007dae:	f7f8 f9db 	bl	8000168 <__aeabi_dsub>
 8007db2:	a36b      	add	r3, pc, #428	; (adr r3, 8007f60 <_dtoa_r+0x2c8>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fb8e 	bl	80004d8 <__aeabi_dmul>
 8007dbc:	a36a      	add	r3, pc, #424	; (adr r3, 8007f68 <_dtoa_r+0x2d0>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 f9d3 	bl	800016c <__adddf3>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	4620      	mov	r0, r4
 8007dca:	460f      	mov	r7, r1
 8007dcc:	f7f8 fb1a 	bl	8000404 <__aeabi_i2d>
 8007dd0:	a367      	add	r3, pc, #412	; (adr r3, 8007f70 <_dtoa_r+0x2d8>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fb7f 	bl	80004d8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 f9c3 	bl	800016c <__adddf3>
 8007de6:	4606      	mov	r6, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	f7f8 fe25 	bl	8000a38 <__aeabi_d2iz>
 8007dee:	2200      	movs	r2, #0
 8007df0:	4681      	mov	r9, r0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fde0 	bl	80009bc <__aeabi_dcmplt>
 8007dfc:	b148      	cbz	r0, 8007e12 <_dtoa_r+0x17a>
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f7f8 fb00 	bl	8000404 <__aeabi_i2d>
 8007e04:	4632      	mov	r2, r6
 8007e06:	463b      	mov	r3, r7
 8007e08:	f7f8 fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8007e0c:	b908      	cbnz	r0, 8007e12 <_dtoa_r+0x17a>
 8007e0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e12:	f1b9 0f16 	cmp.w	r9, #22
 8007e16:	d857      	bhi.n	8007ec8 <_dtoa_r+0x230>
 8007e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e1c:	4b5d      	ldr	r3, [pc, #372]	; (8007f94 <_dtoa_r+0x2fc>)
 8007e1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fdc9 	bl	80009bc <__aeabi_dcmplt>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d04e      	beq.n	8007ecc <_dtoa_r+0x234>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e38:	1b1c      	subs	r4, r3, r4
 8007e3a:	1e63      	subs	r3, r4, #1
 8007e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3e:	bf49      	itett	mi
 8007e40:	f1c4 0301 	rsbmi	r3, r4, #1
 8007e44:	2300      	movpl	r3, #0
 8007e46:	9306      	strmi	r3, [sp, #24]
 8007e48:	2300      	movmi	r3, #0
 8007e4a:	bf54      	ite	pl
 8007e4c:	9306      	strpl	r3, [sp, #24]
 8007e4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007e50:	f1b9 0f00 	cmp.w	r9, #0
 8007e54:	db3c      	blt.n	8007ed0 <_dtoa_r+0x238>
 8007e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e5c:	444b      	add	r3, r9
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	2300      	movs	r3, #0
 8007e62:	930a      	str	r3, [sp, #40]	; 0x28
 8007e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d86c      	bhi.n	8007f44 <_dtoa_r+0x2ac>
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	bfc4      	itt	gt
 8007e6e:	3b04      	subgt	r3, #4
 8007e70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e74:	bfc8      	it	gt
 8007e76:	2400      	movgt	r4, #0
 8007e78:	f1a3 0302 	sub.w	r3, r3, #2
 8007e7c:	bfd8      	it	le
 8007e7e:	2401      	movle	r4, #1
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	f200 808b 	bhi.w	8007f9c <_dtoa_r+0x304>
 8007e86:	e8df f003 	tbb	[pc, r3]
 8007e8a:	4f2d      	.short	0x4f2d
 8007e8c:	5b4d      	.short	0x5b4d
 8007e8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e92:	441c      	add	r4, r3
 8007e94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	bfc3      	ittte	gt
 8007e9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ea0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007ea4:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ea8:	f1c3 0320 	rsble	r3, r3, #32
 8007eac:	bfc6      	itte	gt
 8007eae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eb2:	4318      	orrgt	r0, r3
 8007eb4:	fa06 f003 	lslle.w	r0, r6, r3
 8007eb8:	f7f8 fa94 	bl	80003e4 <__aeabi_ui2d>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007ec2:	3c01      	subs	r4, #1
 8007ec4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ec6:	e770      	b.n	8007daa <_dtoa_r+0x112>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e7b3      	b.n	8007e34 <_dtoa_r+0x19c>
 8007ecc:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ece:	e7b2      	b.n	8007e36 <_dtoa_r+0x19e>
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	eba3 0309 	sub.w	r3, r3, r9
 8007ed6:	9306      	str	r3, [sp, #24]
 8007ed8:	f1c9 0300 	rsb	r3, r9, #0
 8007edc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ede:	2300      	movs	r3, #0
 8007ee0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee2:	e7bf      	b.n	8007e64 <_dtoa_r+0x1cc>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dc59      	bgt.n	8007fa2 <_dtoa_r+0x30a>
 8007eee:	f04f 0b01 	mov.w	fp, #1
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	f8cd b008 	str.w	fp, [sp, #8]
 8007ef8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007efc:	2200      	movs	r2, #0
 8007efe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007f00:	6042      	str	r2, [r0, #4]
 8007f02:	2204      	movs	r2, #4
 8007f04:	f102 0614 	add.w	r6, r2, #20
 8007f08:	429e      	cmp	r6, r3
 8007f0a:	6841      	ldr	r1, [r0, #4]
 8007f0c:	d94f      	bls.n	8007fae <_dtoa_r+0x316>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 fcca 	bl	80088a8 <_Balloc>
 8007f14:	9008      	str	r0, [sp, #32]
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d14d      	bne.n	8007fb6 <_dtoa_r+0x31e>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f20:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <_dtoa_r+0x300>)
 8007f22:	e6cd      	b.n	8007cc0 <_dtoa_r+0x28>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7de      	b.n	8007ee6 <_dtoa_r+0x24e>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f2e:	eb09 0b03 	add.w	fp, r9, r3
 8007f32:	f10b 0301 	add.w	r3, fp, #1
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	9302      	str	r3, [sp, #8]
 8007f3a:	bfb8      	it	lt
 8007f3c:	2301      	movlt	r3, #1
 8007f3e:	e7dd      	b.n	8007efc <_dtoa_r+0x264>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e7f2      	b.n	8007f2a <_dtoa_r+0x292>
 8007f44:	2401      	movs	r4, #1
 8007f46:	2300      	movs	r3, #0
 8007f48:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f4a:	9322      	str	r3, [sp, #136]	; 0x88
 8007f4c:	f04f 3bff 	mov.w	fp, #4294967295
 8007f50:	2200      	movs	r2, #0
 8007f52:	2312      	movs	r3, #18
 8007f54:	f8cd b008 	str.w	fp, [sp, #8]
 8007f58:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f5a:	e7cf      	b.n	8007efc <_dtoa_r+0x264>
 8007f5c:	f3af 8000 	nop.w
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800b509 	.word	0x0800b509
 8007f7c:	0800b520 	.word	0x0800b520
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800b505 	.word	0x0800b505
 8007f88:	0800b4fc 	.word	0x0800b4fc
 8007f8c:	0800b4d9 	.word	0x0800b4d9
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	0800b618 	.word	0x0800b618
 8007f98:	0800b57f 	.word	0x0800b57f
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa0:	e7d4      	b.n	8007f4c <_dtoa_r+0x2b4>
 8007fa2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007fa6:	465b      	mov	r3, fp
 8007fa8:	f8cd b008 	str.w	fp, [sp, #8]
 8007fac:	e7a6      	b.n	8007efc <_dtoa_r+0x264>
 8007fae:	3101      	adds	r1, #1
 8007fb0:	6041      	str	r1, [r0, #4]
 8007fb2:	0052      	lsls	r2, r2, #1
 8007fb4:	e7a6      	b.n	8007f04 <_dtoa_r+0x26c>
 8007fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fb8:	9a08      	ldr	r2, [sp, #32]
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2b0e      	cmp	r3, #14
 8007fc0:	f200 80a8 	bhi.w	8008114 <_dtoa_r+0x47c>
 8007fc4:	2c00      	cmp	r4, #0
 8007fc6:	f000 80a5 	beq.w	8008114 <_dtoa_r+0x47c>
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	dd34      	ble.n	800803a <_dtoa_r+0x3a2>
 8007fd0:	4a9a      	ldr	r2, [pc, #616]	; (800823c <_dtoa_r+0x5a4>)
 8007fd2:	f009 030f 	and.w	r3, r9, #15
 8007fd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fda:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007fde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fe2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fe6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007fea:	d016      	beq.n	800801a <_dtoa_r+0x382>
 8007fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ff0:	4b93      	ldr	r3, [pc, #588]	; (8008240 <_dtoa_r+0x5a8>)
 8007ff2:	2703      	movs	r7, #3
 8007ff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ff8:	f7f8 fb98 	bl	800072c <__aeabi_ddiv>
 8007ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008000:	f004 040f 	and.w	r4, r4, #15
 8008004:	4e8e      	ldr	r6, [pc, #568]	; (8008240 <_dtoa_r+0x5a8>)
 8008006:	b954      	cbnz	r4, 800801e <_dtoa_r+0x386>
 8008008:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800800c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008010:	f7f8 fb8c 	bl	800072c <__aeabi_ddiv>
 8008014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008018:	e029      	b.n	800806e <_dtoa_r+0x3d6>
 800801a:	2702      	movs	r7, #2
 800801c:	e7f2      	b.n	8008004 <_dtoa_r+0x36c>
 800801e:	07e1      	lsls	r1, r4, #31
 8008020:	d508      	bpl.n	8008034 <_dtoa_r+0x39c>
 8008022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008026:	e9d6 2300 	ldrd	r2, r3, [r6]
 800802a:	f7f8 fa55 	bl	80004d8 <__aeabi_dmul>
 800802e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008032:	3701      	adds	r7, #1
 8008034:	1064      	asrs	r4, r4, #1
 8008036:	3608      	adds	r6, #8
 8008038:	e7e5      	b.n	8008006 <_dtoa_r+0x36e>
 800803a:	f000 80a5 	beq.w	8008188 <_dtoa_r+0x4f0>
 800803e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008042:	f1c9 0400 	rsb	r4, r9, #0
 8008046:	4b7d      	ldr	r3, [pc, #500]	; (800823c <_dtoa_r+0x5a4>)
 8008048:	f004 020f 	and.w	r2, r4, #15
 800804c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 fa40 	bl	80004d8 <__aeabi_dmul>
 8008058:	2702      	movs	r7, #2
 800805a:	2300      	movs	r3, #0
 800805c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008060:	4e77      	ldr	r6, [pc, #476]	; (8008240 <_dtoa_r+0x5a8>)
 8008062:	1124      	asrs	r4, r4, #4
 8008064:	2c00      	cmp	r4, #0
 8008066:	f040 8084 	bne.w	8008172 <_dtoa_r+0x4da>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1d2      	bne.n	8008014 <_dtoa_r+0x37c>
 800806e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 808b 	beq.w	800818c <_dtoa_r+0x4f4>
 8008076:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800807a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800807e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008082:	2200      	movs	r2, #0
 8008084:	4b6f      	ldr	r3, [pc, #444]	; (8008244 <_dtoa_r+0x5ac>)
 8008086:	f7f8 fc99 	bl	80009bc <__aeabi_dcmplt>
 800808a:	2800      	cmp	r0, #0
 800808c:	d07e      	beq.n	800818c <_dtoa_r+0x4f4>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d07b      	beq.n	800818c <_dtoa_r+0x4f4>
 8008094:	f1bb 0f00 	cmp.w	fp, #0
 8008098:	dd38      	ble.n	800810c <_dtoa_r+0x474>
 800809a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800809e:	2200      	movs	r2, #0
 80080a0:	4b69      	ldr	r3, [pc, #420]	; (8008248 <_dtoa_r+0x5b0>)
 80080a2:	f7f8 fa19 	bl	80004d8 <__aeabi_dmul>
 80080a6:	465c      	mov	r4, fp
 80080a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ac:	f109 38ff 	add.w	r8, r9, #4294967295
 80080b0:	3701      	adds	r7, #1
 80080b2:	4638      	mov	r0, r7
 80080b4:	f7f8 f9a6 	bl	8000404 <__aeabi_i2d>
 80080b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080bc:	f7f8 fa0c 	bl	80004d8 <__aeabi_dmul>
 80080c0:	2200      	movs	r2, #0
 80080c2:	4b62      	ldr	r3, [pc, #392]	; (800824c <_dtoa_r+0x5b4>)
 80080c4:	f7f8 f852 	bl	800016c <__adddf3>
 80080c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80080cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080d0:	9611      	str	r6, [sp, #68]	; 0x44
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	d15d      	bne.n	8008192 <_dtoa_r+0x4fa>
 80080d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080da:	2200      	movs	r2, #0
 80080dc:	4b5c      	ldr	r3, [pc, #368]	; (8008250 <_dtoa_r+0x5b8>)
 80080de:	f7f8 f843 	bl	8000168 <__aeabi_dsub>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080ea:	4633      	mov	r3, r6
 80080ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080ee:	f7f8 fc83 	bl	80009f8 <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f040 829e 	bne.w	8008634 <_dtoa_r+0x99c>
 80080f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008102:	f7f8 fc5b 	bl	80009bc <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	f040 8292 	bne.w	8008630 <_dtoa_r+0x998>
 800810c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008110:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008116:	2b00      	cmp	r3, #0
 8008118:	f2c0 8153 	blt.w	80083c2 <_dtoa_r+0x72a>
 800811c:	f1b9 0f0e 	cmp.w	r9, #14
 8008120:	f300 814f 	bgt.w	80083c2 <_dtoa_r+0x72a>
 8008124:	4b45      	ldr	r3, [pc, #276]	; (800823c <_dtoa_r+0x5a4>)
 8008126:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800812a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800812e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008132:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f280 80db 	bge.w	80082f0 <_dtoa_r+0x658>
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f300 80d7 	bgt.w	80082f0 <_dtoa_r+0x658>
 8008142:	f040 8274 	bne.w	800862e <_dtoa_r+0x996>
 8008146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800814a:	2200      	movs	r2, #0
 800814c:	4b40      	ldr	r3, [pc, #256]	; (8008250 <_dtoa_r+0x5b8>)
 800814e:	f7f8 f9c3 	bl	80004d8 <__aeabi_dmul>
 8008152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008156:	f7f8 fc45 	bl	80009e4 <__aeabi_dcmpge>
 800815a:	9c02      	ldr	r4, [sp, #8]
 800815c:	4626      	mov	r6, r4
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 824a 	bne.w	80085f8 <_dtoa_r+0x960>
 8008164:	2331      	movs	r3, #49	; 0x31
 8008166:	9f08      	ldr	r7, [sp, #32]
 8008168:	f109 0901 	add.w	r9, r9, #1
 800816c:	f807 3b01 	strb.w	r3, [r7], #1
 8008170:	e246      	b.n	8008600 <_dtoa_r+0x968>
 8008172:	07e2      	lsls	r2, r4, #31
 8008174:	d505      	bpl.n	8008182 <_dtoa_r+0x4ea>
 8008176:	e9d6 2300 	ldrd	r2, r3, [r6]
 800817a:	f7f8 f9ad 	bl	80004d8 <__aeabi_dmul>
 800817e:	2301      	movs	r3, #1
 8008180:	3701      	adds	r7, #1
 8008182:	1064      	asrs	r4, r4, #1
 8008184:	3608      	adds	r6, #8
 8008186:	e76d      	b.n	8008064 <_dtoa_r+0x3cc>
 8008188:	2702      	movs	r7, #2
 800818a:	e770      	b.n	800806e <_dtoa_r+0x3d6>
 800818c:	46c8      	mov	r8, r9
 800818e:	9c02      	ldr	r4, [sp, #8]
 8008190:	e78f      	b.n	80080b2 <_dtoa_r+0x41a>
 8008192:	9908      	ldr	r1, [sp, #32]
 8008194:	4b29      	ldr	r3, [pc, #164]	; (800823c <_dtoa_r+0x5a4>)
 8008196:	4421      	add	r1, r4
 8008198:	9112      	str	r1, [sp, #72]	; 0x48
 800819a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800819c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d055      	beq.n	8008258 <_dtoa_r+0x5c0>
 80081ac:	2000      	movs	r0, #0
 80081ae:	4929      	ldr	r1, [pc, #164]	; (8008254 <_dtoa_r+0x5bc>)
 80081b0:	f7f8 fabc 	bl	800072c <__aeabi_ddiv>
 80081b4:	463b      	mov	r3, r7
 80081b6:	4632      	mov	r2, r6
 80081b8:	f7f7 ffd6 	bl	8000168 <__aeabi_dsub>
 80081bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081c0:	9f08      	ldr	r7, [sp, #32]
 80081c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c6:	f7f8 fc37 	bl	8000a38 <__aeabi_d2iz>
 80081ca:	4604      	mov	r4, r0
 80081cc:	f7f8 f91a 	bl	8000404 <__aeabi_i2d>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d8:	f7f7 ffc6 	bl	8000168 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	3430      	adds	r4, #48	; 0x30
 80081e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081ea:	f807 4b01 	strb.w	r4, [r7], #1
 80081ee:	f7f8 fbe5 	bl	80009bc <__aeabi_dcmplt>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d174      	bne.n	80082e0 <_dtoa_r+0x648>
 80081f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fa:	2000      	movs	r0, #0
 80081fc:	4911      	ldr	r1, [pc, #68]	; (8008244 <_dtoa_r+0x5ac>)
 80081fe:	f7f7 ffb3 	bl	8000168 <__aeabi_dsub>
 8008202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008206:	f7f8 fbd9 	bl	80009bc <__aeabi_dcmplt>
 800820a:	2800      	cmp	r0, #0
 800820c:	f040 80b6 	bne.w	800837c <_dtoa_r+0x6e4>
 8008210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008212:	429f      	cmp	r7, r3
 8008214:	f43f af7a 	beq.w	800810c <_dtoa_r+0x474>
 8008218:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800821c:	2200      	movs	r2, #0
 800821e:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <_dtoa_r+0x5b0>)
 8008220:	f7f8 f95a 	bl	80004d8 <__aeabi_dmul>
 8008224:	2200      	movs	r2, #0
 8008226:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800822a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <_dtoa_r+0x5b0>)
 8008230:	f7f8 f952 	bl	80004d8 <__aeabi_dmul>
 8008234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008238:	e7c3      	b.n	80081c2 <_dtoa_r+0x52a>
 800823a:	bf00      	nop
 800823c:	0800b618 	.word	0x0800b618
 8008240:	0800b5f0 	.word	0x0800b5f0
 8008244:	3ff00000 	.word	0x3ff00000
 8008248:	40240000 	.word	0x40240000
 800824c:	401c0000 	.word	0x401c0000
 8008250:	40140000 	.word	0x40140000
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f93c 	bl	80004d8 <__aeabi_dmul>
 8008260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008262:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008266:	9c08      	ldr	r4, [sp, #32]
 8008268:	9314      	str	r3, [sp, #80]	; 0x50
 800826a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800826e:	f7f8 fbe3 	bl	8000a38 <__aeabi_d2iz>
 8008272:	9015      	str	r0, [sp, #84]	; 0x54
 8008274:	f7f8 f8c6 	bl	8000404 <__aeabi_i2d>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008280:	f7f7 ff72 	bl	8000168 <__aeabi_dsub>
 8008284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008286:	4606      	mov	r6, r0
 8008288:	3330      	adds	r3, #48	; 0x30
 800828a:	f804 3b01 	strb.w	r3, [r4], #1
 800828e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008290:	460f      	mov	r7, r1
 8008292:	429c      	cmp	r4, r3
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	d124      	bne.n	80082e4 <_dtoa_r+0x64c>
 800829a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800829e:	4bb3      	ldr	r3, [pc, #716]	; (800856c <_dtoa_r+0x8d4>)
 80082a0:	f7f7 ff64 	bl	800016c <__adddf3>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fba4 	bl	80009f8 <__aeabi_dcmpgt>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d162      	bne.n	800837a <_dtoa_r+0x6e2>
 80082b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082b8:	2000      	movs	r0, #0
 80082ba:	49ac      	ldr	r1, [pc, #688]	; (800856c <_dtoa_r+0x8d4>)
 80082bc:	f7f7 ff54 	bl	8000168 <__aeabi_dsub>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fb78 	bl	80009bc <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f43f af1d 	beq.w	800810c <_dtoa_r+0x474>
 80082d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80082d4:	1e7b      	subs	r3, r7, #1
 80082d6:	9314      	str	r3, [sp, #80]	; 0x50
 80082d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80082dc:	2b30      	cmp	r3, #48	; 0x30
 80082de:	d0f8      	beq.n	80082d2 <_dtoa_r+0x63a>
 80082e0:	46c1      	mov	r9, r8
 80082e2:	e03a      	b.n	800835a <_dtoa_r+0x6c2>
 80082e4:	4ba2      	ldr	r3, [pc, #648]	; (8008570 <_dtoa_r+0x8d8>)
 80082e6:	f7f8 f8f7 	bl	80004d8 <__aeabi_dmul>
 80082ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ee:	e7bc      	b.n	800826a <_dtoa_r+0x5d2>
 80082f0:	9f08      	ldr	r7, [sp, #32]
 80082f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082fa:	f7f8 fa17 	bl	800072c <__aeabi_ddiv>
 80082fe:	f7f8 fb9b 	bl	8000a38 <__aeabi_d2iz>
 8008302:	4604      	mov	r4, r0
 8008304:	f7f8 f87e 	bl	8000404 <__aeabi_i2d>
 8008308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800830c:	f7f8 f8e4 	bl	80004d8 <__aeabi_dmul>
 8008310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008314:	460b      	mov	r3, r1
 8008316:	4602      	mov	r2, r0
 8008318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800831c:	f7f7 ff24 	bl	8000168 <__aeabi_dsub>
 8008320:	f807 6b01 	strb.w	r6, [r7], #1
 8008324:	9e08      	ldr	r6, [sp, #32]
 8008326:	9b02      	ldr	r3, [sp, #8]
 8008328:	1bbe      	subs	r6, r7, r6
 800832a:	42b3      	cmp	r3, r6
 800832c:	d13a      	bne.n	80083a4 <_dtoa_r+0x70c>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	f7f7 ff1b 	bl	800016c <__adddf3>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800833e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008342:	f7f8 fb59 	bl	80009f8 <__aeabi_dcmpgt>
 8008346:	bb58      	cbnz	r0, 80083a0 <_dtoa_r+0x708>
 8008348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800834c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008350:	f7f8 fb2a 	bl	80009a8 <__aeabi_dcmpeq>
 8008354:	b108      	cbz	r0, 800835a <_dtoa_r+0x6c2>
 8008356:	07e1      	lsls	r1, r4, #31
 8008358:	d422      	bmi.n	80083a0 <_dtoa_r+0x708>
 800835a:	4628      	mov	r0, r5
 800835c:	4651      	mov	r1, sl
 800835e:	f000 fae3 	bl	8008928 <_Bfree>
 8008362:	2300      	movs	r3, #0
 8008364:	703b      	strb	r3, [r7, #0]
 8008366:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008368:	f109 0001 	add.w	r0, r9, #1
 800836c:	6018      	str	r0, [r3, #0]
 800836e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008370:	2b00      	cmp	r3, #0
 8008372:	f43f acdf 	beq.w	8007d34 <_dtoa_r+0x9c>
 8008376:	601f      	str	r7, [r3, #0]
 8008378:	e4dc      	b.n	8007d34 <_dtoa_r+0x9c>
 800837a:	4627      	mov	r7, r4
 800837c:	463b      	mov	r3, r7
 800837e:	461f      	mov	r7, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a39      	cmp	r2, #57	; 0x39
 8008386:	d107      	bne.n	8008398 <_dtoa_r+0x700>
 8008388:	9a08      	ldr	r2, [sp, #32]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1f7      	bne.n	800837e <_dtoa_r+0x6e6>
 800838e:	2230      	movs	r2, #48	; 0x30
 8008390:	9908      	ldr	r1, [sp, #32]
 8008392:	f108 0801 	add.w	r8, r8, #1
 8008396:	700a      	strb	r2, [r1, #0]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	3201      	adds	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e79f      	b.n	80082e0 <_dtoa_r+0x648>
 80083a0:	46c8      	mov	r8, r9
 80083a2:	e7eb      	b.n	800837c <_dtoa_r+0x6e4>
 80083a4:	2200      	movs	r2, #0
 80083a6:	4b72      	ldr	r3, [pc, #456]	; (8008570 <_dtoa_r+0x8d8>)
 80083a8:	f7f8 f896 	bl	80004d8 <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f7f8 faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d098      	beq.n	80082f2 <_dtoa_r+0x65a>
 80083c0:	e7cb      	b.n	800835a <_dtoa_r+0x6c2>
 80083c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	f000 80cd 	beq.w	8008564 <_dtoa_r+0x8cc>
 80083ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083cc:	2a01      	cmp	r2, #1
 80083ce:	f300 80af 	bgt.w	8008530 <_dtoa_r+0x898>
 80083d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	f000 80a7 	beq.w	8008528 <_dtoa_r+0x890>
 80083da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083e0:	9f06      	ldr	r7, [sp, #24]
 80083e2:	9a06      	ldr	r2, [sp, #24]
 80083e4:	2101      	movs	r1, #1
 80083e6:	441a      	add	r2, r3
 80083e8:	9206      	str	r2, [sp, #24]
 80083ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ec:	4628      	mov	r0, r5
 80083ee:	441a      	add	r2, r3
 80083f0:	9209      	str	r2, [sp, #36]	; 0x24
 80083f2:	f000 fb53 	bl	8008a9c <__i2b>
 80083f6:	4606      	mov	r6, r0
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	dd0c      	ble.n	8008416 <_dtoa_r+0x77e>
 80083fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd09      	ble.n	8008416 <_dtoa_r+0x77e>
 8008402:	42bb      	cmp	r3, r7
 8008404:	bfa8      	it	ge
 8008406:	463b      	movge	r3, r7
 8008408:	9a06      	ldr	r2, [sp, #24]
 800840a:	1aff      	subs	r7, r7, r3
 800840c:	1ad2      	subs	r2, r2, r3
 800840e:	9206      	str	r2, [sp, #24]
 8008410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008418:	b1f3      	cbz	r3, 8008458 <_dtoa_r+0x7c0>
 800841a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80a9 	beq.w	8008574 <_dtoa_r+0x8dc>
 8008422:	2c00      	cmp	r4, #0
 8008424:	dd10      	ble.n	8008448 <_dtoa_r+0x7b0>
 8008426:	4631      	mov	r1, r6
 8008428:	4622      	mov	r2, r4
 800842a:	4628      	mov	r0, r5
 800842c:	f000 fbf0 	bl	8008c10 <__pow5mult>
 8008430:	4652      	mov	r2, sl
 8008432:	4601      	mov	r1, r0
 8008434:	4606      	mov	r6, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f000 fb46 	bl	8008ac8 <__multiply>
 800843c:	4680      	mov	r8, r0
 800843e:	4651      	mov	r1, sl
 8008440:	4628      	mov	r0, r5
 8008442:	f000 fa71 	bl	8008928 <_Bfree>
 8008446:	46c2      	mov	sl, r8
 8008448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844a:	1b1a      	subs	r2, r3, r4
 800844c:	d004      	beq.n	8008458 <_dtoa_r+0x7c0>
 800844e:	4651      	mov	r1, sl
 8008450:	4628      	mov	r0, r5
 8008452:	f000 fbdd 	bl	8008c10 <__pow5mult>
 8008456:	4682      	mov	sl, r0
 8008458:	2101      	movs	r1, #1
 800845a:	4628      	mov	r0, r5
 800845c:	f000 fb1e 	bl	8008a9c <__i2b>
 8008460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008462:	4604      	mov	r4, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	f340 8087 	ble.w	8008578 <_dtoa_r+0x8e0>
 800846a:	461a      	mov	r2, r3
 800846c:	4601      	mov	r1, r0
 800846e:	4628      	mov	r0, r5
 8008470:	f000 fbce 	bl	8008c10 <__pow5mult>
 8008474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008476:	4604      	mov	r4, r0
 8008478:	2b01      	cmp	r3, #1
 800847a:	f340 8080 	ble.w	800857e <_dtoa_r+0x8e6>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008488:	6918      	ldr	r0, [r3, #16]
 800848a:	f000 fab9 	bl	8008a00 <__hi0bits>
 800848e:	f1c0 0020 	rsb	r0, r0, #32
 8008492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008494:	4418      	add	r0, r3
 8008496:	f010 001f 	ands.w	r0, r0, #31
 800849a:	f000 8092 	beq.w	80085c2 <_dtoa_r+0x92a>
 800849e:	f1c0 0320 	rsb	r3, r0, #32
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	f340 808a 	ble.w	80085bc <_dtoa_r+0x924>
 80084a8:	f1c0 001c 	rsb	r0, r0, #28
 80084ac:	9b06      	ldr	r3, [sp, #24]
 80084ae:	4407      	add	r7, r0
 80084b0:	4403      	add	r3, r0
 80084b2:	9306      	str	r3, [sp, #24]
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	4403      	add	r3, r0
 80084b8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd05      	ble.n	80084cc <_dtoa_r+0x834>
 80084c0:	4651      	mov	r1, sl
 80084c2:	461a      	mov	r2, r3
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 fbfd 	bl	8008cc4 <__lshift>
 80084ca:	4682      	mov	sl, r0
 80084cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd05      	ble.n	80084de <_dtoa_r+0x846>
 80084d2:	4621      	mov	r1, r4
 80084d4:	461a      	mov	r2, r3
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 fbf4 	bl	8008cc4 <__lshift>
 80084dc:	4604      	mov	r4, r0
 80084de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d070      	beq.n	80085c6 <_dtoa_r+0x92e>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4650      	mov	r0, sl
 80084e8:	f000 fc58 	bl	8008d9c <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	da6a      	bge.n	80085c6 <_dtoa_r+0x92e>
 80084f0:	2300      	movs	r3, #0
 80084f2:	4651      	mov	r1, sl
 80084f4:	220a      	movs	r2, #10
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fa38 	bl	800896c <__multadd>
 80084fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fe:	4682      	mov	sl, r0
 8008500:	f109 39ff 	add.w	r9, r9, #4294967295
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8193 	beq.w	8008830 <_dtoa_r+0xb98>
 800850a:	4631      	mov	r1, r6
 800850c:	2300      	movs	r3, #0
 800850e:	220a      	movs	r2, #10
 8008510:	4628      	mov	r0, r5
 8008512:	f000 fa2b 	bl	800896c <__multadd>
 8008516:	f1bb 0f00 	cmp.w	fp, #0
 800851a:	4606      	mov	r6, r0
 800851c:	f300 8093 	bgt.w	8008646 <_dtoa_r+0x9ae>
 8008520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008522:	2b02      	cmp	r3, #2
 8008524:	dc57      	bgt.n	80085d6 <_dtoa_r+0x93e>
 8008526:	e08e      	b.n	8008646 <_dtoa_r+0x9ae>
 8008528:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800852a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800852e:	e756      	b.n	80083de <_dtoa_r+0x746>
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	1e5c      	subs	r4, r3, #1
 8008534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008536:	42a3      	cmp	r3, r4
 8008538:	bfb7      	itett	lt
 800853a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800853c:	1b1c      	subge	r4, r3, r4
 800853e:	1ae2      	sublt	r2, r4, r3
 8008540:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008542:	bfbe      	ittt	lt
 8008544:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008546:	189b      	addlt	r3, r3, r2
 8008548:	930e      	strlt	r3, [sp, #56]	; 0x38
 800854a:	9b02      	ldr	r3, [sp, #8]
 800854c:	bfb8      	it	lt
 800854e:	2400      	movlt	r4, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfbb      	ittet	lt
 8008554:	9b06      	ldrlt	r3, [sp, #24]
 8008556:	9a02      	ldrlt	r2, [sp, #8]
 8008558:	9f06      	ldrge	r7, [sp, #24]
 800855a:	1a9f      	sublt	r7, r3, r2
 800855c:	bfac      	ite	ge
 800855e:	9b02      	ldrge	r3, [sp, #8]
 8008560:	2300      	movlt	r3, #0
 8008562:	e73e      	b.n	80083e2 <_dtoa_r+0x74a>
 8008564:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008566:	9f06      	ldr	r7, [sp, #24]
 8008568:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800856a:	e745      	b.n	80083f8 <_dtoa_r+0x760>
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	40240000 	.word	0x40240000
 8008574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008576:	e76a      	b.n	800844e <_dtoa_r+0x7b6>
 8008578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857a:	2b01      	cmp	r3, #1
 800857c:	dc19      	bgt.n	80085b2 <_dtoa_r+0x91a>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	b9bb      	cbnz	r3, 80085b2 <_dtoa_r+0x91a>
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008588:	b99b      	cbnz	r3, 80085b2 <_dtoa_r+0x91a>
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	051b      	lsls	r3, r3, #20
 8008594:	b183      	cbz	r3, 80085b8 <_dtoa_r+0x920>
 8008596:	f04f 0801 	mov.w	r8, #1
 800859a:	9b06      	ldr	r3, [sp, #24]
 800859c:	3301      	adds	r3, #1
 800859e:	9306      	str	r3, [sp, #24]
 80085a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a2:	3301      	adds	r3, #1
 80085a4:	9309      	str	r3, [sp, #36]	; 0x24
 80085a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f47f af6a 	bne.w	8008482 <_dtoa_r+0x7ea>
 80085ae:	2001      	movs	r0, #1
 80085b0:	e76f      	b.n	8008492 <_dtoa_r+0x7fa>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	e7f6      	b.n	80085a6 <_dtoa_r+0x90e>
 80085b8:	4698      	mov	r8, r3
 80085ba:	e7f4      	b.n	80085a6 <_dtoa_r+0x90e>
 80085bc:	f43f af7d 	beq.w	80084ba <_dtoa_r+0x822>
 80085c0:	4618      	mov	r0, r3
 80085c2:	301c      	adds	r0, #28
 80085c4:	e772      	b.n	80084ac <_dtoa_r+0x814>
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc36      	bgt.n	800863a <_dtoa_r+0x9a2>
 80085cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	dd33      	ble.n	800863a <_dtoa_r+0x9a2>
 80085d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80085d6:	f1bb 0f00 	cmp.w	fp, #0
 80085da:	d10d      	bne.n	80085f8 <_dtoa_r+0x960>
 80085dc:	4621      	mov	r1, r4
 80085de:	465b      	mov	r3, fp
 80085e0:	2205      	movs	r2, #5
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9c2 	bl	800896c <__multadd>
 80085e8:	4601      	mov	r1, r0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4650      	mov	r0, sl
 80085ee:	f000 fbd5 	bl	8008d9c <__mcmp>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f73f adb6 	bgt.w	8008164 <_dtoa_r+0x4cc>
 80085f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085fa:	9f08      	ldr	r7, [sp, #32]
 80085fc:	ea6f 0903 	mvn.w	r9, r3
 8008600:	f04f 0800 	mov.w	r8, #0
 8008604:	4621      	mov	r1, r4
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f98e 	bl	8008928 <_Bfree>
 800860c:	2e00      	cmp	r6, #0
 800860e:	f43f aea4 	beq.w	800835a <_dtoa_r+0x6c2>
 8008612:	f1b8 0f00 	cmp.w	r8, #0
 8008616:	d005      	beq.n	8008624 <_dtoa_r+0x98c>
 8008618:	45b0      	cmp	r8, r6
 800861a:	d003      	beq.n	8008624 <_dtoa_r+0x98c>
 800861c:	4641      	mov	r1, r8
 800861e:	4628      	mov	r0, r5
 8008620:	f000 f982 	bl	8008928 <_Bfree>
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	f000 f97e 	bl	8008928 <_Bfree>
 800862c:	e695      	b.n	800835a <_dtoa_r+0x6c2>
 800862e:	2400      	movs	r4, #0
 8008630:	4626      	mov	r6, r4
 8008632:	e7e1      	b.n	80085f8 <_dtoa_r+0x960>
 8008634:	46c1      	mov	r9, r8
 8008636:	4626      	mov	r6, r4
 8008638:	e594      	b.n	8008164 <_dtoa_r+0x4cc>
 800863a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80fc 	beq.w	800883e <_dtoa_r+0xba6>
 8008646:	2f00      	cmp	r7, #0
 8008648:	dd05      	ble.n	8008656 <_dtoa_r+0x9be>
 800864a:	4631      	mov	r1, r6
 800864c:	463a      	mov	r2, r7
 800864e:	4628      	mov	r0, r5
 8008650:	f000 fb38 	bl	8008cc4 <__lshift>
 8008654:	4606      	mov	r6, r0
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	d05c      	beq.n	8008716 <_dtoa_r+0xa7e>
 800865c:	4628      	mov	r0, r5
 800865e:	6871      	ldr	r1, [r6, #4]
 8008660:	f000 f922 	bl	80088a8 <_Balloc>
 8008664:	4607      	mov	r7, r0
 8008666:	b928      	cbnz	r0, 8008674 <_dtoa_r+0x9dc>
 8008668:	4602      	mov	r2, r0
 800866a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800866e:	4b7e      	ldr	r3, [pc, #504]	; (8008868 <_dtoa_r+0xbd0>)
 8008670:	f7ff bb26 	b.w	8007cc0 <_dtoa_r+0x28>
 8008674:	6932      	ldr	r2, [r6, #16]
 8008676:	f106 010c 	add.w	r1, r6, #12
 800867a:	3202      	adds	r2, #2
 800867c:	0092      	lsls	r2, r2, #2
 800867e:	300c      	adds	r0, #12
 8008680:	f7fe fde6 	bl	8007250 <memcpy>
 8008684:	2201      	movs	r2, #1
 8008686:	4639      	mov	r1, r7
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fb1b 	bl	8008cc4 <__lshift>
 800868e:	46b0      	mov	r8, r6
 8008690:	4606      	mov	r6, r0
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	3301      	adds	r3, #1
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	445b      	add	r3, fp
 800869c:	930a      	str	r3, [sp, #40]	; 0x28
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	4621      	mov	r1, r4
 80086aa:	4650      	mov	r0, sl
 80086ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80086b0:	f7ff fa64 	bl	8007b7c <quorem>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4641      	mov	r1, r8
 80086b8:	3330      	adds	r3, #48	; 0x30
 80086ba:	9004      	str	r0, [sp, #16]
 80086bc:	4650      	mov	r0, sl
 80086be:	930b      	str	r3, [sp, #44]	; 0x2c
 80086c0:	f000 fb6c 	bl	8008d9c <__mcmp>
 80086c4:	4632      	mov	r2, r6
 80086c6:	9006      	str	r0, [sp, #24]
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 fb82 	bl	8008dd4 <__mdiff>
 80086d0:	68c2      	ldr	r2, [r0, #12]
 80086d2:	4607      	mov	r7, r0
 80086d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d6:	bb02      	cbnz	r2, 800871a <_dtoa_r+0xa82>
 80086d8:	4601      	mov	r1, r0
 80086da:	4650      	mov	r0, sl
 80086dc:	f000 fb5e 	bl	8008d9c <__mcmp>
 80086e0:	4602      	mov	r2, r0
 80086e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e4:	4639      	mov	r1, r7
 80086e6:	4628      	mov	r0, r5
 80086e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80086ec:	f000 f91c 	bl	8008928 <_Bfree>
 80086f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086f4:	9f02      	ldr	r7, [sp, #8]
 80086f6:	ea43 0102 	orr.w	r1, r3, r2
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	430b      	orrs	r3, r1
 80086fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008700:	d10d      	bne.n	800871e <_dtoa_r+0xa86>
 8008702:	2b39      	cmp	r3, #57	; 0x39
 8008704:	d027      	beq.n	8008756 <_dtoa_r+0xabe>
 8008706:	9a06      	ldr	r2, [sp, #24]
 8008708:	2a00      	cmp	r2, #0
 800870a:	dd01      	ble.n	8008710 <_dtoa_r+0xa78>
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	3331      	adds	r3, #49	; 0x31
 8008710:	f88b 3000 	strb.w	r3, [fp]
 8008714:	e776      	b.n	8008604 <_dtoa_r+0x96c>
 8008716:	4630      	mov	r0, r6
 8008718:	e7b9      	b.n	800868e <_dtoa_r+0x9f6>
 800871a:	2201      	movs	r2, #1
 800871c:	e7e2      	b.n	80086e4 <_dtoa_r+0xa4c>
 800871e:	9906      	ldr	r1, [sp, #24]
 8008720:	2900      	cmp	r1, #0
 8008722:	db04      	blt.n	800872e <_dtoa_r+0xa96>
 8008724:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008726:	4301      	orrs	r1, r0
 8008728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800872a:	4301      	orrs	r1, r0
 800872c:	d120      	bne.n	8008770 <_dtoa_r+0xad8>
 800872e:	2a00      	cmp	r2, #0
 8008730:	ddee      	ble.n	8008710 <_dtoa_r+0xa78>
 8008732:	4651      	mov	r1, sl
 8008734:	2201      	movs	r2, #1
 8008736:	4628      	mov	r0, r5
 8008738:	9302      	str	r3, [sp, #8]
 800873a:	f000 fac3 	bl	8008cc4 <__lshift>
 800873e:	4621      	mov	r1, r4
 8008740:	4682      	mov	sl, r0
 8008742:	f000 fb2b 	bl	8008d9c <__mcmp>
 8008746:	2800      	cmp	r0, #0
 8008748:	9b02      	ldr	r3, [sp, #8]
 800874a:	dc02      	bgt.n	8008752 <_dtoa_r+0xaba>
 800874c:	d1e0      	bne.n	8008710 <_dtoa_r+0xa78>
 800874e:	07da      	lsls	r2, r3, #31
 8008750:	d5de      	bpl.n	8008710 <_dtoa_r+0xa78>
 8008752:	2b39      	cmp	r3, #57	; 0x39
 8008754:	d1da      	bne.n	800870c <_dtoa_r+0xa74>
 8008756:	2339      	movs	r3, #57	; 0x39
 8008758:	f88b 3000 	strb.w	r3, [fp]
 800875c:	463b      	mov	r3, r7
 800875e:	461f      	mov	r7, r3
 8008760:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008764:	3b01      	subs	r3, #1
 8008766:	2a39      	cmp	r2, #57	; 0x39
 8008768:	d050      	beq.n	800880c <_dtoa_r+0xb74>
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e749      	b.n	8008604 <_dtoa_r+0x96c>
 8008770:	2a00      	cmp	r2, #0
 8008772:	dd03      	ble.n	800877c <_dtoa_r+0xae4>
 8008774:	2b39      	cmp	r3, #57	; 0x39
 8008776:	d0ee      	beq.n	8008756 <_dtoa_r+0xabe>
 8008778:	3301      	adds	r3, #1
 800877a:	e7c9      	b.n	8008710 <_dtoa_r+0xa78>
 800877c:	9a02      	ldr	r2, [sp, #8]
 800877e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008780:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008784:	428a      	cmp	r2, r1
 8008786:	d02a      	beq.n	80087de <_dtoa_r+0xb46>
 8008788:	4651      	mov	r1, sl
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4628      	mov	r0, r5
 8008790:	f000 f8ec 	bl	800896c <__multadd>
 8008794:	45b0      	cmp	r8, r6
 8008796:	4682      	mov	sl, r0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 020a 	mov.w	r2, #10
 80087a0:	4641      	mov	r1, r8
 80087a2:	4628      	mov	r0, r5
 80087a4:	d107      	bne.n	80087b6 <_dtoa_r+0xb1e>
 80087a6:	f000 f8e1 	bl	800896c <__multadd>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4606      	mov	r6, r0
 80087ae:	9b02      	ldr	r3, [sp, #8]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	e777      	b.n	80086a6 <_dtoa_r+0xa0e>
 80087b6:	f000 f8d9 	bl	800896c <__multadd>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4680      	mov	r8, r0
 80087be:	2300      	movs	r3, #0
 80087c0:	220a      	movs	r2, #10
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f8d2 	bl	800896c <__multadd>
 80087c8:	4606      	mov	r6, r0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0xb16>
 80087cc:	f1bb 0f00 	cmp.w	fp, #0
 80087d0:	bfcc      	ite	gt
 80087d2:	465f      	movgt	r7, fp
 80087d4:	2701      	movle	r7, #1
 80087d6:	f04f 0800 	mov.w	r8, #0
 80087da:	9a08      	ldr	r2, [sp, #32]
 80087dc:	4417      	add	r7, r2
 80087de:	4651      	mov	r1, sl
 80087e0:	2201      	movs	r2, #1
 80087e2:	4628      	mov	r0, r5
 80087e4:	9302      	str	r3, [sp, #8]
 80087e6:	f000 fa6d 	bl	8008cc4 <__lshift>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4682      	mov	sl, r0
 80087ee:	f000 fad5 	bl	8008d9c <__mcmp>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	dcb2      	bgt.n	800875c <_dtoa_r+0xac4>
 80087f6:	d102      	bne.n	80087fe <_dtoa_r+0xb66>
 80087f8:	9b02      	ldr	r3, [sp, #8]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d4ae      	bmi.n	800875c <_dtoa_r+0xac4>
 80087fe:	463b      	mov	r3, r7
 8008800:	461f      	mov	r7, r3
 8008802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008806:	2a30      	cmp	r2, #48	; 0x30
 8008808:	d0fa      	beq.n	8008800 <_dtoa_r+0xb68>
 800880a:	e6fb      	b.n	8008604 <_dtoa_r+0x96c>
 800880c:	9a08      	ldr	r2, [sp, #32]
 800880e:	429a      	cmp	r2, r3
 8008810:	d1a5      	bne.n	800875e <_dtoa_r+0xac6>
 8008812:	2331      	movs	r3, #49	; 0x31
 8008814:	f109 0901 	add.w	r9, r9, #1
 8008818:	7013      	strb	r3, [r2, #0]
 800881a:	e6f3      	b.n	8008604 <_dtoa_r+0x96c>
 800881c:	4b13      	ldr	r3, [pc, #76]	; (800886c <_dtoa_r+0xbd4>)
 800881e:	f7ff baa7 	b.w	8007d70 <_dtoa_r+0xd8>
 8008822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008824:	2b00      	cmp	r3, #0
 8008826:	f47f aa80 	bne.w	8007d2a <_dtoa_r+0x92>
 800882a:	4b11      	ldr	r3, [pc, #68]	; (8008870 <_dtoa_r+0xbd8>)
 800882c:	f7ff baa0 	b.w	8007d70 <_dtoa_r+0xd8>
 8008830:	f1bb 0f00 	cmp.w	fp, #0
 8008834:	dc03      	bgt.n	800883e <_dtoa_r+0xba6>
 8008836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008838:	2b02      	cmp	r3, #2
 800883a:	f73f aecc 	bgt.w	80085d6 <_dtoa_r+0x93e>
 800883e:	9f08      	ldr	r7, [sp, #32]
 8008840:	4621      	mov	r1, r4
 8008842:	4650      	mov	r0, sl
 8008844:	f7ff f99a 	bl	8007b7c <quorem>
 8008848:	9a08      	ldr	r2, [sp, #32]
 800884a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800884e:	f807 3b01 	strb.w	r3, [r7], #1
 8008852:	1aba      	subs	r2, r7, r2
 8008854:	4593      	cmp	fp, r2
 8008856:	ddb9      	ble.n	80087cc <_dtoa_r+0xb34>
 8008858:	4651      	mov	r1, sl
 800885a:	2300      	movs	r3, #0
 800885c:	220a      	movs	r2, #10
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f884 	bl	800896c <__multadd>
 8008864:	4682      	mov	sl, r0
 8008866:	e7eb      	b.n	8008840 <_dtoa_r+0xba8>
 8008868:	0800b57f 	.word	0x0800b57f
 800886c:	0800b4d8 	.word	0x0800b4d8
 8008870:	0800b4fc 	.word	0x0800b4fc

08008874 <_localeconv_r>:
 8008874:	4800      	ldr	r0, [pc, #0]	; (8008878 <_localeconv_r+0x4>)
 8008876:	4770      	bx	lr
 8008878:	20000174 	.word	0x20000174

0800887c <malloc>:
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <malloc+0xc>)
 800887e:	4601      	mov	r1, r0
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f000 bbed 	b.w	8009060 <_malloc_r>
 8008886:	bf00      	nop
 8008888:	20000020 	.word	0x20000020

0800888c <memchr>:
 800888c:	4603      	mov	r3, r0
 800888e:	b510      	push	{r4, lr}
 8008890:	b2c9      	uxtb	r1, r1
 8008892:	4402      	add	r2, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	4618      	mov	r0, r3
 8008898:	d101      	bne.n	800889e <memchr+0x12>
 800889a:	2000      	movs	r0, #0
 800889c:	e003      	b.n	80088a6 <memchr+0x1a>
 800889e:	7804      	ldrb	r4, [r0, #0]
 80088a0:	3301      	adds	r3, #1
 80088a2:	428c      	cmp	r4, r1
 80088a4:	d1f6      	bne.n	8008894 <memchr+0x8>
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <_Balloc>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Balloc+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff ffe2 	bl	800887c <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6260      	str	r0, [r4, #36]	; 0x24
 80088bc:	b920      	cbnz	r0, 80088c8 <_Balloc+0x20>
 80088be:	2166      	movs	r1, #102	; 0x66
 80088c0:	4b17      	ldr	r3, [pc, #92]	; (8008920 <_Balloc+0x78>)
 80088c2:	4818      	ldr	r0, [pc, #96]	; (8008924 <_Balloc+0x7c>)
 80088c4:	f000 fd92 	bl	80093ec <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088d2:	68f3      	ldr	r3, [r6, #12]
 80088d4:	b183      	cbz	r3, 80088f8 <_Balloc+0x50>
 80088d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	b9b8      	cbnz	r0, 8008910 <_Balloc+0x68>
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f605 	lsl.w	r6, r1, r5
 80088e6:	1d72      	adds	r2, r6, #5
 80088e8:	4620      	mov	r0, r4
 80088ea:	0092      	lsls	r2, r2, #2
 80088ec:	f000 fb5e 	bl	8008fac <_calloc_r>
 80088f0:	b160      	cbz	r0, 800890c <_Balloc+0x64>
 80088f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f6:	e00e      	b.n	8008916 <_Balloc+0x6e>
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	2104      	movs	r1, #4
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fb55 	bl	8008fac <_calloc_r>
 8008902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008904:	60f0      	str	r0, [r6, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <_Balloc+0x2e>
 800890c:	2000      	movs	r0, #0
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008916:	2300      	movs	r3, #0
 8008918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800891c:	e7f7      	b.n	800890e <_Balloc+0x66>
 800891e:	bf00      	nop
 8008920:	0800b509 	.word	0x0800b509
 8008924:	0800b590 	.word	0x0800b590

08008928 <_Bfree>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Bfree+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff ffa2 	bl	800887c <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	6268      	str	r0, [r5, #36]	; 0x24
 800893c:	b920      	cbnz	r0, 8008948 <_Bfree+0x20>
 800893e:	218a      	movs	r1, #138	; 0x8a
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <_Bfree+0x3c>)
 8008942:	4809      	ldr	r0, [pc, #36]	; (8008968 <_Bfree+0x40>)
 8008944:	f000 fd52 	bl	80093ec <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	b13c      	cbz	r4, 8008962 <_Bfree+0x3a>
 8008952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	0800b509 	.word	0x0800b509
 8008968:	0800b590 	.word	0x0800b590

0800896c <__multadd>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	4698      	mov	r8, r3
 8008972:	460c      	mov	r4, r1
 8008974:	2300      	movs	r3, #0
 8008976:	690e      	ldr	r6, [r1, #16]
 8008978:	4607      	mov	r7, r0
 800897a:	f101 0014 	add.w	r0, r1, #20
 800897e:	6805      	ldr	r5, [r0, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	b2a9      	uxth	r1, r5
 8008984:	fb02 8101 	mla	r1, r2, r1, r8
 8008988:	0c2d      	lsrs	r5, r5, #16
 800898a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800898e:	fb02 c505 	mla	r5, r2, r5, ip
 8008992:	b289      	uxth	r1, r1
 8008994:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008998:	429e      	cmp	r6, r3
 800899a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800899e:	f840 1b04 	str.w	r1, [r0], #4
 80089a2:	dcec      	bgt.n	800897e <__multadd+0x12>
 80089a4:	f1b8 0f00 	cmp.w	r8, #0
 80089a8:	d022      	beq.n	80089f0 <__multadd+0x84>
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	42b3      	cmp	r3, r6
 80089ae:	dc19      	bgt.n	80089e4 <__multadd+0x78>
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	4638      	mov	r0, r7
 80089b4:	3101      	adds	r1, #1
 80089b6:	f7ff ff77 	bl	80088a8 <_Balloc>
 80089ba:	4605      	mov	r5, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__multadd+0x5e>
 80089be:	4602      	mov	r2, r0
 80089c0:	21b5      	movs	r1, #181	; 0xb5
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <__multadd+0x8c>)
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <__multadd+0x90>)
 80089c6:	f000 fd11 	bl	80093ec <__assert_func>
 80089ca:	6922      	ldr	r2, [r4, #16]
 80089cc:	f104 010c 	add.w	r1, r4, #12
 80089d0:	3202      	adds	r2, #2
 80089d2:	0092      	lsls	r2, r2, #2
 80089d4:	300c      	adds	r0, #12
 80089d6:	f7fe fc3b 	bl	8007250 <memcpy>
 80089da:	4621      	mov	r1, r4
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ffa3 	bl	8008928 <_Bfree>
 80089e2:	462c      	mov	r4, r5
 80089e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80089e8:	3601      	adds	r6, #1
 80089ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80089ee:	6126      	str	r6, [r4, #16]
 80089f0:	4620      	mov	r0, r4
 80089f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f6:	bf00      	nop
 80089f8:	0800b57f 	.word	0x0800b57f
 80089fc:	0800b590 	.word	0x0800b590

08008a00 <__hi0bits>:
 8008a00:	0c02      	lsrs	r2, r0, #16
 8008a02:	0412      	lsls	r2, r2, #16
 8008a04:	4603      	mov	r3, r0
 8008a06:	b9ca      	cbnz	r2, 8008a3c <__hi0bits+0x3c>
 8008a08:	0403      	lsls	r3, r0, #16
 8008a0a:	2010      	movs	r0, #16
 8008a0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a10:	bf04      	itt	eq
 8008a12:	021b      	lsleq	r3, r3, #8
 8008a14:	3008      	addeq	r0, #8
 8008a16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a1a:	bf04      	itt	eq
 8008a1c:	011b      	lsleq	r3, r3, #4
 8008a1e:	3004      	addeq	r0, #4
 8008a20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a24:	bf04      	itt	eq
 8008a26:	009b      	lsleq	r3, r3, #2
 8008a28:	3002      	addeq	r0, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	db05      	blt.n	8008a3a <__hi0bits+0x3a>
 8008a2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008a32:	f100 0001 	add.w	r0, r0, #1
 8008a36:	bf08      	it	eq
 8008a38:	2020      	moveq	r0, #32
 8008a3a:	4770      	bx	lr
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e7e5      	b.n	8008a0c <__hi0bits+0xc>

08008a40 <__lo0bits>:
 8008a40:	6803      	ldr	r3, [r0, #0]
 8008a42:	4602      	mov	r2, r0
 8008a44:	f013 0007 	ands.w	r0, r3, #7
 8008a48:	d00b      	beq.n	8008a62 <__lo0bits+0x22>
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d422      	bmi.n	8008a94 <__lo0bits+0x54>
 8008a4e:	0798      	lsls	r0, r3, #30
 8008a50:	bf49      	itett	mi
 8008a52:	085b      	lsrmi	r3, r3, #1
 8008a54:	089b      	lsrpl	r3, r3, #2
 8008a56:	2001      	movmi	r0, #1
 8008a58:	6013      	strmi	r3, [r2, #0]
 8008a5a:	bf5c      	itt	pl
 8008a5c:	2002      	movpl	r0, #2
 8008a5e:	6013      	strpl	r3, [r2, #0]
 8008a60:	4770      	bx	lr
 8008a62:	b299      	uxth	r1, r3
 8008a64:	b909      	cbnz	r1, 8008a6a <__lo0bits+0x2a>
 8008a66:	2010      	movs	r0, #16
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a6e:	bf04      	itt	eq
 8008a70:	0a1b      	lsreq	r3, r3, #8
 8008a72:	3008      	addeq	r0, #8
 8008a74:	0719      	lsls	r1, r3, #28
 8008a76:	bf04      	itt	eq
 8008a78:	091b      	lsreq	r3, r3, #4
 8008a7a:	3004      	addeq	r0, #4
 8008a7c:	0799      	lsls	r1, r3, #30
 8008a7e:	bf04      	itt	eq
 8008a80:	089b      	lsreq	r3, r3, #2
 8008a82:	3002      	addeq	r0, #2
 8008a84:	07d9      	lsls	r1, r3, #31
 8008a86:	d403      	bmi.n	8008a90 <__lo0bits+0x50>
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	f100 0001 	add.w	r0, r0, #1
 8008a8e:	d003      	beq.n	8008a98 <__lo0bits+0x58>
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4770      	bx	lr
 8008a94:	2000      	movs	r0, #0
 8008a96:	4770      	bx	lr
 8008a98:	2020      	movs	r0, #32
 8008a9a:	4770      	bx	lr

08008a9c <__i2b>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	f7ff ff01 	bl	80088a8 <_Balloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <__i2b+0x1a>
 8008aaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008aae:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <__i2b+0x24>)
 8008ab0:	4804      	ldr	r0, [pc, #16]	; (8008ac4 <__i2b+0x28>)
 8008ab2:	f000 fc9b 	bl	80093ec <__assert_func>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6144      	str	r4, [r0, #20]
 8008aba:	6103      	str	r3, [r0, #16]
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800b57f 	.word	0x0800b57f
 8008ac4:	0800b590 	.word	0x0800b590

08008ac8 <__multiply>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	4614      	mov	r4, r2
 8008ace:	690a      	ldr	r2, [r1, #16]
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	bfbe      	ittt	lt
 8008ad8:	460b      	movlt	r3, r1
 8008ada:	4625      	movlt	r5, r4
 8008adc:	461c      	movlt	r4, r3
 8008ade:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ae2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ae6:	68ab      	ldr	r3, [r5, #8]
 8008ae8:	6869      	ldr	r1, [r5, #4]
 8008aea:	eb0a 0709 	add.w	r7, sl, r9
 8008aee:	42bb      	cmp	r3, r7
 8008af0:	b085      	sub	sp, #20
 8008af2:	bfb8      	it	lt
 8008af4:	3101      	addlt	r1, #1
 8008af6:	f7ff fed7 	bl	80088a8 <_Balloc>
 8008afa:	b930      	cbnz	r0, 8008b0a <__multiply+0x42>
 8008afc:	4602      	mov	r2, r0
 8008afe:	f240 115d 	movw	r1, #349	; 0x15d
 8008b02:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <__multiply+0x140>)
 8008b04:	4841      	ldr	r0, [pc, #260]	; (8008c0c <__multiply+0x144>)
 8008b06:	f000 fc71 	bl	80093ec <__assert_func>
 8008b0a:	f100 0614 	add.w	r6, r0, #20
 8008b0e:	4633      	mov	r3, r6
 8008b10:	2200      	movs	r2, #0
 8008b12:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b16:	4543      	cmp	r3, r8
 8008b18:	d31e      	bcc.n	8008b58 <__multiply+0x90>
 8008b1a:	f105 0c14 	add.w	ip, r5, #20
 8008b1e:	f104 0314 	add.w	r3, r4, #20
 8008b22:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b26:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b2a:	9202      	str	r2, [sp, #8]
 8008b2c:	ebac 0205 	sub.w	r2, ip, r5
 8008b30:	3a15      	subs	r2, #21
 8008b32:	f022 0203 	bic.w	r2, r2, #3
 8008b36:	3204      	adds	r2, #4
 8008b38:	f105 0115 	add.w	r1, r5, #21
 8008b3c:	458c      	cmp	ip, r1
 8008b3e:	bf38      	it	cc
 8008b40:	2204      	movcc	r2, #4
 8008b42:	9201      	str	r2, [sp, #4]
 8008b44:	9a02      	ldr	r2, [sp, #8]
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d808      	bhi.n	8008b5e <__multiply+0x96>
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	dc55      	bgt.n	8008bfc <__multiply+0x134>
 8008b50:	6107      	str	r7, [r0, #16]
 8008b52:	b005      	add	sp, #20
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	e7db      	b.n	8008b16 <__multiply+0x4e>
 8008b5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b62:	f1ba 0f00 	cmp.w	sl, #0
 8008b66:	d020      	beq.n	8008baa <__multiply+0xe2>
 8008b68:	46b1      	mov	r9, r6
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f105 0e14 	add.w	lr, r5, #20
 8008b70:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b74:	f8d9 b000 	ldr.w	fp, [r9]
 8008b78:	b2a1      	uxth	r1, r4
 8008b7a:	fa1f fb8b 	uxth.w	fp, fp
 8008b7e:	fb0a b101 	mla	r1, sl, r1, fp
 8008b82:	4411      	add	r1, r2
 8008b84:	f8d9 2000 	ldr.w	r2, [r9]
 8008b88:	0c24      	lsrs	r4, r4, #16
 8008b8a:	0c12      	lsrs	r2, r2, #16
 8008b8c:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b90:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b94:	b289      	uxth	r1, r1
 8008b96:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b9a:	45f4      	cmp	ip, lr
 8008b9c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ba0:	f849 1b04 	str.w	r1, [r9], #4
 8008ba4:	d8e4      	bhi.n	8008b70 <__multiply+0xa8>
 8008ba6:	9901      	ldr	r1, [sp, #4]
 8008ba8:	5072      	str	r2, [r6, r1]
 8008baa:	9a03      	ldr	r2, [sp, #12]
 8008bac:	3304      	adds	r3, #4
 8008bae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bb2:	f1b9 0f00 	cmp.w	r9, #0
 8008bb6:	d01f      	beq.n	8008bf8 <__multiply+0x130>
 8008bb8:	46b6      	mov	lr, r6
 8008bba:	f04f 0a00 	mov.w	sl, #0
 8008bbe:	6834      	ldr	r4, [r6, #0]
 8008bc0:	f105 0114 	add.w	r1, r5, #20
 8008bc4:	880a      	ldrh	r2, [r1, #0]
 8008bc6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008bca:	b2a4      	uxth	r4, r4
 8008bcc:	fb09 b202 	mla	r2, r9, r2, fp
 8008bd0:	4492      	add	sl, r2
 8008bd2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008bd6:	f84e 4b04 	str.w	r4, [lr], #4
 8008bda:	f851 4b04 	ldr.w	r4, [r1], #4
 8008bde:	f8be 2000 	ldrh.w	r2, [lr]
 8008be2:	0c24      	lsrs	r4, r4, #16
 8008be4:	fb09 2404 	mla	r4, r9, r4, r2
 8008be8:	458c      	cmp	ip, r1
 8008bea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008bee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bf2:	d8e7      	bhi.n	8008bc4 <__multiply+0xfc>
 8008bf4:	9a01      	ldr	r2, [sp, #4]
 8008bf6:	50b4      	str	r4, [r6, r2]
 8008bf8:	3604      	adds	r6, #4
 8008bfa:	e7a3      	b.n	8008b44 <__multiply+0x7c>
 8008bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1a5      	bne.n	8008b50 <__multiply+0x88>
 8008c04:	3f01      	subs	r7, #1
 8008c06:	e7a1      	b.n	8008b4c <__multiply+0x84>
 8008c08:	0800b57f 	.word	0x0800b57f
 8008c0c:	0800b590 	.word	0x0800b590

08008c10 <__pow5mult>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4615      	mov	r5, r2
 8008c16:	f012 0203 	ands.w	r2, r2, #3
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	d007      	beq.n	8008c30 <__pow5mult+0x20>
 8008c20:	4c25      	ldr	r4, [pc, #148]	; (8008cb8 <__pow5mult+0xa8>)
 8008c22:	3a01      	subs	r2, #1
 8008c24:	2300      	movs	r3, #0
 8008c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c2a:	f7ff fe9f 	bl	800896c <__multadd>
 8008c2e:	4607      	mov	r7, r0
 8008c30:	10ad      	asrs	r5, r5, #2
 8008c32:	d03d      	beq.n	8008cb0 <__pow5mult+0xa0>
 8008c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c36:	b97c      	cbnz	r4, 8008c58 <__pow5mult+0x48>
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f7ff fe1f 	bl	800887c <malloc>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6270      	str	r0, [r6, #36]	; 0x24
 8008c42:	b928      	cbnz	r0, 8008c50 <__pow5mult+0x40>
 8008c44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c48:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <__pow5mult+0xac>)
 8008c4a:	481d      	ldr	r0, [pc, #116]	; (8008cc0 <__pow5mult+0xb0>)
 8008c4c:	f000 fbce 	bl	80093ec <__assert_func>
 8008c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c54:	6004      	str	r4, [r0, #0]
 8008c56:	60c4      	str	r4, [r0, #12]
 8008c58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c60:	b94c      	cbnz	r4, 8008c76 <__pow5mult+0x66>
 8008c62:	f240 2171 	movw	r1, #625	; 0x271
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ff18 	bl	8008a9c <__i2b>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c74:	6003      	str	r3, [r0, #0]
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	07eb      	lsls	r3, r5, #31
 8008c7c:	d50a      	bpl.n	8008c94 <__pow5mult+0x84>
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4622      	mov	r2, r4
 8008c82:	4630      	mov	r0, r6
 8008c84:	f7ff ff20 	bl	8008ac8 <__multiply>
 8008c88:	4680      	mov	r8, r0
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7ff fe4b 	bl	8008928 <_Bfree>
 8008c92:	4647      	mov	r7, r8
 8008c94:	106d      	asrs	r5, r5, #1
 8008c96:	d00b      	beq.n	8008cb0 <__pow5mult+0xa0>
 8008c98:	6820      	ldr	r0, [r4, #0]
 8008c9a:	b938      	cbnz	r0, 8008cac <__pow5mult+0x9c>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7ff ff11 	bl	8008ac8 <__multiply>
 8008ca6:	6020      	str	r0, [r4, #0]
 8008ca8:	f8c0 9000 	str.w	r9, [r0]
 8008cac:	4604      	mov	r4, r0
 8008cae:	e7e4      	b.n	8008c7a <__pow5mult+0x6a>
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb6:	bf00      	nop
 8008cb8:	0800b6e0 	.word	0x0800b6e0
 8008cbc:	0800b509 	.word	0x0800b509
 8008cc0:	0800b590 	.word	0x0800b590

08008cc4 <__lshift>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4607      	mov	r7, r0
 8008ccc:	4691      	mov	r9, r2
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	6849      	ldr	r1, [r1, #4]
 8008cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cdc:	f108 0601 	add.w	r6, r8, #1
 8008ce0:	42b3      	cmp	r3, r6
 8008ce2:	db0b      	blt.n	8008cfc <__lshift+0x38>
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f7ff fddf 	bl	80088a8 <_Balloc>
 8008cea:	4605      	mov	r5, r0
 8008cec:	b948      	cbnz	r0, 8008d02 <__lshift+0x3e>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cf4:	4b27      	ldr	r3, [pc, #156]	; (8008d94 <__lshift+0xd0>)
 8008cf6:	4828      	ldr	r0, [pc, #160]	; (8008d98 <__lshift+0xd4>)
 8008cf8:	f000 fb78 	bl	80093ec <__assert_func>
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	e7ee      	b.n	8008ce0 <__lshift+0x1c>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f100 0114 	add.w	r1, r0, #20
 8008d08:	f100 0210 	add.w	r2, r0, #16
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	4553      	cmp	r3, sl
 8008d10:	db33      	blt.n	8008d7a <__lshift+0xb6>
 8008d12:	6920      	ldr	r0, [r4, #16]
 8008d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d18:	f104 0314 	add.w	r3, r4, #20
 8008d1c:	f019 091f 	ands.w	r9, r9, #31
 8008d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d28:	d02b      	beq.n	8008d82 <__lshift+0xbe>
 8008d2a:	468a      	mov	sl, r1
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	fa00 f009 	lsl.w	r0, r0, r9
 8008d38:	4302      	orrs	r2, r0
 8008d3a:	f84a 2b04 	str.w	r2, [sl], #4
 8008d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d42:	459c      	cmp	ip, r3
 8008d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d48:	d8f3      	bhi.n	8008d32 <__lshift+0x6e>
 8008d4a:	ebac 0304 	sub.w	r3, ip, r4
 8008d4e:	3b15      	subs	r3, #21
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	3304      	adds	r3, #4
 8008d56:	f104 0015 	add.w	r0, r4, #21
 8008d5a:	4584      	cmp	ip, r0
 8008d5c:	bf38      	it	cc
 8008d5e:	2304      	movcc	r3, #4
 8008d60:	50ca      	str	r2, [r1, r3]
 8008d62:	b10a      	cbz	r2, 8008d68 <__lshift+0xa4>
 8008d64:	f108 0602 	add.w	r6, r8, #2
 8008d68:	3e01      	subs	r6, #1
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	612e      	str	r6, [r5, #16]
 8008d70:	f7ff fdda 	bl	8008928 <_Bfree>
 8008d74:	4628      	mov	r0, r5
 8008d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d7e:	3301      	adds	r3, #1
 8008d80:	e7c5      	b.n	8008d0e <__lshift+0x4a>
 8008d82:	3904      	subs	r1, #4
 8008d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d88:	459c      	cmp	ip, r3
 8008d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d8e:	d8f9      	bhi.n	8008d84 <__lshift+0xc0>
 8008d90:	e7ea      	b.n	8008d68 <__lshift+0xa4>
 8008d92:	bf00      	nop
 8008d94:	0800b57f 	.word	0x0800b57f
 8008d98:	0800b590 	.word	0x0800b590

08008d9c <__mcmp>:
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	690a      	ldr	r2, [r1, #16]
 8008da0:	6900      	ldr	r0, [r0, #16]
 8008da2:	b530      	push	{r4, r5, lr}
 8008da4:	1a80      	subs	r0, r0, r2
 8008da6:	d10d      	bne.n	8008dc4 <__mcmp+0x28>
 8008da8:	3314      	adds	r3, #20
 8008daa:	3114      	adds	r1, #20
 8008dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dbc:	4295      	cmp	r5, r2
 8008dbe:	d002      	beq.n	8008dc6 <__mcmp+0x2a>
 8008dc0:	d304      	bcc.n	8008dcc <__mcmp+0x30>
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	bd30      	pop	{r4, r5, pc}
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	d3f4      	bcc.n	8008db4 <__mcmp+0x18>
 8008dca:	e7fb      	b.n	8008dc4 <__mcmp+0x28>
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	e7f8      	b.n	8008dc4 <__mcmp+0x28>
	...

08008dd4 <__mdiff>:
 8008dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4606      	mov	r6, r0
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4620      	mov	r0, r4
 8008de0:	4692      	mov	sl, r2
 8008de2:	f7ff ffdb 	bl	8008d9c <__mcmp>
 8008de6:	1e05      	subs	r5, r0, #0
 8008de8:	d111      	bne.n	8008e0e <__mdiff+0x3a>
 8008dea:	4629      	mov	r1, r5
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff fd5b 	bl	80088a8 <_Balloc>
 8008df2:	4602      	mov	r2, r0
 8008df4:	b928      	cbnz	r0, 8008e02 <__mdiff+0x2e>
 8008df6:	f240 2132 	movw	r1, #562	; 0x232
 8008dfa:	4b3c      	ldr	r3, [pc, #240]	; (8008eec <__mdiff+0x118>)
 8008dfc:	483c      	ldr	r0, [pc, #240]	; (8008ef0 <__mdiff+0x11c>)
 8008dfe:	f000 faf5 	bl	80093ec <__assert_func>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e08:	4610      	mov	r0, r2
 8008e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	bfa4      	itt	ge
 8008e10:	4653      	movge	r3, sl
 8008e12:	46a2      	movge	sl, r4
 8008e14:	4630      	mov	r0, r6
 8008e16:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008e1a:	bfa6      	itte	ge
 8008e1c:	461c      	movge	r4, r3
 8008e1e:	2500      	movge	r5, #0
 8008e20:	2501      	movlt	r5, #1
 8008e22:	f7ff fd41 	bl	80088a8 <_Balloc>
 8008e26:	4602      	mov	r2, r0
 8008e28:	b918      	cbnz	r0, 8008e32 <__mdiff+0x5e>
 8008e2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e2e:	4b2f      	ldr	r3, [pc, #188]	; (8008eec <__mdiff+0x118>)
 8008e30:	e7e4      	b.n	8008dfc <__mdiff+0x28>
 8008e32:	f100 0814 	add.w	r8, r0, #20
 8008e36:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008e3a:	60c5      	str	r5, [r0, #12]
 8008e3c:	f04f 0c00 	mov.w	ip, #0
 8008e40:	f10a 0514 	add.w	r5, sl, #20
 8008e44:	f10a 0010 	add.w	r0, sl, #16
 8008e48:	46c2      	mov	sl, r8
 8008e4a:	6926      	ldr	r6, [r4, #16]
 8008e4c:	f104 0914 	add.w	r9, r4, #20
 8008e50:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008e54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e58:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008e5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e60:	fa1f f18b 	uxth.w	r1, fp
 8008e64:	4461      	add	r1, ip
 8008e66:	fa1f fc83 	uxth.w	ip, r3
 8008e6a:	0c1b      	lsrs	r3, r3, #16
 8008e6c:	eba1 010c 	sub.w	r1, r1, ip
 8008e70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e74:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e78:	b289      	uxth	r1, r1
 8008e7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e7e:	454e      	cmp	r6, r9
 8008e80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e84:	f84a 3b04 	str.w	r3, [sl], #4
 8008e88:	d8e6      	bhi.n	8008e58 <__mdiff+0x84>
 8008e8a:	1b33      	subs	r3, r6, r4
 8008e8c:	3b15      	subs	r3, #21
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	3415      	adds	r4, #21
 8008e94:	3304      	adds	r3, #4
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	bf38      	it	cc
 8008e9a:	2304      	movcc	r3, #4
 8008e9c:	441d      	add	r5, r3
 8008e9e:	4443      	add	r3, r8
 8008ea0:	461e      	mov	r6, r3
 8008ea2:	462c      	mov	r4, r5
 8008ea4:	4574      	cmp	r4, lr
 8008ea6:	d30e      	bcc.n	8008ec6 <__mdiff+0xf2>
 8008ea8:	f10e 0103 	add.w	r1, lr, #3
 8008eac:	1b49      	subs	r1, r1, r5
 8008eae:	f021 0103 	bic.w	r1, r1, #3
 8008eb2:	3d03      	subs	r5, #3
 8008eb4:	45ae      	cmp	lr, r5
 8008eb6:	bf38      	it	cc
 8008eb8:	2100      	movcc	r1, #0
 8008eba:	4419      	add	r1, r3
 8008ebc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ec0:	b18b      	cbz	r3, 8008ee6 <__mdiff+0x112>
 8008ec2:	6117      	str	r7, [r2, #16]
 8008ec4:	e7a0      	b.n	8008e08 <__mdiff+0x34>
 8008ec6:	f854 8b04 	ldr.w	r8, [r4], #4
 8008eca:	fa1f f188 	uxth.w	r1, r8
 8008ece:	4461      	add	r1, ip
 8008ed0:	1408      	asrs	r0, r1, #16
 8008ed2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008ed6:	b289      	uxth	r1, r1
 8008ed8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008edc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ee0:	f846 1b04 	str.w	r1, [r6], #4
 8008ee4:	e7de      	b.n	8008ea4 <__mdiff+0xd0>
 8008ee6:	3f01      	subs	r7, #1
 8008ee8:	e7e8      	b.n	8008ebc <__mdiff+0xe8>
 8008eea:	bf00      	nop
 8008eec:	0800b57f 	.word	0x0800b57f
 8008ef0:	0800b590 	.word	0x0800b590

08008ef4 <__d2b>:
 8008ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ef8:	2101      	movs	r1, #1
 8008efa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008efe:	4690      	mov	r8, r2
 8008f00:	461d      	mov	r5, r3
 8008f02:	f7ff fcd1 	bl	80088a8 <_Balloc>
 8008f06:	4604      	mov	r4, r0
 8008f08:	b930      	cbnz	r0, 8008f18 <__d2b+0x24>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f10:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <__d2b+0xb0>)
 8008f12:	4825      	ldr	r0, [pc, #148]	; (8008fa8 <__d2b+0xb4>)
 8008f14:	f000 fa6a 	bl	80093ec <__assert_func>
 8008f18:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008f1c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008f20:	bb2d      	cbnz	r5, 8008f6e <__d2b+0x7a>
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	f1b8 0300 	subs.w	r3, r8, #0
 8008f28:	d026      	beq.n	8008f78 <__d2b+0x84>
 8008f2a:	4668      	mov	r0, sp
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	f7ff fd87 	bl	8008a40 <__lo0bits>
 8008f32:	9900      	ldr	r1, [sp, #0]
 8008f34:	b1f0      	cbz	r0, 8008f74 <__d2b+0x80>
 8008f36:	9a01      	ldr	r2, [sp, #4]
 8008f38:	f1c0 0320 	rsb	r3, r0, #32
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	430b      	orrs	r3, r1
 8008f42:	40c2      	lsrs	r2, r0
 8008f44:	6163      	str	r3, [r4, #20]
 8008f46:	9201      	str	r2, [sp, #4]
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf14      	ite	ne
 8008f4e:	2102      	movne	r1, #2
 8008f50:	2101      	moveq	r1, #1
 8008f52:	61a3      	str	r3, [r4, #24]
 8008f54:	6121      	str	r1, [r4, #16]
 8008f56:	b1c5      	cbz	r5, 8008f8a <__d2b+0x96>
 8008f58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f5c:	4405      	add	r5, r0
 8008f5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f62:	603d      	str	r5, [r7, #0]
 8008f64:	6030      	str	r0, [r6, #0]
 8008f66:	4620      	mov	r0, r4
 8008f68:	b002      	add	sp, #8
 8008f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f72:	e7d6      	b.n	8008f22 <__d2b+0x2e>
 8008f74:	6161      	str	r1, [r4, #20]
 8008f76:	e7e7      	b.n	8008f48 <__d2b+0x54>
 8008f78:	a801      	add	r0, sp, #4
 8008f7a:	f7ff fd61 	bl	8008a40 <__lo0bits>
 8008f7e:	2101      	movs	r1, #1
 8008f80:	9b01      	ldr	r3, [sp, #4]
 8008f82:	6121      	str	r1, [r4, #16]
 8008f84:	6163      	str	r3, [r4, #20]
 8008f86:	3020      	adds	r0, #32
 8008f88:	e7e5      	b.n	8008f56 <__d2b+0x62>
 8008f8a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008f8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f92:	6038      	str	r0, [r7, #0]
 8008f94:	6918      	ldr	r0, [r3, #16]
 8008f96:	f7ff fd33 	bl	8008a00 <__hi0bits>
 8008f9a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008f9e:	6031      	str	r1, [r6, #0]
 8008fa0:	e7e1      	b.n	8008f66 <__d2b+0x72>
 8008fa2:	bf00      	nop
 8008fa4:	0800b57f 	.word	0x0800b57f
 8008fa8:	0800b590 	.word	0x0800b590

08008fac <_calloc_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	fb02 f501 	mul.w	r5, r2, r1
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f000 f854 	bl	8009060 <_malloc_r>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <_calloc_r+0x18>
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f7fe f954 	bl	800726c <memset>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}

08008fc8 <_free_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4605      	mov	r5, r0
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d043      	beq.n	8009058 <_free_r+0x90>
 8008fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd4:	1f0c      	subs	r4, r1, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bfb8      	it	lt
 8008fda:	18e4      	addlt	r4, r4, r3
 8008fdc:	f000 fa62 	bl	80094a4 <__malloc_lock>
 8008fe0:	4a1e      	ldr	r2, [pc, #120]	; (800905c <_free_r+0x94>)
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	b933      	cbnz	r3, 8008ff6 <_free_r+0x2e>
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	6014      	str	r4, [r2, #0]
 8008fec:	4628      	mov	r0, r5
 8008fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff2:	f000 ba5d 	b.w	80094b0 <__malloc_unlock>
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	d90a      	bls.n	8009010 <_free_r+0x48>
 8008ffa:	6821      	ldr	r1, [r4, #0]
 8008ffc:	1862      	adds	r2, r4, r1
 8008ffe:	4293      	cmp	r3, r2
 8009000:	bf01      	itttt	eq
 8009002:	681a      	ldreq	r2, [r3, #0]
 8009004:	685b      	ldreq	r3, [r3, #4]
 8009006:	1852      	addeq	r2, r2, r1
 8009008:	6022      	streq	r2, [r4, #0]
 800900a:	6063      	str	r3, [r4, #4]
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	e7ed      	b.n	8008fec <_free_r+0x24>
 8009010:	461a      	mov	r2, r3
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	b10b      	cbz	r3, 800901a <_free_r+0x52>
 8009016:	42a3      	cmp	r3, r4
 8009018:	d9fa      	bls.n	8009010 <_free_r+0x48>
 800901a:	6811      	ldr	r1, [r2, #0]
 800901c:	1850      	adds	r0, r2, r1
 800901e:	42a0      	cmp	r0, r4
 8009020:	d10b      	bne.n	800903a <_free_r+0x72>
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	4401      	add	r1, r0
 8009026:	1850      	adds	r0, r2, r1
 8009028:	4283      	cmp	r3, r0
 800902a:	6011      	str	r1, [r2, #0]
 800902c:	d1de      	bne.n	8008fec <_free_r+0x24>
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	4401      	add	r1, r0
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	6053      	str	r3, [r2, #4]
 8009038:	e7d8      	b.n	8008fec <_free_r+0x24>
 800903a:	d902      	bls.n	8009042 <_free_r+0x7a>
 800903c:	230c      	movs	r3, #12
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	e7d4      	b.n	8008fec <_free_r+0x24>
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1821      	adds	r1, r4, r0
 8009046:	428b      	cmp	r3, r1
 8009048:	bf01      	itttt	eq
 800904a:	6819      	ldreq	r1, [r3, #0]
 800904c:	685b      	ldreq	r3, [r3, #4]
 800904e:	1809      	addeq	r1, r1, r0
 8009050:	6021      	streq	r1, [r4, #0]
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6054      	str	r4, [r2, #4]
 8009056:	e7c9      	b.n	8008fec <_free_r+0x24>
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	20000618 	.word	0x20000618

08009060 <_malloc_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	1ccd      	adds	r5, r1, #3
 8009064:	f025 0503 	bic.w	r5, r5, #3
 8009068:	3508      	adds	r5, #8
 800906a:	2d0c      	cmp	r5, #12
 800906c:	bf38      	it	cc
 800906e:	250c      	movcc	r5, #12
 8009070:	2d00      	cmp	r5, #0
 8009072:	4606      	mov	r6, r0
 8009074:	db01      	blt.n	800907a <_malloc_r+0x1a>
 8009076:	42a9      	cmp	r1, r5
 8009078:	d903      	bls.n	8009082 <_malloc_r+0x22>
 800907a:	230c      	movs	r3, #12
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	2000      	movs	r0, #0
 8009080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009082:	f000 fa0f 	bl	80094a4 <__malloc_lock>
 8009086:	4921      	ldr	r1, [pc, #132]	; (800910c <_malloc_r+0xac>)
 8009088:	680a      	ldr	r2, [r1, #0]
 800908a:	4614      	mov	r4, r2
 800908c:	b99c      	cbnz	r4, 80090b6 <_malloc_r+0x56>
 800908e:	4f20      	ldr	r7, [pc, #128]	; (8009110 <_malloc_r+0xb0>)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	b923      	cbnz	r3, 800909e <_malloc_r+0x3e>
 8009094:	4621      	mov	r1, r4
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f998 	bl	80093cc <_sbrk_r>
 800909c:	6038      	str	r0, [r7, #0]
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f993 	bl	80093cc <_sbrk_r>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d123      	bne.n	80090f2 <_malloc_r+0x92>
 80090aa:	230c      	movs	r3, #12
 80090ac:	4630      	mov	r0, r6
 80090ae:	6033      	str	r3, [r6, #0]
 80090b0:	f000 f9fe 	bl	80094b0 <__malloc_unlock>
 80090b4:	e7e3      	b.n	800907e <_malloc_r+0x1e>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	1b5b      	subs	r3, r3, r5
 80090ba:	d417      	bmi.n	80090ec <_malloc_r+0x8c>
 80090bc:	2b0b      	cmp	r3, #11
 80090be:	d903      	bls.n	80090c8 <_malloc_r+0x68>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	441c      	add	r4, r3
 80090c4:	6025      	str	r5, [r4, #0]
 80090c6:	e004      	b.n	80090d2 <_malloc_r+0x72>
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	bf0c      	ite	eq
 80090ce:	600b      	streq	r3, [r1, #0]
 80090d0:	6053      	strne	r3, [r2, #4]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 f9ec 	bl	80094b0 <__malloc_unlock>
 80090d8:	f104 000b 	add.w	r0, r4, #11
 80090dc:	1d23      	adds	r3, r4, #4
 80090de:	f020 0007 	bic.w	r0, r0, #7
 80090e2:	1ac2      	subs	r2, r0, r3
 80090e4:	d0cc      	beq.n	8009080 <_malloc_r+0x20>
 80090e6:	1a1b      	subs	r3, r3, r0
 80090e8:	50a3      	str	r3, [r4, r2]
 80090ea:	e7c9      	b.n	8009080 <_malloc_r+0x20>
 80090ec:	4622      	mov	r2, r4
 80090ee:	6864      	ldr	r4, [r4, #4]
 80090f0:	e7cc      	b.n	800908c <_malloc_r+0x2c>
 80090f2:	1cc4      	adds	r4, r0, #3
 80090f4:	f024 0403 	bic.w	r4, r4, #3
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d0e3      	beq.n	80090c4 <_malloc_r+0x64>
 80090fc:	1a21      	subs	r1, r4, r0
 80090fe:	4630      	mov	r0, r6
 8009100:	f000 f964 	bl	80093cc <_sbrk_r>
 8009104:	3001      	adds	r0, #1
 8009106:	d1dd      	bne.n	80090c4 <_malloc_r+0x64>
 8009108:	e7cf      	b.n	80090aa <_malloc_r+0x4a>
 800910a:	bf00      	nop
 800910c:	20000618 	.word	0x20000618
 8009110:	2000061c 	.word	0x2000061c

08009114 <__ssputs_r>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	688e      	ldr	r6, [r1, #8]
 800911a:	4682      	mov	sl, r0
 800911c:	429e      	cmp	r6, r3
 800911e:	460c      	mov	r4, r1
 8009120:	4690      	mov	r8, r2
 8009122:	461f      	mov	r7, r3
 8009124:	d838      	bhi.n	8009198 <__ssputs_r+0x84>
 8009126:	898a      	ldrh	r2, [r1, #12]
 8009128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800912c:	d032      	beq.n	8009194 <__ssputs_r+0x80>
 800912e:	6825      	ldr	r5, [r4, #0]
 8009130:	6909      	ldr	r1, [r1, #16]
 8009132:	3301      	adds	r3, #1
 8009134:	eba5 0901 	sub.w	r9, r5, r1
 8009138:	6965      	ldr	r5, [r4, #20]
 800913a:	444b      	add	r3, r9
 800913c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009144:	106d      	asrs	r5, r5, #1
 8009146:	429d      	cmp	r5, r3
 8009148:	bf38      	it	cc
 800914a:	461d      	movcc	r5, r3
 800914c:	0553      	lsls	r3, r2, #21
 800914e:	d531      	bpl.n	80091b4 <__ssputs_r+0xa0>
 8009150:	4629      	mov	r1, r5
 8009152:	f7ff ff85 	bl	8009060 <_malloc_r>
 8009156:	4606      	mov	r6, r0
 8009158:	b950      	cbnz	r0, 8009170 <__ssputs_r+0x5c>
 800915a:	230c      	movs	r3, #12
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	f8ca 3000 	str.w	r3, [sl]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009170:	464a      	mov	r2, r9
 8009172:	6921      	ldr	r1, [r4, #16]
 8009174:	f7fe f86c 	bl	8007250 <memcpy>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	6126      	str	r6, [r4, #16]
 8009186:	444e      	add	r6, r9
 8009188:	6026      	str	r6, [r4, #0]
 800918a:	463e      	mov	r6, r7
 800918c:	6165      	str	r5, [r4, #20]
 800918e:	eba5 0509 	sub.w	r5, r5, r9
 8009192:	60a5      	str	r5, [r4, #8]
 8009194:	42be      	cmp	r6, r7
 8009196:	d900      	bls.n	800919a <__ssputs_r+0x86>
 8009198:	463e      	mov	r6, r7
 800919a:	4632      	mov	r2, r6
 800919c:	4641      	mov	r1, r8
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	f000 f966 	bl	8009470 <memmove>
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	1b9b      	subs	r3, r3, r6
 80091aa:	4432      	add	r2, r6
 80091ac:	2000      	movs	r0, #0
 80091ae:	60a3      	str	r3, [r4, #8]
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	e7db      	b.n	800916c <__ssputs_r+0x58>
 80091b4:	462a      	mov	r2, r5
 80091b6:	f000 f981 	bl	80094bc <_realloc_r>
 80091ba:	4606      	mov	r6, r0
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e1      	bne.n	8009184 <__ssputs_r+0x70>
 80091c0:	4650      	mov	r0, sl
 80091c2:	6921      	ldr	r1, [r4, #16]
 80091c4:	f7ff ff00 	bl	8008fc8 <_free_r>
 80091c8:	e7c7      	b.n	800915a <__ssputs_r+0x46>
	...

080091cc <_svfiprintf_r>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4698      	mov	r8, r3
 80091d2:	898b      	ldrh	r3, [r1, #12]
 80091d4:	4607      	mov	r7, r0
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	460d      	mov	r5, r1
 80091da:	4614      	mov	r4, r2
 80091dc:	b09d      	sub	sp, #116	; 0x74
 80091de:	d50e      	bpl.n	80091fe <_svfiprintf_r+0x32>
 80091e0:	690b      	ldr	r3, [r1, #16]
 80091e2:	b963      	cbnz	r3, 80091fe <_svfiprintf_r+0x32>
 80091e4:	2140      	movs	r1, #64	; 0x40
 80091e6:	f7ff ff3b 	bl	8009060 <_malloc_r>
 80091ea:	6028      	str	r0, [r5, #0]
 80091ec:	6128      	str	r0, [r5, #16]
 80091ee:	b920      	cbnz	r0, 80091fa <_svfiprintf_r+0x2e>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	e0d1      	b.n	800939e <_svfiprintf_r+0x1d2>
 80091fa:	2340      	movs	r3, #64	; 0x40
 80091fc:	616b      	str	r3, [r5, #20]
 80091fe:	2300      	movs	r3, #0
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
 8009202:	2320      	movs	r3, #32
 8009204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009208:	2330      	movs	r3, #48	; 0x30
 800920a:	f04f 0901 	mov.w	r9, #1
 800920e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009212:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093b8 <_svfiprintf_r+0x1ec>
 8009216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921a:	4623      	mov	r3, r4
 800921c:	469a      	mov	sl, r3
 800921e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009222:	b10a      	cbz	r2, 8009228 <_svfiprintf_r+0x5c>
 8009224:	2a25      	cmp	r2, #37	; 0x25
 8009226:	d1f9      	bne.n	800921c <_svfiprintf_r+0x50>
 8009228:	ebba 0b04 	subs.w	fp, sl, r4
 800922c:	d00b      	beq.n	8009246 <_svfiprintf_r+0x7a>
 800922e:	465b      	mov	r3, fp
 8009230:	4622      	mov	r2, r4
 8009232:	4629      	mov	r1, r5
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ff6d 	bl	8009114 <__ssputs_r>
 800923a:	3001      	adds	r0, #1
 800923c:	f000 80aa 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009242:	445a      	add	r2, fp
 8009244:	9209      	str	r2, [sp, #36]	; 0x24
 8009246:	f89a 3000 	ldrb.w	r3, [sl]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80a2 	beq.w	8009394 <_svfiprintf_r+0x1c8>
 8009250:	2300      	movs	r3, #0
 8009252:	f04f 32ff 	mov.w	r2, #4294967295
 8009256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925a:	f10a 0a01 	add.w	sl, sl, #1
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009266:	931a      	str	r3, [sp, #104]	; 0x68
 8009268:	4654      	mov	r4, sl
 800926a:	2205      	movs	r2, #5
 800926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009270:	4851      	ldr	r0, [pc, #324]	; (80093b8 <_svfiprintf_r+0x1ec>)
 8009272:	f7ff fb0b 	bl	800888c <memchr>
 8009276:	9a04      	ldr	r2, [sp, #16]
 8009278:	b9d8      	cbnz	r0, 80092b2 <_svfiprintf_r+0xe6>
 800927a:	06d0      	lsls	r0, r2, #27
 800927c:	bf44      	itt	mi
 800927e:	2320      	movmi	r3, #32
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009284:	0711      	lsls	r1, r2, #28
 8009286:	bf44      	itt	mi
 8009288:	232b      	movmi	r3, #43	; 0x2b
 800928a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928e:	f89a 3000 	ldrb.w	r3, [sl]
 8009292:	2b2a      	cmp	r3, #42	; 0x2a
 8009294:	d015      	beq.n	80092c2 <_svfiprintf_r+0xf6>
 8009296:	4654      	mov	r4, sl
 8009298:	2000      	movs	r0, #0
 800929a:	f04f 0c0a 	mov.w	ip, #10
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	4621      	mov	r1, r4
 80092a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a6:	3b30      	subs	r3, #48	; 0x30
 80092a8:	2b09      	cmp	r3, #9
 80092aa:	d94e      	bls.n	800934a <_svfiprintf_r+0x17e>
 80092ac:	b1b0      	cbz	r0, 80092dc <_svfiprintf_r+0x110>
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	e014      	b.n	80092dc <_svfiprintf_r+0x110>
 80092b2:	eba0 0308 	sub.w	r3, r0, r8
 80092b6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	46a2      	mov	sl, r4
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	e7d2      	b.n	8009268 <_svfiprintf_r+0x9c>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1d19      	adds	r1, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9103      	str	r1, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfbb      	ittet	lt
 80092ce:	425b      	neglt	r3, r3
 80092d0:	f042 0202 	orrlt.w	r2, r2, #2
 80092d4:	9307      	strge	r3, [sp, #28]
 80092d6:	9307      	strlt	r3, [sp, #28]
 80092d8:	bfb8      	it	lt
 80092da:	9204      	strlt	r2, [sp, #16]
 80092dc:	7823      	ldrb	r3, [r4, #0]
 80092de:	2b2e      	cmp	r3, #46	; 0x2e
 80092e0:	d10c      	bne.n	80092fc <_svfiprintf_r+0x130>
 80092e2:	7863      	ldrb	r3, [r4, #1]
 80092e4:	2b2a      	cmp	r3, #42	; 0x2a
 80092e6:	d135      	bne.n	8009354 <_svfiprintf_r+0x188>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	3402      	adds	r4, #2
 80092ec:	1d1a      	adds	r2, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9203      	str	r2, [sp, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfb8      	it	lt
 80092f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093c8 <_svfiprintf_r+0x1fc>
 8009300:	2203      	movs	r2, #3
 8009302:	4650      	mov	r0, sl
 8009304:	7821      	ldrb	r1, [r4, #0]
 8009306:	f7ff fac1 	bl	800888c <memchr>
 800930a:	b140      	cbz	r0, 800931e <_svfiprintf_r+0x152>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	eba0 000a 	sub.w	r0, r0, sl
 8009312:	fa03 f000 	lsl.w	r0, r3, r0
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	3401      	adds	r4, #1
 800931a:	4303      	orrs	r3, r0
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	2206      	movs	r2, #6
 8009324:	4825      	ldr	r0, [pc, #148]	; (80093bc <_svfiprintf_r+0x1f0>)
 8009326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932a:	f7ff faaf 	bl	800888c <memchr>
 800932e:	2800      	cmp	r0, #0
 8009330:	d038      	beq.n	80093a4 <_svfiprintf_r+0x1d8>
 8009332:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <_svfiprintf_r+0x1f4>)
 8009334:	bb1b      	cbnz	r3, 800937e <_svfiprintf_r+0x1b2>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	3307      	adds	r3, #7
 800933a:	f023 0307 	bic.w	r3, r3, #7
 800933e:	3308      	adds	r3, #8
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	4433      	add	r3, r6
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	e767      	b.n	800921a <_svfiprintf_r+0x4e>
 800934a:	460c      	mov	r4, r1
 800934c:	2001      	movs	r0, #1
 800934e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009352:	e7a5      	b.n	80092a0 <_svfiprintf_r+0xd4>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 0c0a 	mov.w	ip, #10
 800935a:	4619      	mov	r1, r3
 800935c:	3401      	adds	r4, #1
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4620      	mov	r0, r4
 8009362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009366:	3a30      	subs	r2, #48	; 0x30
 8009368:	2a09      	cmp	r2, #9
 800936a:	d903      	bls.n	8009374 <_svfiprintf_r+0x1a8>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0c5      	beq.n	80092fc <_svfiprintf_r+0x130>
 8009370:	9105      	str	r1, [sp, #20]
 8009372:	e7c3      	b.n	80092fc <_svfiprintf_r+0x130>
 8009374:	4604      	mov	r4, r0
 8009376:	2301      	movs	r3, #1
 8009378:	fb0c 2101 	mla	r1, ip, r1, r2
 800937c:	e7f0      	b.n	8009360 <_svfiprintf_r+0x194>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4638      	mov	r0, r7
 8009386:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <_svfiprintf_r+0x1f8>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	f7fe f815 	bl	80073b8 <_printf_float>
 800938e:	1c42      	adds	r2, r0, #1
 8009390:	4606      	mov	r6, r0
 8009392:	d1d6      	bne.n	8009342 <_svfiprintf_r+0x176>
 8009394:	89ab      	ldrh	r3, [r5, #12]
 8009396:	065b      	lsls	r3, r3, #25
 8009398:	f53f af2c 	bmi.w	80091f4 <_svfiprintf_r+0x28>
 800939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939e:	b01d      	add	sp, #116	; 0x74
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <_svfiprintf_r+0x1f8>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	f7fe fa9e 	bl	80078f0 <_printf_i>
 80093b4:	e7eb      	b.n	800938e <_svfiprintf_r+0x1c2>
 80093b6:	bf00      	nop
 80093b8:	0800b6ec 	.word	0x0800b6ec
 80093bc:	0800b6f6 	.word	0x0800b6f6
 80093c0:	080073b9 	.word	0x080073b9
 80093c4:	08009115 	.word	0x08009115
 80093c8:	0800b6f2 	.word	0x0800b6f2

080093cc <_sbrk_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	2300      	movs	r3, #0
 80093d0:	4d05      	ldr	r5, [pc, #20]	; (80093e8 <_sbrk_r+0x1c>)
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7fd fe8a 	bl	80070f0 <_sbrk>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_sbrk_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_sbrk_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20000858 	.word	0x20000858

080093ec <__assert_func>:
 80093ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ee:	4614      	mov	r4, r2
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <__assert_func+0x2c>)
 80093f4:	4605      	mov	r5, r0
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68d8      	ldr	r0, [r3, #12]
 80093fa:	b14c      	cbz	r4, 8009410 <__assert_func+0x24>
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <__assert_func+0x30>)
 80093fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009402:	9100      	str	r1, [sp, #0]
 8009404:	462b      	mov	r3, r5
 8009406:	4906      	ldr	r1, [pc, #24]	; (8009420 <__assert_func+0x34>)
 8009408:	f000 f80e 	bl	8009428 <fiprintf>
 800940c:	f000 faa2 	bl	8009954 <abort>
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <__assert_func+0x38>)
 8009412:	461c      	mov	r4, r3
 8009414:	e7f3      	b.n	80093fe <__assert_func+0x12>
 8009416:	bf00      	nop
 8009418:	20000020 	.word	0x20000020
 800941c:	0800b6fd 	.word	0x0800b6fd
 8009420:	0800b70a 	.word	0x0800b70a
 8009424:	0800b738 	.word	0x0800b738

08009428 <fiprintf>:
 8009428:	b40e      	push	{r1, r2, r3}
 800942a:	b503      	push	{r0, r1, lr}
 800942c:	4601      	mov	r1, r0
 800942e:	ab03      	add	r3, sp, #12
 8009430:	4805      	ldr	r0, [pc, #20]	; (8009448 <fiprintf+0x20>)
 8009432:	f853 2b04 	ldr.w	r2, [r3], #4
 8009436:	6800      	ldr	r0, [r0, #0]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	f000 f88d 	bl	8009558 <_vfiprintf_r>
 800943e:	b002      	add	sp, #8
 8009440:	f85d eb04 	ldr.w	lr, [sp], #4
 8009444:	b003      	add	sp, #12
 8009446:	4770      	bx	lr
 8009448:	20000020 	.word	0x20000020

0800944c <__ascii_mbtowc>:
 800944c:	b082      	sub	sp, #8
 800944e:	b901      	cbnz	r1, 8009452 <__ascii_mbtowc+0x6>
 8009450:	a901      	add	r1, sp, #4
 8009452:	b142      	cbz	r2, 8009466 <__ascii_mbtowc+0x1a>
 8009454:	b14b      	cbz	r3, 800946a <__ascii_mbtowc+0x1e>
 8009456:	7813      	ldrb	r3, [r2, #0]
 8009458:	600b      	str	r3, [r1, #0]
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	1e10      	subs	r0, r2, #0
 800945e:	bf18      	it	ne
 8009460:	2001      	movne	r0, #1
 8009462:	b002      	add	sp, #8
 8009464:	4770      	bx	lr
 8009466:	4610      	mov	r0, r2
 8009468:	e7fb      	b.n	8009462 <__ascii_mbtowc+0x16>
 800946a:	f06f 0001 	mvn.w	r0, #1
 800946e:	e7f8      	b.n	8009462 <__ascii_mbtowc+0x16>

08009470 <memmove>:
 8009470:	4288      	cmp	r0, r1
 8009472:	b510      	push	{r4, lr}
 8009474:	eb01 0402 	add.w	r4, r1, r2
 8009478:	d902      	bls.n	8009480 <memmove+0x10>
 800947a:	4284      	cmp	r4, r0
 800947c:	4623      	mov	r3, r4
 800947e:	d807      	bhi.n	8009490 <memmove+0x20>
 8009480:	1e43      	subs	r3, r0, #1
 8009482:	42a1      	cmp	r1, r4
 8009484:	d008      	beq.n	8009498 <memmove+0x28>
 8009486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948e:	e7f8      	b.n	8009482 <memmove+0x12>
 8009490:	4601      	mov	r1, r0
 8009492:	4402      	add	r2, r0
 8009494:	428a      	cmp	r2, r1
 8009496:	d100      	bne.n	800949a <memmove+0x2a>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094a2:	e7f7      	b.n	8009494 <memmove+0x24>

080094a4 <__malloc_lock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_lock+0x8>)
 80094a6:	f000 bc15 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 80094aa:	bf00      	nop
 80094ac:	20000860 	.word	0x20000860

080094b0 <__malloc_unlock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_unlock+0x8>)
 80094b2:	f000 bc10 	b.w	8009cd6 <__retarget_lock_release_recursive>
 80094b6:	bf00      	nop
 80094b8:	20000860 	.word	0x20000860

080094bc <_realloc_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	4607      	mov	r7, r0
 80094c0:	4614      	mov	r4, r2
 80094c2:	460e      	mov	r6, r1
 80094c4:	b921      	cbnz	r1, 80094d0 <_realloc_r+0x14>
 80094c6:	4611      	mov	r1, r2
 80094c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094cc:	f7ff bdc8 	b.w	8009060 <_malloc_r>
 80094d0:	b922      	cbnz	r2, 80094dc <_realloc_r+0x20>
 80094d2:	f7ff fd79 	bl	8008fc8 <_free_r>
 80094d6:	4625      	mov	r5, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094dc:	f000 fc60 	bl	8009da0 <_malloc_usable_size_r>
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d20f      	bcs.n	8009504 <_realloc_r+0x48>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7ff fdba 	bl	8009060 <_malloc_r>
 80094ec:	4605      	mov	r5, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d0f2      	beq.n	80094d8 <_realloc_r+0x1c>
 80094f2:	4631      	mov	r1, r6
 80094f4:	4622      	mov	r2, r4
 80094f6:	f7fd feab 	bl	8007250 <memcpy>
 80094fa:	4631      	mov	r1, r6
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff fd63 	bl	8008fc8 <_free_r>
 8009502:	e7e9      	b.n	80094d8 <_realloc_r+0x1c>
 8009504:	4635      	mov	r5, r6
 8009506:	e7e7      	b.n	80094d8 <_realloc_r+0x1c>

08009508 <__sfputc_r>:
 8009508:	6893      	ldr	r3, [r2, #8]
 800950a:	b410      	push	{r4}
 800950c:	3b01      	subs	r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	da07      	bge.n	8009524 <__sfputc_r+0x1c>
 8009514:	6994      	ldr	r4, [r2, #24]
 8009516:	42a3      	cmp	r3, r4
 8009518:	db01      	blt.n	800951e <__sfputc_r+0x16>
 800951a:	290a      	cmp	r1, #10
 800951c:	d102      	bne.n	8009524 <__sfputc_r+0x1c>
 800951e:	bc10      	pop	{r4}
 8009520:	f000 b94a 	b.w	80097b8 <__swbuf_r>
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	1c58      	adds	r0, r3, #1
 8009528:	6010      	str	r0, [r2, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	4608      	mov	r0, r1
 800952e:	bc10      	pop	{r4}
 8009530:	4770      	bx	lr

08009532 <__sfputs_r>:
 8009532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	4614      	mov	r4, r2
 800953a:	18d5      	adds	r5, r2, r3
 800953c:	42ac      	cmp	r4, r5
 800953e:	d101      	bne.n	8009544 <__sfputs_r+0x12>
 8009540:	2000      	movs	r0, #0
 8009542:	e007      	b.n	8009554 <__sfputs_r+0x22>
 8009544:	463a      	mov	r2, r7
 8009546:	4630      	mov	r0, r6
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	f7ff ffdc 	bl	8009508 <__sfputc_r>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d1f3      	bne.n	800953c <__sfputs_r+0xa>
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	4614      	mov	r4, r2
 8009560:	4698      	mov	r8, r3
 8009562:	4606      	mov	r6, r0
 8009564:	b09d      	sub	sp, #116	; 0x74
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6983      	ldr	r3, [r0, #24]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f000 fb14 	bl	8009b98 <__sinit>
 8009570:	4b89      	ldr	r3, [pc, #548]	; (8009798 <_vfiprintf_r+0x240>)
 8009572:	429d      	cmp	r5, r3
 8009574:	d11b      	bne.n	80095ae <_vfiprintf_r+0x56>
 8009576:	6875      	ldr	r5, [r6, #4]
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x32>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x32>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f000 fba5 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	071b      	lsls	r3, r3, #28
 800958e:	d501      	bpl.n	8009594 <_vfiprintf_r+0x3c>
 8009590:	692b      	ldr	r3, [r5, #16]
 8009592:	b9eb      	cbnz	r3, 80095d0 <_vfiprintf_r+0x78>
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f96e 	bl	8009878 <__swsetup_r>
 800959c:	b1c0      	cbz	r0, 80095d0 <_vfiprintf_r+0x78>
 800959e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a0:	07dc      	lsls	r4, r3, #31
 80095a2:	d50e      	bpl.n	80095c2 <_vfiprintf_r+0x6a>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	; 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	4b7b      	ldr	r3, [pc, #492]	; (800979c <_vfiprintf_r+0x244>)
 80095b0:	429d      	cmp	r5, r3
 80095b2:	d101      	bne.n	80095b8 <_vfiprintf_r+0x60>
 80095b4:	68b5      	ldr	r5, [r6, #8]
 80095b6:	e7df      	b.n	8009578 <_vfiprintf_r+0x20>
 80095b8:	4b79      	ldr	r3, [pc, #484]	; (80097a0 <_vfiprintf_r+0x248>)
 80095ba:	429d      	cmp	r5, r3
 80095bc:	bf08      	it	eq
 80095be:	68f5      	ldreq	r5, [r6, #12]
 80095c0:	e7da      	b.n	8009578 <_vfiprintf_r+0x20>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	0598      	lsls	r0, r3, #22
 80095c6:	d4ed      	bmi.n	80095a4 <_vfiprintf_r+0x4c>
 80095c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ca:	f000 fb84 	bl	8009cd6 <__retarget_lock_release_recursive>
 80095ce:	e7e9      	b.n	80095a4 <_vfiprintf_r+0x4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	2320      	movs	r3, #32
 80095d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095da:	2330      	movs	r3, #48	; 0x30
 80095dc:	f04f 0901 	mov.w	r9, #1
 80095e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80097a4 <_vfiprintf_r+0x24c>
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ec:	4623      	mov	r3, r4
 80095ee:	469a      	mov	sl, r3
 80095f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f4:	b10a      	cbz	r2, 80095fa <_vfiprintf_r+0xa2>
 80095f6:	2a25      	cmp	r2, #37	; 0x25
 80095f8:	d1f9      	bne.n	80095ee <_vfiprintf_r+0x96>
 80095fa:	ebba 0b04 	subs.w	fp, sl, r4
 80095fe:	d00b      	beq.n	8009618 <_vfiprintf_r+0xc0>
 8009600:	465b      	mov	r3, fp
 8009602:	4622      	mov	r2, r4
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ff93 	bl	8009532 <__sfputs_r>
 800960c:	3001      	adds	r0, #1
 800960e:	f000 80aa 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009614:	445a      	add	r2, fp
 8009616:	9209      	str	r2, [sp, #36]	; 0x24
 8009618:	f89a 3000 	ldrb.w	r3, [sl]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80a2 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	f10a 0a01 	add.w	sl, sl, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009638:	931a      	str	r3, [sp, #104]	; 0x68
 800963a:	4654      	mov	r4, sl
 800963c:	2205      	movs	r2, #5
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4858      	ldr	r0, [pc, #352]	; (80097a4 <_vfiprintf_r+0x24c>)
 8009644:	f7ff f922 	bl	800888c <memchr>
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	b9d8      	cbnz	r0, 8009684 <_vfiprintf_r+0x12c>
 800964c:	06d1      	lsls	r1, r2, #27
 800964e:	bf44      	itt	mi
 8009650:	2320      	movmi	r3, #32
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009656:	0713      	lsls	r3, r2, #28
 8009658:	bf44      	itt	mi
 800965a:	232b      	movmi	r3, #43	; 0x2b
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b2a      	cmp	r3, #42	; 0x2a
 8009666:	d015      	beq.n	8009694 <_vfiprintf_r+0x13c>
 8009668:	4654      	mov	r4, sl
 800966a:	2000      	movs	r0, #0
 800966c:	f04f 0c0a 	mov.w	ip, #10
 8009670:	9a07      	ldr	r2, [sp, #28]
 8009672:	4621      	mov	r1, r4
 8009674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009678:	3b30      	subs	r3, #48	; 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d94e      	bls.n	800971c <_vfiprintf_r+0x1c4>
 800967e:	b1b0      	cbz	r0, 80096ae <_vfiprintf_r+0x156>
 8009680:	9207      	str	r2, [sp, #28]
 8009682:	e014      	b.n	80096ae <_vfiprintf_r+0x156>
 8009684:	eba0 0308 	sub.w	r3, r0, r8
 8009688:	fa09 f303 	lsl.w	r3, r9, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	46a2      	mov	sl, r4
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	e7d2      	b.n	800963a <_vfiprintf_r+0xe2>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbb      	ittet	lt
 80096a0:	425b      	neglt	r3, r3
 80096a2:	f042 0202 	orrlt.w	r2, r2, #2
 80096a6:	9307      	strge	r3, [sp, #28]
 80096a8:	9307      	strlt	r3, [sp, #28]
 80096aa:	bfb8      	it	lt
 80096ac:	9204      	strlt	r2, [sp, #16]
 80096ae:	7823      	ldrb	r3, [r4, #0]
 80096b0:	2b2e      	cmp	r3, #46	; 0x2e
 80096b2:	d10c      	bne.n	80096ce <_vfiprintf_r+0x176>
 80096b4:	7863      	ldrb	r3, [r4, #1]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d135      	bne.n	8009726 <_vfiprintf_r+0x1ce>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	3402      	adds	r4, #2
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9203      	str	r2, [sp, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bfb8      	it	lt
 80096c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097b4 <_vfiprintf_r+0x25c>
 80096d2:	2203      	movs	r2, #3
 80096d4:	4650      	mov	r0, sl
 80096d6:	7821      	ldrb	r1, [r4, #0]
 80096d8:	f7ff f8d8 	bl	800888c <memchr>
 80096dc:	b140      	cbz	r0, 80096f0 <_vfiprintf_r+0x198>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	fa03 f000 	lsl.w	r0, r3, r0
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	3401      	adds	r4, #1
 80096ec:	4303      	orrs	r3, r0
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	2206      	movs	r2, #6
 80096f6:	482c      	ldr	r0, [pc, #176]	; (80097a8 <_vfiprintf_r+0x250>)
 80096f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fc:	f7ff f8c6 	bl	800888c <memchr>
 8009700:	2800      	cmp	r0, #0
 8009702:	d03f      	beq.n	8009784 <_vfiprintf_r+0x22c>
 8009704:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_vfiprintf_r+0x254>)
 8009706:	bb1b      	cbnz	r3, 8009750 <_vfiprintf_r+0x1f8>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	3307      	adds	r3, #7
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	3308      	adds	r3, #8
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	443b      	add	r3, r7
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	e767      	b.n	80095ec <_vfiprintf_r+0x94>
 800971c:	460c      	mov	r4, r1
 800971e:	2001      	movs	r0, #1
 8009720:	fb0c 3202 	mla	r2, ip, r2, r3
 8009724:	e7a5      	b.n	8009672 <_vfiprintf_r+0x11a>
 8009726:	2300      	movs	r3, #0
 8009728:	f04f 0c0a 	mov.w	ip, #10
 800972c:	4619      	mov	r1, r3
 800972e:	3401      	adds	r4, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	4620      	mov	r0, r4
 8009734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009738:	3a30      	subs	r2, #48	; 0x30
 800973a:	2a09      	cmp	r2, #9
 800973c:	d903      	bls.n	8009746 <_vfiprintf_r+0x1ee>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0c5      	beq.n	80096ce <_vfiprintf_r+0x176>
 8009742:	9105      	str	r1, [sp, #20]
 8009744:	e7c3      	b.n	80096ce <_vfiprintf_r+0x176>
 8009746:	4604      	mov	r4, r0
 8009748:	2301      	movs	r3, #1
 800974a:	fb0c 2101 	mla	r1, ip, r1, r2
 800974e:	e7f0      	b.n	8009732 <_vfiprintf_r+0x1da>
 8009750:	ab03      	add	r3, sp, #12
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	462a      	mov	r2, r5
 8009756:	4630      	mov	r0, r6
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <_vfiprintf_r+0x258>)
 800975a:	a904      	add	r1, sp, #16
 800975c:	f7fd fe2c 	bl	80073b8 <_printf_float>
 8009760:	4607      	mov	r7, r0
 8009762:	1c78      	adds	r0, r7, #1
 8009764:	d1d6      	bne.n	8009714 <_vfiprintf_r+0x1bc>
 8009766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009768:	07d9      	lsls	r1, r3, #31
 800976a:	d405      	bmi.n	8009778 <_vfiprintf_r+0x220>
 800976c:	89ab      	ldrh	r3, [r5, #12]
 800976e:	059a      	lsls	r2, r3, #22
 8009770:	d402      	bmi.n	8009778 <_vfiprintf_r+0x220>
 8009772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009774:	f000 faaf 	bl	8009cd6 <__retarget_lock_release_recursive>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af12 	bmi.w	80095a4 <_vfiprintf_r+0x4c>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	e711      	b.n	80095a8 <_vfiprintf_r+0x50>
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4630      	mov	r0, r6
 800978c:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <_vfiprintf_r+0x258>)
 800978e:	a904      	add	r1, sp, #16
 8009790:	f7fe f8ae 	bl	80078f0 <_printf_i>
 8009794:	e7e4      	b.n	8009760 <_vfiprintf_r+0x208>
 8009796:	bf00      	nop
 8009798:	0800b864 	.word	0x0800b864
 800979c:	0800b884 	.word	0x0800b884
 80097a0:	0800b844 	.word	0x0800b844
 80097a4:	0800b6ec 	.word	0x0800b6ec
 80097a8:	0800b6f6 	.word	0x0800b6f6
 80097ac:	080073b9 	.word	0x080073b9
 80097b0:	08009533 	.word	0x08009533
 80097b4:	0800b6f2 	.word	0x0800b6f2

080097b8 <__swbuf_r>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	460e      	mov	r6, r1
 80097bc:	4614      	mov	r4, r2
 80097be:	4605      	mov	r5, r0
 80097c0:	b118      	cbz	r0, 80097ca <__swbuf_r+0x12>
 80097c2:	6983      	ldr	r3, [r0, #24]
 80097c4:	b90b      	cbnz	r3, 80097ca <__swbuf_r+0x12>
 80097c6:	f000 f9e7 	bl	8009b98 <__sinit>
 80097ca:	4b21      	ldr	r3, [pc, #132]	; (8009850 <__swbuf_r+0x98>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d12b      	bne.n	8009828 <__swbuf_r+0x70>
 80097d0:	686c      	ldr	r4, [r5, #4]
 80097d2:	69a3      	ldr	r3, [r4, #24]
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	d52f      	bpl.n	800983c <__swbuf_r+0x84>
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	b36b      	cbz	r3, 800983c <__swbuf_r+0x84>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	6820      	ldr	r0, [r4, #0]
 80097e4:	b2f6      	uxtb	r6, r6
 80097e6:	1ac0      	subs	r0, r0, r3
 80097e8:	6963      	ldr	r3, [r4, #20]
 80097ea:	4637      	mov	r7, r6
 80097ec:	4283      	cmp	r3, r0
 80097ee:	dc04      	bgt.n	80097fa <__swbuf_r+0x42>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f93c 	bl	8009a70 <_fflush_r>
 80097f8:	bb30      	cbnz	r0, 8009848 <__swbuf_r+0x90>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	3001      	adds	r0, #1
 80097fe:	3b01      	subs	r3, #1
 8009800:	60a3      	str	r3, [r4, #8]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	6022      	str	r2, [r4, #0]
 8009808:	701e      	strb	r6, [r3, #0]
 800980a:	6963      	ldr	r3, [r4, #20]
 800980c:	4283      	cmp	r3, r0
 800980e:	d004      	beq.n	800981a <__swbuf_r+0x62>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	07db      	lsls	r3, r3, #31
 8009814:	d506      	bpl.n	8009824 <__swbuf_r+0x6c>
 8009816:	2e0a      	cmp	r6, #10
 8009818:	d104      	bne.n	8009824 <__swbuf_r+0x6c>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f000 f927 	bl	8009a70 <_fflush_r>
 8009822:	b988      	cbnz	r0, 8009848 <__swbuf_r+0x90>
 8009824:	4638      	mov	r0, r7
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <__swbuf_r+0x9c>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d101      	bne.n	8009832 <__swbuf_r+0x7a>
 800982e:	68ac      	ldr	r4, [r5, #8]
 8009830:	e7cf      	b.n	80097d2 <__swbuf_r+0x1a>
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <__swbuf_r+0xa0>)
 8009834:	429c      	cmp	r4, r3
 8009836:	bf08      	it	eq
 8009838:	68ec      	ldreq	r4, [r5, #12]
 800983a:	e7ca      	b.n	80097d2 <__swbuf_r+0x1a>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f81a 	bl	8009878 <__swsetup_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0cb      	beq.n	80097e0 <__swbuf_r+0x28>
 8009848:	f04f 37ff 	mov.w	r7, #4294967295
 800984c:	e7ea      	b.n	8009824 <__swbuf_r+0x6c>
 800984e:	bf00      	nop
 8009850:	0800b864 	.word	0x0800b864
 8009854:	0800b884 	.word	0x0800b884
 8009858:	0800b844 	.word	0x0800b844

0800985c <__ascii_wctomb>:
 800985c:	4603      	mov	r3, r0
 800985e:	4608      	mov	r0, r1
 8009860:	b141      	cbz	r1, 8009874 <__ascii_wctomb+0x18>
 8009862:	2aff      	cmp	r2, #255	; 0xff
 8009864:	d904      	bls.n	8009870 <__ascii_wctomb+0x14>
 8009866:	228a      	movs	r2, #138	; 0x8a
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	4770      	bx	lr
 8009870:	2001      	movs	r0, #1
 8009872:	700a      	strb	r2, [r1, #0]
 8009874:	4770      	bx	lr
	...

08009878 <__swsetup_r>:
 8009878:	4b32      	ldr	r3, [pc, #200]	; (8009944 <__swsetup_r+0xcc>)
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	681d      	ldr	r5, [r3, #0]
 800987e:	4606      	mov	r6, r0
 8009880:	460c      	mov	r4, r1
 8009882:	b125      	cbz	r5, 800988e <__swsetup_r+0x16>
 8009884:	69ab      	ldr	r3, [r5, #24]
 8009886:	b913      	cbnz	r3, 800988e <__swsetup_r+0x16>
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f985 	bl	8009b98 <__sinit>
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <__swsetup_r+0xd0>)
 8009890:	429c      	cmp	r4, r3
 8009892:	d10f      	bne.n	80098b4 <__swsetup_r+0x3c>
 8009894:	686c      	ldr	r4, [r5, #4]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800989c:	0719      	lsls	r1, r3, #28
 800989e:	d42c      	bmi.n	80098fa <__swsetup_r+0x82>
 80098a0:	06dd      	lsls	r5, r3, #27
 80098a2:	d411      	bmi.n	80098c8 <__swsetup_r+0x50>
 80098a4:	2309      	movs	r3, #9
 80098a6:	6033      	str	r3, [r6, #0]
 80098a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	e03e      	b.n	8009932 <__swsetup_r+0xba>
 80098b4:	4b25      	ldr	r3, [pc, #148]	; (800994c <__swsetup_r+0xd4>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <__swsetup_r+0x46>
 80098ba:	68ac      	ldr	r4, [r5, #8]
 80098bc:	e7eb      	b.n	8009896 <__swsetup_r+0x1e>
 80098be:	4b24      	ldr	r3, [pc, #144]	; (8009950 <__swsetup_r+0xd8>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68ec      	ldreq	r4, [r5, #12]
 80098c6:	e7e6      	b.n	8009896 <__swsetup_r+0x1e>
 80098c8:	0758      	lsls	r0, r3, #29
 80098ca:	d512      	bpl.n	80098f2 <__swsetup_r+0x7a>
 80098cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ce:	b141      	cbz	r1, 80098e2 <__swsetup_r+0x6a>
 80098d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d002      	beq.n	80098de <__swsetup_r+0x66>
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff fb75 	bl	8008fc8 <_free_r>
 80098de:	2300      	movs	r3, #0
 80098e0:	6363      	str	r3, [r4, #52]	; 0x34
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	2300      	movs	r3, #0
 80098ec:	6063      	str	r3, [r4, #4]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f043 0308 	orr.w	r3, r3, #8
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	b94b      	cbnz	r3, 8009912 <__swsetup_r+0x9a>
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009908:	d003      	beq.n	8009912 <__swsetup_r+0x9a>
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f000 fa07 	bl	8009d20 <__smakebuf_r>
 8009912:	89a0      	ldrh	r0, [r4, #12]
 8009914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009918:	f010 0301 	ands.w	r3, r0, #1
 800991c:	d00a      	beq.n	8009934 <__swsetup_r+0xbc>
 800991e:	2300      	movs	r3, #0
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	6963      	ldr	r3, [r4, #20]
 8009924:	425b      	negs	r3, r3
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	b943      	cbnz	r3, 800993e <__swsetup_r+0xc6>
 800992c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009930:	d1ba      	bne.n	80098a8 <__swsetup_r+0x30>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	0781      	lsls	r1, r0, #30
 8009936:	bf58      	it	pl
 8009938:	6963      	ldrpl	r3, [r4, #20]
 800993a:	60a3      	str	r3, [r4, #8]
 800993c:	e7f4      	b.n	8009928 <__swsetup_r+0xb0>
 800993e:	2000      	movs	r0, #0
 8009940:	e7f7      	b.n	8009932 <__swsetup_r+0xba>
 8009942:	bf00      	nop
 8009944:	20000020 	.word	0x20000020
 8009948:	0800b864 	.word	0x0800b864
 800994c:	0800b884 	.word	0x0800b884
 8009950:	0800b844 	.word	0x0800b844

08009954 <abort>:
 8009954:	2006      	movs	r0, #6
 8009956:	b508      	push	{r3, lr}
 8009958:	f000 fa52 	bl	8009e00 <raise>
 800995c:	2001      	movs	r0, #1
 800995e:	f7fd fb54 	bl	800700a <_exit>
	...

08009964 <__sflush_r>:
 8009964:	898a      	ldrh	r2, [r1, #12]
 8009966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996a:	4605      	mov	r5, r0
 800996c:	0710      	lsls	r0, r2, #28
 800996e:	460c      	mov	r4, r1
 8009970:	d458      	bmi.n	8009a24 <__sflush_r+0xc0>
 8009972:	684b      	ldr	r3, [r1, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	dc05      	bgt.n	8009984 <__sflush_r+0x20>
 8009978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	dc02      	bgt.n	8009984 <__sflush_r+0x20>
 800997e:	2000      	movs	r0, #0
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009986:	2e00      	cmp	r6, #0
 8009988:	d0f9      	beq.n	800997e <__sflush_r+0x1a>
 800998a:	2300      	movs	r3, #0
 800998c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009990:	682f      	ldr	r7, [r5, #0]
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	d032      	beq.n	80099fc <__sflush_r+0x98>
 8009996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	075a      	lsls	r2, r3, #29
 800999c:	d505      	bpl.n	80099aa <__sflush_r+0x46>
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	1ac0      	subs	r0, r0, r3
 80099a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099a4:	b10b      	cbz	r3, 80099aa <__sflush_r+0x46>
 80099a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a8:	1ac0      	subs	r0, r0, r3
 80099aa:	2300      	movs	r3, #0
 80099ac:	4602      	mov	r2, r0
 80099ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099b0:	4628      	mov	r0, r5
 80099b2:	6a21      	ldr	r1, [r4, #32]
 80099b4:	47b0      	blx	r6
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	d106      	bne.n	80099ca <__sflush_r+0x66>
 80099bc:	6829      	ldr	r1, [r5, #0]
 80099be:	291d      	cmp	r1, #29
 80099c0:	d82c      	bhi.n	8009a1c <__sflush_r+0xb8>
 80099c2:	4a2a      	ldr	r2, [pc, #168]	; (8009a6c <__sflush_r+0x108>)
 80099c4:	40ca      	lsrs	r2, r1
 80099c6:	07d6      	lsls	r6, r2, #31
 80099c8:	d528      	bpl.n	8009a1c <__sflush_r+0xb8>
 80099ca:	2200      	movs	r2, #0
 80099cc:	6062      	str	r2, [r4, #4]
 80099ce:	6922      	ldr	r2, [r4, #16]
 80099d0:	04d9      	lsls	r1, r3, #19
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	d504      	bpl.n	80099e0 <__sflush_r+0x7c>
 80099d6:	1c42      	adds	r2, r0, #1
 80099d8:	d101      	bne.n	80099de <__sflush_r+0x7a>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b903      	cbnz	r3, 80099e0 <__sflush_r+0x7c>
 80099de:	6560      	str	r0, [r4, #84]	; 0x54
 80099e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e2:	602f      	str	r7, [r5, #0]
 80099e4:	2900      	cmp	r1, #0
 80099e6:	d0ca      	beq.n	800997e <__sflush_r+0x1a>
 80099e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d002      	beq.n	80099f6 <__sflush_r+0x92>
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff fae9 	bl	8008fc8 <_free_r>
 80099f6:	2000      	movs	r0, #0
 80099f8:	6360      	str	r0, [r4, #52]	; 0x34
 80099fa:	e7c1      	b.n	8009980 <__sflush_r+0x1c>
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	2301      	movs	r3, #1
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b0      	blx	r6
 8009a04:	1c41      	adds	r1, r0, #1
 8009a06:	d1c7      	bne.n	8009998 <__sflush_r+0x34>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0c4      	beq.n	8009998 <__sflush_r+0x34>
 8009a0e:	2b1d      	cmp	r3, #29
 8009a10:	d001      	beq.n	8009a16 <__sflush_r+0xb2>
 8009a12:	2b16      	cmp	r3, #22
 8009a14:	d101      	bne.n	8009a1a <__sflush_r+0xb6>
 8009a16:	602f      	str	r7, [r5, #0]
 8009a18:	e7b1      	b.n	800997e <__sflush_r+0x1a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	e7ad      	b.n	8009980 <__sflush_r+0x1c>
 8009a24:	690f      	ldr	r7, [r1, #16]
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	d0a9      	beq.n	800997e <__sflush_r+0x1a>
 8009a2a:	0793      	lsls	r3, r2, #30
 8009a2c:	bf18      	it	ne
 8009a2e:	2300      	movne	r3, #0
 8009a30:	680e      	ldr	r6, [r1, #0]
 8009a32:	bf08      	it	eq
 8009a34:	694b      	ldreq	r3, [r1, #20]
 8009a36:	eba6 0807 	sub.w	r8, r6, r7
 8009a3a:	600f      	str	r7, [r1, #0]
 8009a3c:	608b      	str	r3, [r1, #8]
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	dd9c      	ble.n	800997e <__sflush_r+0x1a>
 8009a44:	4643      	mov	r3, r8
 8009a46:	463a      	mov	r2, r7
 8009a48:	4628      	mov	r0, r5
 8009a4a:	6a21      	ldr	r1, [r4, #32]
 8009a4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a4e:	47b0      	blx	r6
 8009a50:	2800      	cmp	r0, #0
 8009a52:	dc06      	bgt.n	8009a62 <__sflush_r+0xfe>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e78e      	b.n	8009980 <__sflush_r+0x1c>
 8009a62:	4407      	add	r7, r0
 8009a64:	eba8 0800 	sub.w	r8, r8, r0
 8009a68:	e7e9      	b.n	8009a3e <__sflush_r+0xda>
 8009a6a:	bf00      	nop
 8009a6c:	20400001 	.word	0x20400001

08009a70 <_fflush_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	690b      	ldr	r3, [r1, #16]
 8009a74:	4605      	mov	r5, r0
 8009a76:	460c      	mov	r4, r1
 8009a78:	b913      	cbnz	r3, 8009a80 <_fflush_r+0x10>
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	b118      	cbz	r0, 8009a8a <_fflush_r+0x1a>
 8009a82:	6983      	ldr	r3, [r0, #24]
 8009a84:	b90b      	cbnz	r3, 8009a8a <_fflush_r+0x1a>
 8009a86:	f000 f887 	bl	8009b98 <__sinit>
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <_fflush_r+0x6c>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	d11b      	bne.n	8009ac8 <_fflush_r+0x58>
 8009a90:	686c      	ldr	r4, [r5, #4]
 8009a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ef      	beq.n	8009a7a <_fflush_r+0xa>
 8009a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a9c:	07d0      	lsls	r0, r2, #31
 8009a9e:	d404      	bmi.n	8009aaa <_fflush_r+0x3a>
 8009aa0:	0599      	lsls	r1, r3, #22
 8009aa2:	d402      	bmi.n	8009aaa <_fflush_r+0x3a>
 8009aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aa6:	f000 f915 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 8009aaa:	4628      	mov	r0, r5
 8009aac:	4621      	mov	r1, r4
 8009aae:	f7ff ff59 	bl	8009964 <__sflush_r>
 8009ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d4e0      	bmi.n	8009a7c <_fflush_r+0xc>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	059b      	lsls	r3, r3, #22
 8009abe:	d4dd      	bmi.n	8009a7c <_fflush_r+0xc>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f000 f908 	bl	8009cd6 <__retarget_lock_release_recursive>
 8009ac6:	e7d9      	b.n	8009a7c <_fflush_r+0xc>
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <_fflush_r+0x70>)
 8009aca:	429c      	cmp	r4, r3
 8009acc:	d101      	bne.n	8009ad2 <_fflush_r+0x62>
 8009ace:	68ac      	ldr	r4, [r5, #8]
 8009ad0:	e7df      	b.n	8009a92 <_fflush_r+0x22>
 8009ad2:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <_fflush_r+0x74>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	bf08      	it	eq
 8009ad8:	68ec      	ldreq	r4, [r5, #12]
 8009ada:	e7da      	b.n	8009a92 <_fflush_r+0x22>
 8009adc:	0800b864 	.word	0x0800b864
 8009ae0:	0800b884 	.word	0x0800b884
 8009ae4:	0800b844 	.word	0x0800b844

08009ae8 <std>:
 8009ae8:	2300      	movs	r3, #0
 8009aea:	b510      	push	{r4, lr}
 8009aec:	4604      	mov	r4, r0
 8009aee:	e9c0 3300 	strd	r3, r3, [r0]
 8009af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009af6:	6083      	str	r3, [r0, #8]
 8009af8:	8181      	strh	r1, [r0, #12]
 8009afa:	6643      	str	r3, [r0, #100]	; 0x64
 8009afc:	81c2      	strh	r2, [r0, #14]
 8009afe:	6183      	str	r3, [r0, #24]
 8009b00:	4619      	mov	r1, r3
 8009b02:	2208      	movs	r2, #8
 8009b04:	305c      	adds	r0, #92	; 0x5c
 8009b06:	f7fd fbb1 	bl	800726c <memset>
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <std+0x38>)
 8009b0c:	6224      	str	r4, [r4, #32]
 8009b0e:	6263      	str	r3, [r4, #36]	; 0x24
 8009b10:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <std+0x3c>)
 8009b12:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <std+0x40>)
 8009b16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b18:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <std+0x44>)
 8009b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	bf00      	nop
 8009b20:	08009e39 	.word	0x08009e39
 8009b24:	08009e5b 	.word	0x08009e5b
 8009b28:	08009e93 	.word	0x08009e93
 8009b2c:	08009eb7 	.word	0x08009eb7

08009b30 <_cleanup_r>:
 8009b30:	4901      	ldr	r1, [pc, #4]	; (8009b38 <_cleanup_r+0x8>)
 8009b32:	f000 b8af 	b.w	8009c94 <_fwalk_reent>
 8009b36:	bf00      	nop
 8009b38:	08009a71 	.word	0x08009a71

08009b3c <__sfmoreglue>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	2568      	movs	r5, #104	; 0x68
 8009b40:	1e4a      	subs	r2, r1, #1
 8009b42:	4355      	muls	r5, r2
 8009b44:	460e      	mov	r6, r1
 8009b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b4a:	f7ff fa89 	bl	8009060 <_malloc_r>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	b140      	cbz	r0, 8009b64 <__sfmoreglue+0x28>
 8009b52:	2100      	movs	r1, #0
 8009b54:	e9c0 1600 	strd	r1, r6, [r0]
 8009b58:	300c      	adds	r0, #12
 8009b5a:	60a0      	str	r0, [r4, #8]
 8009b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b60:	f7fd fb84 	bl	800726c <memset>
 8009b64:	4620      	mov	r0, r4
 8009b66:	bd70      	pop	{r4, r5, r6, pc}

08009b68 <__sfp_lock_acquire>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sfp_lock_acquire+0x8>)
 8009b6a:	f000 b8b3 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20000864 	.word	0x20000864

08009b74 <__sfp_lock_release>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__sfp_lock_release+0x8>)
 8009b76:	f000 b8ae 	b.w	8009cd6 <__retarget_lock_release_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	20000864 	.word	0x20000864

08009b80 <__sinit_lock_acquire>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sinit_lock_acquire+0x8>)
 8009b82:	f000 b8a7 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	2000085f 	.word	0x2000085f

08009b8c <__sinit_lock_release>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sinit_lock_release+0x8>)
 8009b8e:	f000 b8a2 	b.w	8009cd6 <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	2000085f 	.word	0x2000085f

08009b98 <__sinit>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	f7ff fff0 	bl	8009b80 <__sinit_lock_acquire>
 8009ba0:	69a3      	ldr	r3, [r4, #24]
 8009ba2:	b11b      	cbz	r3, 8009bac <__sinit+0x14>
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f7ff bff0 	b.w	8009b8c <__sinit_lock_release>
 8009bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8009bb2:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <__sinit+0x68>)
 8009bb4:	4a13      	ldr	r2, [pc, #76]	; (8009c04 <__sinit+0x6c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	bf08      	it	eq
 8009bbe:	2301      	moveq	r3, #1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	bf08      	it	eq
 8009bc4:	61a3      	streq	r3, [r4, #24]
 8009bc6:	f000 f81f 	bl	8009c08 <__sfp>
 8009bca:	6060      	str	r0, [r4, #4]
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 f81b 	bl	8009c08 <__sfp>
 8009bd2:	60a0      	str	r0, [r4, #8]
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f000 f817 	bl	8009c08 <__sfp>
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2104      	movs	r1, #4
 8009bde:	60e0      	str	r0, [r4, #12]
 8009be0:	6860      	ldr	r0, [r4, #4]
 8009be2:	f7ff ff81 	bl	8009ae8 <std>
 8009be6:	2201      	movs	r2, #1
 8009be8:	2109      	movs	r1, #9
 8009bea:	68a0      	ldr	r0, [r4, #8]
 8009bec:	f7ff ff7c 	bl	8009ae8 <std>
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	2112      	movs	r1, #18
 8009bf4:	68e0      	ldr	r0, [r4, #12]
 8009bf6:	f7ff ff77 	bl	8009ae8 <std>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	61a3      	str	r3, [r4, #24]
 8009bfe:	e7d1      	b.n	8009ba4 <__sinit+0xc>
 8009c00:	0800b4c4 	.word	0x0800b4c4
 8009c04:	08009b31 	.word	0x08009b31

08009c08 <__sfp>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	f7ff ffac 	bl	8009b68 <__sfp_lock_acquire>
 8009c10:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <__sfp+0x84>)
 8009c12:	681e      	ldr	r6, [r3, #0]
 8009c14:	69b3      	ldr	r3, [r6, #24]
 8009c16:	b913      	cbnz	r3, 8009c1e <__sfp+0x16>
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff ffbd 	bl	8009b98 <__sinit>
 8009c1e:	3648      	adds	r6, #72	; 0x48
 8009c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	d503      	bpl.n	8009c30 <__sfp+0x28>
 8009c28:	6833      	ldr	r3, [r6, #0]
 8009c2a:	b30b      	cbz	r3, 8009c70 <__sfp+0x68>
 8009c2c:	6836      	ldr	r6, [r6, #0]
 8009c2e:	e7f7      	b.n	8009c20 <__sfp+0x18>
 8009c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c34:	b9d5      	cbnz	r5, 8009c6c <__sfp+0x64>
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <__sfp+0x88>)
 8009c38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c3c:	60e3      	str	r3, [r4, #12]
 8009c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c40:	f000 f847 	bl	8009cd2 <__retarget_lock_init_recursive>
 8009c44:	f7ff ff96 	bl	8009b74 <__sfp_lock_release>
 8009c48:	2208      	movs	r2, #8
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c54:	6025      	str	r5, [r4, #0]
 8009c56:	61a5      	str	r5, [r4, #24]
 8009c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c5c:	f7fd fb06 	bl	800726c <memset>
 8009c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6c:	3468      	adds	r4, #104	; 0x68
 8009c6e:	e7d9      	b.n	8009c24 <__sfp+0x1c>
 8009c70:	2104      	movs	r1, #4
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff ff62 	bl	8009b3c <__sfmoreglue>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	6030      	str	r0, [r6, #0]
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1d5      	bne.n	8009c2c <__sfp+0x24>
 8009c80:	f7ff ff78 	bl	8009b74 <__sfp_lock_release>
 8009c84:	230c      	movs	r3, #12
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	e7ee      	b.n	8009c68 <__sfp+0x60>
 8009c8a:	bf00      	nop
 8009c8c:	0800b4c4 	.word	0x0800b4c4
 8009c90:	ffff0001 	.word	0xffff0001

08009c94 <_fwalk_reent>:
 8009c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c98:	4606      	mov	r6, r0
 8009c9a:	4688      	mov	r8, r1
 8009c9c:	2700      	movs	r7, #0
 8009c9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8009caa:	d505      	bpl.n	8009cb8 <_fwalk_reent+0x24>
 8009cac:	6824      	ldr	r4, [r4, #0]
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d1f7      	bne.n	8009ca2 <_fwalk_reent+0xe>
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb8:	89ab      	ldrh	r3, [r5, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d907      	bls.n	8009cce <_fwalk_reent+0x3a>
 8009cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	d003      	beq.n	8009cce <_fwalk_reent+0x3a>
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	47c0      	blx	r8
 8009ccc:	4307      	orrs	r7, r0
 8009cce:	3568      	adds	r5, #104	; 0x68
 8009cd0:	e7e9      	b.n	8009ca6 <_fwalk_reent+0x12>

08009cd2 <__retarget_lock_init_recursive>:
 8009cd2:	4770      	bx	lr

08009cd4 <__retarget_lock_acquire_recursive>:
 8009cd4:	4770      	bx	lr

08009cd6 <__retarget_lock_release_recursive>:
 8009cd6:	4770      	bx	lr

08009cd8 <__swhatbuf_r>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	460e      	mov	r6, r1
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	461d      	mov	r5, r3
 8009ce6:	b096      	sub	sp, #88	; 0x58
 8009ce8:	da07      	bge.n	8009cfa <__swhatbuf_r+0x22>
 8009cea:	2300      	movs	r3, #0
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	89b3      	ldrh	r3, [r6, #12]
 8009cf0:	061a      	lsls	r2, r3, #24
 8009cf2:	d410      	bmi.n	8009d16 <__swhatbuf_r+0x3e>
 8009cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cf8:	e00e      	b.n	8009d18 <__swhatbuf_r+0x40>
 8009cfa:	466a      	mov	r2, sp
 8009cfc:	f000 f902 	bl	8009f04 <_fstat_r>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	dbf2      	blt.n	8009cea <__swhatbuf_r+0x12>
 8009d04:	9a01      	ldr	r2, [sp, #4]
 8009d06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d0e:	425a      	negs	r2, r3
 8009d10:	415a      	adcs	r2, r3
 8009d12:	602a      	str	r2, [r5, #0]
 8009d14:	e7ee      	b.n	8009cf4 <__swhatbuf_r+0x1c>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	2000      	movs	r0, #0
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	b016      	add	sp, #88	; 0x58
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}

08009d20 <__smakebuf_r>:
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d24:	079d      	lsls	r5, r3, #30
 8009d26:	4606      	mov	r6, r0
 8009d28:	460c      	mov	r4, r1
 8009d2a:	d507      	bpl.n	8009d3c <__smakebuf_r+0x1c>
 8009d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2301      	movs	r3, #1
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	466a      	mov	r2, sp
 8009d3e:	ab01      	add	r3, sp, #4
 8009d40:	f7ff ffca 	bl	8009cd8 <__swhatbuf_r>
 8009d44:	9900      	ldr	r1, [sp, #0]
 8009d46:	4605      	mov	r5, r0
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff f989 	bl	8009060 <_malloc_r>
 8009d4e:	b948      	cbnz	r0, 8009d64 <__smakebuf_r+0x44>
 8009d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d4ef      	bmi.n	8009d38 <__smakebuf_r+0x18>
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	f043 0302 	orr.w	r3, r3, #2
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	e7e3      	b.n	8009d2c <__smakebuf_r+0xc>
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <__smakebuf_r+0x7c>)
 8009d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	6020      	str	r0, [r4, #0]
 8009d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	9b00      	ldr	r3, [sp, #0]
 8009d74:	6120      	str	r0, [r4, #16]
 8009d76:	6163      	str	r3, [r4, #20]
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	b15b      	cbz	r3, 8009d94 <__smakebuf_r+0x74>
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d82:	f000 f8d1 	bl	8009f28 <_isatty_r>
 8009d86:	b128      	cbz	r0, 8009d94 <__smakebuf_r+0x74>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f023 0303 	bic.w	r3, r3, #3
 8009d8e:	f043 0301 	orr.w	r3, r3, #1
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	89a0      	ldrh	r0, [r4, #12]
 8009d96:	4305      	orrs	r5, r0
 8009d98:	81a5      	strh	r5, [r4, #12]
 8009d9a:	e7cd      	b.n	8009d38 <__smakebuf_r+0x18>
 8009d9c:	08009b31 	.word	0x08009b31

08009da0 <_malloc_usable_size_r>:
 8009da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da4:	1f18      	subs	r0, r3, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bfbc      	itt	lt
 8009daa:	580b      	ldrlt	r3, [r1, r0]
 8009dac:	18c0      	addlt	r0, r0, r3
 8009dae:	4770      	bx	lr

08009db0 <_raise_r>:
 8009db0:	291f      	cmp	r1, #31
 8009db2:	b538      	push	{r3, r4, r5, lr}
 8009db4:	4604      	mov	r4, r0
 8009db6:	460d      	mov	r5, r1
 8009db8:	d904      	bls.n	8009dc4 <_raise_r+0x14>
 8009dba:	2316      	movs	r3, #22
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dc6:	b112      	cbz	r2, 8009dce <_raise_r+0x1e>
 8009dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dcc:	b94b      	cbnz	r3, 8009de2 <_raise_r+0x32>
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 f830 	bl	8009e34 <_getpid_r>
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	4620      	mov	r0, r4
 8009dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dde:	f000 b817 	b.w	8009e10 <_kill_r>
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d00a      	beq.n	8009dfc <_raise_r+0x4c>
 8009de6:	1c59      	adds	r1, r3, #1
 8009de8:	d103      	bne.n	8009df2 <_raise_r+0x42>
 8009dea:	2316      	movs	r3, #22
 8009dec:	6003      	str	r3, [r0, #0]
 8009dee:	2001      	movs	r0, #1
 8009df0:	e7e7      	b.n	8009dc2 <_raise_r+0x12>
 8009df2:	2400      	movs	r4, #0
 8009df4:	4628      	mov	r0, r5
 8009df6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dfa:	4798      	blx	r3
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e7e0      	b.n	8009dc2 <_raise_r+0x12>

08009e00 <raise>:
 8009e00:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <raise+0xc>)
 8009e02:	4601      	mov	r1, r0
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	f7ff bfd3 	b.w	8009db0 <_raise_r>
 8009e0a:	bf00      	nop
 8009e0c:	20000020 	.word	0x20000020

08009e10 <_kill_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	2300      	movs	r3, #0
 8009e14:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_kill_r+0x20>)
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	f7fd f8e4 	bl	8006fea <_kill>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d102      	bne.n	8009e2c <_kill_r+0x1c>
 8009e26:	682b      	ldr	r3, [r5, #0]
 8009e28:	b103      	cbz	r3, 8009e2c <_kill_r+0x1c>
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000858 	.word	0x20000858

08009e34 <_getpid_r>:
 8009e34:	f7fd b8d2 	b.w	8006fdc <_getpid>

08009e38 <__sread>:
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	f000 f894 	bl	8009f6c <_read_r>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	bfab      	itete	ge
 8009e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e4c:	181b      	addge	r3, r3, r0
 8009e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e52:	bfac      	ite	ge
 8009e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e56:	81a3      	strhlt	r3, [r4, #12]
 8009e58:	bd10      	pop	{r4, pc}

08009e5a <__swrite>:
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	461f      	mov	r7, r3
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	4605      	mov	r5, r0
 8009e64:	05db      	lsls	r3, r3, #23
 8009e66:	460c      	mov	r4, r1
 8009e68:	4616      	mov	r6, r2
 8009e6a:	d505      	bpl.n	8009e78 <__swrite+0x1e>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e74:	f000 f868 	bl	8009f48 <_lseek_r>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	4628      	mov	r0, r5
 8009e84:	463b      	mov	r3, r7
 8009e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	f000 b817 	b.w	8009ec0 <_write_r>

08009e92 <__sseek>:
 8009e92:	b510      	push	{r4, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 f855 	bl	8009f48 <_lseek_r>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	bf15      	itete	ne
 8009ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eae:	81a3      	strheq	r3, [r4, #12]
 8009eb0:	bf18      	it	ne
 8009eb2:	81a3      	strhne	r3, [r4, #12]
 8009eb4:	bd10      	pop	{r4, pc}

08009eb6 <__sclose>:
 8009eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eba:	f000 b813 	b.w	8009ee4 <_close_r>
	...

08009ec0 <_write_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4d05      	ldr	r5, [pc, #20]	; (8009ee0 <_write_r+0x20>)
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f7fd f8c2 	bl	8007058 <_write>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_write_r+0x1e>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_write_r+0x1e>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20000858 	.word	0x20000858

08009ee4 <_close_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	4d05      	ldr	r5, [pc, #20]	; (8009f00 <_close_r+0x1c>)
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	602b      	str	r3, [r5, #0]
 8009ef0:	f7fd f8ce 	bl	8007090 <_close>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_close_r+0x1a>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_close_r+0x1a>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	20000858 	.word	0x20000858

08009f04 <_fstat_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	2300      	movs	r3, #0
 8009f08:	4d06      	ldr	r5, [pc, #24]	; (8009f24 <_fstat_r+0x20>)
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	f7fd f8c8 	bl	80070a6 <_fstat>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d102      	bne.n	8009f20 <_fstat_r+0x1c>
 8009f1a:	682b      	ldr	r3, [r5, #0]
 8009f1c:	b103      	cbz	r3, 8009f20 <_fstat_r+0x1c>
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	bf00      	nop
 8009f24:	20000858 	.word	0x20000858

08009f28 <_isatty_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4d05      	ldr	r5, [pc, #20]	; (8009f44 <_isatty_r+0x1c>)
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7fd f8c6 	bl	80070c4 <_isatty>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_isatty_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_isatty_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20000858 	.word	0x20000858

08009f48 <_lseek_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	4611      	mov	r1, r2
 8009f50:	2200      	movs	r2, #0
 8009f52:	4d05      	ldr	r5, [pc, #20]	; (8009f68 <_lseek_r+0x20>)
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7fd f8be 	bl	80070d8 <_lseek>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_lseek_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_lseek_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20000858 	.word	0x20000858

08009f6c <_read_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	4611      	mov	r1, r2
 8009f74:	2200      	movs	r2, #0
 8009f76:	4d05      	ldr	r5, [pc, #20]	; (8009f8c <_read_r+0x20>)
 8009f78:	602a      	str	r2, [r5, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f7fd f84f 	bl	800701e <_read>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_read_r+0x1e>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_read_r+0x1e>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000858 	.word	0x20000858

08009f90 <_init>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr

08009f9c <_fini>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr
