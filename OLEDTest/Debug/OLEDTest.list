
OLEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f8  0800abd8  0800abd8  0001abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d0  0800c3d0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d8  0800c3d8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3dc  0800c3dc  0001c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001ec  0800c5cc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800c5cc  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163e2  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ec5  00000000  00000000  000365f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  000394c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171f9  00000000  00000000  0003bb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed52  00000000  00000000  00052d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b32  00000000  00000000  00061a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e8  00000000  00000000  000da610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abbc 	.word	0x0800abbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800abbc 	.word	0x0800abbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_ldivmod>:
 8000fe4:	b97b      	cbnz	r3, 8001006 <__aeabi_ldivmod+0x22>
 8000fe6:	b972      	cbnz	r2, 8001006 <__aeabi_ldivmod+0x22>
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	bfbe      	ittt	lt
 8000fec:	2000      	movlt	r0, #0
 8000fee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ff2:	e006      	blt.n	8001002 <__aeabi_ldivmod+0x1e>
 8000ff4:	bf08      	it	eq
 8000ff6:	2800      	cmpeq	r0, #0
 8000ff8:	bf1c      	itt	ne
 8000ffa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ffe:	f04f 30ff 	movne.w	r0, #4294967295
 8001002:	f000 b9a7 	b.w	8001354 <__aeabi_idiv0>
 8001006:	f1ad 0c08 	sub.w	ip, sp, #8
 800100a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800100e:	2900      	cmp	r1, #0
 8001010:	db09      	blt.n	8001026 <__aeabi_ldivmod+0x42>
 8001012:	2b00      	cmp	r3, #0
 8001014:	db1a      	blt.n	800104c <__aeabi_ldivmod+0x68>
 8001016:	f000 f835 	bl	8001084 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	4240      	negs	r0, r0
 8001028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1b      	blt.n	8001068 <__aeabi_ldivmod+0x84>
 8001030:	f000 f828 	bl	8001084 <__udivmoddi4>
 8001034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103c:	b004      	add	sp, #16
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	4770      	bx	lr
 800104c:	4252      	negs	r2, r2
 800104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001052:	f000 f817 	bl	8001084 <__udivmoddi4>
 8001056:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105e:	b004      	add	sp, #16
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	4770      	bx	lr
 8001068:	4252      	negs	r2, r2
 800106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800106e:	f000 f809 	bl	8001084 <__udivmoddi4>
 8001072:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107a:	b004      	add	sp, #16
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	4770      	bx	lr

08001084 <__udivmoddi4>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	468c      	mov	ip, r1
 800108a:	4604      	mov	r4, r0
 800108c:	9e08      	ldr	r6, [sp, #32]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14b      	bne.n	800112a <__udivmoddi4+0xa6>
 8001092:	428a      	cmp	r2, r1
 8001094:	4615      	mov	r5, r2
 8001096:	d967      	bls.n	8001168 <__udivmoddi4+0xe4>
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	b14a      	cbz	r2, 80010b2 <__udivmoddi4+0x2e>
 800109e:	f1c2 0720 	rsb	r7, r2, #32
 80010a2:	fa01 f302 	lsl.w	r3, r1, r2
 80010a6:	fa20 f707 	lsr.w	r7, r0, r7
 80010aa:	4095      	lsls	r5, r2
 80010ac:	ea47 0c03 	orr.w	ip, r7, r3
 80010b0:	4094      	lsls	r4, r2
 80010b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b6:	fbbc f7fe 	udiv	r7, ip, lr
 80010ba:	fa1f f885 	uxth.w	r8, r5
 80010be:	fb0e c317 	mls	r3, lr, r7, ip
 80010c2:	fb07 f908 	mul.w	r9, r7, r8
 80010c6:	0c21      	lsrs	r1, r4, #16
 80010c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010cc:	4599      	cmp	r9, r3
 80010ce:	d909      	bls.n	80010e4 <__udivmoddi4+0x60>
 80010d0:	18eb      	adds	r3, r5, r3
 80010d2:	f107 31ff 	add.w	r1, r7, #4294967295
 80010d6:	f080 811c 	bcs.w	8001312 <__udivmoddi4+0x28e>
 80010da:	4599      	cmp	r9, r3
 80010dc:	f240 8119 	bls.w	8001312 <__udivmoddi4+0x28e>
 80010e0:	3f02      	subs	r7, #2
 80010e2:	442b      	add	r3, r5
 80010e4:	eba3 0309 	sub.w	r3, r3, r9
 80010e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f0:	fb00 f108 	mul.w	r1, r0, r8
 80010f4:	b2a4      	uxth	r4, r4
 80010f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d909      	bls.n	8001112 <__udivmoddi4+0x8e>
 80010fe:	192c      	adds	r4, r5, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	f080 8107 	bcs.w	8001316 <__udivmoddi4+0x292>
 8001108:	42a1      	cmp	r1, r4
 800110a:	f240 8104 	bls.w	8001316 <__udivmoddi4+0x292>
 800110e:	3802      	subs	r0, #2
 8001110:	442c      	add	r4, r5
 8001112:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001116:	2700      	movs	r7, #0
 8001118:	1a64      	subs	r4, r4, r1
 800111a:	b11e      	cbz	r6, 8001124 <__udivmoddi4+0xa0>
 800111c:	2300      	movs	r3, #0
 800111e:	40d4      	lsrs	r4, r2
 8001120:	e9c6 4300 	strd	r4, r3, [r6]
 8001124:	4639      	mov	r1, r7
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112a:	428b      	cmp	r3, r1
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0xbe>
 800112e:	2e00      	cmp	r6, #0
 8001130:	f000 80ec 	beq.w	800130c <__udivmoddi4+0x288>
 8001134:	2700      	movs	r7, #0
 8001136:	e9c6 0100 	strd	r0, r1, [r6]
 800113a:	4638      	mov	r0, r7
 800113c:	4639      	mov	r1, r7
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	fab3 f783 	clz	r7, r3
 8001146:	2f00      	cmp	r7, #0
 8001148:	d148      	bne.n	80011dc <__udivmoddi4+0x158>
 800114a:	428b      	cmp	r3, r1
 800114c:	d302      	bcc.n	8001154 <__udivmoddi4+0xd0>
 800114e:	4282      	cmp	r2, r0
 8001150:	f200 80fb 	bhi.w	800134a <__udivmoddi4+0x2c6>
 8001154:	1a84      	subs	r4, r0, r2
 8001156:	eb61 0303 	sbc.w	r3, r1, r3
 800115a:	2001      	movs	r0, #1
 800115c:	469c      	mov	ip, r3
 800115e:	2e00      	cmp	r6, #0
 8001160:	d0e0      	beq.n	8001124 <__udivmoddi4+0xa0>
 8001162:	e9c6 4c00 	strd	r4, ip, [r6]
 8001166:	e7dd      	b.n	8001124 <__udivmoddi4+0xa0>
 8001168:	b902      	cbnz	r2, 800116c <__udivmoddi4+0xe8>
 800116a:	deff      	udf	#255	; 0xff
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	2a00      	cmp	r2, #0
 8001172:	f040 808f 	bne.w	8001294 <__udivmoddi4+0x210>
 8001176:	2701      	movs	r7, #1
 8001178:	1b49      	subs	r1, r1, r5
 800117a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800117e:	fa1f f985 	uxth.w	r9, r5
 8001182:	fbb1 fef8 	udiv	lr, r1, r8
 8001186:	fb08 111e 	mls	r1, r8, lr, r1
 800118a:	fb09 f00e 	mul.w	r0, r9, lr
 800118e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001192:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001196:	4298      	cmp	r0, r3
 8001198:	d907      	bls.n	80011aa <__udivmoddi4+0x126>
 800119a:	18eb      	adds	r3, r5, r3
 800119c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011a0:	d202      	bcs.n	80011a8 <__udivmoddi4+0x124>
 80011a2:	4298      	cmp	r0, r3
 80011a4:	f200 80cd 	bhi.w	8001342 <__udivmoddi4+0x2be>
 80011a8:	468e      	mov	lr, r1
 80011aa:	1a1b      	subs	r3, r3, r0
 80011ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b0:	fb08 3310 	mls	r3, r8, r0, r3
 80011b4:	fb09 f900 	mul.w	r9, r9, r0
 80011b8:	b2a4      	uxth	r4, r4
 80011ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011be:	45a1      	cmp	r9, r4
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x14e>
 80011c2:	192c      	adds	r4, r5, r4
 80011c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x14c>
 80011ca:	45a1      	cmp	r9, r4
 80011cc:	f200 80b6 	bhi.w	800133c <__udivmoddi4+0x2b8>
 80011d0:	4618      	mov	r0, r3
 80011d2:	eba4 0409 	sub.w	r4, r4, r9
 80011d6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011da:	e79e      	b.n	800111a <__udivmoddi4+0x96>
 80011dc:	f1c7 0520 	rsb	r5, r7, #32
 80011e0:	40bb      	lsls	r3, r7
 80011e2:	fa22 fc05 	lsr.w	ip, r2, r5
 80011e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ea:	fa21 f405 	lsr.w	r4, r1, r5
 80011ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011f2:	fbb4 f9fe 	udiv	r9, r4, lr
 80011f6:	fa1f f88c 	uxth.w	r8, ip
 80011fa:	fb0e 4419 	mls	r4, lr, r9, r4
 80011fe:	fa20 f305 	lsr.w	r3, r0, r5
 8001202:	40b9      	lsls	r1, r7
 8001204:	fb09 fa08 	mul.w	sl, r9, r8
 8001208:	4319      	orrs	r1, r3
 800120a:	0c0b      	lsrs	r3, r1, #16
 800120c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001210:	45a2      	cmp	sl, r4
 8001212:	fa02 f207 	lsl.w	r2, r2, r7
 8001216:	fa00 f307 	lsl.w	r3, r0, r7
 800121a:	d90b      	bls.n	8001234 <__udivmoddi4+0x1b0>
 800121c:	eb1c 0404 	adds.w	r4, ip, r4
 8001220:	f109 30ff 	add.w	r0, r9, #4294967295
 8001224:	f080 8088 	bcs.w	8001338 <__udivmoddi4+0x2b4>
 8001228:	45a2      	cmp	sl, r4
 800122a:	f240 8085 	bls.w	8001338 <__udivmoddi4+0x2b4>
 800122e:	f1a9 0902 	sub.w	r9, r9, #2
 8001232:	4464      	add	r4, ip
 8001234:	eba4 040a 	sub.w	r4, r4, sl
 8001238:	fbb4 f0fe 	udiv	r0, r4, lr
 800123c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001240:	fb00 fa08 	mul.w	sl, r0, r8
 8001244:	b289      	uxth	r1, r1
 8001246:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800124a:	45a2      	cmp	sl, r4
 800124c:	d908      	bls.n	8001260 <__udivmoddi4+0x1dc>
 800124e:	eb1c 0404 	adds.w	r4, ip, r4
 8001252:	f100 31ff 	add.w	r1, r0, #4294967295
 8001256:	d26b      	bcs.n	8001330 <__udivmoddi4+0x2ac>
 8001258:	45a2      	cmp	sl, r4
 800125a:	d969      	bls.n	8001330 <__udivmoddi4+0x2ac>
 800125c:	3802      	subs	r0, #2
 800125e:	4464      	add	r4, ip
 8001260:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001264:	fba0 8902 	umull	r8, r9, r0, r2
 8001268:	eba4 040a 	sub.w	r4, r4, sl
 800126c:	454c      	cmp	r4, r9
 800126e:	4641      	mov	r1, r8
 8001270:	46ce      	mov	lr, r9
 8001272:	d354      	bcc.n	800131e <__udivmoddi4+0x29a>
 8001274:	d051      	beq.n	800131a <__udivmoddi4+0x296>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d069      	beq.n	800134e <__udivmoddi4+0x2ca>
 800127a:	1a5a      	subs	r2, r3, r1
 800127c:	eb64 040e 	sbc.w	r4, r4, lr
 8001280:	fa04 f505 	lsl.w	r5, r4, r5
 8001284:	fa22 f307 	lsr.w	r3, r2, r7
 8001288:	40fc      	lsrs	r4, r7
 800128a:	431d      	orrs	r5, r3
 800128c:	e9c6 5400 	strd	r5, r4, [r6]
 8001290:	2700      	movs	r7, #0
 8001292:	e747      	b.n	8001124 <__udivmoddi4+0xa0>
 8001294:	4095      	lsls	r5, r2
 8001296:	f1c2 0320 	rsb	r3, r2, #32
 800129a:	fa21 f003 	lsr.w	r0, r1, r3
 800129e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012a2:	fbb0 f7f8 	udiv	r7, r0, r8
 80012a6:	fa1f f985 	uxth.w	r9, r5
 80012aa:	fb08 0017 	mls	r0, r8, r7, r0
 80012ae:	fa24 f303 	lsr.w	r3, r4, r3
 80012b2:	4091      	lsls	r1, r2
 80012b4:	fb07 fc09 	mul.w	ip, r7, r9
 80012b8:	430b      	orrs	r3, r1
 80012ba:	0c19      	lsrs	r1, r3, #16
 80012bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012c0:	458c      	cmp	ip, r1
 80012c2:	fa04 f402 	lsl.w	r4, r4, r2
 80012c6:	d907      	bls.n	80012d8 <__udivmoddi4+0x254>
 80012c8:	1869      	adds	r1, r5, r1
 80012ca:	f107 30ff 	add.w	r0, r7, #4294967295
 80012ce:	d231      	bcs.n	8001334 <__udivmoddi4+0x2b0>
 80012d0:	458c      	cmp	ip, r1
 80012d2:	d92f      	bls.n	8001334 <__udivmoddi4+0x2b0>
 80012d4:	3f02      	subs	r7, #2
 80012d6:	4429      	add	r1, r5
 80012d8:	eba1 010c 	sub.w	r1, r1, ip
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1c10 	mls	ip, r8, r0, r1
 80012e4:	fb00 fe09 	mul.w	lr, r0, r9
 80012e8:	b299      	uxth	r1, r3
 80012ea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012ee:	458e      	cmp	lr, r1
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x27e>
 80012f2:	1869      	adds	r1, r5, r1
 80012f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f8:	d218      	bcs.n	800132c <__udivmoddi4+0x2a8>
 80012fa:	458e      	cmp	lr, r1
 80012fc:	d916      	bls.n	800132c <__udivmoddi4+0x2a8>
 80012fe:	3802      	subs	r0, #2
 8001300:	4429      	add	r1, r5
 8001302:	eba1 010e 	sub.w	r1, r1, lr
 8001306:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800130a:	e73a      	b.n	8001182 <__udivmoddi4+0xfe>
 800130c:	4637      	mov	r7, r6
 800130e:	4630      	mov	r0, r6
 8001310:	e708      	b.n	8001124 <__udivmoddi4+0xa0>
 8001312:	460f      	mov	r7, r1
 8001314:	e6e6      	b.n	80010e4 <__udivmoddi4+0x60>
 8001316:	4618      	mov	r0, r3
 8001318:	e6fb      	b.n	8001112 <__udivmoddi4+0x8e>
 800131a:	4543      	cmp	r3, r8
 800131c:	d2ab      	bcs.n	8001276 <__udivmoddi4+0x1f2>
 800131e:	ebb8 0102 	subs.w	r1, r8, r2
 8001322:	eb69 020c 	sbc.w	r2, r9, ip
 8001326:	3801      	subs	r0, #1
 8001328:	4696      	mov	lr, r2
 800132a:	e7a4      	b.n	8001276 <__udivmoddi4+0x1f2>
 800132c:	4618      	mov	r0, r3
 800132e:	e7e8      	b.n	8001302 <__udivmoddi4+0x27e>
 8001330:	4608      	mov	r0, r1
 8001332:	e795      	b.n	8001260 <__udivmoddi4+0x1dc>
 8001334:	4607      	mov	r7, r0
 8001336:	e7cf      	b.n	80012d8 <__udivmoddi4+0x254>
 8001338:	4681      	mov	r9, r0
 800133a:	e77b      	b.n	8001234 <__udivmoddi4+0x1b0>
 800133c:	3802      	subs	r0, #2
 800133e:	442c      	add	r4, r5
 8001340:	e747      	b.n	80011d2 <__udivmoddi4+0x14e>
 8001342:	f1ae 0e02 	sub.w	lr, lr, #2
 8001346:	442b      	add	r3, r5
 8001348:	e72f      	b.n	80011aa <__udivmoddi4+0x126>
 800134a:	4638      	mov	r0, r7
 800134c:	e707      	b.n	800115e <__udivmoddi4+0xda>
 800134e:	4637      	mov	r7, r6
 8001350:	e6e8      	b.n	8001124 <__udivmoddi4+0xa0>
 8001352:	bf00      	nop

08001354 <__aeabi_idiv0>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x28>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f945 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f006 fcfa 	bl	8007d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f95d 	bl	8001662 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f925 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000018 	.word	0x20000018
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x1c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x20>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <HAL_IncTick+0x20>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000004 	.word	0x20000004
 8001404:	20000640 	.word	0x20000640

08001408 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_GetTick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000640 	.word	0x20000640

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fff0 	bl	8001408 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_Delay+0x40>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffe0 	bl	8001408 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000004 	.word	0x20000004

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2d 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff42 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff35 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e043      	b.n	800171a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_DMA_Init+0xa8>)
 800169a:	4413      	add	r3, r2
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_DMA_Init+0xac>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	009a      	lsls	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_DMA_Init+0xb0>)
 80016ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	bffdfff8 	.word	0xbffdfff8
 8001728:	cccccccd 	.word	0xcccccccd
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Start_IT+0x20>
 800174c:	2302      	movs	r3, #2
 800174e:	e04a      	b.n	80017e6 <HAL_DMA_Start_IT+0xb6>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175e:	2b01      	cmp	r3, #1
 8001760:	d13a      	bne.n	80017d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f9ae 	bl	8001ae8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 020e 	orr.w	r2, r2, #14
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e00f      	b.n	80017c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0204 	bic.w	r2, r2, #4
 80017b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 020a 	orr.w	r2, r2, #10
 80017c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e005      	b.n	80017e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001802:	2b02      	cmp	r3, #2
 8001804:	d005      	beq.n	8001812 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e051      	b.n	80018b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 020e 	bic.w	r2, r2, #14
 8001820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <HAL_DMA_Abort_IT+0xd0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d029      	beq.n	8001890 <HAL_DMA_Abort_IT+0xa0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_DMA_Abort_IT+0xd4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d022      	beq.n	800188c <HAL_DMA_Abort_IT+0x9c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_DMA_Abort_IT+0xd8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d01a      	beq.n	8001886 <HAL_DMA_Abort_IT+0x96>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_DMA_Abort_IT+0xdc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d012      	beq.n	8001880 <HAL_DMA_Abort_IT+0x90>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <HAL_DMA_Abort_IT+0xe0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00a      	beq.n	800187a <HAL_DMA_Abort_IT+0x8a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_DMA_Abort_IT+0xe4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d102      	bne.n	8001874 <HAL_DMA_Abort_IT+0x84>
 800186e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001872:	e00e      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 8001874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001878:	e00b      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 800187a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187e:	e008      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	e005      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	e002      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 800188c:	2310      	movs	r3, #16
 800188e:	e000      	b.n	8001892 <HAL_DMA_Abort_IT+0xa2>
 8001890:	2301      	movs	r3, #1
 8001892:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_DMA_Abort_IT+0xe8>)
 8001894:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
    } 
  }
  return status;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020008 	.word	0x40020008
 80018c4:	4002001c 	.word	0x4002001c
 80018c8:	40020030 	.word	0x40020030
 80018cc:	40020044 	.word	0x40020044
 80018d0:	40020058 	.word	0x40020058
 80018d4:	4002006c 	.word	0x4002006c
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	2204      	movs	r2, #4
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d04f      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xc8>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04a      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a66      	ldr	r2, [pc, #408]	; (8001acc <HAL_DMA_IRQHandler+0x1f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d029      	beq.n	800198a <HAL_DMA_IRQHandler+0xae>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_DMA_IRQHandler+0x1f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d022      	beq.n	8001986 <HAL_DMA_IRQHandler+0xaa>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <HAL_DMA_IRQHandler+0x1f8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01a      	beq.n	8001980 <HAL_DMA_IRQHandler+0xa4>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a62      	ldr	r2, [pc, #392]	; (8001ad8 <HAL_DMA_IRQHandler+0x1fc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d012      	beq.n	800197a <HAL_DMA_IRQHandler+0x9e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a60      	ldr	r2, [pc, #384]	; (8001adc <HAL_DMA_IRQHandler+0x200>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00a      	beq.n	8001974 <HAL_DMA_IRQHandler+0x98>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5f      	ldr	r2, [pc, #380]	; (8001ae0 <HAL_DMA_IRQHandler+0x204>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <HAL_DMA_IRQHandler+0x92>
 8001968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196c:	e00e      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 800196e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001972:	e00b      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 8001974:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001978:	e008      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 800197a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197e:	e005      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	e002      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	e000      	b.n	800198c <HAL_DMA_IRQHandler+0xb0>
 800198a:	2304      	movs	r3, #4
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <HAL_DMA_IRQHandler+0x208>)
 800198e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8094 	beq.w	8001ac2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019a2:	e08e      	b.n	8001ac2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2202      	movs	r2, #2
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d056      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x186>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d051      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10b      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020a 	bic.w	r2, r2, #10
 80019da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a38      	ldr	r2, [pc, #224]	; (8001acc <HAL_DMA_IRQHandler+0x1f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d029      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x166>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_DMA_IRQHandler+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x162>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a35      	ldr	r2, [pc, #212]	; (8001ad4 <HAL_DMA_IRQHandler+0x1f8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01a      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x15c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x156>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_DMA_IRQHandler+0x200>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x150>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_DMA_IRQHandler+0x204>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_DMA_IRQHandler+0x14a>
 8001a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a24:	e00e      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2a:	e00b      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	e008      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a36:	e005      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3c:	e002      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e000      	b.n	8001a44 <HAL_DMA_IRQHandler+0x168>
 8001a42:	2302      	movs	r3, #2
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_DMA_IRQHandler+0x208>)
 8001a46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d034      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a60:	e02f      	b.n	8001ac2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2208      	movs	r2, #8
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d028      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x1e8>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 020e 	bic.w	r2, r2, #14
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
    }
  }
  return;
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
}
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40020008 	.word	0x40020008
 8001ad0:	4002001c 	.word	0x4002001c
 8001ad4:	40020030 	.word	0x40020030
 8001ad8:	40020044 	.word	0x40020044
 8001adc:	40020058 	.word	0x40020058
 8001ae0:	4002006c 	.word	0x4002006c
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d108      	bne.n	8001b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b26:	e007      	b.n	8001b38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b08b      	sub	sp, #44	; 0x2c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e127      	b.n	8001da8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8116 	bne.w	8001da2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d034      	beq.n	8001be8 <HAL_GPIO_Init+0xa4>
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d80d      	bhi.n	8001b9e <HAL_GPIO_Init+0x5a>
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x9a>
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d804      	bhi.n	8001b94 <HAL_GPIO_Init+0x50>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d031      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d01c      	beq.n	8001bcc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e048      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d043      	beq.n	8001c20 <HAL_GPIO_Init+0xdc>
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d01b      	beq.n	8001bd4 <HAL_GPIO_Init+0x90>
          break;
 8001b9c:	e043      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b9e:	4a89      	ldr	r2, [pc, #548]	; (8001dc4 <HAL_GPIO_Init+0x280>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d026      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
 8001ba4:	4a87      	ldr	r2, [pc, #540]	; (8001dc4 <HAL_GPIO_Init+0x280>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d806      	bhi.n	8001bb8 <HAL_GPIO_Init+0x74>
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_GPIO_Init+0x284>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d020      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
 8001bb0:	4a86      	ldr	r2, [pc, #536]	; (8001dcc <HAL_GPIO_Init+0x288>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
          break;
 8001bb6:	e036      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bb8:	4a85      	ldr	r2, [pc, #532]	; (8001dd0 <HAL_GPIO_Init+0x28c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
 8001bbe:	4a85      	ldr	r2, [pc, #532]	; (8001dd4 <HAL_GPIO_Init+0x290>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d016      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
 8001bc4:	4a84      	ldr	r2, [pc, #528]	; (8001dd8 <HAL_GPIO_Init+0x294>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0xae>
          break;
 8001bca:	e02c      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e028      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e023      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	3308      	adds	r3, #8
 8001be4:	623b      	str	r3, [r7, #32]
          break;
 8001be6:	e01e      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	330c      	adds	r3, #12
 8001bee:	623b      	str	r3, [r7, #32]
          break;
 8001bf0:	e019      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e012      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	611a      	str	r2, [r3, #16]
          break;
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	615a      	str	r2, [r3, #20]
          break;
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2bff      	cmp	r3, #255	; 0xff
 8001c2a:	d801      	bhi.n	8001c30 <HAL_GPIO_Init+0xec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	e001      	b.n	8001c34 <HAL_GPIO_Init+0xf0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2bff      	cmp	r3, #255	; 0xff
 8001c3a:	d802      	bhi.n	8001c42 <HAL_GPIO_Init+0xfe>
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x104>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3b08      	subs	r3, #8
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	210f      	movs	r1, #15
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	6a39      	ldr	r1, [r7, #32]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8096 	beq.w	8001da2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c76:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_GPIO_Init+0x298>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_GPIO_Init+0x298>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_GPIO_Init+0x298>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c8e:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_GPIO_Init+0x29c>)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x2a0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x19e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x2a4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x19a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x2a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x196>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2ac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x192>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x1a0>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x1a0>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x1a0>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x1a0>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cf4:	493a      	ldr	r1, [pc, #232]	; (8001de0 <HAL_GPIO_Init+0x29c>)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4938      	ldr	r1, [pc, #224]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4933      	ldr	r1, [pc, #204]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	492e      	ldr	r1, [pc, #184]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4929      	ldr	r1, [pc, #164]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	4924      	ldr	r1, [pc, #144]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	491f      	ldr	r1, [pc, #124]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	491a      	ldr	r1, [pc, #104]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4915      	ldr	r1, [pc, #84]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f aed0 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001db8:	bf00      	nop
 8001dba:	372c      	adds	r7, #44	; 0x2c
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	10210000 	.word	0x10210000
 8001dc8:	10110000 	.word	0x10110000
 8001dcc:	10120000 	.word	0x10120000
 8001dd0:	10310000 	.word	0x10310000
 8001dd4:	10320000 	.word	0x10320000
 8001dd8:	10220000 	.word	0x10220000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e10f      	b.n	800208a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f005 ffa6 	bl	8007dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f001 fdd6 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a7b      	ldr	r2, [pc, #492]	; (8002094 <HAL_I2C_Init+0x23c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d807      	bhi.n	8001ebc <HAL_I2C_Init+0x64>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_I2C_Init+0x240>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf94      	ite	ls
 8001eb4:	2301      	movls	r3, #1
 8001eb6:	2300      	movhi	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e006      	b.n	8001eca <HAL_I2C_Init+0x72>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a77      	ldr	r2, [pc, #476]	; (800209c <HAL_I2C_Init+0x244>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0db      	b.n	800208a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_I2C_Init+0x248>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a64      	ldr	r2, [pc, #400]	; (8002094 <HAL_I2C_Init+0x23c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d802      	bhi.n	8001f0c <HAL_I2C_Init+0xb4>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	e009      	b.n	8001f20 <HAL_I2C_Init+0xc8>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	4a63      	ldr	r2, [pc, #396]	; (80020a4 <HAL_I2C_Init+0x24c>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	3301      	adds	r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4956      	ldr	r1, [pc, #344]	; (8002094 <HAL_I2C_Init+0x23c>)
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d80d      	bhi.n	8001f5c <HAL_I2C_Init+0x104>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e59      	subs	r1, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	bf38      	it	cc
 8001f58:	2304      	movcc	r3, #4
 8001f5a:	e04f      	b.n	8001ffc <HAL_I2C_Init+0x1a4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d111      	bne.n	8001f88 <HAL_I2C_Init+0x130>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e012      	b.n	8001fae <HAL_I2C_Init+0x156>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e58      	subs	r0, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	0099      	lsls	r1, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Init+0x15e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e022      	b.n	8001ffc <HAL_I2C_Init+0x1a4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10e      	bne.n	8001fdc <HAL_I2C_Init+0x184>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e58      	subs	r0, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	440b      	add	r3, r1
 8001fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Init+0x1a4>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	0099      	lsls	r1, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	6809      	ldr	r1, [r1, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800202a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6911      	ldr	r1, [r2, #16]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68d2      	ldr	r2, [r2, #12]
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	430b      	orrs	r3, r1
 800203e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	000186a0 	.word	0x000186a0
 8002098:	001e847f 	.word	0x001e847f
 800209c:	003d08ff 	.word	0x003d08ff
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	10624dd3 	.word	0x10624dd3

080020a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
 80020b8:	4613      	mov	r3, r2
 80020ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff f9a4 	bl	8001408 <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f040 80e0 	bne.w	8002290 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4970      	ldr	r1, [pc, #448]	; (800229c <HAL_I2C_Master_Transmit+0x1f4>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 ff04 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0d3      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_I2C_Master_Transmit+0x50>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0cc      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2221      	movs	r2, #33	; 0x21
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2210      	movs	r2, #16
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	893a      	ldrh	r2, [r7, #8]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002160:	8979      	ldrh	r1, [r7, #10]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fcee 	bl	8002b48 <I2C_MasterRequestWrite>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e08d      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800218c:	e066      	b.n	800225c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 ff7e 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00d      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d107      	bne.n	80021b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d11b      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x188>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d017      	beq.n	8002230 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	6a39      	ldr	r1, [r7, #32]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 ff6e 	bl	8003116 <I2C_WaitOnBTFFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b04      	cmp	r3, #4
 8002246:	d107      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e01a      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d194      	bne.n	800218e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002290:	2302      	movs	r3, #2
  }
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	00100002 	.word	0x00100002
 80022a0:	ffff0000 	.word	0xffff0000

080022a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022be:	f7ff f8a3 	bl	8001408 <HAL_GetTick>
 80022c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	f040 80d9 	bne.w	8002484 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2319      	movs	r3, #25
 80022d8:	2201      	movs	r2, #1
 80022da:	496d      	ldr	r1, [pc, #436]	; (8002490 <HAL_I2C_Mem_Write+0x1ec>)
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fe03 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0cc      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Mem_Write+0x56>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0c5      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d007      	beq.n	8002320 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2221      	movs	r2, #33	; 0x21
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_I2C_Mem_Write+0x1f0>)
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002362:	88f8      	ldrh	r0, [r7, #6]
 8002364:	893a      	ldrh	r2, [r7, #8]
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4603      	mov	r3, r0
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fc5e 	bl	8002c34 <I2C_RequestMemoryWrite>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d052      	beq.n	8002424 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e081      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fe84 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d107      	bne.n	80023aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11b      	bne.n	8002424 <HAL_I2C_Mem_Write+0x180>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d017      	beq.n	8002424 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1aa      	bne.n	8002382 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fe70 	bl	8003116 <I2C_WaitOnBTFFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e016      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000

08002498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	817b      	strh	r3, [r7, #10]
 80024aa:	460b      	mov	r3, r1
 80024ac:	813b      	strh	r3, [r7, #8]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b2:	f7fe ffa9 	bl	8001408 <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	f040 8218 	bne.w	80028f6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	4981      	ldr	r1, [pc, #516]	; (80026d4 <HAL_I2C_Mem_Read+0x23c>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fd09 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	e20b      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Mem_Read+0x56>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e204      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2222      	movs	r2, #34	; 0x22
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a61      	ldr	r2, [pc, #388]	; (80026d8 <HAL_I2C_Mem_Read+0x240>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4603      	mov	r3, r0
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fbee 	bl	8002d48 <I2C_RequestMemoryRead>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c0      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e194      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11d      	bne.n	80025ea <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e6:	b662      	cpsie	i
 80025e8:	e172      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11d      	bne.n	800262e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002600:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002602:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800262a:	b662      	cpsie	i
 800262c:	e150      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002654:	e13c      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b03      	cmp	r3, #3
 800265c:	f200 80f5 	bhi.w	800284a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b01      	cmp	r3, #1
 8002666:	d123      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fd93 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e13d      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ae:	e10f      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d150      	bne.n	800275a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	2200      	movs	r2, #0
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <HAL_I2C_Mem_Read+0x244>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fc10 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e112      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
 80026d2:	bf00      	nop
 80026d4:	00100002 	.word	0x00100002
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002724:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002758:	e0ba      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	2200      	movs	r2, #0
 8002762:	4967      	ldr	r1, [pc, #412]	; (8002900 <HAL_I2C_Mem_Read+0x468>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fbbf 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0c1      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	2200      	movs	r2, #0
 80027c0:	494f      	ldr	r1, [pc, #316]	; (8002900 <HAL_I2C_Mem_Read+0x468>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fb90 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e092      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002814:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002848:	e042      	b.n	80028d0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fca2 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e04c      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b04      	cmp	r3, #4
 800289c:	d118      	bne.n	80028d0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f aebe 	bne.w	8002656 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010004 	.word	0x00010004

08002904 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	460b      	mov	r3, r1
 8002912:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7fe fd78 	bl	8001408 <HAL_GetTick>
 8002918:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	f040 8105 	bne.w	8002b36 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2319      	movs	r3, #25
 8002932:	2201      	movs	r2, #1
 8002934:	4982      	ldr	r1, [pc, #520]	; (8002b40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fad6 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	e0f8      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_I2C_IsDeviceReady+0x50>
 8002950:	2302      	movs	r3, #2
 8002952:	e0f1      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d007      	beq.n	800297a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_I2C_IsDeviceReady+0x240>)
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fa94 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0b6      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fd15 	bl	8001408 <HAL_GetTick>
 80029de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a0e:	e025      	b.n	8002a5c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fe fcfa 	bl	8001408 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <HAL_I2C_IsDeviceReady+0x122>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	22a0      	movs	r2, #160	; 0xa0
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2ba0      	cmp	r3, #160	; 0xa0
 8002a66:	d005      	beq.n	8002a74 <HAL_I2C_IsDeviceReady+0x170>
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_I2C_IsDeviceReady+0x170>
 8002a6e:	7dbb      	ldrb	r3, [r7, #22]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0cd      	beq.n	8002a10 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d129      	bne.n	8002ade <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4921      	ldr	r1, [pc, #132]	; (8002b40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fa14 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e036      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e02c      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	490f      	ldr	r1, [pc, #60]	; (8002b40 <HAL_I2C_IsDeviceReady+0x23c>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9f0 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e012      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f4ff af3e 	bcc.w	800299e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000

08002b48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d006      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d107      	bne.n	8002b9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f99d 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e035      	b.n	8002c24 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e01b      	b.n	8002c0c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <I2C_MasterRequestWrite+0xe4>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f9cf 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e010      	b.n	8002c24 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <I2C_MasterRequestWrite+0xe8>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9bf 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010008 	.word	0x00010008
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f93c 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e05f      	b.n	8002d3a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	492d      	ldr	r1, [pc, #180]	; (8002d44 <I2C_RequestMemoryWrite+0x110>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f980 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04c      	b.n	8002d3a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f9ea 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02b      	b.n	8002d3a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e021      	b.n	8002d38 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f9c4 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e005      	b.n	8002d3a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8aa 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e09e      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	494c      	ldr	r1, [pc, #304]	; (8002ee4 <I2C_RequestMemoryRead+0x19c>)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f8ee 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e08b      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f958 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d107      	bne.n	8002e02 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06a      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]
 8002e16:	e021      	b.n	8002e5c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f932 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d107      	bne.n	8002e4e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e044      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e52:	893b      	ldrh	r3, [r7, #8]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f917 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e029      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f81f 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e013      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <I2C_RequestMemoryRead+0x19c>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f863 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	00010002 	.word	0x00010002

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e025      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe fa81 	bl	8001408 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e023      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10d      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	e00c      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d0b6      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa4:	e051      	b.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d123      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d021      	beq.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe f9ff 	bl	8001408 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e00b      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d18d      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	e02d      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8ce 	bl	8003244 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d021      	beq.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe f9a5 	bl	8001408 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d1ca      	bne.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003122:	e02d      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f88d 	bl	8003244 <I2C_IsAcknowledgeFailed>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e02d      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d021      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe f964 	bl	8001408 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1ca      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a4:	e042      	b.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d119      	bne.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e029      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe f90e 	bl	8001408 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d1b5      	bne.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d11b      	bne.n	8003294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e26c      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032cc:	4b8f      	ldr	r3, [pc, #572]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
 80032d8:	4b8c      	ldr	r3, [pc, #560]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06c      	beq.n	80033cc <HAL_RCC_OscConfig+0x12c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e246      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x76>
 8003308:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7f      	ldr	r2, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b7b      	ldr	r3, [pc, #492]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7a      	ldr	r2, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a77      	ldr	r2, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0xbc>
 8003342:	4b72      	ldr	r3, [pc, #456]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a71      	ldr	r2, [pc, #452]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 800335c:	4b6b      	ldr	r3, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f844 	bl	8001408 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f840 	bl	8001408 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1fa      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xe4>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe f830 	bl	8001408 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe f82c 	bl	8001408 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1e6      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x10c>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1ba      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4939      	ldr	r1, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd ffe5 	bl	8001408 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd ffe1 	bl	8001408 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e19b      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4927      	ldr	r1, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd ffc4 	bl	8001408 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003484:	f7fd ffc0 	bl	8001408 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e17a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03a      	beq.n	8003524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d019      	beq.n	80034ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fd ffa4 	bl	8001408 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd ffa0 	bl	8001408 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e15a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f000 fada 	bl	8003a9c <RCC_Delay>
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fd ff8a 	bl	8001408 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f6:	e00f      	b.n	8003518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd ff86 	bl	8001408 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d908      	bls.n	8003518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e140      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	42420000 	.word	0x42420000
 8003514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e9      	bne.n	80034f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a6 	beq.w	800367e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b97      	ldr	r3, [pc, #604]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a93      	ldr	r2, [pc, #588]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	61d3      	str	r3, [r2, #28]
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8a      	ldr	r2, [pc, #552]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7fd ff47 	bl	8001408 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fd ff43 	bl	8001408 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0fd      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x312>
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e02d      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	e01c      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x356>
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fd fef7 	bl	8001408 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd fef3 	bl	8001408 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ab      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ee      	beq.n	800361e <HAL_RCC_OscConfig+0x37e>
 8003640:	e014      	b.n	800366c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fd fee1 	bl	8001408 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fedd 	bl	8001408 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e095      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8081 	beq.w	800378a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d061      	beq.n	8003758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d146      	bne.n	800372a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fd feb1 	bl	8001408 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fead 	bl	8001408 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e067      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	492d      	ldr	r1, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a19      	ldr	r1, [r3, #32]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	430b      	orrs	r3, r1
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd fe81 	bl	8001408 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd fe7d 	bl	8001408 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e037      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x46a>
 8003728:	e02f      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd fe6a 	bl	8001408 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd fe66 	bl	8001408 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e020      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x498>
 8003756:	e018      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e013      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	429a      	cmp	r2, r3
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060

080037a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0d0      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4965      	ldr	r1, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800381e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d040      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e073      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06b      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4936      	ldr	r1, [pc, #216]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003890:	f7fd fdba 	bl	8001408 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fd fdb6 	bl	8001408 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e053      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d210      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4601      	mov	r1, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	fa21 f303 	lsr.w	r3, r1, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1cc>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1d0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fd18 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	0800c0f4 	.word	0x0800c0f4
 800396c:	20000018 	.word	0x20000018
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800397c:	1d3c      	adds	r4, r7, #4
 800397e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x46>
 80039b2:	e02d      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c6:	4413      	add	r3, r2
 80039c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c5b      	lsrs	r3, r3, #17
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039e6:	4413      	add	r3, r2
 80039e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f2:	fb02 f203 	mul.w	r2, r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e004      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	623b      	str	r3, [r7, #32]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc90      	pop	{r4, r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	0800abd8 	.word	0x0800abd8
 8003a28:	0800abe8 	.word	0x0800abe8
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	007a1200 	.word	0x007a1200
 8003a34:	003d0900 	.word	0x003d0900

08003a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	20000018 	.word	0x20000018

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff2 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800c104 	.word	0x0800c104

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff ffde 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0adb      	lsrs	r3, r3, #11
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5cd3      	ldrb	r3, [r2, r3]
 8003a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	0800c104 	.word	0x0800c104

08003a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <RCC_Delay+0x34>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <RCC_Delay+0x38>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0a5b      	lsrs	r3, r3, #9
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab8:	bf00      	nop
  }
  while (Delay --);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <RCC_Delay+0x1c>
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000018 	.word	0x20000018
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e053      	b.n	8003b92 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f004 f9a1 	bl	8007e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1a      	lsrs	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 0204 	and.w	r2, r2, #4
 8003b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_Transmit+0x22>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e11e      	b.n	8003dfa <HAL_SPI_Transmit+0x260>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc4:	f7fd fc20 	bl	8001408 <HAL_GetTick>
 8003bc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bde:	e103      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_Transmit+0x52>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bf0:	e0fa      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c38:	d107      	bne.n	8003c4a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d007      	beq.n	8003c68 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d14b      	bne.n	8003d0a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Transmit+0xe6>
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d13e      	bne.n	8003cfe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ca4:	e02b      	b.n	8003cfe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d112      	bne.n	8003cda <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cd8:	e011      	b.n	8003cfe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cda:	f7fd fb95 	bl	8001408 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d803      	bhi.n	8003cf2 <HAL_SPI_Transmit+0x158>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_Transmit+0x15e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cfc:	e074      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ce      	bne.n	8003ca6 <HAL_SPI_Transmit+0x10c>
 8003d08:	e04c      	b.n	8003da4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x17e>
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d140      	bne.n	8003d9a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d3e:	e02c      	b.n	8003d9a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d113      	bne.n	8003d76 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d74:	e011      	b.n	8003d9a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d76:	f7fd fb47 	bl	8001408 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d803      	bhi.n	8003d8e <HAL_SPI_Transmit+0x1f4>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Transmit+0x1fa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d98:	e026      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1cd      	bne.n	8003d40 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f894 	bl	8003ed6 <SPI_EndRxTxTransaction>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e000      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003de6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e12:	e04c      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d048      	beq.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003e1c:	f7fd faf4 	bl	8001408 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d902      	bls.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d13d      	bne.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d111      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d004      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d107      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d10f      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e00f      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1a3      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff88 	bl	8003e02 <SPI_WaitFlagStateUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e000      	b.n	8003f0a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e01d      	b.n	8003f60 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f003 ffc7 	bl	8007ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f000 fb63 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d007      	beq.n	8003fa2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01d      	b.n	8003ffc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f815 	bl	8004004 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 fb15 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr
	...

08004018 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d841      	bhi.n	80040ac <HAL_TIM_OC_Start_IT+0x94>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_TIM_OC_Start_IT+0x18>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004065 	.word	0x08004065
 8004034:	080040ad 	.word	0x080040ad
 8004038:	080040ad 	.word	0x080040ad
 800403c:	080040ad 	.word	0x080040ad
 8004040:	08004077 	.word	0x08004077
 8004044:	080040ad 	.word	0x080040ad
 8004048:	080040ad 	.word	0x080040ad
 800404c:	080040ad 	.word	0x080040ad
 8004050:	08004089 	.word	0x08004089
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	0800409b 	.word	0x0800409b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0202 	orr.w	r2, r2, #2
 8004072:	60da      	str	r2, [r3, #12]
      break;
 8004074:	e01b      	b.n	80040ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0204 	orr.w	r2, r2, #4
 8004084:	60da      	str	r2, [r3, #12]
      break;
 8004086:	e012      	b.n	80040ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	60da      	str	r2, [r3, #12]
      break;
 8004098:	e009      	b.n	80040ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0210 	orr.w	r2, r2, #16
 80040a8:	60da      	str	r2, [r3, #12]
      break;
 80040aa:	e000      	b.n	80040ae <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80040ac:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fd30 	bl	8004b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_TIM_OC_Start_IT+0xec>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d007      	beq.n	80040f8 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00

08004108 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e02d      	b.n	8004178 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f825 	bl	8004180 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f000 fa67 	bl	800461c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d122      	bne.n	80041ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0202 	mvn.w	r2, #2
 80041be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa05 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80041da:	e005      	b.n	80041e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9f8 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa07 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d122      	bne.n	8004242 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d11b      	bne.n	8004242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0204 	mvn.w	r2, #4
 8004212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9db 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800422e:	e005      	b.n	800423c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9ce 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9dd 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d122      	bne.n	8004296 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d11b      	bne.n	8004296 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0208 	mvn.w	r2, #8
 8004266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f9b1 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004282:	e005      	b.n	8004290 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9a4 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9b3 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d122      	bne.n	80042ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d11b      	bne.n	80042ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0210 	mvn.w	r2, #16
 80042ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2208      	movs	r2, #8
 80042c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f987 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042d6:	e005      	b.n	80042e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f97a 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f989 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10e      	bne.n	8004316 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0201 	mvn.w	r2, #1
 800430e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f002 fad5 	bl	80068c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d10e      	bne.n	8004342 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d107      	bne.n	8004342 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800433a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fcaf 	bl	8004ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d10e      	bne.n	800436e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d107      	bne.n	800436e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f94d 	bl	8004608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b20      	cmp	r3, #32
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0220 	mvn.w	r2, #32
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc7a 	bl	8004c8e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_OC_ConfigChannel+0x1a>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e04e      	b.n	800445c <HAL_TIM_OC_ConfigChannel+0xb8>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d839      	bhi.n	8004448 <HAL_TIM_OC_ConfigChannel+0xa4>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_TIM_OC_ConfigChannel+0x38>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004449 	.word	0x08004449
 80043e4:	08004449 	.word	0x08004449
 80043e8:	08004449 	.word	0x08004449
 80043ec:	0800441f 	.word	0x0800441f
 80043f0:	08004449 	.word	0x08004449
 80043f4:	08004449 	.word	0x08004449
 80043f8:	08004449 	.word	0x08004449
 80043fc:	0800442d 	.word	0x0800442d
 8004400:	08004449 	.word	0x08004449
 8004404:	08004449 	.word	0x08004449
 8004408:	08004449 	.word	0x08004449
 800440c:	0800443b 	.word	0x0800443b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f962 	bl	80046e0 <TIM_OC1_SetConfig>
      break;
 800441c:	e015      	b.n	800444a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f9c1 	bl	80047ac <TIM_OC2_SetConfig>
      break;
 800442a:	e00e      	b.n	800444a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fa24 	bl	8004880 <TIM_OC3_SetConfig>
      break;
 8004438:	e007      	b.n	800444a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa87 	bl	8004954 <TIM_OC4_SetConfig>
      break;
 8004446:	e000      	b.n	800444a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004448:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e0a6      	b.n	80045ca <HAL_TIM_ConfigClockSource+0x166>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800449a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d067      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0x120>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d80b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x6c>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d073      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d802      	bhi.n	80044c6 <HAL_TIM_ConfigClockSource+0x62>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06f      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044c4:	e078      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d06c      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d06a      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044ce:	e073      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044d0:	2b70      	cmp	r3, #112	; 0x70
 80044d2:	d00d      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x8c>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d804      	bhi.n	80044e2 <HAL_TIM_ConfigClockSource+0x7e>
 80044d8:	2b50      	cmp	r3, #80	; 0x50
 80044da:	d033      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xe0>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d041      	beq.n	8004564 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044e0:	e06a      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d066      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x152>
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ec:	d017      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044ee:	e063      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f000 faed 	bl	8004ade <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004512:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e04c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f000 fad6 	bl	8004ade <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e039      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	461a      	mov	r2, r3
 8004552:	f000 fa4d 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2150      	movs	r1, #80	; 0x50
 800455c:	4618      	mov	r0, r3
 800455e:	f000 faa4 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 8004562:	e029      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	461a      	mov	r2, r3
 8004572:	f000 fa6b 	bl	8004a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2160      	movs	r1, #96	; 0x60
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa94 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 8004582:	e019      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 fa2d 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2140      	movs	r1, #64	; 0x40
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fa84 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80045a2:	e009      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 fa7b 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80045b4:	e000      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
	...

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <TIM_Base_SetConfig+0xb8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_Base_SetConfig+0x30>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d007      	beq.n	800464c <TIM_Base_SetConfig+0x30>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <TIM_Base_SetConfig+0xbc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0x30>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a25      	ldr	r2, [pc, #148]	; (80046dc <TIM_Base_SetConfig+0xc0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d108      	bne.n	800465e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <TIM_Base_SetConfig+0xb8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x62>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <TIM_Base_SetConfig+0xbc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x62>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <TIM_Base_SetConfig+0xc0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <TIM_Base_SetConfig+0xb8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d103      	bne.n	80046c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	615a      	str	r2, [r3, #20]
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800

080046e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0302 	bic.w	r3, r3, #2
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0308 	bic.w	r3, r3, #8
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1d      	ldr	r2, [pc, #116]	; (800487c <TIM_OC2_SetConfig+0xd0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10d      	bne.n	8004828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a14      	ldr	r2, [pc, #80]	; (800487c <TIM_OC2_SetConfig+0xd0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d113      	bne.n	8004858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00

08004880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <TIM_OC3_SetConfig+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10d      	bne.n	80048fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <TIM_OC3_SetConfig+0xd0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d113      	bne.n	800492a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00

08004954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800499e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	031b      	lsls	r3, r3, #12
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <TIM_OC4_SetConfig+0x98>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0210 	bic.w	r2, r3, #16
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f043 0307 	orr.w	r3, r3, #7
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2201      	movs	r2, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e032      	b.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e03d      	b.n	8004c84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e047      	b.n	8004d54 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f003 f96d 	bl	8007fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2224      	movs	r2, #36	; 0x24
 8004ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fdb4 	bl	8005864 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004d1a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	f040 8083 	bne.w	8004e84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_UART_Transmit+0x2e>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07b      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Transmit+0x40>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e074      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004db2:	f7fc fb29 	bl	8001408 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dc4:	e042      	b.n	8004e4c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d122      	bne.n	8004e24 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fbbd 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e046      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	3302      	adds	r3, #2
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	e017      	b.n	8004e4c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	e013      	b.n	8004e4c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fb9a 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e023      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	60ba      	str	r2, [r7, #8]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1b7      	bne.n	8004dc6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fb81 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e00a      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b088      	sub	sp, #32
 8004e92:	af02      	add	r7, sp, #8
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	f040 8090 	bne.w	8004fd0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Receive+0x2e>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e088      	b.n	8004fd2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Receive+0x40>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e081      	b.n	8004fd2 <HAL_UART_Receive+0x144>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2222      	movs	r2, #34	; 0x22
 8004ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ee4:	f7fc fa90 	bl	8001408 <HAL_GetTick>
 8004ee8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004ef6:	e05c      	b.n	8004fb2 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0e:	d12b      	bne.n	8004f68 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2120      	movs	r1, #32
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fb24 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e053      	b.n	8004fd2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e030      	b.n	8004fb2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	e024      	b.n	8004fb2 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2120      	movs	r1, #32
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 faf8 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e027      	b.n	8004fd2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	60ba      	str	r2, [r7, #8]
 8004f96:	b2ca      	uxtb	r2, r1
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e00a      	b.n	8004fb2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d19d      	bne.n	8004ef8 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d153      	bne.n	800509e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_UART_Transmit_DMA+0x26>
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e04c      	b.n	80050a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UART_Transmit_DMA+0x38>
 8005010:	2302      	movs	r3, #2
 8005012:	e045      	b.n	80050a0 <HAL_UART_Transmit_DMA+0xc4>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <HAL_UART_Transmit_DMA+0xcc>)
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_UART_Transmit_DMA+0xd0>)
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_UART_Transmit_DMA+0xd4>)
 8005052:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3304      	adds	r3, #4
 8005070:	461a      	mov	r2, r3
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f7fc fb5c 	bl	8001730 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005080:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005098:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	080053e3 	.word	0x080053e3
 80050ac:	08005435 	.word	0x08005435
 80050b0:	080054d5 	.word	0x080054d5

080050b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d166      	bne.n	800519c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_UART_Receive_DMA+0x26>
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e05f      	b.n	800519e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UART_Receive_DMA+0x38>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e058      	b.n	800519e <HAL_UART_Receive_DMA+0xea>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2222      	movs	r2, #34	; 0x22
 800510a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <HAL_UART_Receive_DMA+0xf4>)
 8005114:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	4a24      	ldr	r2, [pc, #144]	; (80051ac <HAL_UART_Receive_DMA+0xf8>)
 800511c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <HAL_UART_Receive_DMA+0xfc>)
 8005124:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	2200      	movs	r2, #0
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	f7fc faf3 	bl	8001730 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005176:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005196:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	08005451 	.word	0x08005451
 80051ac:	080054b9 	.word	0x080054b9
 80051b0:	080054d5 	.word	0x080054d5

080051b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_UART_IRQHandler+0x52>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 faaf 	bl	8005762 <UART_Receive_IT>
      return;
 8005204:	e0cc      	b.n	80053a0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80ab 	beq.w	8005364 <HAL_UART_IRQHandler+0x1b0>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <HAL_UART_IRQHandler+0x70>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a0 	beq.w	8005364 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_UART_IRQHandler+0x90>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_UART_IRQHandler+0xb0>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	f043 0202 	orr.w	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_UART_IRQHandler+0xd0>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	f043 0204 	orr.w	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_UART_IRQHandler+0xf0>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	f043 0208 	orr.w	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d078      	beq.n	800539e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_UART_IRQHandler+0x112>
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa4e 	bl	8005762 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_UART_IRQHandler+0x13a>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d031      	beq.n	8005352 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f999 	bl	8005626 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d023      	beq.n	800534a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <HAL_UART_IRQHandler+0x1f4>)
 8005320:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc fa62 	bl	80017f0 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e00e      	b.n	8005360 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f844 	bl	80053d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	e00a      	b.n	8005360 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f840 	bl	80053d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	e006      	b.n	8005360 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f83c 	bl	80053d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800535e:	e01e      	b.n	800539e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	bf00      	nop
    return;
 8005362:	e01c      	b.n	800539e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_UART_IRQHandler+0x1cc>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f985 	bl	8005688 <UART_Transmit_IT>
    return;
 800537e:	e00f      	b.n	80053a0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_UART_IRQHandler+0x1ec>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9cc 	bl	8005732 <UART_EndTransmit_IT>
    return;
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800539e:	bf00      	nop
  }
}
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	08005661 	.word	0x08005661

080053ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d113      	bne.n	8005426 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005412:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005422:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005424:	e002      	b.n	800542c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f002 f892 	bl	8007550 <HAL_UART_TxCpltCallback>
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ffb2 	bl	80053ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11e      	bne.n	80054aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005480:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f002 f838 	bl	8007520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff ff79 	bl	80053be <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054cc:	bf00      	nop
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b21      	cmp	r3, #33	; 0x21
 8005506:	d108      	bne.n	800551a <UART_DMAError+0x46>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005514:	68b8      	ldr	r0, [r7, #8]
 8005516:	f000 f871 	bl	80055fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b22      	cmp	r3, #34	; 0x22
 800553a:	d108      	bne.n	800554e <UART_DMAError+0x7a>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2200      	movs	r2, #0
 8005546:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005548:	68b8      	ldr	r0, [r7, #8]
 800554a:	f000 f86c 	bl	8005626 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	f043 0210 	orr.w	r2, r3, #16
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800555a:	68b8      	ldr	r0, [r7, #8]
 800555c:	f7ff ff38 	bl	80053d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005578:	e02c      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d028      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x30>
 8005588:	f7fb ff3e 	bl	8001408 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	429a      	cmp	r2, r3
 8005596:	d21d      	bcs.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e00f      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d0c3      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005612:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800563c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fea8 	bl	80053d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b21      	cmp	r3, #33	; 0x21
 800569a:	d144      	bne.n	8005726 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d11a      	bne.n	80056dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]
 80056ce:	e00e      	b.n	80056ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]
 80056da:	e008      	b.n	80056ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6211      	str	r1, [r2, #32]
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4619      	mov	r1, r3
 80056fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005710:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005720:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005748:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fefc 	bl	8007550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b22      	cmp	r3, #34	; 0x22
 8005774:	d171      	bne.n	800585a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d123      	bne.n	80057c8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28
 80057aa:	e029      	b.n	8005800 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
 80057c6:	e01b      	b.n	8005800 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6858      	ldr	r0, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6291      	str	r1, [r2, #40]	; 0x28
 80057e0:	b2c2      	uxtb	r2, r0
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e00c      	b.n	8005800 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	1c58      	adds	r0, r3, #1
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	6288      	str	r0, [r1, #40]	; 0x28
 80057f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4619      	mov	r1, r3
 800580e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005810:	2b00      	cmp	r3, #0
 8005812:	d120      	bne.n	8005856 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0220 	bic.w	r2, r2, #32
 8005822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fe67 	bl	8007520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e002      	b.n	800585c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800589e:	f023 030c 	bic.w	r3, r3, #12
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a52      	ldr	r2, [pc, #328]	; (8005a10 <UART_SetConfig+0x1ac>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d14e      	bne.n	800596a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7fe f8d2 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 80058d0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009a      	lsls	r2, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <UART_SetConfig+0x1b0>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	0119      	lsls	r1, r3, #4
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009a      	lsls	r2, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	fbb2 f2f3 	udiv	r2, r2, r3
 8005908:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <UART_SetConfig+0x1b0>)
 800590a:	fba3 0302 	umull	r0, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2064      	movs	r0, #100	; 0x64
 8005912:	fb00 f303 	mul.w	r3, r0, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	3332      	adds	r3, #50	; 0x32
 800591c:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <UART_SetConfig+0x1b0>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005928:	4419      	add	r1, r3
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009a      	lsls	r2, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005940:	4b34      	ldr	r3, [pc, #208]	; (8005a14 <UART_SetConfig+0x1b0>)
 8005942:	fba3 0302 	umull	r0, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	fb00 f303 	mul.w	r3, r0, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <UART_SetConfig+0x1b0>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	440a      	add	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005968:	e04d      	b.n	8005a06 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fe f86f 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 800596e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009a      	lsls	r2, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <UART_SetConfig+0x1b0>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	0119      	lsls	r1, r3, #4
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009a      	lsls	r2, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <UART_SetConfig+0x1b0>)
 80059a8:	fba3 0302 	umull	r0, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	2064      	movs	r0, #100	; 0x64
 80059b0:	fb00 f303 	mul.w	r3, r0, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	3332      	adds	r3, #50	; 0x32
 80059ba:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <UART_SetConfig+0x1b0>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c6:	4419      	add	r1, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009a      	lsls	r2, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	fbb2 f2f3 	udiv	r2, r2, r3
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <UART_SetConfig+0x1b0>)
 80059e0:	fba3 0302 	umull	r0, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	2064      	movs	r0, #100	; 0x64
 80059e8:	fb00 f303 	mul.w	r3, r0, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	3332      	adds	r3, #50	; 0x32
 80059f2:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <UART_SetConfig+0x1b0>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	440a      	add	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40013800 	.word	0x40013800
 8005a14:	51eb851f 	.word	0x51eb851f

08005a18 <Error>:
//extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0

}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af04      	add	r7, sp, #16
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	717b      	strb	r3, [r7, #5]
 8005a32:	4613      	mov	r3, r2
 8005a34:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8005a3a:	797b      	ldrb	r3, [r7, #5]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	88f9      	ldrh	r1, [r7, #6]
 8005a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	2301      	movs	r3, #1
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4806      	ldr	r0, [pc, #24]	; (8005a6c <I2Cx_WriteData+0x48>)
 8005a52:	f7fc fc27 	bl	80022a4 <HAL_I2C_Mem_Write>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <I2Cx_WriteData+0x40>
 8005a60:	f7ff ffda 	bl	8005a18 <Error>
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2000079c 	.word	0x2000079c

08005a70 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af04      	add	r7, sp, #16
 8005a76:	4603      	mov	r3, r0
 8005a78:	460a      	mov	r2, r1
 8005a7a:	80fb      	strh	r3, [r7, #6]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8005a88:	797b      	ldrb	r3, [r7, #5]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	88f9      	ldrh	r1, [r7, #6]
 8005a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	2301      	movs	r3, #1
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f107 030e 	add.w	r3, r7, #14
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4807      	ldr	r0, [pc, #28]	; (8005ac0 <I2Cx_ReadData+0x50>)
 8005aa2:	f7fc fcf9 	bl	8002498 <HAL_I2C_Mem_Read>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <I2Cx_ReadData+0x44>
 8005ab0:	f7ff ffb2 	bl	8005a18 <Error>
  return value;
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2000079c 	.word	0x2000079c

08005ac4 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	4603      	mov	r3, r0
 8005acc:	603a      	str	r2, [r7, #0]
 8005ace:	80fb      	strh	r3, [r7, #6]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8005ad8:	797b      	ldrb	r3, [r7, #5]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	88f9      	ldrh	r1, [r7, #6]
 8005ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ae2:	9302      	str	r3, [sp, #8]
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2301      	movs	r3, #1
 8005aee:	4807      	ldr	r0, [pc, #28]	; (8005b0c <I2Cx_ReadData16+0x48>)
 8005af0:	f7fc fcd2 	bl	8002498 <HAL_I2C_Mem_Read>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2Cx_ReadData16+0x3e>
 8005afe:	f7ff ff8b 	bl	8005a18 <Error>
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000079c 	.word	0x2000079c

08005b10 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af04      	add	r7, sp, #16
 8005b16:	4603      	mov	r3, r0
 8005b18:	603a      	str	r2, [r7, #0]
 8005b1a:	80fb      	strh	r3, [r7, #6]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8005b24:	797b      	ldrb	r3, [r7, #5]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	88f9      	ldrh	r1, [r7, #6]
 8005b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b2e:	9302      	str	r3, [sp, #8]
 8005b30:	2303      	movs	r3, #3
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4807      	ldr	r0, [pc, #28]	; (8005b58 <I2Cx_ReadData24+0x48>)
 8005b3c:	f7fc fcac 	bl	8002498 <HAL_I2C_Mem_Read>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2Cx_ReadData24+0x3e>
 8005b4a:	f7ff ff65 	bl	8005a18 <Error>
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2000079c 	.word	0x2000079c

08005b5c <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	460a      	mov	r2, r1
 8005b66:	71fb      	strb	r3, [r7, #7]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8005b6c:	79ba      	ldrb	r2, [r7, #6]
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	4619      	mov	r1, r3
 8005b72:	20ec      	movs	r0, #236	; 0xec
 8005b74:	f7ff ff56 	bl	8005a24 <I2Cx_WriteData>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	20ec      	movs	r0, #236	; 0xec
 8005b90:	f7ff ff6e 	bl	8005a70 <I2Cx_ReadData>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	4603      	mov	r3, r0
 8005baa:	6039      	str	r1, [r7, #0]
 8005bac:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	20ec      	movs	r0, #236	; 0xec
 8005bb6:	f7ff ff85 	bl	8005ac4 <I2Cx_ReadData16>
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	4603      	mov	r3, r0
 8005bca:	6039      	str	r1, [r7, #0]
 8005bcc:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	20ec      	movs	r0, #236	; 0xec
 8005bd6:	f7ff ff75 	bl	8005ac4 <I2Cx_ReadData16>
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	4603      	mov	r3, r0
 8005bea:	6039      	str	r1, [r7, #0]
 8005bec:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	20ec      	movs	r0, #236	; 0xec
 8005bf6:	f7ff ff65 	bl	8005ac4 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	b21a      	sxth	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	b21b      	sxth	r3, r3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b21b      	sxth	r3, r3
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	801a      	strh	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	6039      	str	r1, [r7, #0]
 8005c28:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	20ec      	movs	r0, #236	; 0xec
 8005c32:	f7ff ff6d 	bl	8005b10 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c46:	431a      	orrs	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	041b      	lsls	r3, r3, #16
 8005c4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8005c6a:	20f3      	movs	r0, #243	; 0xf3
 8005c6c:	f7ff ff88 	bl	8005b80 <BME280_ReadReg>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f003 0309 	and.w	r3, r3, #9
 8005c76:	71fb      	strb	r3, [r7, #7]
  return res;
 8005c78:	79fb      	ldrb	r3, [r7, #7]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8005c84:	b598      	push	{r3, r4, r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8005c88:	4937      	ldr	r1, [pc, #220]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005c8a:	2088      	movs	r0, #136	; 0x88
 8005c8c:	f7ff ff89 	bl	8005ba2 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8005c90:	4936      	ldr	r1, [pc, #216]	; (8005d6c <BME280_ReadCoefficients+0xe8>)
 8005c92:	208a      	movs	r0, #138	; 0x8a
 8005c94:	f7ff ff95 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8005c98:	4935      	ldr	r1, [pc, #212]	; (8005d70 <BME280_ReadCoefficients+0xec>)
 8005c9a:	208c      	movs	r0, #140	; 0x8c
 8005c9c:	f7ff ff91 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8005ca0:	4934      	ldr	r1, [pc, #208]	; (8005d74 <BME280_ReadCoefficients+0xf0>)
 8005ca2:	208e      	movs	r0, #142	; 0x8e
 8005ca4:	f7ff ff7d 	bl	8005ba2 <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8005ca8:	4933      	ldr	r1, [pc, #204]	; (8005d78 <BME280_ReadCoefficients+0xf4>)
 8005caa:	2090      	movs	r0, #144	; 0x90
 8005cac:	f7ff ff89 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005cb0:	4932      	ldr	r1, [pc, #200]	; (8005d7c <BME280_ReadCoefficients+0xf8>)
 8005cb2:	2092      	movs	r0, #146	; 0x92
 8005cb4:	f7ff ff85 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8005cb8:	4931      	ldr	r1, [pc, #196]	; (8005d80 <BME280_ReadCoefficients+0xfc>)
 8005cba:	2094      	movs	r0, #148	; 0x94
 8005cbc:	f7ff ff81 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005cc0:	4930      	ldr	r1, [pc, #192]	; (8005d84 <BME280_ReadCoefficients+0x100>)
 8005cc2:	2096      	movs	r0, #150	; 0x96
 8005cc4:	f7ff ff7d 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8005cc8:	492f      	ldr	r1, [pc, #188]	; (8005d88 <BME280_ReadCoefficients+0x104>)
 8005cca:	2098      	movs	r0, #152	; 0x98
 8005ccc:	f7ff ff79 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005cd0:	492e      	ldr	r1, [pc, #184]	; (8005d8c <BME280_ReadCoefficients+0x108>)
 8005cd2:	209a      	movs	r0, #154	; 0x9a
 8005cd4:	f7ff ff75 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8005cd8:	492d      	ldr	r1, [pc, #180]	; (8005d90 <BME280_ReadCoefficients+0x10c>)
 8005cda:	209c      	movs	r0, #156	; 0x9c
 8005cdc:	f7ff ff71 	bl	8005bc2 <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005ce0:	492c      	ldr	r1, [pc, #176]	; (8005d94 <BME280_ReadCoefficients+0x110>)
 8005ce2:	209e      	movs	r0, #158	; 0x9e
 8005ce4:	f7ff ff6d 	bl	8005bc2 <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8005ce8:	20a1      	movs	r0, #161	; 0xa1
 8005cea:	f7ff ff49 	bl	8005b80 <BME280_ReadReg>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005cf4:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8005cf6:	4928      	ldr	r1, [pc, #160]	; (8005d98 <BME280_ReadCoefficients+0x114>)
 8005cf8:	20e1      	movs	r0, #225	; 0xe1
 8005cfa:	f7ff ff62 	bl	8005bc2 <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8005cfe:	20e3      	movs	r0, #227	; 0xe3
 8005d00:	f7ff ff3e 	bl	8005b80 <BME280_ReadReg>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005d0a:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8005d0c:	20e4      	movs	r0, #228	; 0xe4
 8005d0e:	f7ff ff37 	bl	8005b80 <BME280_ReadReg>
 8005d12:	4603      	mov	r3, r0
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	b21c      	sxth	r4, r3
 8005d18:	20e5      	movs	r0, #229	; 0xe5
 8005d1a:	f7ff ff31 	bl	8005b80 <BME280_ReadReg>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b21b      	sxth	r3, r3
 8005d28:	4323      	orrs	r3, r4
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005d2e:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8005d30:	20e6      	movs	r0, #230	; 0xe6
 8005d32:	f7ff ff25 	bl	8005b80 <BME280_ReadReg>
 8005d36:	4603      	mov	r3, r0
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	b21c      	sxth	r4, r3
 8005d3c:	20e5      	movs	r0, #229	; 0xe5
 8005d3e:	f7ff ff1f 	bl	8005b80 <BME280_ReadReg>
 8005d42:	4603      	mov	r3, r0
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	4323      	orrs	r3, r4
 8005d4c:	b21a      	sxth	r2, r3
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005d50:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8005d52:	20e7      	movs	r0, #231	; 0xe7
 8005d54:	f7ff ff14 	bl	8005b80 <BME280_ReadReg>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	b25a      	sxtb	r2, r3
 8005d5c:	4b02      	ldr	r3, [pc, #8]	; (8005d68 <BME280_ReadCoefficients+0xe4>)
 8005d5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005d62:	bf00      	nop
 8005d64:	bd98      	pop	{r3, r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000644 	.word	0x20000644
 8005d6c:	20000646 	.word	0x20000646
 8005d70:	20000648 	.word	0x20000648
 8005d74:	2000064a 	.word	0x2000064a
 8005d78:	2000064c 	.word	0x2000064c
 8005d7c:	2000064e 	.word	0x2000064e
 8005d80:	20000650 	.word	0x20000650
 8005d84:	20000652 	.word	0x20000652
 8005d88:	20000654 	.word	0x20000654
 8005d8c:	20000656 	.word	0x20000656
 8005d90:	20000658 	.word	0x20000658
 8005d94:	2000065a 	.word	0x2000065a
 8005d98:	2000065e 	.word	0x2000065e

08005d9c <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8005da6:	20f5      	movs	r0, #245	; 0xf5
 8005da8:	f7ff feea 	bl	8005b80 <BME280_ReadReg>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8005db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db8:	f023 031f 	bic.w	r3, r3, #31
 8005dbc:	b25a      	sxtb	r2, r3
 8005dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	20f5      	movs	r0, #245	; 0xf5
 8005dce:	f7ff fec5 	bl	8005b5c <BME280_WriteReg>
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	4603      	mov	r3, r0
 8005de2:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8005de4:	20f5      	movs	r0, #245	; 0xf5
 8005de6:	f7ff fecb 	bl	8005b80 <BME280_ReadReg>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f023 031c 	bic.w	r3, r3, #28
 8005df0:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8005df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df6:	f003 031c 	and.w	r3, r3, #28
 8005dfa:	b25a      	sxtb	r2, r3
 8005dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	20f5      	movs	r0, #245	; 0xf5
 8005e0c:	f7ff fea6 	bl	8005b5c <BME280_WriteReg>
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8005e22:	20f4      	movs	r0, #244	; 0xf4
 8005e24:	f7ff feac 	bl	8005b80 <BME280_ReadReg>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8005e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e34:	f023 031f 	bic.w	r3, r3, #31
 8005e38:	b25a      	sxtb	r2, r3
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	4619      	mov	r1, r3
 8005e48:	20f4      	movs	r0, #244	; 0xf4
 8005e4a:	f7ff fe87 	bl	8005b5c <BME280_WriteReg>
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8005e60:	20f4      	movs	r0, #244	; 0xf4
 8005e62:	f7ff fe8d 	bl	8005b80 <BME280_ReadReg>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f023 031c 	bic.w	r3, r3, #28
 8005e6c:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	f003 031c 	and.w	r3, r3, #28
 8005e76:	b25a      	sxtb	r2, r3
 8005e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	4619      	mov	r1, r3
 8005e86:	20f4      	movs	r0, #244	; 0xf4
 8005e88:	f7ff fe68 	bl	8005b5c <BME280_WriteReg>
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8005e9e:	20f2      	movs	r0, #242	; 0xf2
 8005ea0:	f7ff fe6e 	bl	8005b80 <BME280_ReadReg>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8005eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	b25a      	sxtb	r2, r3
 8005eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	20f2      	movs	r0, #242	; 0xf2
 8005ec6:	f7ff fe49 	bl	8005b5c <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8005eca:	20f4      	movs	r0, #244	; 0xf4
 8005ecc:	f7ff fe58 	bl	8005b80 <BME280_ReadReg>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	20f4      	movs	r0, #244	; 0xf4
 8005eda:	f7ff fe3f 	bl	8005b5c <BME280_WriteReg>
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8005ef0:	20f4      	movs	r0, #244	; 0xf4
 8005ef2:	f7ff fe45 	bl	8005b80 <BME280_ReadReg>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	4619      	mov	r1, r3
 8005f16:	20f4      	movs	r0, #244	; 0xf4
 8005f18:	f7ff fe20 	bl	8005b5c <BME280_WriteReg>
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8005f30:	463b      	mov	r3, r7
 8005f32:	4619      	mov	r1, r3
 8005f34:	20fa      	movs	r0, #250	; 0xfa
 8005f36:	f7ff fe72 	bl	8005c1e <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <BME280_ReadTemperature+0x98>)
 8005f46:	8812      	ldrh	r2, [r2, #0]
 8005f48:	0052      	lsls	r2, r2, #1
 8005f4a:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 8005f4c:	4a1b      	ldr	r2, [pc, #108]	; (8005fbc <BME280_ReadTemperature+0x98>)
 8005f4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 8005f56:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8005f58:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <BME280_ReadTemperature+0x98>)
 8005f60:	8812      	ldrh	r2, [r2, #0]
 8005f62:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	0912      	lsrs	r2, r2, #4
 8005f68:	4914      	ldr	r1, [pc, #80]	; (8005fbc <BME280_ReadTemperature+0x98>)
 8005f6a:	8809      	ldrh	r1, [r1, #0]
 8005f6c:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8005f72:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <BME280_ReadTemperature+0x98>)
 8005f76:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 8005f7e:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8005f80:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	4a0d      	ldr	r2, [pc, #52]	; (8005fc0 <BME280_ReadTemperature+0x9c>)
 8005f8a:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <BME280_ReadTemperature+0x9c>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	3380      	adds	r3, #128	; 0x80
 8005f98:	121b      	asrs	r3, r3, #8
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa fe7e 	bl	8000c9c <__aeabi_i2f>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <BME280_ReadTemperature+0xa0>)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7fa ff80 	bl	8000eac <__aeabi_fdiv>
 8005fac:	4603      	mov	r3, r0
 8005fae:	60fb      	str	r3, [r7, #12]
  return temper_float;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000644 	.word	0x20000644
 8005fc0:	20000668 	.word	0x20000668
 8005fc4:	42c80000 	.word	0x42c80000

08005fc8 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8005fc8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005fcc:	b08a      	sub	sp, #40	; 0x28
 8005fce:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8005fd6:	f7ff ffa5 	bl	8005f24 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8005fda:	463b      	mov	r3, r7
 8005fdc:	4619      	mov	r1, r3
 8005fde:	20f7      	movs	r0, #247	; 0xf7
 8005fe0:	f7ff fe1d 	bl	8005c1e <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	091b      	lsrs	r3, r3, #4
 8005fe8:	603b      	str	r3, [r7, #0]
	val1 = ((int64_t) temper_int) - 128000;
 8005fea:	4b65      	ldr	r3, [pc, #404]	; (8006180 <BME280_ReadPressure+0x1b8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005ff4:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8005ff8:	f142 34ff 	adc.w	r4, r2, #4294967295
 8005ffc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	fb02 f203 	mul.w	r2, r2, r3
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	441a      	add	r2, r3
 8006012:	69b9      	ldr	r1, [r7, #24]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	fba1 3403 	umull	r3, r4, r1, r3
 800601a:	4422      	add	r2, r4
 800601c:	4614      	mov	r4, r2
 800601e:	4a59      	ldr	r2, [pc, #356]	; (8006184 <BME280_ReadPressure+0x1bc>)
 8006020:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8006024:	b211      	sxth	r1, r2
 8006026:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800602a:	fb01 f504 	mul.w	r5, r1, r4
 800602e:	fb03 f002 	mul.w	r0, r3, r2
 8006032:	4428      	add	r0, r5
 8006034:	fba3 3401 	umull	r3, r4, r3, r1
 8006038:	1902      	adds	r2, r0, r4
 800603a:	4614      	mov	r4, r2
 800603c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006040:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8006044:	4b4f      	ldr	r3, [pc, #316]	; (8006184 <BME280_ReadPressure+0x1bc>)
 8006046:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800604a:	b21b      	sxth	r3, r3
 800604c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	fb04 f102 	mul.w	r1, r4, r2
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	fb03 f202 	mul.w	r2, r3, r2
 800605c:	1888      	adds	r0, r1, r2
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	fba2 1203 	umull	r1, r2, r2, r3
 8006064:	1883      	adds	r3, r0, r2
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 0500 	mov.w	r5, #0
 800606c:	f04f 0600 	mov.w	r6, #0
 8006070:	0456      	lsls	r6, r2, #17
 8006072:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8006076:	044d      	lsls	r5, r1, #17
 8006078:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800607c:	186b      	adds	r3, r5, r1
 800607e:	eb46 0402 	adc.w	r4, r6, r2
 8006082:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <BME280_ReadPressure+0x1bc>)
 8006088:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800608c:	b219      	sxth	r1, r3
 800608e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006092:	f04f 0500 	mov.w	r5, #0
 8006096:	f04f 0600 	mov.w	r6, #0
 800609a:	00ce      	lsls	r6, r1, #3
 800609c:	2500      	movs	r5, #0
 800609e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060a2:	186b      	adds	r3, r5, r1
 80060a4:	eb46 0402 	adc.w	r4, r6, r2
 80060a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	fb02 f203 	mul.w	r2, r2, r3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	441a      	add	r2, r3
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	fba1 3403 	umull	r3, r4, r1, r3
 80060c6:	4422      	add	r2, r4
 80060c8:	4614      	mov	r4, r2
 80060ca:	4a2e      	ldr	r2, [pc, #184]	; (8006184 <BME280_ReadPressure+0x1bc>)
 80060cc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80060d0:	b211      	sxth	r1, r2
 80060d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80060d6:	fb01 f504 	mul.w	r5, r1, r4
 80060da:	fb03 f002 	mul.w	r0, r3, r2
 80060de:	4428      	add	r0, r5
 80060e0:	fba3 3401 	umull	r3, r4, r3, r1
 80060e4:	1902      	adds	r2, r0, r4
 80060e6:	4614      	mov	r4, r2
 80060e8:	f04f 0100 	mov.w	r1, #0
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	0a19      	lsrs	r1, r3, #8
 80060f2:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80060f6:	1222      	asrs	r2, r4, #8
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <BME280_ReadPressure+0x1bc>)
 80060fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060fe:	b21b      	sxth	r3, r3
 8006100:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006104:	69b8      	ldr	r0, [r7, #24]
 8006106:	fb04 f500 	mul.w	r5, r4, r0
 800610a:	69f8      	ldr	r0, [r7, #28]
 800610c:	fb03 f000 	mul.w	r0, r3, r0
 8006110:	4428      	add	r0, r5
 8006112:	69bd      	ldr	r5, [r7, #24]
 8006114:	fba5 5603 	umull	r5, r6, r5, r3
 8006118:	1983      	adds	r3, r0, r6
 800611a:	461e      	mov	r6, r3
 800611c:	f04f 0b00 	mov.w	fp, #0
 8006120:	f04f 0c00 	mov.w	ip, #0
 8006124:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8006128:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800612c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8006130:	eb1b 0301 	adds.w	r3, fp, r1
 8006134:	eb4c 0402 	adc.w	r4, ip, r2
 8006138:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 800613c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006140:	1c19      	adds	r1, r3, #0
 8006142:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8006146:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <BME280_ReadPressure+0x1bc>)
 8006148:	88db      	ldrh	r3, [r3, #6]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	fb03 f502 	mul.w	r5, r3, r2
 8006154:	fb01 f004 	mul.w	r0, r1, r4
 8006158:	4428      	add	r0, r5
 800615a:	fba1 3403 	umull	r3, r4, r1, r3
 800615e:	1902      	adds	r2, r0, r4
 8006160:	4614      	mov	r4, r2
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	1061      	asrs	r1, r4, #1
 800616c:	17e2      	asrs	r2, r4, #31
 800616e:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (val1 == 0) {
 8006172:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006176:	4323      	orrs	r3, r4
 8006178:	d106      	bne.n	8006188 <BME280_ReadPressure+0x1c0>
		return 0; // avoid exception caused by division by zero
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e110      	b.n	80063a2 <BME280_ReadPressure+0x3da>
 8006180:	20000668 	.word	0x20000668
 8006184:	20000644 	.word	0x20000644
	}
	p = 1048576 - press_raw;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800618e:	f04f 0400 	mov.w	r4, #0
 8006192:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - val2) * 3125) / val1;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	ea4f 0953 	mov.w	r9, r3, lsr #1
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80061a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061a6:	4645      	mov	r5, r8
 80061a8:	464e      	mov	r6, r9
 80061aa:	1aed      	subs	r5, r5, r3
 80061ac:	eb66 0604 	sbc.w	r6, r6, r4
 80061b0:	46a8      	mov	r8, r5
 80061b2:	46b1      	mov	r9, r6
 80061b4:	eb18 0308 	adds.w	r3, r8, r8
 80061b8:	eb49 0409 	adc.w	r4, r9, r9
 80061bc:	4698      	mov	r8, r3
 80061be:	46a1      	mov	r9, r4
 80061c0:	eb18 0805 	adds.w	r8, r8, r5
 80061c4:	eb49 0906 	adc.w	r9, r9, r6
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80061d4:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80061d8:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80061dc:	eb18 0801 	adds.w	r8, r8, r1
 80061e0:	eb49 0902 	adc.w	r9, r9, r2
 80061e4:	f04f 0100 	mov.w	r1, #0
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80061f0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80061f4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80061f8:	4688      	mov	r8, r1
 80061fa:	4691      	mov	r9, r2
 80061fc:	eb18 0805 	adds.w	r8, r8, r5
 8006200:	eb49 0906 	adc.w	r9, r9, r6
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8006210:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8006214:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8006218:	4688      	mov	r8, r1
 800621a:	4691      	mov	r9, r2
 800621c:	eb18 0005 	adds.w	r0, r8, r5
 8006220:	eb49 0106 	adc.w	r1, r9, r6
 8006224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006228:	f7fa fedc 	bl	8000fe4 <__aeabi_ldivmod>
 800622c:	4603      	mov	r3, r0
 800622e:	460c      	mov	r4, r1
 8006230:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8006234:	4b5d      	ldr	r3, [pc, #372]	; (80063ac <BME280_ReadPressure+0x3e4>)
 8006236:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800623a:	b219      	sxth	r1, r3
 800623c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006240:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	f04f 0400 	mov.w	r4, #0
 800624c:	0b6b      	lsrs	r3, r5, #13
 800624e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8006252:	1374      	asrs	r4, r6, #13
 8006254:	fb03 f502 	mul.w	r5, r3, r2
 8006258:	fb01 f004 	mul.w	r0, r1, r4
 800625c:	4428      	add	r0, r5
 800625e:	fba1 1203 	umull	r1, r2, r1, r3
 8006262:	1883      	adds	r3, r0, r2
 8006264:	461a      	mov	r2, r3
 8006266:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	f04f 0400 	mov.w	r4, #0
 8006272:	0b6b      	lsrs	r3, r5, #13
 8006274:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8006278:	1374      	asrs	r4, r6, #13
 800627a:	fb03 f502 	mul.w	r5, r3, r2
 800627e:	fb01 f004 	mul.w	r0, r1, r4
 8006282:	4428      	add	r0, r5
 8006284:	fba1 1203 	umull	r1, r2, r1, r3
 8006288:	1883      	adds	r3, r0, r2
 800628a:	461a      	mov	r2, r3
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	f04f 0400 	mov.w	r4, #0
 8006294:	0e4b      	lsrs	r3, r1, #25
 8006296:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800629a:	1654      	asrs	r4, r2, #25
 800629c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 80062a0:	4b42      	ldr	r3, [pc, #264]	; (80063ac <BME280_ReadPressure+0x3e4>)
 80062a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	fb04 f102 	mul.w	r1, r4, r2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	fb03 f202 	mul.w	r2, r3, r2
 80062b8:	1888      	adds	r0, r1, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	fba2 1203 	umull	r1, r2, r2, r3
 80062c0:	1883      	adds	r3, r0, r2
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	f04f 0400 	mov.w	r4, #0
 80062cc:	0ccb      	lsrs	r3, r1, #19
 80062ce:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80062d2:	14d4      	asrs	r4, r2, #19
 80062d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 80062d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80062e0:	eb11 0803 	adds.w	r8, r1, r3
 80062e4:	eb42 0904 	adc.w	r9, r2, r4
 80062e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80062ec:	eb13 0508 	adds.w	r5, r3, r8
 80062f0:	eb44 0609 	adc.w	r6, r4, r9
 80062f4:	f04f 0100 	mov.w	r1, #0
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	0a29      	lsrs	r1, r5, #8
 80062fe:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8006302:	1232      	asrs	r2, r6, #8
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <BME280_ReadPressure+0x3e4>)
 8006306:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800630a:	b21d      	sxth	r5, r3
 800630c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8006310:	f04f 0800 	mov.w	r8, #0
 8006314:	f04f 0900 	mov.w	r9, #0
 8006318:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800631c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8006320:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8006324:	eb18 0301 	adds.w	r3, r8, r1
 8006328:	eb49 0402 	adc.w	r4, r9, r2
 800632c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8006330:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	f04f 0400 	mov.w	r4, #0
 800633c:	0a0b      	lsrs	r3, r1, #8
 800633e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006342:	1214      	asrs	r4, r2, #8
 8006344:	461a      	mov	r2, r3
 8006346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800634a:	fb03 f502 	mul.w	r5, r3, r2
 800634e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006352:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	ea03 0801 	and.w	r8, r3, r1
 800635e:	ea04 0902 	and.w	r9, r4, r2
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <BME280_ReadPressure+0x3e8>)
 8006364:	fb02 f109 	mul.w	r1, r2, r9
 8006368:	2200      	movs	r2, #0
 800636a:	fb02 f208 	mul.w	r2, r2, r8
 800636e:	440a      	add	r2, r1
 8006370:	490f      	ldr	r1, [pc, #60]	; (80063b0 <BME280_ReadPressure+0x3e8>)
 8006372:	fba8 0101 	umull	r0, r1, r8, r1
 8006376:	1853      	adds	r3, r2, r1
 8006378:	4619      	mov	r1, r3
 800637a:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <BME280_ReadPressure+0x3ec>)
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	f7fa fe30 	bl	8000fe4 <__aeabi_ldivmod>
 8006384:	4603      	mov	r3, r0
 8006386:	460c      	mov	r4, r1
 8006388:	442b      	add	r3, r5
 800638a:	607b      	str	r3, [r7, #4]
	press_float = pres_int / 100.0f;
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fa fc81 	bl	8000c94 <__aeabi_ui2f>
 8006392:	4603      	mov	r3, r0
 8006394:	4908      	ldr	r1, [pc, #32]	; (80063b8 <BME280_ReadPressure+0x3f0>)
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa fd88 	bl	8000eac <__aeabi_fdiv>
 800639c:	4603      	mov	r3, r0
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  return press_float;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3728      	adds	r7, #40	; 0x28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80063ac:	20000644 	.word	0x20000644
 80063b0:	0005f5e1 	.word	0x0005f5e1
 80063b4:	000186a0 	.word	0x000186a0
 80063b8:	42c80000 	.word	0x42c80000

080063bc <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 80063c8:	f7ff fdac 	bl	8005f24 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 80063cc:	1cbb      	adds	r3, r7, #2
 80063ce:	4619      	mov	r1, r3
 80063d0:	20fd      	movs	r0, #253	; 0xfd
 80063d2:	f7ff fc06 	bl	8005be2 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 80063d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 80063de:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <BME280_ReadHumidity+0xec>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80063e6:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	039a      	lsls	r2, r3, #14
 80063ec:	4b2f      	ldr	r3, [pc, #188]	; (80064ac <BME280_ReadHumidity+0xf0>)
 80063ee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80063f2:	051b      	lsls	r3, r3, #20
 80063f4:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80063f6:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <BME280_ReadHumidity+0xf0>)
 80063f8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80063fc:	4619      	mov	r1, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8006404:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8006406:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800640a:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 800640c:	4a27      	ldr	r2, [pc, #156]	; (80064ac <BME280_ReadHumidity+0xf0>)
 800640e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8006412:	4611      	mov	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	fb02 f201 	mul.w	r2, r2, r1
 800641a:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 800641c:	4923      	ldr	r1, [pc, #140]	; (80064ac <BME280_ReadHumidity+0xf0>)
 800641e:	7f09      	ldrb	r1, [r1, #28]
 8006420:	4608      	mov	r0, r1
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	fb01 f100 	mul.w	r1, r1, r0
 8006428:	12c9      	asrs	r1, r1, #11
 800642a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 800642e:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8006432:	1292      	asrs	r2, r2, #10
 8006434:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8006438:	491c      	ldr	r1, [pc, #112]	; (80064ac <BME280_ReadHumidity+0xf0>)
 800643a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800643e:	fb01 f202 	mul.w	r2, r1, r2
 8006442:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006446:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	13db      	asrs	r3, r3, #15
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	13d2      	asrs	r2, r2, #15
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <BME280_ReadHumidity+0xf0>)
 800645e:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8006460:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8006464:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006472:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800647a:	bfa8      	it	ge
 800647c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8006480:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	131b      	asrs	r3, r3, #12
 8006486:	4618      	mov	r0, r3
 8006488:	f7fa fc08 	bl	8000c9c <__aeabi_i2f>
 800648c:	4603      	mov	r3, r0
 800648e:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8006490:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7fa fd09 	bl	8000eac <__aeabi_fdiv>
 800649a:	4603      	mov	r3, r0
 800649c:	60fb      	str	r3, [r7, #12]
  return hum_float;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000668 	.word	0x20000668
 80064ac:	20000644 	.word	0x20000644

080064b0 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
  uint8_t value=0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	603b      	str	r3, [r7, #0]

	value = BME280_ReadReg(BME280_REG_ID);
 80064be:	20d0      	movs	r0, #208	; 0xd0
 80064c0:	f7ff fb5e 	bl	8005b80 <BME280_ReadReg>
 80064c4:	4603      	mov	r3, r0
 80064c6:	71fb      	strb	r3, [r7, #7]
	if(value !=BME280_ID)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b60      	cmp	r3, #96	; 0x60
 80064cc:	d002      	beq.n	80064d4 <BME280_Init+0x24>
	{
		Error();
 80064ce:	f7ff faa3 	bl	8005a18 <Error>
		return;
 80064d2:	e02d      	b.n	8006530 <BME280_Init+0x80>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80064d4:	21b6      	movs	r1, #182	; 0xb6
 80064d6:	20e0      	movs	r0, #224	; 0xe0
 80064d8:	f7ff fb40 	bl	8005b5c <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80064dc:	bf00      	nop
 80064de:	f7ff fbc1 	bl	8005c64 <BME280_ReadStatus>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f8      	bne.n	80064de <BME280_Init+0x2e>
	BME280_ReadCoefficients();
 80064ec:	f7ff fbca 	bl	8005c84 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80064f0:	20a0      	movs	r0, #160	; 0xa0
 80064f2:	f7ff fc53 	bl	8005d9c <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 80064f6:	2008      	movs	r0, #8
 80064f8:	f7ff fc6f 	bl	8005dda <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80064fc:	2060      	movs	r0, #96	; 0x60
 80064fe:	f7ff fc8b 	bl	8005e18 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8006502:	2008      	movs	r0, #8
 8006504:	f7ff fca7 	bl	8005e56 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8006508:	2001      	movs	r0, #1
 800650a:	f7ff fcc3 	bl	8005e94 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800650e:	20f4      	movs	r0, #244	; 0xf4
 8006510:	f7ff fb36 	bl	8005b80 <BME280_ReadReg>
 8006514:	4603      	mov	r3, r0
 8006516:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8006518:	20f2      	movs	r0, #242	; 0xf2
 800651a:	f7ff fb31 	bl	8005b80 <BME280_ReadReg>
 800651e:	4603      	mov	r3, r0
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	461a      	mov	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	603b      	str	r3, [r7, #0]
	BME280_SetMode(BME280_MODE_NORMAL);
 800652a:	2003      	movs	r0, #3
 800652c:	f7ff fcdb 	bl	8005ee6 <BME280_SetMode>
}
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <ds18b20_crc8>:
      //rom code
uint8_t owdevices = 0;
uint32_t ow_tickstart=0;
static uint8_t curr_device=0xff;//devices index

uint8_t ds18b20_crc8(uint8_t *addr, uint8_t len) {
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8006546:	e022      	b.n	800658e <ds18b20_crc8+0x58>
		inbyte = *addr++;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8006552:	2308      	movs	r3, #8
 8006554:	737b      	strb	r3, [r7, #13]
 8006556:	e017      	b.n	8006588 <ds18b20_crc8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	4053      	eors	r3, r2
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 800656c:	7b3b      	ldrb	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <ds18b20_crc8+0x46>
				crc ^= 0x8C;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8006578:	43db      	mvns	r3, r3
 800657a:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8006582:	7b7b      	ldrb	r3, [r7, #13]
 8006584:	3b01      	subs	r3, #1
 8006586:	737b      	strb	r3, [r7, #13]
 8006588:	7b7b      	ldrb	r3, [r7, #13]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e4      	bne.n	8006558 <ds18b20_crc8+0x22>
	while (len--) {
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	1e5a      	subs	r2, r3, #1
 8006592:	70fa      	strb	r2, [r7, #3]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1d7      	bne.n	8006548 <ds18b20_crc8+0x12>
		}
	}
	return crc;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr

080065a4 <ds18b20_init>:

uint8_t ds18b20_init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
    if(!OW_Init()) {
 80065a8:	f000 ffea 	bl	8007580 <OW_Init>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <ds18b20_init+0x12>
        return 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e048      	b.n	8006648 <ds18b20_init+0xa4>
    }
    LastDiscrepancy = 0;   /* Reset the search */
 80065b6:	4b25      	ldr	r3, [pc, #148]	; (800664c <ds18b20_init+0xa8>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80065bc:	4b24      	ldr	r3, [pc, #144]	; (8006650 <ds18b20_init+0xac>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
    DeviceID = 0;
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <ds18b20_init+0xb0>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
    while(1){
    OW_Search1();
 80065c8:	f001 f84a 	bl	8007660 <OW_Search1>
    while((!(ow_state&OW_STATE_COMPLEATE))&&(!(ow_state&OW_STATE_ERR)));
 80065cc:	bf00      	nop
 80065ce:	4b22      	ldr	r3, [pc, #136]	; (8006658 <ds18b20_init+0xb4>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <ds18b20_init+0x40>
 80065da:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <ds18b20_init+0xb4>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	daf4      	bge.n	80065ce <ds18b20_init+0x2a>
    if(ow_state&OW_STATE_COMPLEATE){
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <ds18b20_init+0xb4>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d023      	beq.n	8006638 <ds18b20_init+0x94>
      ow_state=0;
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <ds18b20_init+0xb4>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
      if(OW_Search2(ds18_sensors)){
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <ds18b20_init+0xb8>)
 80065f8:	f001 f84a 	bl	8007690 <OW_Search2>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01c      	beq.n	800663c <ds18b20_init+0x98>
        if(ds18b20_crc8(ds18_sensors[owdevices].rom_code, 7) == ds18_sensors[owdevices].rom_code[7]) {
 8006602:	4b17      	ldr	r3, [pc, #92]	; (8006660 <ds18b20_init+0xbc>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	4a14      	ldr	r2, [pc, #80]	; (800665c <ds18b20_init+0xb8>)
 800660a:	4413      	add	r3, r2
 800660c:	2107      	movs	r1, #7
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff ff91 	bl	8006536 <ds18b20_crc8>
 8006614:	4603      	mov	r3, r0
 8006616:	4619      	mov	r1, r3
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <ds18b20_init+0xbc>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4a0f      	ldr	r2, [pc, #60]	; (800665c <ds18b20_init+0xb8>)
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	4413      	add	r3, r2
 8006622:	3307      	adds	r3, #7
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	4299      	cmp	r1, r3
 8006628:	d1ce      	bne.n	80065c8 <ds18b20_init+0x24>
            owdevices++;
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <ds18b20_init+0xbc>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <ds18b20_init+0xbc>)
 8006634:	701a      	strb	r2, [r3, #0]
    OW_Search1();
 8006636:	e7c7      	b.n	80065c8 <ds18b20_init+0x24>
      }
      else
    	break;
    }
    else
      break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <ds18b20_init+0x9a>
    	break;
 800663c:	bf00      	nop
    }
    ow_state=0;
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <ds18b20_init+0xb4>)
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
    return owdevices;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <ds18b20_init+0xbc>)
 8006646:	781b      	ldrb	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200006be 	.word	0x200006be
 8006650:	200006bc 	.word	0x200006bc
 8006654:	200006bd 	.word	0x200006bd
 8006658:	200006bf 	.word	0x200006bf
 800665c:	2000066c 	.word	0x2000066c
 8006660:	20000208 	.word	0x20000208

08006664 <ds18b20_start_convert>:

uint8_t ds18b20_start_convert(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
    uint8_t send_buf[2] = {0xcc, 0x44};
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <ds18b20_start_convert+0x24>)
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	80bb      	strh	r3, [r7, #4]
    OW_Send(OW_SEND_RESET, send_buf, sizeof(send_buf));
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	2202      	movs	r2, #2
 8006674:	4619      	mov	r1, r3
 8006676:	2001      	movs	r0, #1
 8006678:	f000 ff8e 	bl	8007598 <OW_Send>

    return 0;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	0800abec 	.word	0x0800abec

0800668c <ds18b20_get_temp>:

void ds18b20_get_temp(uint8_t dev_id)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  //  uint8_t fbuf[2];
    uint8_t send_buf[12];



    send_buf[0] = 0x55;
 8006696:	2355      	movs	r3, #85	; 0x55
 8006698:	733b      	strb	r3, [r7, #12]
    memcpy(&send_buf[1], ds18_sensors[dev_id].rom_code, 8);
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <ds18b20_get_temp+0x48>)
 80066a0:	1899      	adds	r1, r3, r2
 80066a2:	f107 030c 	add.w	r3, r7, #12
 80066a6:	3301      	adds	r3, #1
 80066a8:	2208      	movs	r2, #8
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fe94 	bl	80083d8 <memcpy>
    send_buf[9] = 0xbe;
 80066b0:	23be      	movs	r3, #190	; 0xbe
 80066b2:	757b      	strb	r3, [r7, #21]
    send_buf[10] = 0xff;
 80066b4:	23ff      	movs	r3, #255	; 0xff
 80066b6:	75bb      	strb	r3, [r7, #22]
    send_buf[11] = 0xff;
 80066b8:	23ff      	movs	r3, #255	; 0xff
 80066ba:	75fb      	strb	r3, [r7, #23]

    OW_Send(OW_SEND_RESET, send_buf, sizeof(send_buf));//, fbuf, sizeof(fbuf), 10);
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	220c      	movs	r2, #12
 80066c2:	4619      	mov	r1, r3
 80066c4:	2001      	movs	r0, #1
 80066c6:	f000 ff67 	bl	8007598 <OW_Send>

    //temp = ds18b20_tconvert(fbuf[0], fbuf[1]);

}
 80066ca:	bf00      	nop
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2000066c 	.word	0x2000066c

080066d8 <ds18b20_tconvert>:

float ds18b20_tconvert(uint8_t LSB, uint8_t MSB)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	460a      	mov	r2, r1
 80066e2:	71fb      	strb	r3, [r7, #7]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71bb      	strb	r3, [r7, #6]
    float data;

    uint16_t temperature;

    temperature = LSB | (MSB << 8);
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	b21a      	sxth	r2, r3
 80066ec:	79bb      	ldrb	r3, [r7, #6]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	b21b      	sxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b21b      	sxth	r3, r3
 80066f6:	81fb      	strh	r3, [r7, #14]

	if (temperature & 0x8000) {
 80066f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da1f      	bge.n	8006740 <ds18b20_tconvert+0x68>
		temperature = ~temperature + 1;
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	425b      	negs	r3, r3
 8006704:	81fb      	strh	r3, [r7, #14]
        data = 0.0 - (temperature / 16.0);
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	4618      	mov	r0, r3
 800670a:	f7f9 fe7b 	bl	8000404 <__aeabi_i2d>
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <ds18b20_tconvert+0x94>)
 8006714:	f7fa f80a 	bl	800072c <__aeabi_ddiv>
 8006718:	4603      	mov	r3, r0
 800671a:	460c      	mov	r4, r1
 800671c:	461a      	mov	r2, r3
 800671e:	4623      	mov	r3, r4
 8006720:	f04f 0000 	mov.w	r0, #0
 8006724:	f04f 0100 	mov.w	r1, #0
 8006728:	f7f9 fd1e 	bl	8000168 <__aeabi_dsub>
 800672c:	4603      	mov	r3, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4618      	mov	r0, r3
 8006732:	4621      	mov	r1, r4
 8006734:	f7fa f9a8 	bl	8000a88 <__aeabi_d2f>
 8006738:	4603      	mov	r3, r0
 800673a:	60bb      	str	r3, [r7, #8]
        return data;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	e011      	b.n	8006764 <ds18b20_tconvert+0x8c>
	}
    data = temperature / 16.0;
 8006740:	89fb      	ldrh	r3, [r7, #14]
 8006742:	4618      	mov	r0, r3
 8006744:	f7f9 fe5e 	bl	8000404 <__aeabi_i2d>
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <ds18b20_tconvert+0x94>)
 800674e:	f7f9 ffed 	bl	800072c <__aeabi_ddiv>
 8006752:	4603      	mov	r3, r0
 8006754:	460c      	mov	r4, r1
 8006756:	4618      	mov	r0, r3
 8006758:	4621      	mov	r1, r4
 800675a:	f7fa f995 	bl	8000a88 <__aeabi_d2f>
 800675e:	4603      	mov	r3, r0
 8006760:	60bb      	str	r3, [r7, #8]

    return data ;
 8006762:	68bb      	ldr	r3, [r7, #8]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	40300000 	.word	0x40300000

08006770 <ds18b20Compleate>:
void ds18b20Compleate(uint8_t *data){
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	if(curr_device>owdevices){
 8006778:	4b14      	ldr	r3, [pc, #80]	; (80067cc <ds18b20Compleate+0x5c>)
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <ds18b20Compleate+0x60>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d81e      	bhi.n	80067c2 <ds18b20Compleate+0x52>
		//Команда конвертации
		//ow_state&=~OW_STATE_COMPLEATE;

	}
	else{
		if(ow_state==OW_STATE_COMPLEATE){
 8006784:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <ds18b20Compleate+0x64>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d11a      	bne.n	80067c2 <ds18b20Compleate+0x52>
		  ds18_sensors[curr_device].temp= ds18b20_tconvert(data[10], data[11]);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	330a      	adds	r3, #10
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	330b      	adds	r3, #11
 8006796:	7819      	ldrb	r1, [r3, #0]
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <ds18b20Compleate+0x5c>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	461c      	mov	r4, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7ff ff9a 	bl	80066d8 <ds18b20_tconvert>
 80067a4:	4601      	mov	r1, r0
 80067a6:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <ds18b20Compleate+0x68>)
 80067a8:	0123      	lsls	r3, r4, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	330c      	adds	r3, #12
 80067ae:	6019      	str	r1, [r3, #0]
		  ow_state=OW_STATE_NULL;
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <ds18b20Compleate+0x64>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
		  curr_device++;
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <ds18b20Compleate+0x5c>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4b03      	ldr	r3, [pc, #12]	; (80067cc <ds18b20Compleate+0x5c>)
 80067c0:	701a      	strb	r2, [r3, #0]

		//else
		//	GetDeviceData();
	}

};
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000005 	.word	0x20000005
 80067d0:	20000208 	.word	0x20000208
 80067d4:	200006bf 	.word	0x200006bf
 80067d8:	2000066c 	.word	0x2000066c

080067dc <GetDeviceData>:
void GetDeviceData(){
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	if(curr_device==owdevices){
 80067e0:	4b1e      	ldr	r3, [pc, #120]	; (800685c <GetDeviceData+0x80>)
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <GetDeviceData+0x84>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d10a      	bne.n	8006802 <GetDeviceData+0x26>
				curr_device=0xff;
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <GetDeviceData+0x80>)
 80067ee:	22ff      	movs	r2, #255	; 0xff
 80067f0:	701a      	strb	r2, [r3, #0]
				ow_tickstart = HAL_GetTick();
 80067f2:	f7fa fe09 	bl	8001408 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <GetDeviceData+0x88>)
 80067fa:	601a      	str	r2, [r3, #0]
			    ds18b20_start_convert();
 80067fc:	f7ff ff32 	bl	8006664 <ds18b20_start_convert>
			    return;
 8006800:	e02a      	b.n	8006858 <GetDeviceData+0x7c>
			}
	if(curr_device>owdevices){
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <GetDeviceData+0x80>)
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	4b16      	ldr	r3, [pc, #88]	; (8006860 <GetDeviceData+0x84>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d91b      	bls.n	8006846 <GetDeviceData+0x6a>
		if(HAL_GetTick()-ow_tickstart>1000){
 800680e:	f7fa fdfb 	bl	8001408 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	4b13      	ldr	r3, [pc, #76]	; (8006864 <GetDeviceData+0x88>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681e:	d91b      	bls.n	8006858 <GetDeviceData+0x7c>
		  if((ow_state==OW_STATE_COMPLEATE)||(ow_state==OW_STATE_NULL)){
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <GetDeviceData+0x8c>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d003      	beq.n	8006830 <GetDeviceData+0x54>
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <GetDeviceData+0x8c>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d113      	bne.n	8006858 <GetDeviceData+0x7c>
			  ow_state&=~OW_STATE_COMPLEATE;
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <GetDeviceData+0x8c>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f023 0308 	bic.w	r3, r3, #8
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <GetDeviceData+0x8c>)
 800683c:	701a      	strb	r2, [r3, #0]
		      curr_device=0;
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <GetDeviceData+0x80>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e008      	b.n	8006858 <GetDeviceData+0x7c>
		  }
		}
	}
	else
	if(ow_state==OW_STATE_NULL)
 8006846:	4b08      	ldr	r3, [pc, #32]	; (8006868 <GetDeviceData+0x8c>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <GetDeviceData+0x7c>
	  ds18b20_get_temp(curr_device);
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <GetDeviceData+0x80>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff ff1a 	bl	800668c <ds18b20_get_temp>
};
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000005 	.word	0x20000005
 8006860:	20000208 	.word	0x20000208
 8006864:	2000020c 	.word	0x2000020c
 8006868:	200006bf 	.word	0x200006bf

0800686c <__NVIC_SetPriority>:
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687c:	2b00      	cmp	r3, #0
 800687e:	db0a      	blt.n	8006896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	490c      	ldr	r1, [pc, #48]	; (80068b8 <__NVIC_SetPriority+0x4c>)
 8006886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688a:	0112      	lsls	r2, r2, #4
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	440b      	add	r3, r1
 8006890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006894:	e00a      	b.n	80068ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4908      	ldr	r1, [pc, #32]	; (80068bc <__NVIC_SetPriority+0x50>)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	3b04      	subs	r3, #4
 80068a4:	0112      	lsls	r2, r2, #4
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	440b      	add	r3, r1
 80068aa:	761a      	strb	r2, [r3, #24]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	e000e100 	.word	0xe000e100
 80068bc:	e000ed00 	.word	0xe000ed00

080068c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance==TIM1) //check if the interrupt comes from TIM1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //Toggle the state of pin
 80068d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068d6:	4808      	ldr	r0, [pc, #32]	; (80068f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80068d8:	f7fb faa6 	bl	8001e28 <HAL_GPIO_TogglePin>
  }
  if (htim->Instance==TIM4) //check if the interrupt comes from TIM1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a06      	ldr	r2, [pc, #24]	; (80068fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_PeriodElapsedCallback+0x2a>
    {
	  GetDeviceData();
 80068e6:	f7ff ff79 	bl	80067dc <GetDeviceData>
    }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40011000 	.word	0x40011000
 80068fc:	40000800 	.word	0x40000800

08006900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	b093      	sub	sp, #76	; 0x4c
 8006904:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006906:	f7fa fd27 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800690a:	f000 fa81 	bl	8006e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800690e:	f000 fc75 	bl	80071fc <MX_GPIO_Init>
  MX_DMA_Init();
 8006912:	f000 fc4d 	bl	80071b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8006916:	f000 fac1 	bl	8006e9c <MX_I2C1_Init>
  MX_TIM1_Init();
 800691a:	f000 fb25 	bl	8006f68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800691e:	f000 fc1d 	bl	800715c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8006922:	f000 fbcd 	bl	80070c0 <MX_TIM4_Init>
  MX_SPI2_Init();
 8006926:	f000 fae7 	bl	8006ef8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800692a:	f000 ff81 	bl	8007830 <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 800692e:	2100      	movs	r1, #0
 8006930:	2000      	movs	r0, #0
 8006932:	f001 f8e5 	bl	8007b00 <SSD1306_GotoXY>
  SSD1306_Puts ("Start...", &Font_11x18, 1);
 8006936:	2201      	movs	r2, #1
 8006938:	49de      	ldr	r1, [pc, #888]	; (8006cb4 <main+0x3b4>)
 800693a:	48df      	ldr	r0, [pc, #892]	; (8006cb8 <main+0x3b8>)
 800693c:	f001 f976 	bl	8007c2c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8006940:	f001 f83a 	bl	80079b8 <SSD1306_UpdateScreen>
  NVIC_SetPriority(TIM4_IRQn, 15);
 8006944:	210f      	movs	r1, #15
 8006946:	201e      	movs	r0, #30
 8006948:	f7ff ff90 	bl	800686c <__NVIC_SetPriority>
  ds18b20_init();
 800694c:	f7ff fe2a 	bl	80065a4 <ds18b20_init>
  BME280_Init();
 8006950:	f7ff fdae 	bl	80064b0 <BME280_Init>
 //
  HAL_TIM_Base_Start_IT(&htim1);
 8006954:	48d9      	ldr	r0, [pc, #868]	; (8006cbc <main+0x3bc>)
 8006956:	f7fd fb07 	bl	8003f68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800695a:	48d9      	ldr	r0, [pc, #868]	; (8006cc0 <main+0x3c0>)
 800695c:	f7fd fb04 	bl	8003f68 <HAL_TIM_Base_Start_IT>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8006960:	2100      	movs	r1, #0
 8006962:	48d6      	ldr	r0, [pc, #856]	; (8006cbc <main+0x3bc>)
 8006964:	f7fd fb58 	bl	8004018 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 uint8_t str1[64];
 str1[0]=0x8c;
 8006968:	238c      	movs	r3, #140	; 0x8c
 800696a:	703b      	strb	r3, [r7, #0]
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 800696c:	2200      	movs	r2, #0
 800696e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006972:	48d4      	ldr	r0, [pc, #848]	; (8006cc4 <main+0x3c4>)
 8006974:	f7fb fa40 	bl	8001df8 <HAL_GPIO_WritePin>

 HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006978:	4639      	mov	r1, r7
 800697a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800697e:	2201      	movs	r2, #1
 8006980:	48d1      	ldr	r0, [pc, #836]	; (8006cc8 <main+0x3c8>)
 8006982:	f7fd f90a 	bl	8003b9a <HAL_SPI_Transmit>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006986:	2201      	movs	r2, #1
 8006988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800698c:	48cd      	ldr	r0, [pc, #820]	; (8006cc4 <main+0x3c4>)
 800698e:	f7fb fa33 	bl	8001df8 <HAL_GPIO_WritePin>

 str1[0]=0x44;
 8006992:	2344      	movs	r3, #68	; 0x44
 8006994:	703b      	strb	r3, [r7, #0]
 str1[1]=0xc1;
 8006996:	23c1      	movs	r3, #193	; 0xc1
 8006998:	707b      	strb	r3, [r7, #1]
 str1[2]=0x81;
 800699a:	2381      	movs	r3, #129	; 0x81
 800699c:	70bb      	strb	r3, [r7, #2]
 HAL_Delay(1);
 800699e:	2001      	movs	r0, #1
 80069a0:	f7fa fd3c 	bl	800141c <HAL_Delay>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069aa:	48c6      	ldr	r0, [pc, #792]	; (8006cc4 <main+0x3c4>)
 80069ac:	f7fb fa24 	bl	8001df8 <HAL_GPIO_WritePin>

 HAL_SPI_Transmit(&hspi2,str1,1,500);
 80069b0:	4639      	mov	r1, r7
 80069b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80069b6:	2201      	movs	r2, #1
 80069b8:	48c3      	ldr	r0, [pc, #780]	; (8006cc8 <main+0x3c8>)
 80069ba:	f7fd f8ee 	bl	8003b9a <HAL_SPI_Transmit>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 80069be:	2201      	movs	r2, #1
 80069c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069c4:	48bf      	ldr	r0, [pc, #764]	; (8006cc4 <main+0x3c4>)
 80069c6:	f7fb fa17 	bl	8001df8 <HAL_GPIO_WritePin>
 HAL_Delay(1);
 80069ca:	2001      	movs	r0, #1
 80069cc:	f7fa fd26 	bl	800141c <HAL_Delay>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 80069d0:	2200      	movs	r2, #0
 80069d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069d6:	48bb      	ldr	r0, [pc, #748]	; (8006cc4 <main+0x3c4>)
 80069d8:	f7fb fa0e 	bl	8001df8 <HAL_GPIO_WritePin>

 HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 80069dc:	463b      	mov	r3, r7
 80069de:	1c59      	adds	r1, r3, #1
 80069e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80069e4:	2202      	movs	r2, #2
 80069e6:	48b8      	ldr	r0, [pc, #736]	; (8006cc8 <main+0x3c8>)
 80069e8:	f7fd f8d7 	bl	8003b9a <HAL_SPI_Transmit>
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 80069ec:	2201      	movs	r2, #1
 80069ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069f2:	48b4      	ldr	r0, [pc, #720]	; (8006cc4 <main+0x3c4>)
 80069f4:	f7fb fa00 	bl	8001df8 <HAL_GPIO_WritePin>
 str1[0]=0x44;
 80069f8:	2344      	movs	r3, #68	; 0x44
 80069fa:	703b      	strb	r3, [r7, #0]
  str1[1]=0xc3;
 80069fc:	23c3      	movs	r3, #195	; 0xc3
 80069fe:	707b      	strb	r3, [r7, #1]
  str1[2]=0x81;
 8006a00:	2381      	movs	r3, #129	; 0x81
 8006a02:	70bb      	strb	r3, [r7, #2]
  HAL_Delay(1);
 8006a04:	2001      	movs	r0, #1
 8006a06:	f7fa fd09 	bl	800141c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a10:	48ac      	ldr	r0, [pc, #688]	; (8006cc4 <main+0x3c4>)
 8006a12:	f7fb f9f1 	bl	8001df8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006a16:	4639      	mov	r1, r7
 8006a18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	48aa      	ldr	r0, [pc, #680]	; (8006cc8 <main+0x3c8>)
 8006a20:	f7fd f8bb 	bl	8003b9a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006a24:	2201      	movs	r2, #1
 8006a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a2a:	48a6      	ldr	r0, [pc, #664]	; (8006cc4 <main+0x3c4>)
 8006a2c:	f7fb f9e4 	bl	8001df8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006a30:	2001      	movs	r0, #1
 8006a32:	f7fa fcf3 	bl	800141c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006a36:	2200      	movs	r2, #0
 8006a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a3c:	48a1      	ldr	r0, [pc, #644]	; (8006cc4 <main+0x3c4>)
 8006a3e:	f7fb f9db 	bl	8001df8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006a42:	463b      	mov	r3, r7
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	489e      	ldr	r0, [pc, #632]	; (8006cc8 <main+0x3c8>)
 8006a4e:	f7fd f8a4 	bl	8003b9a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006a52:	2201      	movs	r2, #1
 8006a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a58:	489a      	ldr	r0, [pc, #616]	; (8006cc4 <main+0x3c4>)
 8006a5a:	f7fb f9cd 	bl	8001df8 <HAL_GPIO_WritePin>
  str1[0]=0x44;
 8006a5e:	2344      	movs	r3, #68	; 0x44
 8006a60:	703b      	strb	r3, [r7, #0]
   str1[1]=0xc5;
 8006a62:	23c5      	movs	r3, #197	; 0xc5
 8006a64:	707b      	strb	r3, [r7, #1]
   str1[2]=0x81;
 8006a66:	2381      	movs	r3, #129	; 0x81
 8006a68:	70bb      	strb	r3, [r7, #2]
   HAL_Delay(1);
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	f7fa fcd6 	bl	800141c <HAL_Delay>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a76:	4893      	ldr	r0, [pc, #588]	; (8006cc4 <main+0x3c4>)
 8006a78:	f7fb f9be 	bl	8001df8 <HAL_GPIO_WritePin>

   HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a82:	2201      	movs	r2, #1
 8006a84:	4890      	ldr	r0, [pc, #576]	; (8006cc8 <main+0x3c8>)
 8006a86:	f7fd f888 	bl	8003b9a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a90:	488c      	ldr	r0, [pc, #560]	; (8006cc4 <main+0x3c4>)
 8006a92:	f7fb f9b1 	bl	8001df8 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8006a96:	2001      	movs	r0, #1
 8006a98:	f7fa fcc0 	bl	800141c <HAL_Delay>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aa2:	4888      	ldr	r0, [pc, #544]	; (8006cc4 <main+0x3c4>)
 8006aa4:	f7fb f9a8 	bl	8001df8 <HAL_GPIO_WritePin>

   HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	4885      	ldr	r0, [pc, #532]	; (8006cc8 <main+0x3c8>)
 8006ab4:	f7fd f871 	bl	8003b9a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006abe:	4881      	ldr	r0, [pc, #516]	; (8006cc4 <main+0x3c4>)
 8006ac0:	f7fb f99a 	bl	8001df8 <HAL_GPIO_WritePin>
   str1[0]=0x44;
 8006ac4:	2344      	movs	r3, #68	; 0x44
 8006ac6:	703b      	strb	r3, [r7, #0]
    str1[1]=0xc7;
 8006ac8:	23c7      	movs	r3, #199	; 0xc7
 8006aca:	707b      	strb	r3, [r7, #1]
    str1[2]=0x81;
 8006acc:	2381      	movs	r3, #129	; 0x81
 8006ace:	70bb      	strb	r3, [r7, #2]
    HAL_Delay(1);
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	f7fa fca3 	bl	800141c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006adc:	4879      	ldr	r0, [pc, #484]	; (8006cc4 <main+0x3c4>)
 8006ade:	f7fb f98b 	bl	8001df8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4877      	ldr	r0, [pc, #476]	; (8006cc8 <main+0x3c8>)
 8006aec:	f7fd f855 	bl	8003b9a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006af0:	2201      	movs	r2, #1
 8006af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006af6:	4873      	ldr	r0, [pc, #460]	; (8006cc4 <main+0x3c4>)
 8006af8:	f7fb f97e 	bl	8001df8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006afc:	2001      	movs	r0, #1
 8006afe:	f7fa fc8d 	bl	800141c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006b02:	2200      	movs	r2, #0
 8006b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b08:	486e      	ldr	r0, [pc, #440]	; (8006cc4 <main+0x3c4>)
 8006b0a:	f7fb f975 	bl	8001df8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006b0e:	463b      	mov	r3, r7
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b16:	2202      	movs	r2, #2
 8006b18:	486b      	ldr	r0, [pc, #428]	; (8006cc8 <main+0x3c8>)
 8006b1a:	f7fd f83e 	bl	8003b9a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b24:	4867      	ldr	r0, [pc, #412]	; (8006cc4 <main+0x3c4>)
 8006b26:	f7fb f967 	bl	8001df8 <HAL_GPIO_WritePin>
    str1[0]=0x44;
 8006b2a:	2344      	movs	r3, #68	; 0x44
 8006b2c:	703b      	strb	r3, [r7, #0]
     str1[1]=0xc9;
 8006b2e:	23c9      	movs	r3, #201	; 0xc9
 8006b30:	707b      	strb	r3, [r7, #1]
     str1[2]=0x81;
 8006b32:	2381      	movs	r3, #129	; 0x81
 8006b34:	70bb      	strb	r3, [r7, #2]
     HAL_Delay(1);
 8006b36:	2001      	movs	r0, #1
 8006b38:	f7fa fc70 	bl	800141c <HAL_Delay>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b42:	4860      	ldr	r0, [pc, #384]	; (8006cc4 <main+0x3c4>)
 8006b44:	f7fb f958 	bl	8001df8 <HAL_GPIO_WritePin>

     HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b4e:	2201      	movs	r2, #1
 8006b50:	485d      	ldr	r0, [pc, #372]	; (8006cc8 <main+0x3c8>)
 8006b52:	f7fd f822 	bl	8003b9a <HAL_SPI_Transmit>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006b56:	2201      	movs	r2, #1
 8006b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b5c:	4859      	ldr	r0, [pc, #356]	; (8006cc4 <main+0x3c4>)
 8006b5e:	f7fb f94b 	bl	8001df8 <HAL_GPIO_WritePin>
     HAL_Delay(1);
 8006b62:	2001      	movs	r0, #1
 8006b64:	f7fa fc5a 	bl	800141c <HAL_Delay>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b6e:	4855      	ldr	r0, [pc, #340]	; (8006cc4 <main+0x3c4>)
 8006b70:	f7fb f942 	bl	8001df8 <HAL_GPIO_WritePin>

     HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006b74:	463b      	mov	r3, r7
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	4852      	ldr	r0, [pc, #328]	; (8006cc8 <main+0x3c8>)
 8006b80:	f7fd f80b 	bl	8003b9a <HAL_SPI_Transmit>
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006b84:	2201      	movs	r2, #1
 8006b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b8a:	484e      	ldr	r0, [pc, #312]	; (8006cc4 <main+0x3c4>)
 8006b8c:	f7fb f934 	bl	8001df8 <HAL_GPIO_WritePin>
     str1[0]=0x44;
 8006b90:	2344      	movs	r3, #68	; 0x44
 8006b92:	703b      	strb	r3, [r7, #0]
      str1[1]=0xcb;
 8006b94:	23cb      	movs	r3, #203	; 0xcb
 8006b96:	707b      	strb	r3, [r7, #1]
      str1[2]=0x81;
 8006b98:	2381      	movs	r3, #129	; 0x81
 8006b9a:	70bb      	strb	r3, [r7, #2]
      HAL_Delay(1);
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f7fa fc3d 	bl	800141c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ba8:	4846      	ldr	r0, [pc, #280]	; (8006cc4 <main+0x3c4>)
 8006baa:	f7fb f925 	bl	8001df8 <HAL_GPIO_WritePin>

      HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4844      	ldr	r0, [pc, #272]	; (8006cc8 <main+0x3c8>)
 8006bb8:	f7fc ffef 	bl	8003b9a <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bc2:	4840      	ldr	r0, [pc, #256]	; (8006cc4 <main+0x3c4>)
 8006bc4:	f7fb f918 	bl	8001df8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7fa fc27 	bl	800141c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bd4:	483b      	ldr	r0, [pc, #236]	; (8006cc4 <main+0x3c4>)
 8006bd6:	f7fb f90f 	bl	8001df8 <HAL_GPIO_WritePin>

      HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006bda:	463b      	mov	r3, r7
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006be2:	2202      	movs	r2, #2
 8006be4:	4838      	ldr	r0, [pc, #224]	; (8006cc8 <main+0x3c8>)
 8006be6:	f7fc ffd8 	bl	8003b9a <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006bea:	2201      	movs	r2, #1
 8006bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bf0:	4834      	ldr	r0, [pc, #208]	; (8006cc4 <main+0x3c4>)
 8006bf2:	f7fb f901 	bl	8001df8 <HAL_GPIO_WritePin>
      str1[0]=0x44;
 8006bf6:	2344      	movs	r3, #68	; 0x44
 8006bf8:	703b      	strb	r3, [r7, #0]
       str1[1]=0xcd;
 8006bfa:	23cd      	movs	r3, #205	; 0xcd
 8006bfc:	707b      	strb	r3, [r7, #1]
       str1[2]=0x81;
 8006bfe:	2381      	movs	r3, #129	; 0x81
 8006c00:	70bb      	strb	r3, [r7, #2]
       HAL_Delay(1);
 8006c02:	2001      	movs	r0, #1
 8006c04:	f7fa fc0a 	bl	800141c <HAL_Delay>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c0e:	482d      	ldr	r0, [pc, #180]	; (8006cc4 <main+0x3c4>)
 8006c10:	f7fb f8f2 	bl	8001df8 <HAL_GPIO_WritePin>

       HAL_SPI_Transmit(&hspi2,str1,1,500);
 8006c14:	4639      	mov	r1, r7
 8006c16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	482a      	ldr	r0, [pc, #168]	; (8006cc8 <main+0x3c8>)
 8006c1e:	f7fc ffbc 	bl	8003b9a <HAL_SPI_Transmit>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006c22:	2201      	movs	r2, #1
 8006c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c28:	4826      	ldr	r0, [pc, #152]	; (8006cc4 <main+0x3c4>)
 8006c2a:	f7fb f8e5 	bl	8001df8 <HAL_GPIO_WritePin>
       HAL_Delay(1);
 8006c2e:	2001      	movs	r0, #1
 8006c30:	f7fa fbf4 	bl	800141c <HAL_Delay>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c3a:	4822      	ldr	r0, [pc, #136]	; (8006cc4 <main+0x3c4>)
 8006c3c:	f7fb f8dc 	bl	8001df8 <HAL_GPIO_WritePin>

       HAL_SPI_Transmit(&hspi2,&str1[1],2,500);
 8006c40:	463b      	mov	r3, r7
 8006c42:	1c59      	adds	r1, r3, #1
 8006c44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006c48:	2202      	movs	r2, #2
 8006c4a:	481f      	ldr	r0, [pc, #124]	; (8006cc8 <main+0x3c8>)
 8006c4c:	f7fc ffa5 	bl	8003b9a <HAL_SPI_Transmit>
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8006c50:	2201      	movs	r2, #1
 8006c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c56:	481b      	ldr	r0, [pc, #108]	; (8006cc4 <main+0x3c4>)
 8006c58:	f7fb f8ce 	bl	8001df8 <HAL_GPIO_WritePin>
	 // HAL_Delay(1000);

	  //ds18b20_start_convert();
	 // HAL_Delay(1000);
	 // GetDeviceData();
	  HAL_Delay(100);
 8006c5c:	2064      	movs	r0, #100	; 0x64
 8006c5e:	f7fa fbdd 	bl	800141c <HAL_Delay>
	  if(owdevices){
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <main+0x3cc>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d07b      	beq.n	8006d62 <main+0x462>
	    sprintf(str1,"%4.2f ",ds18_sensors[0].temp);
 8006c6a:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <main+0x3d0>)
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7f9 fbda 	bl	8000428 <__aeabi_f2d>
 8006c74:	4603      	mov	r3, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	4638      	mov	r0, r7
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	4915      	ldr	r1, [pc, #84]	; (8006cd4 <main+0x3d4>)
 8006c80:	f002 f870 	bl	8008d64 <siprintf>
	    SSD1306_GotoXY (0,0*20);
 8006c84:	2100      	movs	r1, #0
 8006c86:	2000      	movs	r0, #0
 8006c88:	f000 ff3a 	bl	8007b00 <SSD1306_GotoXY>
	    SSD1306_Puts (str1, &Font_11x18, 1);
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <main+0x3b4>)
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ffca 	bl	8007c2c <SSD1306_Puts>
	  if(owdevices>1){
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <main+0x3cc>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d960      	bls.n	8006d62 <main+0x462>
		sprintf(str1,"%4.2f ",ds18_sensors[1].temp);
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <main+0x3d0>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7f9 fbbf 	bl	8000428 <__aeabi_f2d>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	4638      	mov	r0, r7
 8006cb0:	e012      	b.n	8006cd8 <main+0x3d8>
 8006cb2:	bf00      	nop
 8006cb4:	20000010 	.word	0x20000010
 8006cb8:	0800abf0 	.word	0x0800abf0
 8006cbc:	20000834 	.word	0x20000834
 8006cc0:	2000075c 	.word	0x2000075c
 8006cc4:	40010c00 	.word	0x40010c00
 8006cc8:	20000704 	.word	0x20000704
 8006ccc:	20000208 	.word	0x20000208
 8006cd0:	2000066c 	.word	0x2000066c
 8006cd4:	0800abfc 	.word	0x0800abfc
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	4943      	ldr	r1, [pc, #268]	; (8006dec <main+0x4ec>)
 8006cde:	f002 f841 	bl	8008d64 <siprintf>
		SSD1306_GotoXY (64,0*20);
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	2040      	movs	r0, #64	; 0x40
 8006ce6:	f000 ff0b 	bl	8007b00 <SSD1306_GotoXY>
		SSD1306_Puts (str1, &Font_11x18, 1);
 8006cea:	463b      	mov	r3, r7
 8006cec:	2201      	movs	r2, #1
 8006cee:	4940      	ldr	r1, [pc, #256]	; (8006df0 <main+0x4f0>)
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 ff9b 	bl	8007c2c <SSD1306_Puts>
	  if(owdevices>2){
 8006cf6:	4b3f      	ldr	r3, [pc, #252]	; (8006df4 <main+0x4f4>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d931      	bls.n	8006d62 <main+0x462>
	    sprintf(str1,"%4.2f ",ds18_sensors[2].temp);
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <main+0x4f8>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7f9 fb90 	bl	8000428 <__aeabi_f2d>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4623      	mov	r3, r4
 8006d12:	4936      	ldr	r1, [pc, #216]	; (8006dec <main+0x4ec>)
 8006d14:	f002 f826 	bl	8008d64 <siprintf>
		SSD1306_GotoXY (0,1*20);
 8006d18:	2114      	movs	r1, #20
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f000 fef0 	bl	8007b00 <SSD1306_GotoXY>
		SSD1306_Puts (str1, &Font_11x18, 1);
 8006d20:	463b      	mov	r3, r7
 8006d22:	2201      	movs	r2, #1
 8006d24:	4932      	ldr	r1, [pc, #200]	; (8006df0 <main+0x4f0>)
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 ff80 	bl	8007c2c <SSD1306_Puts>
	  if(owdevices>3){
 8006d2c:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <main+0x4f4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d916      	bls.n	8006d62 <main+0x462>
		sprintf(str1,"%4.2f ",ds18_sensors[3].temp);
 8006d34:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <main+0x4f8>)
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fb75 	bl	8000428 <__aeabi_f2d>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	460c      	mov	r4, r1
 8006d42:	4638      	mov	r0, r7
 8006d44:	461a      	mov	r2, r3
 8006d46:	4623      	mov	r3, r4
 8006d48:	4928      	ldr	r1, [pc, #160]	; (8006dec <main+0x4ec>)
 8006d4a:	f002 f80b 	bl	8008d64 <siprintf>
		SSD1306_GotoXY (64,1*20);
 8006d4e:	2114      	movs	r1, #20
 8006d50:	2040      	movs	r0, #64	; 0x40
 8006d52:	f000 fed5 	bl	8007b00 <SSD1306_GotoXY>
		SSD1306_Puts (str1, &Font_11x18, 1);
 8006d56:	463b      	mov	r3, r7
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4925      	ldr	r1, [pc, #148]	; (8006df0 <main+0x4f0>)
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 ff65 	bl	8007c2c <SSD1306_Puts>
	  }
	  }
	  }
	  }
	  sprintf(str1,"%.2f'C %.2fmm    ",BME280_ReadTemperature(),BME280_ReadPressure()*0.000750061683f);
 8006d62:	f7ff f8df 	bl	8005f24 <BME280_ReadTemperature>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7f9 fb5d 	bl	8000428 <__aeabi_f2d>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	460e      	mov	r6, r1
 8006d72:	f7ff f929 	bl	8005fc8 <BME280_ReadPressure>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4920      	ldr	r1, [pc, #128]	; (8006dfc <main+0x4fc>)
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 ffe2 	bl	8000d44 <__aeabi_fmul>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7f9 fb50 	bl	8000428 <__aeabi_f2d>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	e9cd 3400 	strd	r3, r4, [sp]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4633      	mov	r3, r6
 8006d96:	491a      	ldr	r1, [pc, #104]	; (8006e00 <main+0x500>)
 8006d98:	f001 ffe4 	bl	8008d64 <siprintf>
	  SSD1306_GotoXY (0,2*20);
 8006d9c:	2128      	movs	r1, #40	; 0x28
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f000 feae 	bl	8007b00 <SSD1306_GotoXY>
	  SSD1306_Puts (str1, &Font_7x10, 1);
 8006da4:	463b      	mov	r3, r7
 8006da6:	2201      	movs	r2, #1
 8006da8:	4916      	ldr	r1, [pc, #88]	; (8006e04 <main+0x504>)
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 ff3e 	bl	8007c2c <SSD1306_Puts>
	  sprintf(str1,"%.1f%%     ",BME280_ReadHumidity());
 8006db0:	f7ff fb04 	bl	80063bc <BME280_ReadHumidity>
 8006db4:	4603      	mov	r3, r0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7f9 fb36 	bl	8000428 <__aeabi_f2d>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	4910      	ldr	r1, [pc, #64]	; (8006e08 <main+0x508>)
 8006dc8:	f001 ffcc 	bl	8008d64 <siprintf>
	  SSD1306_GotoXY (0,2*20+10);
 8006dcc:	2132      	movs	r1, #50	; 0x32
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f000 fe96 	bl	8007b00 <SSD1306_GotoXY>
	  SSD1306_Puts (str1, &Font_7x10, 1);
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	490a      	ldr	r1, [pc, #40]	; (8006e04 <main+0x504>)
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 ff26 	bl	8007c2c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8006de0:	f000 fdea 	bl	80079b8 <SSD1306_UpdateScreen>

printf("ssss\n");
 8006de4:	4809      	ldr	r0, [pc, #36]	; (8006e0c <main+0x50c>)
 8006de6:	f001 ffb5 	bl	8008d54 <puts>
	  HAL_Delay(100);
 8006dea:	e737      	b.n	8006c5c <main+0x35c>
 8006dec:	0800abfc 	.word	0x0800abfc
 8006df0:	20000010 	.word	0x20000010
 8006df4:	20000208 	.word	0x20000208
 8006df8:	2000066c 	.word	0x2000066c
 8006dfc:	3a449fca 	.word	0x3a449fca
 8006e00:	0800ac04 	.word	0x0800ac04
 8006e04:	20000008 	.word	0x20000008
 8006e08:	0800ac18 	.word	0x0800ac18
 8006e0c:	0800ac24 	.word	0x0800ac24

08006e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b090      	sub	sp, #64	; 0x40
 8006e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e16:	f107 0318 	add.w	r3, r7, #24
 8006e1a:	2228      	movs	r2, #40	; 0x28
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 fae5 	bl	80083ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e24:	1d3b      	adds	r3, r7, #4
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e32:	2301      	movs	r3, #1
 8006e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e40:	2301      	movs	r3, #1
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e44:	2302      	movs	r3, #2
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006e4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e54:	f107 0318 	add.w	r3, r7, #24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fc fa21 	bl	80032a0 <HAL_RCC_OscConfig>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006e64:	f000 fa38 	bl	80072d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e68:	230f      	movs	r3, #15
 8006e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e7e:	1d3b      	adds	r3, r7, #4
 8006e80:	2102      	movs	r1, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fc fc8c 	bl	80037a0 <HAL_RCC_ClockConfig>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006e8e:	f000 fa23 	bl	80072d8 <Error_Handler>
  }
}
 8006e92:	bf00      	nop
 8006e94:	3740      	adds	r7, #64	; 0x40
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <MX_I2C1_Init+0x54>)
 8006ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ea8:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <MX_I2C1_Init+0x58>)
 8006eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <MX_I2C1_Init+0x50>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <MX_I2C1_Init+0x50>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <MX_I2C1_Init+0x50>)
 8006eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ecc:	4b07      	ldr	r3, [pc, #28]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <MX_I2C1_Init+0x50>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ed8:	4804      	ldr	r0, [pc, #16]	; (8006eec <MX_I2C1_Init+0x50>)
 8006eda:	f7fa ffbd 	bl	8001e58 <HAL_I2C_Init>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006ee4:	f000 f9f8 	bl	80072d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006ee8:	bf00      	nop
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	2000079c 	.word	0x2000079c
 8006ef0:	40005400 	.word	0x40005400
 8006ef4:	00061a80 	.word	0x00061a80

08006ef8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006efc:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006efe:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <MX_SPI2_Init+0x6c>)
 8006f00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f10:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f1e:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f2e:	2228      	movs	r2, #40	; 0x28
 8006f30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f34:	2280      	movs	r2, #128	; 0x80
 8006f36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f46:	220a      	movs	r2, #10
 8006f48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f4a:	4805      	ldr	r0, [pc, #20]	; (8006f60 <MX_SPI2_Init+0x68>)
 8006f4c:	f7fc fdc4 	bl	8003ad8 <HAL_SPI_Init>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8006f56:	f000 f9bf 	bl	80072d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000704 	.word	0x20000704
 8006f64:	40003800 	.word	0x40003800

08006f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b096      	sub	sp, #88	; 0x58
 8006f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	605a      	str	r2, [r3, #4]
 8006f78:	609a      	str	r2, [r3, #8]
 8006f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	609a      	str	r2, [r3, #8]
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	611a      	str	r2, [r3, #16]
 8006f96:	615a      	str	r2, [r3, #20]
 8006f98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006f9a:	1d3b      	adds	r3, r7, #4
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 fa24 	bl	80083ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006fa6:	4b44      	ldr	r3, [pc, #272]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fa8:	4a44      	ldr	r2, [pc, #272]	; (80070bc <MX_TIM1_Init+0x154>)
 8006faa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8006fac:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006fb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fb4:	4b40      	ldr	r3, [pc, #256]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8006fba:	4b3f      	ldr	r3, [pc, #252]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fbc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fc2:	4b3d      	ldr	r3, [pc, #244]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8006fc8:	4b3b      	ldr	r3, [pc, #236]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fca:	2203      	movs	r2, #3
 8006fcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fce:	4b3a      	ldr	r3, [pc, #232]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006fd4:	4838      	ldr	r0, [pc, #224]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006fd6:	f7fc ff9c 	bl	8003f12 <HAL_TIM_Base_Init>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006fe0:	f000 f97a 	bl	80072d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4831      	ldr	r0, [pc, #196]	; (80070b8 <MX_TIM1_Init+0x150>)
 8006ff2:	f7fd fa37 	bl	8004464 <HAL_TIM_ConfigClockSource>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8006ffc:	f000 f96c 	bl	80072d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8007000:	482d      	ldr	r0, [pc, #180]	; (80070b8 <MX_TIM1_Init+0x150>)
 8007002:	f7fc ffd4 	bl	8003fae <HAL_TIM_OC_Init>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800700c:	f000 f964 	bl	80072d8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8007010:	2108      	movs	r1, #8
 8007012:	4829      	ldr	r0, [pc, #164]	; (80070b8 <MX_TIM1_Init+0x150>)
 8007014:	f7fd f878 	bl	8004108 <HAL_TIM_OnePulse_Init>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800701e:	f000 f95b 	bl	80072d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007022:	2300      	movs	r3, #0
 8007024:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007026:	2300      	movs	r3, #0
 8007028:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800702a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800702e:	4619      	mov	r1, r3
 8007030:	4821      	ldr	r0, [pc, #132]	; (80070b8 <MX_TIM1_Init+0x150>)
 8007032:	f7fd fd97 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800703c:	f000 f94c 	bl	80072d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007040:	2330      	movs	r3, #48	; 0x30
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25000;
 8007044:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800704a:	2302      	movs	r3, #2
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800704e:	2300      	movs	r3, #0
 8007050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007056:	2300      	movs	r3, #0
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	4619      	mov	r1, r3
 8007066:	4814      	ldr	r0, [pc, #80]	; (80070b8 <MX_TIM1_Init+0x150>)
 8007068:	f7fd f99c 	bl	80043a4 <HAL_TIM_OC_ConfigChannel>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8007072:	f000 f931 	bl	80072d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800707a:	2300      	movs	r3, #0
 800707c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800708a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800708e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007090:	2300      	movs	r3, #0
 8007092:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4807      	ldr	r0, [pc, #28]	; (80070b8 <MX_TIM1_Init+0x150>)
 800709a:	f7fd fda7 	bl	8004bec <HAL_TIMEx_ConfigBreakDeadTime>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80070a4:	f000 f918 	bl	80072d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80070a8:	4803      	ldr	r0, [pc, #12]	; (80070b8 <MX_TIM1_Init+0x150>)
 80070aa:	f000 ff51 	bl	8007f50 <HAL_TIM_MspPostInit>

}
 80070ae:	bf00      	nop
 80070b0:	3758      	adds	r7, #88	; 0x58
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000834 	.word	0x20000834
 80070bc:	40012c00 	.word	0x40012c00

080070c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	609a      	str	r2, [r3, #8]
 80070d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070d4:	463b      	mov	r3, r7
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80070dc:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <MX_TIM4_Init+0x94>)
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <MX_TIM4_Init+0x98>)
 80070e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <MX_TIM4_Init+0x94>)
 80070e4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80070e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <MX_TIM4_Init+0x94>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80070f0:	4b18      	ldr	r3, [pc, #96]	; (8007154 <MX_TIM4_Init+0x94>)
 80070f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80070f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070f8:	4b16      	ldr	r3, [pc, #88]	; (8007154 <MX_TIM4_Init+0x94>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <MX_TIM4_Init+0x94>)
 8007100:	2200      	movs	r2, #0
 8007102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007104:	4813      	ldr	r0, [pc, #76]	; (8007154 <MX_TIM4_Init+0x94>)
 8007106:	f7fc ff04 	bl	8003f12 <HAL_TIM_Base_Init>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8007110:	f000 f8e2 	bl	80072d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800711a:	f107 0308 	add.w	r3, r7, #8
 800711e:	4619      	mov	r1, r3
 8007120:	480c      	ldr	r0, [pc, #48]	; (8007154 <MX_TIM4_Init+0x94>)
 8007122:	f7fd f99f 	bl	8004464 <HAL_TIM_ConfigClockSource>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800712c:	f000 f8d4 	bl	80072d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007130:	2300      	movs	r3, #0
 8007132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007134:	2300      	movs	r3, #0
 8007136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007138:	463b      	mov	r3, r7
 800713a:	4619      	mov	r1, r3
 800713c:	4805      	ldr	r0, [pc, #20]	; (8007154 <MX_TIM4_Init+0x94>)
 800713e:	f7fd fd11 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8007148:	f000 f8c6 	bl	80072d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	2000075c 	.word	0x2000075c
 8007158:	40000800 	.word	0x40000800

0800715c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007160:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007162:	4a12      	ldr	r2, [pc, #72]	; (80071ac <MX_USART2_UART_Init+0x50>)
 8007164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800716c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007170:	2200      	movs	r2, #0
 8007172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007176:	2200      	movs	r2, #0
 8007178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 800717c:	2200      	movs	r2, #0
 800717e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007182:	220c      	movs	r2, #12
 8007184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007188:	2200      	movs	r2, #0
 800718a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 800718e:	2200      	movs	r2, #0
 8007190:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8007192:	4805      	ldr	r0, [pc, #20]	; (80071a8 <MX_USART2_UART_Init+0x4c>)
 8007194:	f7fd fd8d 	bl	8004cb2 <HAL_HalfDuplex_Init>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800719e:	f000 f89b 	bl	80072d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80071a2:	bf00      	nop
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000874 	.word	0x20000874
 80071ac:	40004400 	.word	0x40004400

080071b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <MX_DMA_Init+0x48>)
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	4a0f      	ldr	r2, [pc, #60]	; (80071f8 <MX_DMA_Init+0x48>)
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	6153      	str	r3, [r2, #20]
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <MX_DMA_Init+0x48>)
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	2010      	movs	r0, #16
 80071d4:	f7fa fa1b 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80071d8:	2010      	movs	r0, #16
 80071da:	f7fa fa34 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80071de:	2200      	movs	r2, #0
 80071e0:	2100      	movs	r1, #0
 80071e2:	2011      	movs	r0, #17
 80071e4:	f7fa fa13 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80071e8:	2011      	movs	r0, #17
 80071ea:	f7fa fa2c 	bl	8001646 <HAL_NVIC_EnableIRQ>

}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000

080071fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007202:	f107 0310 	add.w	r3, r7, #16
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	609a      	str	r2, [r3, #8]
 800720e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007210:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	4a2d      	ldr	r2, [pc, #180]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007216:	f043 0310 	orr.w	r3, r3, #16
 800721a:	6193      	str	r3, [r2, #24]
 800721c:	4b2b      	ldr	r3, [pc, #172]	; (80072cc <MX_GPIO_Init+0xd0>)
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <MX_GPIO_Init+0xd0>)
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	4a27      	ldr	r2, [pc, #156]	; (80072cc <MX_GPIO_Init+0xd0>)
 800722e:	f043 0320 	orr.w	r3, r3, #32
 8007232:	6193      	str	r3, [r2, #24]
 8007234:	4b25      	ldr	r3, [pc, #148]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007240:	4b22      	ldr	r3, [pc, #136]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	4a21      	ldr	r2, [pc, #132]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007246:	f043 0304 	orr.w	r3, r3, #4
 800724a:	6193      	str	r3, [r2, #24]
 800724c:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <MX_GPIO_Init+0xd0>)
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007258:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <MX_GPIO_Init+0xd0>)
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <MX_GPIO_Init+0xd0>)
 800725e:	f043 0308 	orr.w	r3, r3, #8
 8007262:	6193      	str	r3, [r2, #24]
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <MX_GPIO_Init+0xd0>)
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007270:	2200      	movs	r2, #0
 8007272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007276:	4816      	ldr	r0, [pc, #88]	; (80072d0 <MX_GPIO_Init+0xd4>)
 8007278:	f7fa fdbe 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800727c:	2200      	movs	r2, #0
 800727e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007282:	4814      	ldr	r0, [pc, #80]	; (80072d4 <MX_GPIO_Init+0xd8>)
 8007284:	f7fa fdb8 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800728c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007296:	2302      	movs	r3, #2
 8007298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800729a:	f107 0310 	add.w	r3, r7, #16
 800729e:	4619      	mov	r1, r3
 80072a0:	480b      	ldr	r0, [pc, #44]	; (80072d0 <MX_GPIO_Init+0xd4>)
 80072a2:	f7fa fc4f 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80072a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072b4:	2303      	movs	r3, #3
 80072b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b8:	f107 0310 	add.w	r3, r7, #16
 80072bc:	4619      	mov	r1, r3
 80072be:	4805      	ldr	r0, [pc, #20]	; (80072d4 <MX_GPIO_Init+0xd8>)
 80072c0:	f7fa fc40 	bl	8001b44 <HAL_GPIO_Init>

}
 80072c4:	bf00      	nop
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40011000 	.word	0x40011000
 80072d4:	40010c00 	.word	0x40010c00

080072d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80072dc:	bf00      	nop
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <OW_toBits>:
static uint8_t data_len;
static uint8_t current_pos;



static void OW_toBits(uint8_t ow_byte, uint8_t *ow_bits) {
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e014      	b.n	8007320 <OW_toBits+0x3c>
		if (ow_byte & 0x01) {
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <OW_toBits+0x24>
			*ow_bits = OW_1;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	22ff      	movs	r2, #255	; 0xff
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e002      	b.n	800730e <OW_toBits+0x2a>
		} else {
			*ow_bits = OW_0;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
		}
		ow_bits++;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	603b      	str	r3, [r7, #0]
		ow_byte = ow_byte >> 1;
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	3301      	adds	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b07      	cmp	r3, #7
 8007324:	d9e7      	bls.n	80072f6 <OW_toBits+0x12>
	}
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <OW_toByte>:

static uint8_t OW_toByte(uint8_t *ow_bits) {
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	uint8_t ow_byte, i;
	ow_byte = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 800733c:	2300      	movs	r3, #0
 800733e:	73bb      	strb	r3, [r7, #14]
 8007340:	e010      	b.n	8007364 <OW_toByte+0x34>
		ow_byte = ow_byte >> 1;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
		if (*ow_bits == OW_R_1) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2bff      	cmp	r3, #255	; 0xff
 800734e:	d103      	bne.n	8007358 <OW_toByte+0x28>
			ow_byte |= 0x80;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007356:	73fb      	strb	r3, [r7, #15]
		}
		ow_bits++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3301      	adds	r3, #1
 800735c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	3301      	adds	r3, #1
 8007362:	73bb      	strb	r3, [r7, #14]
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b07      	cmp	r3, #7
 8007368:	d9eb      	bls.n	8007342 <OW_toByte+0x12>
	}
	return ow_byte;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
	...

08007378 <ProcessData>:
static uint8_t ProcessData(void) {
 8007378:	b598      	push	{r3, r4, r7, lr}
 800737a:	af00      	add	r7, sp, #0
	if((ow_state&OW_STATE_RESET1)){
 800737c:	4b61      	ldr	r3, [pc, #388]	; (8007504 <ProcessData+0x18c>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d035      	beq.n	80073f4 <ProcessData+0x7c>
		ow_state&=~OW_STATE_RESET1;
 8007388:	4b5e      	ldr	r3, [pc, #376]	; (8007504 <ProcessData+0x18c>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b5c      	ldr	r3, [pc, #368]	; (8007504 <ProcessData+0x18c>)
 8007394:	701a      	strb	r2, [r3, #0]
		ow_state|=OW_STATE_RESET2;
 8007396:	4b5b      	ldr	r3, [pc, #364]	; (8007504 <ProcessData+0x18c>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f043 0302 	orr.w	r3, r3, #2
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	4b58      	ldr	r3, [pc, #352]	; (8007504 <ProcessData+0x18c>)
 80073a2:	701a      	strb	r2, [r3, #0]
		huart2.Instance = USART2;
 80073a4:	4b58      	ldr	r3, [pc, #352]	; (8007508 <ProcessData+0x190>)
 80073a6:	4a59      	ldr	r2, [pc, #356]	; (800750c <ProcessData+0x194>)
 80073a8:	601a      	str	r2, [r3, #0]
	    huart2.Init.BaudRate = 9600;
 80073aa:	4b57      	ldr	r3, [pc, #348]	; (8007508 <ProcessData+0x190>)
 80073ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80073b0:	605a      	str	r2, [r3, #4]
	    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80073b2:	4b55      	ldr	r3, [pc, #340]	; (8007508 <ProcessData+0x190>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80073b8:	4b53      	ldr	r3, [pc, #332]	; (8007508 <ProcessData+0x190>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	60da      	str	r2, [r3, #12]
	    huart2.Init.Parity = UART_PARITY_NONE;
 80073be:	4b52      	ldr	r3, [pc, #328]	; (8007508 <ProcessData+0x190>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 80073c4:	4b50      	ldr	r3, [pc, #320]	; (8007508 <ProcessData+0x190>)
 80073c6:	220c      	movs	r2, #12
 80073c8:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ca:	4b4f      	ldr	r3, [pc, #316]	; (8007508 <ProcessData+0x190>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	619a      	str	r2, [r3, #24]
		//huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	    HAL_HalfDuplex_Init(&huart2);
 80073d0:	484d      	ldr	r0, [pc, #308]	; (8007508 <ProcessData+0x190>)
 80073d2:	f7fd fc6e 	bl	8004cb2 <HAL_HalfDuplex_Init>

		ow_buf[0]=0xf0;
 80073d6:	4b4e      	ldr	r3, [pc, #312]	; (8007510 <ProcessData+0x198>)
 80073d8:	22f0      	movs	r2, #240	; 0xf0
 80073da:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2,ow_buf,1);
 80073dc:	2201      	movs	r2, #1
 80073de:	494c      	ldr	r1, [pc, #304]	; (8007510 <ProcessData+0x198>)
 80073e0:	4849      	ldr	r0, [pc, #292]	; (8007508 <ProcessData+0x190>)
 80073e2:	f7fd fe67 	bl	80050b4 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(&huart2,ow_buf,1);
 80073e6:	2201      	movs	r2, #1
 80073e8:	4949      	ldr	r1, [pc, #292]	; (8007510 <ProcessData+0x198>)
 80073ea:	4847      	ldr	r0, [pc, #284]	; (8007508 <ProcessData+0x190>)
 80073ec:	f7fd fdf6 	bl	8004fdc <HAL_UART_Transmit_DMA>
		return 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e084      	b.n	80074fe <ProcessData+0x186>
	}
    if((ow_state&OW_STATE_RESET2)){
 80073f4:	4b43      	ldr	r3, [pc, #268]	; (8007504 <ProcessData+0x18c>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02f      	beq.n	8007460 <ProcessData+0xe8>
      huart2.Instance = USART2;
 8007400:	4b41      	ldr	r3, [pc, #260]	; (8007508 <ProcessData+0x190>)
 8007402:	4a42      	ldr	r2, [pc, #264]	; (800750c <ProcessData+0x194>)
 8007404:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = 115200;
 8007406:	4b40      	ldr	r3, [pc, #256]	; (8007508 <ProcessData+0x190>)
 8007408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800740c:	605a      	str	r2, [r3, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800740e:	4b3e      	ldr	r3, [pc, #248]	; (8007508 <ProcessData+0x190>)
 8007410:	2200      	movs	r2, #0
 8007412:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8007414:	4b3c      	ldr	r3, [pc, #240]	; (8007508 <ProcessData+0x190>)
 8007416:	2200      	movs	r2, #0
 8007418:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <ProcessData+0x190>)
 800741c:	2200      	movs	r2, #0
 800741e:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8007420:	4b39      	ldr	r3, [pc, #228]	; (8007508 <ProcessData+0x190>)
 8007422:	220c      	movs	r2, #12
 8007424:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007426:	4b38      	ldr	r3, [pc, #224]	; (8007508 <ProcessData+0x190>)
 8007428:	2200      	movs	r2, #0
 800742a:	619a      	str	r2, [r3, #24]
      //huart2.Init.OverSampling = UART_OVERSAMPLING_16;
      HAL_HalfDuplex_Init(&huart2);
 800742c:	4836      	ldr	r0, [pc, #216]	; (8007508 <ProcessData+0x190>)
 800742e:	f7fd fc40 	bl	8004cb2 <HAL_HalfDuplex_Init>
      ow_state&=~OW_STATE_RESET2;
 8007432:	4b34      	ldr	r3, [pc, #208]	; (8007504 <ProcessData+0x18c>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	f023 0302 	bic.w	r3, r3, #2
 800743a:	b2da      	uxtb	r2, r3
 800743c:	4b31      	ldr	r3, [pc, #196]	; (8007504 <ProcessData+0x18c>)
 800743e:	701a      	strb	r2, [r3, #0]
      if(ow_buf[0]==0xf0){
 8007440:	4b33      	ldr	r3, [pc, #204]	; (8007510 <ProcessData+0x198>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2bf0      	cmp	r3, #240	; 0xf0
 8007446:	d10b      	bne.n	8007460 <ProcessData+0xe8>
    	  ow_state|=OW_STATE_ERR;
 8007448:	4b2e      	ldr	r3, [pc, #184]	; (8007504 <ProcessData+0x18c>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <ProcessData+0x18c>)
 8007454:	701a      	strb	r2, [r3, #0]
    	  ds18b20Compleate(data);
 8007456:	482f      	ldr	r0, [pc, #188]	; (8007514 <ProcessData+0x19c>)
 8007458:	f7ff f98a 	bl	8006770 <ds18b20Compleate>
    	  return 0;
 800745c:	2300      	movs	r3, #0
 800745e:	e04e      	b.n	80074fe <ProcessData+0x186>
      }
    }
    if(ow_state&OW_STATE_SEND){
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <ProcessData+0x18c>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d047      	beq.n	80074fc <ProcessData+0x184>
	  if (current_pos > 0) {
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <ProcessData+0x1a0>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <ProcessData+0x110>
		 data[current_pos-1] = OW_toByte(ow_buf);
 8007474:	4b28      	ldr	r3, [pc, #160]	; (8007518 <ProcessData+0x1a0>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	1e5c      	subs	r4, r3, #1
 800747a:	4825      	ldr	r0, [pc, #148]	; (8007510 <ProcessData+0x198>)
 800747c:	f7ff ff58 	bl	8007330 <OW_toByte>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	4b23      	ldr	r3, [pc, #140]	; (8007514 <ProcessData+0x19c>)
 8007486:	551a      	strb	r2, [r3, r4]

	  }
      if(current_pos<data_len){
 8007488:	4b23      	ldr	r3, [pc, #140]	; (8007518 <ProcessData+0x1a0>)
 800748a:	781a      	ldrb	r2, [r3, #0]
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <ProcessData+0x1a4>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d224      	bcs.n	80074de <ProcessData+0x166>
		OW_toBits(data[current_pos], ow_buf);
 8007494:	4b20      	ldr	r3, [pc, #128]	; (8007518 <ProcessData+0x1a0>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <ProcessData+0x19c>)
 800749c:	5c9b      	ldrb	r3, [r3, r2]
 800749e:	491c      	ldr	r1, [pc, #112]	; (8007510 <ProcessData+0x198>)
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff ff1f 	bl	80072e4 <OW_toBits>
		current_pos++;
 80074a6:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <ProcessData+0x1a0>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <ProcessData+0x1a0>)
 80074b0:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Receive_DMA(&huart2,ow_buf,8)!=HAL_OK){
 80074b2:	2208      	movs	r2, #8
 80074b4:	4916      	ldr	r1, [pc, #88]	; (8007510 <ProcessData+0x198>)
 80074b6:	4814      	ldr	r0, [pc, #80]	; (8007508 <ProcessData+0x190>)
 80074b8:	f7fd fdfc 	bl	80050b4 <HAL_UART_Receive_DMA>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <ProcessData+0x14e>
			return 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e01b      	b.n	80074fe <ProcessData+0x186>
		}
		if(HAL_UART_Transmit_DMA(&huart2,ow_buf,8)!=HAL_OK){
 80074c6:	2208      	movs	r2, #8
 80074c8:	4911      	ldr	r1, [pc, #68]	; (8007510 <ProcessData+0x198>)
 80074ca:	480f      	ldr	r0, [pc, #60]	; (8007508 <ProcessData+0x190>)
 80074cc:	f7fd fd86 	bl	8004fdc <HAL_UART_Transmit_DMA>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <ProcessData+0x162>
			return 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e011      	b.n	80074fe <ProcessData+0x186>
		}
	    return 1;
 80074da:	2301      	movs	r3, #1
 80074dc:	e00f      	b.n	80074fe <ProcessData+0x186>
	 }
      ow_state&=~OW_STATE_SEND;
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <ProcessData+0x18c>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f023 0304 	bic.w	r3, r3, #4
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <ProcessData+0x18c>)
 80074ea:	701a      	strb	r2, [r3, #0]
      ow_state=OW_STATE_COMPLEATE;
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <ProcessData+0x18c>)
 80074ee:	2208      	movs	r2, #8
 80074f0:	701a      	strb	r2, [r3, #0]
      ds18b20Compleate(data);
 80074f2:	4808      	ldr	r0, [pc, #32]	; (8007514 <ProcessData+0x19c>)
 80074f4:	f7ff f93c 	bl	8006770 <ds18b20Compleate>
      return 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e000      	b.n	80074fe <ProcessData+0x186>
    }

    return 0;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	bd98      	pop	{r3, r4, r7, pc}
 8007502:	bf00      	nop
 8007504:	200006bf 	.word	0x200006bf
 8007508:	20000874 	.word	0x20000874
 800750c:	40004400 	.word	0x40004400
 8007510:	200008b4 	.word	0x200008b4
 8007514:	20000218 	.word	0x20000218
 8007518:	20000229 	.word	0x20000229
 800751c:	20000228 	.word	0x20000228

08007520 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uarth){
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
		if (uarth->Instance == USART2){
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a07      	ldr	r2, [pc, #28]	; (800754c <HAL_UART_RxCpltCallback+0x2c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d107      	bne.n	8007542 <HAL_UART_RxCpltCallback+0x22>
		   if(uarth->gState!=HAL_UART_STATE_BUSY_TX)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b21      	cmp	r3, #33	; 0x21
 800753c:	d001      	beq.n	8007542 <HAL_UART_RxCpltCallback+0x22>
		     ProcessData();
 800753e:	f7ff ff1b 	bl	8007378 <ProcessData>
		}
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40004400 	.word	0x40004400

08007550 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *uarth){
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
		if (uarth->Instance == USART2){
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a07      	ldr	r2, [pc, #28]	; (800757c <HAL_UART_TxCpltCallback+0x2c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d107      	bne.n	8007572 <HAL_UART_TxCpltCallback+0x22>
			if(uarth->RxState!=HAL_UART_STATE_BUSY_RX)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b22      	cmp	r3, #34	; 0x22
 800756c:	d001      	beq.n	8007572 <HAL_UART_TxCpltCallback+0x22>
		      ProcessData();
 800756e:	f7ff ff03 	bl	8007378 <ProcessData>
		}
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40004400 	.word	0x40004400

08007580 <OW_Init>:

uint8_t OW_Init(void) {
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
	ow_state=OW_STATE_NULL;
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <OW_Init+0x14>)
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
	return OW_OK;
 800758a:	2301      	movs	r3, #1
}
 800758c:	4618      	mov	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr
 8007594:	200006bf 	.word	0x200006bf

08007598 <OW_Send>:



uint8_t OW_Send(uint8_t sendReset, uint8_t *command, uint8_t cLen/*,
		uint8_t *_data, uint8_t dLen, uint8_t readStart*/)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
 80075a4:	4613      	mov	r3, r2
 80075a6:	71bb      	strb	r3, [r7, #6]


    memcpy(data,command,cLen);
 80075a8:	79bb      	ldrb	r3, [r7, #6]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	4810      	ldr	r0, [pc, #64]	; (80075f0 <OW_Send+0x58>)
 80075b0:	f000 ff12 	bl	80083d8 <memcpy>
    data_len=cLen;
 80075b4:	4a0f      	ldr	r2, [pc, #60]	; (80075f4 <OW_Send+0x5c>)
 80075b6:	79bb      	ldrb	r3, [r7, #6]
 80075b8:	7013      	strb	r3, [r2, #0]
    current_pos=0;
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <OW_Send+0x60>)
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
    ow_state|=OW_STATE_SEND;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <OW_Send+0x64>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f043 0304 	orr.w	r3, r3, #4
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <OW_Send+0x64>)
 80075cc:	701a      	strb	r2, [r3, #0]
    if (sendReset == OW_SEND_RESET) {
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d106      	bne.n	80075e2 <OW_Send+0x4a>
    		ow_state|=OW_STATE_RESET1;
 80075d4:	4b09      	ldr	r3, [pc, #36]	; (80075fc <OW_Send+0x64>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <OW_Send+0x64>)
 80075e0:	701a      	strb	r2, [r3, #0]
    }
    ProcessData();
 80075e2:	f7ff fec9 	bl	8007378 <ProcessData>



}
 80075e6:	bf00      	nop
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000218 	.word	0x20000218
 80075f4:	20000228 	.word	0x20000228
 80075f8:	20000229 	.word	0x20000229
 80075fc:	200006bf 	.word	0x200006bf

08007600 <OW_SendBits>:

uint8_t OW_SendBits(uint8_t data) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
	uint8_t d=data?0xff:0;
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <OW_SendBits+0x14>
 8007610:	23ff      	movs	r3, #255	; 0xff
 8007612:	e000      	b.n	8007616 <OW_SendBits+0x16>
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,&d,1,100);
 8007618:	f107 010f 	add.w	r1, r7, #15
 800761c:	2364      	movs	r3, #100	; 0x64
 800761e:	2201      	movs	r2, #1
 8007620:	4807      	ldr	r0, [pc, #28]	; (8007640 <OW_SendBits+0x40>)
 8007622:	f7fd fb9b 	bl	8004d5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2,&d,1,100);
 8007626:	f107 010f 	add.w	r1, r7, #15
 800762a:	2364      	movs	r3, #100	; 0x64
 800762c:	2201      	movs	r2, #1
 800762e:	4804      	ldr	r0, [pc, #16]	; (8007640 <OW_SendBits+0x40>)
 8007630:	f7fd fc2d 	bl	8004e8e <HAL_UART_Receive>
    return d;
 8007634:	7bfb      	ldrb	r3, [r7, #15]


}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000874 	.word	0x20000874

08007644 <OW_ReadBit>:

uint8_t OW_ReadBit(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0


    if(OW_SendBits(1) == 0xff) {
 8007648:	2001      	movs	r0, #1
 800764a:	f7ff ffd9 	bl	8007600 <OW_SendBits>
 800764e:	4603      	mov	r3, r0
 8007650:	2bff      	cmp	r3, #255	; 0xff
 8007652:	d101      	bne.n	8007658 <OW_ReadBit+0x14>
        return 1;
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <OW_ReadBit+0x16>
    }
    else {
        return 0;
 8007658:	2300      	movs	r3, #0
    }
}
 800765a:	4618      	mov	r0, r3
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <OW_Search1>:
    OW_Send(OW_SEND_RESET, &cmd, sizeof(cmd));
    OW_Send(OW_NO_RESET, romValue, 8);
}

void OW_Search1(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0



        uint8_t cmd = OW_CMD_SEARCH;
 8007666:	23f0      	movs	r3, #240	; 0xf0
 8007668:	71fb      	strb	r3, [r7, #7]
        ow_state|=OW_STATE_SEARCH;
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <OW_Search1+0x2c>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f043 0310 	orr.w	r3, r3, #16
 8007672:	b2da      	uxtb	r2, r3
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <OW_Search1+0x2c>)
 8007676:	701a      	strb	r2, [r3, #0]
        OW_Send(OW_SEND_RESET, &cmd, sizeof(cmd));
 8007678:	1dfb      	adds	r3, r7, #7
 800767a:	2201      	movs	r2, #1
 800767c:	4619      	mov	r1, r3
 800767e:	2001      	movs	r0, #1
 8007680:	f7ff ff8a 	bl	8007598 <OW_Send>


}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200006bf 	.word	0x200006bf

08007690 <OW_Search2>:
uint8_t OW_Search2(owdevice_t *owdevices)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

	uint8_t id_bit_number = 1;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
	uint8_t last_zero = 0, rom_byte_number = 0, search_result = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	75bb      	strb	r3, [r7, #22]
 80076a0:	2300      	movs	r3, #0
 80076a2:	757b      	strb	r3, [r7, #21]
 80076a4:	2300      	movs	r3, #0
 80076a6:	753b      	strb	r3, [r7, #20]
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask = 1, search_direction;
 80076a8:	2301      	movs	r3, #1
 80076aa:	74fb      	strb	r3, [r7, #19]
    uint8_t cmd;
    if(LastDeviceFlag)
 80076ac:	4b5b      	ldr	r3, [pc, #364]	; (800781c <OW_Search2+0x18c>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <OW_Search2+0x28>
    	return 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e0ac      	b.n	8007812 <OW_Search2+0x182>

		while(hdma_usart2_rx.State==HAL_DMA_STATE_BUSY);
 80076b8:	bf00      	nop
 80076ba:	4b59      	ldr	r3, [pc, #356]	; (8007820 <OW_Search2+0x190>)
 80076bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d0fa      	beq.n	80076ba <OW_Search2+0x2a>
		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OW_ReadBit();
 80076c4:	f7ff ffbe 	bl	8007644 <OW_ReadBit>
 80076c8:	4603      	mov	r3, r0
 80076ca:	72fb      	strb	r3, [r7, #11]
			cmp_id_bit = OW_ReadBit();
 80076cc:	f7ff ffba 	bl	8007644 <OW_ReadBit>
 80076d0:	4603      	mov	r3, r0
 80076d2:	72bb      	strb	r3, [r7, #10]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d102      	bne.n	80076e0 <OW_Search2+0x50>
 80076da:	7abb      	ldrb	r3, [r7, #10]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d056      	beq.n	800778e <OW_Search2+0xfe>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80076e0:	7afa      	ldrb	r2, [r7, #11]
 80076e2:	7abb      	ldrb	r3, [r7, #10]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d002      	beq.n	80076ee <OW_Search2+0x5e>
					search_direction = id_bit;  // bit write value for search
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	74bb      	strb	r3, [r7, #18]
 80076ec:	e01f      	b.n	800772e <OW_Search2+0x9e>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < LastDiscrepancy) {
 80076ee:	4b4d      	ldr	r3, [pc, #308]	; (8007824 <OW_Search2+0x194>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	7dfa      	ldrb	r2, [r7, #23]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d20c      	bcs.n	8007712 <OW_Search2+0x82>
						search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80076f8:	7d7b      	ldrb	r3, [r7, #21]
 80076fa:	4a4b      	ldr	r2, [pc, #300]	; (8007828 <OW_Search2+0x198>)
 80076fc:	5cd2      	ldrb	r2, [r2, r3]
 80076fe:	7cfb      	ldrb	r3, [r7, #19]
 8007700:	4013      	ands	r3, r2
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	74bb      	strb	r3, [r7, #18]
 8007710:	e008      	b.n	8007724 <OW_Search2+0x94>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == LastDiscrepancy);
 8007712:	4b44      	ldr	r3, [pc, #272]	; (8007824 <OW_Search2+0x194>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	7dfa      	ldrb	r2, [r7, #23]
 8007718:	429a      	cmp	r2, r3
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	74bb      	strb	r3, [r7, #18]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8007724:	7cbb      	ldrb	r3, [r7, #18]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <OW_Search2+0x9e>
						last_zero = id_bit_number;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800772e:	7cbb      	ldrb	r3, [r7, #18]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d109      	bne.n	8007748 <OW_Search2+0xb8>
					ROM_NO[rom_byte_number] |= rom_byte_mask;
 8007734:	7d7b      	ldrb	r3, [r7, #21]
 8007736:	4a3c      	ldr	r2, [pc, #240]	; (8007828 <OW_Search2+0x198>)
 8007738:	5cd1      	ldrb	r1, [r2, r3]
 800773a:	7d7b      	ldrb	r3, [r7, #21]
 800773c:	7cfa      	ldrb	r2, [r7, #19]
 800773e:	430a      	orrs	r2, r1
 8007740:	b2d1      	uxtb	r1, r2
 8007742:	4a39      	ldr	r2, [pc, #228]	; (8007828 <OW_Search2+0x198>)
 8007744:	54d1      	strb	r1, [r2, r3]
 8007746:	e00d      	b.n	8007764 <OW_Search2+0xd4>
				} else {
					ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8007748:	7d7b      	ldrb	r3, [r7, #21]
 800774a:	4a37      	ldr	r2, [pc, #220]	; (8007828 <OW_Search2+0x198>)
 800774c:	5cd3      	ldrb	r3, [r2, r3]
 800774e:	b25a      	sxtb	r2, r3
 8007750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007754:	43db      	mvns	r3, r3
 8007756:	b25b      	sxtb	r3, r3
 8007758:	4013      	ands	r3, r2
 800775a:	b25a      	sxtb	r2, r3
 800775c:	7d7b      	ldrb	r3, [r7, #21]
 800775e:	b2d1      	uxtb	r1, r2
 8007760:	4a31      	ldr	r2, [pc, #196]	; (8007828 <OW_Search2+0x198>)
 8007762:	54d1      	strb	r1, [r2, r3]
				}

				// serial number search direction write bit
                //OW_toBits(search_direction, ow_buf);
                OW_SendBits(search_direction);
 8007764:	7cbb      	ldrb	r3, [r7, #18]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff ff4a 	bl	8007600 <OW_SendBits>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	3301      	adds	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
				rom_byte_mask <<= 1;
 8007772:	7cfb      	ldrb	r3, [r7, #19]
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	74fb      	strb	r3, [r7, #19]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8007778:	7cfb      	ldrb	r3, [r7, #19]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <OW_Search2+0xf8>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800777e:	7d7b      	ldrb	r3, [r7, #21]
 8007780:	3301      	adds	r3, #1
 8007782:	757b      	strb	r3, [r7, #21]
					rom_byte_mask = 1;
 8007784:	2301      	movs	r3, #1
 8007786:	74fb      	strb	r3, [r7, #19]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8007788:	7d7b      	ldrb	r3, [r7, #21]
 800778a:	2b07      	cmp	r3, #7
 800778c:	d99a      	bls.n	80076c4 <OW_Search2+0x34>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d92f      	bls.n	80077f4 <OW_Search2+0x164>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			LastDiscrepancy = last_zero;
 8007794:	4a23      	ldr	r2, [pc, #140]	; (8007824 <OW_Search2+0x194>)
 8007796:	7dbb      	ldrb	r3, [r7, #22]
 8007798:	7013      	strb	r3, [r2, #0]

			// check for last device
			if (LastDiscrepancy == 0) {
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <OW_Search2+0x194>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <OW_Search2+0x118>
				LastDeviceFlag = 1;
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <OW_Search2+0x18c>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
			}

			search_result = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	753b      	strb	r3, [r7, #20]
            owdevices[DeviceID].id = DeviceID;
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <OW_Search2+0x19c>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	4a1d      	ldr	r2, [pc, #116]	; (800782c <OW_Search2+0x19c>)
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	721a      	strb	r2, [r3, #8]
            for (int i = 0; i < 8; i++) owdevices[DeviceID].rom_code[i] = ROM_NO[i];
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e00f      	b.n	80077e2 <OW_Search2+0x152>
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <OW_Search2+0x19c>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	441a      	add	r2, r3
 80077cc:	4916      	ldr	r1, [pc, #88]	; (8007828 <OW_Search2+0x198>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	440b      	add	r3, r1
 80077d2:	7819      	ldrb	r1, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	460a      	mov	r2, r1
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	ddec      	ble.n	80077c2 <OW_Search2+0x132>
            DeviceID++;
 80077e8:	4b10      	ldr	r3, [pc, #64]	; (800782c <OW_Search2+0x19c>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	3301      	adds	r3, #1
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	4b0e      	ldr	r3, [pc, #56]	; (800782c <OW_Search2+0x19c>)
 80077f2:	701a      	strb	r2, [r3, #0]
		}


	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result) {
 80077f4:	7d3b      	ldrb	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <OW_Search2+0x180>
		LastDiscrepancy = 0;
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <OW_Search2+0x194>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <OW_Search2+0x18c>)
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	753b      	strb	r3, [r7, #20]
        DeviceID = 0;
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <OW_Search2+0x19c>)
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
	}

	return search_result;
 8007810:	7d3b      	ldrb	r3, [r7, #20]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	200006bc 	.word	0x200006bc
 8007820:	200006c0 	.word	0x200006c0
 8007824:	200006be 	.word	0x200006be
 8007828:	20000210 	.word	0x20000210
 800782c:	200006bd 	.word	0x200006bd

08007830 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8007836:	f000 fa1f 	bl	8007c78 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800783a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800783e:	2201      	movs	r2, #1
 8007840:	2178      	movs	r1, #120	; 0x78
 8007842:	485b      	ldr	r0, [pc, #364]	; (80079b0 <SSD1306_Init+0x180>)
 8007844:	f7fb f85e 	bl	8002904 <HAL_I2C_IsDeviceReady>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800784e:	2300      	movs	r3, #0
 8007850:	e0a9      	b.n	80079a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8007852:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007856:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007858:	e002      	b.n	8007860 <SSD1306_Init+0x30>
		p--;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f9      	bne.n	800785a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8007866:	22ae      	movs	r2, #174	; 0xae
 8007868:	2100      	movs	r1, #0
 800786a:	2078      	movs	r0, #120	; 0x78
 800786c:	f000 fa60 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8007870:	2220      	movs	r2, #32
 8007872:	2100      	movs	r1, #0
 8007874:	2078      	movs	r0, #120	; 0x78
 8007876:	f000 fa5b 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800787a:	2210      	movs	r2, #16
 800787c:	2100      	movs	r1, #0
 800787e:	2078      	movs	r0, #120	; 0x78
 8007880:	f000 fa56 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007884:	22b0      	movs	r2, #176	; 0xb0
 8007886:	2100      	movs	r1, #0
 8007888:	2078      	movs	r0, #120	; 0x78
 800788a:	f000 fa51 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800788e:	22c8      	movs	r2, #200	; 0xc8
 8007890:	2100      	movs	r1, #0
 8007892:	2078      	movs	r0, #120	; 0x78
 8007894:	f000 fa4c 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8007898:	2200      	movs	r2, #0
 800789a:	2100      	movs	r1, #0
 800789c:	2078      	movs	r0, #120	; 0x78
 800789e:	f000 fa47 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80078a2:	2210      	movs	r2, #16
 80078a4:	2100      	movs	r1, #0
 80078a6:	2078      	movs	r0, #120	; 0x78
 80078a8:	f000 fa42 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80078ac:	2240      	movs	r2, #64	; 0x40
 80078ae:	2100      	movs	r1, #0
 80078b0:	2078      	movs	r0, #120	; 0x78
 80078b2:	f000 fa3d 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80078b6:	2281      	movs	r2, #129	; 0x81
 80078b8:	2100      	movs	r1, #0
 80078ba:	2078      	movs	r0, #120	; 0x78
 80078bc:	f000 fa38 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	2100      	movs	r1, #0
 80078c4:	2078      	movs	r0, #120	; 0x78
 80078c6:	f000 fa33 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80078ca:	22a1      	movs	r2, #161	; 0xa1
 80078cc:	2100      	movs	r1, #0
 80078ce:	2078      	movs	r0, #120	; 0x78
 80078d0:	f000 fa2e 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80078d4:	22a6      	movs	r2, #166	; 0xa6
 80078d6:	2100      	movs	r1, #0
 80078d8:	2078      	movs	r0, #120	; 0x78
 80078da:	f000 fa29 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80078de:	22a8      	movs	r2, #168	; 0xa8
 80078e0:	2100      	movs	r1, #0
 80078e2:	2078      	movs	r0, #120	; 0x78
 80078e4:	f000 fa24 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80078e8:	223f      	movs	r2, #63	; 0x3f
 80078ea:	2100      	movs	r1, #0
 80078ec:	2078      	movs	r0, #120	; 0x78
 80078ee:	f000 fa1f 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80078f2:	22a4      	movs	r2, #164	; 0xa4
 80078f4:	2100      	movs	r1, #0
 80078f6:	2078      	movs	r0, #120	; 0x78
 80078f8:	f000 fa1a 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80078fc:	22d3      	movs	r2, #211	; 0xd3
 80078fe:	2100      	movs	r1, #0
 8007900:	2078      	movs	r0, #120	; 0x78
 8007902:	f000 fa15 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	2078      	movs	r0, #120	; 0x78
 800790c:	f000 fa10 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8007910:	22d5      	movs	r2, #213	; 0xd5
 8007912:	2100      	movs	r1, #0
 8007914:	2078      	movs	r0, #120	; 0x78
 8007916:	f000 fa0b 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800791a:	22f0      	movs	r2, #240	; 0xf0
 800791c:	2100      	movs	r1, #0
 800791e:	2078      	movs	r0, #120	; 0x78
 8007920:	f000 fa06 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8007924:	22d9      	movs	r2, #217	; 0xd9
 8007926:	2100      	movs	r1, #0
 8007928:	2078      	movs	r0, #120	; 0x78
 800792a:	f000 fa01 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800792e:	2222      	movs	r2, #34	; 0x22
 8007930:	2100      	movs	r1, #0
 8007932:	2078      	movs	r0, #120	; 0x78
 8007934:	f000 f9fc 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8007938:	22da      	movs	r2, #218	; 0xda
 800793a:	2100      	movs	r1, #0
 800793c:	2078      	movs	r0, #120	; 0x78
 800793e:	f000 f9f7 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8007942:	2212      	movs	r2, #18
 8007944:	2100      	movs	r1, #0
 8007946:	2078      	movs	r0, #120	; 0x78
 8007948:	f000 f9f2 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800794c:	22db      	movs	r2, #219	; 0xdb
 800794e:	2100      	movs	r1, #0
 8007950:	2078      	movs	r0, #120	; 0x78
 8007952:	f000 f9ed 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8007956:	2220      	movs	r2, #32
 8007958:	2100      	movs	r1, #0
 800795a:	2078      	movs	r0, #120	; 0x78
 800795c:	f000 f9e8 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8007960:	228d      	movs	r2, #141	; 0x8d
 8007962:	2100      	movs	r1, #0
 8007964:	2078      	movs	r0, #120	; 0x78
 8007966:	f000 f9e3 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800796a:	2214      	movs	r2, #20
 800796c:	2100      	movs	r1, #0
 800796e:	2078      	movs	r0, #120	; 0x78
 8007970:	f000 f9de 	bl	8007d30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8007974:	22af      	movs	r2, #175	; 0xaf
 8007976:	2100      	movs	r1, #0
 8007978:	2078      	movs	r0, #120	; 0x78
 800797a:	f000 f9d9 	bl	8007d30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800797e:	222e      	movs	r2, #46	; 0x2e
 8007980:	2100      	movs	r1, #0
 8007982:	2078      	movs	r0, #120	; 0x78
 8007984:	f000 f9d4 	bl	8007d30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8007988:	2000      	movs	r0, #0
 800798a:	f000 f843 	bl	8007a14 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800798e:	f000 f813 	bl	80079b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <SSD1306_Init+0x184>)
 8007994:	2200      	movs	r2, #0
 8007996:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <SSD1306_Init+0x184>)
 800799a:	2200      	movs	r2, #0
 800799c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <SSD1306_Init+0x184>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80079a4:	2301      	movs	r3, #1
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	2000079c 	.word	0x2000079c
 80079b4:	2000062c 	.word	0x2000062c

080079b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80079be:	2300      	movs	r3, #0
 80079c0:	71fb      	strb	r3, [r7, #7]
 80079c2:	e01d      	b.n	8007a00 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	3b50      	subs	r3, #80	; 0x50
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	2100      	movs	r1, #0
 80079ce:	2078      	movs	r0, #120	; 0x78
 80079d0:	f000 f9ae 	bl	8007d30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	2078      	movs	r0, #120	; 0x78
 80079da:	f000 f9a9 	bl	8007d30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80079de:	2210      	movs	r2, #16
 80079e0:	2100      	movs	r1, #0
 80079e2:	2078      	movs	r0, #120	; 0x78
 80079e4:	f000 f9a4 	bl	8007d30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	01db      	lsls	r3, r3, #7
 80079ec:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <SSD1306_UpdateScreen+0x58>)
 80079ee:	441a      	add	r2, r3
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	2140      	movs	r1, #64	; 0x40
 80079f4:	2078      	movs	r0, #120	; 0x78
 80079f6:	f000 f953 	bl	8007ca0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	3301      	adds	r3, #1
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b07      	cmp	r3, #7
 8007a04:	d9de      	bls.n	80079c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	2000022c 	.word	0x2000022c

08007a14 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <SSD1306_Fill+0x14>
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <SSD1306_Fill+0x16>
 8007a28:	23ff      	movs	r3, #255	; 0xff
 8007a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4803      	ldr	r0, [pc, #12]	; (8007a40 <SSD1306_Fill+0x2c>)
 8007a32:	f000 fcdc 	bl	80083ee <memset>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	2000022c 	.word	0x2000022c

08007a44 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	80fb      	strh	r3, [r7, #6]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	80bb      	strh	r3, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	70fb      	strb	r3, [r7, #3]
	if (
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5a:	d848      	bhi.n	8007aee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8007a5c:	88bb      	ldrh	r3, [r7, #4]
 8007a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a60:	d845      	bhi.n	8007aee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8007a62:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <SSD1306_DrawPixel+0xb4>)
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d11a      	bne.n	8007ab4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	88bb      	ldrh	r3, [r7, #4]
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	b298      	uxth	r0, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	01db      	lsls	r3, r3, #7
 8007a8a:	4413      	add	r3, r2
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <SSD1306_DrawPixel+0xb8>)
 8007a8e:	5cd3      	ldrb	r3, [r2, r3]
 8007a90:	b25a      	sxtb	r2, r3
 8007a92:	88bb      	ldrh	r3, [r7, #4]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	2101      	movs	r1, #1
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b259      	sxtb	r1, r3
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	4413      	add	r3, r2
 8007aac:	b2c9      	uxtb	r1, r1
 8007aae:	4a13      	ldr	r2, [pc, #76]	; (8007afc <SSD1306_DrawPixel+0xb8>)
 8007ab0:	54d1      	strb	r1, [r2, r3]
 8007ab2:	e01d      	b.n	8007af0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	88bb      	ldrh	r3, [r7, #4]
 8007ab8:	08db      	lsrs	r3, r3, #3
 8007aba:	b298      	uxth	r0, r3
 8007abc:	4603      	mov	r3, r0
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4a0e      	ldr	r2, [pc, #56]	; (8007afc <SSD1306_DrawPixel+0xb8>)
 8007ac4:	5cd3      	ldrb	r3, [r2, r3]
 8007ac6:	b25a      	sxtb	r2, r3
 8007ac8:	88bb      	ldrh	r3, [r7, #4]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2101      	movs	r1, #1
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	4013      	ands	r3, r2
 8007adc:	b259      	sxtb	r1, r3
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	4413      	add	r3, r2
 8007ae6:	b2c9      	uxtb	r1, r1
 8007ae8:	4a04      	ldr	r2, [pc, #16]	; (8007afc <SSD1306_DrawPixel+0xb8>)
 8007aea:	54d1      	strb	r1, [r2, r3]
 8007aec:	e000      	b.n	8007af0 <SSD1306_DrawPixel+0xac>
		return;
 8007aee:	bf00      	nop
	}
}
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	2000062c 	.word	0x2000062c
 8007afc:	2000022c 	.word	0x2000022c

08007b00 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	460a      	mov	r2, r1
 8007b0a:	80fb      	strh	r3, [r7, #6]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8007b10:	4a05      	ldr	r2, [pc, #20]	; (8007b28 <SSD1306_GotoXY+0x28>)
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8007b16:	4a04      	ldr	r2, [pc, #16]	; (8007b28 <SSD1306_GotoXY+0x28>)
 8007b18:	88bb      	ldrh	r3, [r7, #4]
 8007b1a:	8053      	strh	r3, [r2, #2]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	2000062c 	.word	0x2000062c

08007b2c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007b3c:	4b3a      	ldr	r3, [pc, #232]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	4413      	add	r3, r2
	if (
 8007b48:	2b7f      	cmp	r3, #127	; 0x7f
 8007b4a:	dc07      	bgt.n	8007b5c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8007b4c:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	461a      	mov	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007b58:	2b3f      	cmp	r3, #63	; 0x3f
 8007b5a:	dd01      	ble.n	8007b60 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e05e      	b.n	8007c1e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e04b      	b.n	8007bfe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	3b20      	subs	r3, #32
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	7849      	ldrb	r1, [r1, #1]
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	440b      	add	r3, r1
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8007b84:	2300      	movs	r3, #0
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	e030      	b.n	8007bec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d010      	beq.n	8007bbc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8007b9a:	4b23      	ldr	r3, [pc, #140]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007b9c:	881a      	ldrh	r2, [r3, #0]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	b298      	uxth	r0, r3
 8007ba6:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007ba8:	885a      	ldrh	r2, [r3, #2]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4413      	add	r3, r2
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	79ba      	ldrb	r2, [r7, #6]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f7ff ff45 	bl	8007a44 <SSD1306_DrawPixel>
 8007bba:	e014      	b.n	8007be6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007bbe:	881a      	ldrh	r2, [r3, #0]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b298      	uxth	r0, r3
 8007bc8:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007bca:	885a      	ldrh	r2, [r3, #2]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	b299      	uxth	r1, r3
 8007bd4:	79bb      	ldrb	r3, [r7, #6]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bf0c      	ite	eq
 8007bda:	2301      	moveq	r3, #1
 8007bdc:	2300      	movne	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	f7ff ff2f 	bl	8007a44 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d3c8      	bcc.n	8007b8a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	461a      	mov	r2, r3
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d3ad      	bcc.n	8007b66 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007c0c:	881a      	ldrh	r2, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	4b03      	ldr	r3, [pc, #12]	; (8007c28 <SSD1306_Putc+0xfc>)
 8007c1a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	2000062c 	.word	0x2000062c

08007c2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8007c3a:	e012      	b.n	8007c62 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	79fa      	ldrb	r2, [r7, #7]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff ff71 	bl	8007b2c <SSD1306_Putc>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d002      	beq.n	8007c5c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	e008      	b.n	8007c6e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e8      	bne.n	8007c3c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <ssd1306_I2C_Init+0x24>)
 8007c80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007c82:	e002      	b.n	8007c8a <ssd1306_I2C_Init+0x12>
		p--;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f9      	bne.n	8007c84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	0003d090 	.word	0x0003d090

08007ca0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b0c7      	sub	sp, #284	; 0x11c
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4639      	mov	r1, r7
 8007cac:	600a      	str	r2, [r1, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	1dfb      	adds	r3, r7, #7
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	1dbb      	adds	r3, r7, #6
 8007cb8:	4602      	mov	r2, r0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	1d3b      	adds	r3, r7, #4
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	1dba      	adds	r2, r7, #6
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007cd2:	e010      	b.n	8007cf6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8007cd4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007cd8:	463a      	mov	r2, r7
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	441a      	add	r2, r3
 8007cde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	7811      	ldrb	r1, [r2, #0]
 8007ce6:	f107 020c 	add.w	r2, r7, #12
 8007cea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8007cec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007cf6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	1d3a      	adds	r2, r7, #4
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d8e7      	bhi.n	8007cd4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8007d04:	1dfb      	adds	r3, r7, #7
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b299      	uxth	r1, r3
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b298      	uxth	r0, r3
 8007d12:	f107 020c 	add.w	r2, r7, #12
 8007d16:	230a      	movs	r3, #10
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4803      	ldr	r0, [pc, #12]	; (8007d2c <ssd1306_I2C_WriteMulti+0x8c>)
 8007d1e:	f7fa f9c3 	bl	80020a8 <HAL_I2C_Master_Transmit>
}
 8007d22:	bf00      	nop
 8007d24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}
 8007d2c:	2000079c 	.word	0x2000079c

08007d30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	71bb      	strb	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8007d42:	79bb      	ldrb	r3, [r7, #6]
 8007d44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8007d46:	797b      	ldrb	r3, [r7, #5]
 8007d48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	b299      	uxth	r1, r3
 8007d4e:	f107 020c 	add.w	r2, r7, #12
 8007d52:	230a      	movs	r3, #10
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2302      	movs	r3, #2
 8007d58:	4803      	ldr	r0, [pc, #12]	; (8007d68 <ssd1306_I2C_Write+0x38>)
 8007d5a:	f7fa f9a5 	bl	80020a8 <HAL_I2C_Master_Transmit>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	2000079c 	.word	0x2000079c

08007d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007d72:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	6193      	str	r3, [r2, #24]
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	4a0e      	ldr	r2, [pc, #56]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d94:	61d3      	str	r3, [r2, #28]
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <HAL_MspInit+0x5c>)
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d9e:	607b      	str	r3, [r7, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_MspInit+0x60>)
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <HAL_MspInit+0x60>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	40010000 	.word	0x40010000

08007dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <HAL_I2C_MspInit+0x70>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d123      	bne.n	8007e38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007df0:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007df6:	f043 0308 	orr.w	r3, r3, #8
 8007dfa:	6193      	str	r3, [r2, #24]
 8007dfc:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e08:	23c0      	movs	r3, #192	; 0xc0
 8007e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e0c:	2312      	movs	r3, #18
 8007e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e10:	2303      	movs	r3, #3
 8007e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e14:	f107 0310 	add.w	r3, r7, #16
 8007e18:	4619      	mov	r1, r3
 8007e1a:	480b      	ldr	r0, [pc, #44]	; (8007e48 <HAL_I2C_MspInit+0x78>)
 8007e1c:	f7f9 fe92 	bl	8001b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e20:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4a07      	ldr	r2, [pc, #28]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e2a:	61d3      	str	r3, [r2, #28]
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_I2C_MspInit+0x74>)
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e34:	60bb      	str	r3, [r7, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007e38:	bf00      	nop
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40005400 	.word	0x40005400
 8007e44:	40021000 	.word	0x40021000
 8007e48:	40010c00 	.word	0x40010c00

08007e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a16      	ldr	r2, [pc, #88]	; (8007ec0 <HAL_SPI_MspInit+0x74>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d124      	bne.n	8007eb6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007e6c:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e76:	61d3      	str	r3, [r2, #28]
 8007e78:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e84:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	4a0e      	ldr	r2, [pc, #56]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e8a:	f043 0308 	orr.w	r3, r3, #8
 8007e8e:	6193      	str	r3, [r2, #24]
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <HAL_SPI_MspInit+0x78>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007e9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eaa:	f107 0310 	add.w	r3, r7, #16
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4805      	ldr	r0, [pc, #20]	; (8007ec8 <HAL_SPI_MspInit+0x7c>)
 8007eb2:	f7f9 fe47 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007eb6:	bf00      	nop
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40003800 	.word	0x40003800
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	40010c00 	.word	0x40010c00

08007ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a1a      	ldr	r2, [pc, #104]	; (8007f44 <HAL_TIM_Base_MspInit+0x78>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d114      	bne.n	8007f08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ee8:	6193      	str	r3, [r2, #24]
 8007eea:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	2019      	movs	r0, #25
 8007efc:	f7f9 fb87 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007f00:	2019      	movs	r0, #25
 8007f02:	f7f9 fba0 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007f06:	e018      	b.n	8007f3a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <HAL_TIM_Base_MspInit+0x80>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d113      	bne.n	8007f3a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007f12:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4a0c      	ldr	r2, [pc, #48]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007f18:	f043 0304 	orr.w	r3, r3, #4
 8007f1c:	61d3      	str	r3, [r2, #28]
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <HAL_TIM_Base_MspInit+0x7c>)
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	201e      	movs	r0, #30
 8007f30:	f7f9 fb6d 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007f34:	201e      	movs	r0, #30
 8007f36:	f7f9 fb86 	bl	8001646 <HAL_NVIC_EnableIRQ>
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	40000800 	.word	0x40000800

08007f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f58:	f107 0310 	add.w	r3, r7, #16
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	609a      	str	r2, [r3, #8]
 8007f64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a10      	ldr	r2, [pc, #64]	; (8007fac <HAL_TIM_MspPostInit+0x5c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d118      	bne.n	8007fa2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <HAL_TIM_MspPostInit+0x60>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <HAL_TIM_MspPostInit+0x60>)
 8007f76:	f043 0304 	orr.w	r3, r3, #4
 8007f7a:	6193      	str	r3, [r2, #24]
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <HAL_TIM_MspPostInit+0x60>)
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f92:	2302      	movs	r3, #2
 8007f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f96:	f107 0310 	add.w	r3, r7, #16
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <HAL_TIM_MspPostInit+0x64>)
 8007f9e:	f7f9 fdd1 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007fa2:	bf00      	nop
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	40010800 	.word	0x40010800

08007fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fc0:	f107 0310 	add.w	r3, r7, #16
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	609a      	str	r2, [r3, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a3f      	ldr	r2, [pc, #252]	; (80080d0 <HAL_UART_MspInit+0x118>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d177      	bne.n	80080c8 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007fd8:	4b3e      	ldr	r3, [pc, #248]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4a3d      	ldr	r2, [pc, #244]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe2:	61d3      	str	r3, [r2, #28]
 8007fe4:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff0:	4b38      	ldr	r3, [pc, #224]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	4a37      	ldr	r2, [pc, #220]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007ff6:	f043 0304 	orr.w	r3, r3, #4
 8007ffa:	6193      	str	r3, [r2, #24]
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <HAL_UART_MspInit+0x11c>)
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	60bb      	str	r3, [r7, #8]
 8008006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008008:	2304      	movs	r3, #4
 800800a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800800c:	2312      	movs	r3, #18
 800800e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008010:	2303      	movs	r3, #3
 8008012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008014:	f107 0310 	add.w	r3, r7, #16
 8008018:	4619      	mov	r1, r3
 800801a:	482f      	ldr	r0, [pc, #188]	; (80080d8 <HAL_UART_MspInit+0x120>)
 800801c:	f7f9 fd92 	bl	8001b44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008020:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008022:	4a2f      	ldr	r2, [pc, #188]	; (80080e0 <HAL_UART_MspInit+0x128>)
 8008024:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008026:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008028:	2210      	movs	r2, #16
 800802a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800802c:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <HAL_UART_MspInit+0x124>)
 800802e:	2200      	movs	r2, #0
 8008030:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008032:	4b2a      	ldr	r3, [pc, #168]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008038:	4b28      	ldr	r3, [pc, #160]	; (80080dc <HAL_UART_MspInit+0x124>)
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008040:	2200      	movs	r2, #0
 8008042:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008044:	4b25      	ldr	r3, [pc, #148]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800804a:	4b24      	ldr	r3, [pc, #144]	; (80080dc <HAL_UART_MspInit+0x124>)
 800804c:	2200      	movs	r2, #0
 800804e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008050:	4822      	ldr	r0, [pc, #136]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008052:	f7f9 fb13 	bl	800167c <HAL_DMA_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 800805c:	f7ff f93c 	bl	80072d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008064:	631a      	str	r2, [r3, #48]	; 0x30
 8008066:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <HAL_UART_MspInit+0x124>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800806c:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <HAL_UART_MspInit+0x130>)
 8008070:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 8008074:	2200      	movs	r2, #0
 8008076:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 800807a:	2200      	movs	r2, #0
 800807c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800807e:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 8008080:	2280      	movs	r2, #128	; 0x80
 8008082:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800808a:	4b16      	ldr	r3, [pc, #88]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 800808c:	2200      	movs	r2, #0
 800808e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008096:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 8008098:	2200      	movs	r2, #0
 800809a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800809c:	4811      	ldr	r0, [pc, #68]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 800809e:	f7f9 faed 	bl	800167c <HAL_DMA_Init>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80080a8:	f7ff f916 	bl	80072d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 80080b0:	635a      	str	r2, [r3, #52]	; 0x34
 80080b2:	4a0c      	ldr	r2, [pc, #48]	; (80080e4 <HAL_UART_MspInit+0x12c>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	2026      	movs	r0, #38	; 0x26
 80080be:	f7f9 faa6 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80080c2:	2026      	movs	r0, #38	; 0x26
 80080c4:	f7f9 fabf 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80080c8:	bf00      	nop
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40004400 	.word	0x40004400
 80080d4:	40021000 	.word	0x40021000
 80080d8:	40010800 	.word	0x40010800
 80080dc:	200007f0 	.word	0x200007f0
 80080e0:	40020080 	.word	0x40020080
 80080e4:	200006c0 	.word	0x200006c0
 80080e8:	4002006c 	.word	0x4002006c

080080ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80080f0:	bf00      	nop
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080fc:	e7fe      	b.n	80080fc <HardFault_Handler+0x4>

080080fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080fe:	b480      	push	{r7}
 8008100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008102:	e7fe      	b.n	8008102 <MemManage_Handler+0x4>

08008104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008108:	e7fe      	b.n	8008108 <BusFault_Handler+0x4>

0800810a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800810e:	e7fe      	b.n	800810e <UsageFault_Handler+0x4>

08008110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008120:	bf00      	nop
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr

08008128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800812c:	bf00      	nop
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008138:	f7f9 f954 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800813c:	bf00      	nop
 800813e:	bd80      	pop	{r7, pc}

08008140 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008144:	4802      	ldr	r0, [pc, #8]	; (8008150 <DMA1_Channel6_IRQHandler+0x10>)
 8008146:	f7f9 fbc9 	bl	80018dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200006c0 	.word	0x200006c0

08008154 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008158:	4802      	ldr	r0, [pc, #8]	; (8008164 <DMA1_Channel7_IRQHandler+0x10>)
 800815a:	f7f9 fbbf 	bl	80018dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800815e:	bf00      	nop
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200007f0 	.word	0x200007f0

08008168 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800816c:	4802      	ldr	r0, [pc, #8]	; (8008178 <TIM1_UP_IRQHandler+0x10>)
 800816e:	f7fc f810 	bl	8004192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008172:	bf00      	nop
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000834 	.word	0x20000834

0800817c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008180:	4802      	ldr	r0, [pc, #8]	; (800818c <TIM4_IRQHandler+0x10>)
 8008182:	f7fc f806 	bl	8004192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008186:	bf00      	nop
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	2000075c 	.word	0x2000075c

08008190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008194:	4802      	ldr	r0, [pc, #8]	; (80081a0 <USART2_IRQHandler+0x10>)
 8008196:	f7fd f80d 	bl	80051b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//	owReadHandler();
  /* USER CODE END USART2_IRQn 1 */
}
 800819a:	bf00      	nop
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000874 	.word	0x20000874

080081a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e00a      	b.n	80081cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80081b6:	f3af 8000 	nop.w
 80081ba:	4601      	mov	r1, r0
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	60ba      	str	r2, [r7, #8]
 80081c2:	b2ca      	uxtb	r2, r1
 80081c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	3301      	adds	r3, #1
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	dbf0      	blt.n	80081b6 <_read+0x12>
	}

return len;
 80081d4:	687b      	ldr	r3, [r7, #4]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e009      	b.n	8008204 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	60ba      	str	r2, [r7, #8]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	3301      	adds	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	dbf1      	blt.n	80081f0 <_write+0x12>
	}
	return len;
 800820c:	687b      	ldr	r3, [r7, #4]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <_close>:

int _close(int file)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
	return -1;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr

0800822c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800823c:	605a      	str	r2, [r3, #4]
	return 0;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <_isatty>:

int _isatty(int file)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
	return 1;
 8008252:	2301      	movs	r3, #1
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
	return 0;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
	...

08008278 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008280:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <_sbrk+0x50>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <_sbrk+0x16>
		heap_end = &end;
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <_sbrk+0x50>)
 800828a:	4a10      	ldr	r2, [pc, #64]	; (80082cc <_sbrk+0x54>)
 800828c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <_sbrk+0x50>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <_sbrk+0x50>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	466a      	mov	r2, sp
 800829e:	4293      	cmp	r3, r2
 80082a0:	d907      	bls.n	80082b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80082a2:	f000 f86f 	bl	8008384 <__errno>
 80082a6:	4602      	mov	r2, r0
 80082a8:	230c      	movs	r3, #12
 80082aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295
 80082b0:	e006      	b.n	80082c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <_sbrk+0x50>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	4a03      	ldr	r2, [pc, #12]	; (80082c8 <_sbrk+0x50>)
 80082bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000634 	.word	0x20000634
 80082cc:	200008c0 	.word	0x200008c0

080082d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <SystemInit+0x5c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a14      	ldr	r2, [pc, #80]	; (800832c <SystemInit+0x5c>)
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80082e0:	4b12      	ldr	r3, [pc, #72]	; (800832c <SystemInit+0x5c>)
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4911      	ldr	r1, [pc, #68]	; (800832c <SystemInit+0x5c>)
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <SystemInit+0x60>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <SystemInit+0x5c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0e      	ldr	r2, [pc, #56]	; (800832c <SystemInit+0x5c>)
 80082f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80082f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <SystemInit+0x5c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0a      	ldr	r2, [pc, #40]	; (800832c <SystemInit+0x5c>)
 8008302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008306:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008308:	4b08      	ldr	r3, [pc, #32]	; (800832c <SystemInit+0x5c>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4a07      	ldr	r2, [pc, #28]	; (800832c <SystemInit+0x5c>)
 800830e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008312:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <SystemInit+0x5c>)
 8008316:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800831a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <SystemInit+0x64>)
 800831e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008322:	609a      	str	r2, [r3, #8]
#endif 
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr
 800832c:	40021000 	.word	0x40021000
 8008330:	f8ff0000 	.word	0xf8ff0000
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008338:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800833a:	e003      	b.n	8008344 <LoopCopyDataInit>

0800833c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800833e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008340:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008342:	3104      	adds	r1, #4

08008344 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008344:	480a      	ldr	r0, [pc, #40]	; (8008370 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008348:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800834a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800834c:	d3f6      	bcc.n	800833c <CopyDataInit>
  ldr r2, =_sbss
 800834e:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008350:	e002      	b.n	8008358 <LoopFillZerobss>

08008352 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008352:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008354:	f842 3b04 	str.w	r3, [r2], #4

08008358 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800835a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800835c:	d3f9      	bcc.n	8008352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800835e:	f7ff ffb7 	bl	80082d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008362:	f000 f815 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008366:	f7fe facb 	bl	8006900 <main>
  bx lr
 800836a:	4770      	bx	lr
  ldr r3, =_sidata
 800836c:	0800c3e0 	.word	0x0800c3e0
  ldr r0, =_sdata
 8008370:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008374:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8008378:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 800837c:	200008c0 	.word	0x200008c0

08008380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008380:	e7fe      	b.n	8008380 <ADC1_2_IRQHandler>
	...

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	; (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000001c 	.word	0x2000001c

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	2500      	movs	r5, #0
 8008394:	4e0c      	ldr	r6, [pc, #48]	; (80083c8 <__libc_init_array+0x38>)
 8008396:	4c0d      	ldr	r4, [pc, #52]	; (80083cc <__libc_init_array+0x3c>)
 8008398:	1ba4      	subs	r4, r4, r6
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	42a5      	cmp	r5, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	f002 fc0c 	bl	800abbc <_init>
 80083a4:	2500      	movs	r5, #0
 80083a6:	4e0a      	ldr	r6, [pc, #40]	; (80083d0 <__libc_init_array+0x40>)
 80083a8:	4c0a      	ldr	r4, [pc, #40]	; (80083d4 <__libc_init_array+0x44>)
 80083aa:	1ba4      	subs	r4, r4, r6
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	42a5      	cmp	r5, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083b8:	4798      	blx	r3
 80083ba:	3501      	adds	r5, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083c2:	4798      	blx	r3
 80083c4:	3501      	adds	r5, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	0800c3d8 	.word	0x0800c3d8
 80083cc:	0800c3d8 	.word	0x0800c3d8
 80083d0:	0800c3d8 	.word	0x0800c3d8
 80083d4:	0800c3dc 	.word	0x0800c3dc

080083d8 <memcpy>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	1e43      	subs	r3, r0, #1
 80083dc:	440a      	add	r2, r1
 80083de:	4291      	cmp	r1, r2
 80083e0:	d100      	bne.n	80083e4 <memcpy+0xc>
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ec:	e7f7      	b.n	80083de <memcpy+0x6>

080083ee <memset>:
 80083ee:	4603      	mov	r3, r0
 80083f0:	4402      	add	r2, r0
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d100      	bne.n	80083f8 <memset+0xa>
 80083f6:	4770      	bx	lr
 80083f8:	f803 1b01 	strb.w	r1, [r3], #1
 80083fc:	e7f9      	b.n	80083f2 <memset+0x4>

080083fe <__cvt>:
 80083fe:	2b00      	cmp	r3, #0
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	461e      	mov	r6, r3
 8008406:	bfbb      	ittet	lt
 8008408:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800840c:	461e      	movlt	r6, r3
 800840e:	2300      	movge	r3, #0
 8008410:	232d      	movlt	r3, #45	; 0x2d
 8008412:	b088      	sub	sp, #32
 8008414:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008416:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800841a:	f027 0720 	bic.w	r7, r7, #32
 800841e:	2f46      	cmp	r7, #70	; 0x46
 8008420:	4614      	mov	r4, r2
 8008422:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008424:	700b      	strb	r3, [r1, #0]
 8008426:	d004      	beq.n	8008432 <__cvt+0x34>
 8008428:	2f45      	cmp	r7, #69	; 0x45
 800842a:	d100      	bne.n	800842e <__cvt+0x30>
 800842c:	3501      	adds	r5, #1
 800842e:	2302      	movs	r3, #2
 8008430:	e000      	b.n	8008434 <__cvt+0x36>
 8008432:	2303      	movs	r3, #3
 8008434:	aa07      	add	r2, sp, #28
 8008436:	9204      	str	r2, [sp, #16]
 8008438:	aa06      	add	r2, sp, #24
 800843a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800843e:	e9cd 3500 	strd	r3, r5, [sp]
 8008442:	4622      	mov	r2, r4
 8008444:	4633      	mov	r3, r6
 8008446:	f000 fdfb 	bl	8009040 <_dtoa_r>
 800844a:	2f47      	cmp	r7, #71	; 0x47
 800844c:	4680      	mov	r8, r0
 800844e:	d102      	bne.n	8008456 <__cvt+0x58>
 8008450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008452:	07db      	lsls	r3, r3, #31
 8008454:	d526      	bpl.n	80084a4 <__cvt+0xa6>
 8008456:	2f46      	cmp	r7, #70	; 0x46
 8008458:	eb08 0905 	add.w	r9, r8, r5
 800845c:	d111      	bne.n	8008482 <__cvt+0x84>
 800845e:	f898 3000 	ldrb.w	r3, [r8]
 8008462:	2b30      	cmp	r3, #48	; 0x30
 8008464:	d10a      	bne.n	800847c <__cvt+0x7e>
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	4620      	mov	r0, r4
 800846c:	4631      	mov	r1, r6
 800846e:	f7f8 fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008472:	b918      	cbnz	r0, 800847c <__cvt+0x7e>
 8008474:	f1c5 0501 	rsb	r5, r5, #1
 8008478:	f8ca 5000 	str.w	r5, [sl]
 800847c:	f8da 3000 	ldr.w	r3, [sl]
 8008480:	4499      	add	r9, r3
 8008482:	2200      	movs	r2, #0
 8008484:	2300      	movs	r3, #0
 8008486:	4620      	mov	r0, r4
 8008488:	4631      	mov	r1, r6
 800848a:	f7f8 fa8d 	bl	80009a8 <__aeabi_dcmpeq>
 800848e:	b938      	cbnz	r0, 80084a0 <__cvt+0xa2>
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	9b07      	ldr	r3, [sp, #28]
 8008494:	454b      	cmp	r3, r9
 8008496:	d205      	bcs.n	80084a4 <__cvt+0xa6>
 8008498:	1c59      	adds	r1, r3, #1
 800849a:	9107      	str	r1, [sp, #28]
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e7f8      	b.n	8008492 <__cvt+0x94>
 80084a0:	f8cd 901c 	str.w	r9, [sp, #28]
 80084a4:	4640      	mov	r0, r8
 80084a6:	9b07      	ldr	r3, [sp, #28]
 80084a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084aa:	eba3 0308 	sub.w	r3, r3, r8
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	b008      	add	sp, #32
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084b6 <__exponent>:
 80084b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b8:	2900      	cmp	r1, #0
 80084ba:	bfb4      	ite	lt
 80084bc:	232d      	movlt	r3, #45	; 0x2d
 80084be:	232b      	movge	r3, #43	; 0x2b
 80084c0:	4604      	mov	r4, r0
 80084c2:	bfb8      	it	lt
 80084c4:	4249      	neglt	r1, r1
 80084c6:	2909      	cmp	r1, #9
 80084c8:	f804 2b02 	strb.w	r2, [r4], #2
 80084cc:	7043      	strb	r3, [r0, #1]
 80084ce:	dd21      	ble.n	8008514 <__exponent+0x5e>
 80084d0:	f10d 0307 	add.w	r3, sp, #7
 80084d4:	461f      	mov	r7, r3
 80084d6:	260a      	movs	r6, #10
 80084d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80084dc:	fb06 1115 	mls	r1, r6, r5, r1
 80084e0:	2d09      	cmp	r5, #9
 80084e2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80084e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80084ee:	4629      	mov	r1, r5
 80084f0:	dc09      	bgt.n	8008506 <__exponent+0x50>
 80084f2:	3130      	adds	r1, #48	; 0x30
 80084f4:	3b02      	subs	r3, #2
 80084f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80084fa:	42bb      	cmp	r3, r7
 80084fc:	4622      	mov	r2, r4
 80084fe:	d304      	bcc.n	800850a <__exponent+0x54>
 8008500:	1a10      	subs	r0, r2, r0
 8008502:	b003      	add	sp, #12
 8008504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008506:	4613      	mov	r3, r2
 8008508:	e7e6      	b.n	80084d8 <__exponent+0x22>
 800850a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850e:	f804 2b01 	strb.w	r2, [r4], #1
 8008512:	e7f2      	b.n	80084fa <__exponent+0x44>
 8008514:	2330      	movs	r3, #48	; 0x30
 8008516:	4419      	add	r1, r3
 8008518:	7083      	strb	r3, [r0, #2]
 800851a:	1d02      	adds	r2, r0, #4
 800851c:	70c1      	strb	r1, [r0, #3]
 800851e:	e7ef      	b.n	8008500 <__exponent+0x4a>

08008520 <_printf_float>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	b091      	sub	sp, #68	; 0x44
 8008526:	460c      	mov	r4, r1
 8008528:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800852a:	4693      	mov	fp, r2
 800852c:	461e      	mov	r6, r3
 800852e:	4605      	mov	r5, r0
 8008530:	f001 fcb4 	bl	8009e9c <_localeconv_r>
 8008534:	6803      	ldr	r3, [r0, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	f7f7 fe09 	bl	8000150 <strlen>
 800853e:	2300      	movs	r3, #0
 8008540:	930e      	str	r3, [sp, #56]	; 0x38
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	900a      	str	r0, [sp, #40]	; 0x28
 8008546:	3307      	adds	r3, #7
 8008548:	f023 0307 	bic.w	r3, r3, #7
 800854c:	f103 0208 	add.w	r2, r3, #8
 8008550:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008554:	f8d4 a000 	ldr.w	sl, [r4]
 8008558:	603a      	str	r2, [r7, #0]
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008562:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800856a:	930b      	str	r3, [sp, #44]	; 0x2c
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	4ba6      	ldr	r3, [pc, #664]	; (800880c <_printf_float+0x2ec>)
 8008572:	4638      	mov	r0, r7
 8008574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008576:	f7f8 fa49 	bl	8000a0c <__aeabi_dcmpun>
 800857a:	bb68      	cbnz	r0, 80085d8 <_printf_float+0xb8>
 800857c:	f04f 32ff 	mov.w	r2, #4294967295
 8008580:	4ba2      	ldr	r3, [pc, #648]	; (800880c <_printf_float+0x2ec>)
 8008582:	4638      	mov	r0, r7
 8008584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008586:	f7f8 fa23 	bl	80009d0 <__aeabi_dcmple>
 800858a:	bb28      	cbnz	r0, 80085d8 <_printf_float+0xb8>
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	4638      	mov	r0, r7
 8008592:	4649      	mov	r1, r9
 8008594:	f7f8 fa12 	bl	80009bc <__aeabi_dcmplt>
 8008598:	b110      	cbz	r0, 80085a0 <_printf_float+0x80>
 800859a:	232d      	movs	r3, #45	; 0x2d
 800859c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a0:	4f9b      	ldr	r7, [pc, #620]	; (8008810 <_printf_float+0x2f0>)
 80085a2:	4b9c      	ldr	r3, [pc, #624]	; (8008814 <_printf_float+0x2f4>)
 80085a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085a8:	bf98      	it	ls
 80085aa:	461f      	movls	r7, r3
 80085ac:	2303      	movs	r3, #3
 80085ae:	f04f 0900 	mov.w	r9, #0
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	f02a 0304 	bic.w	r3, sl, #4
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	9600      	str	r6, [sp, #0]
 80085bc:	465b      	mov	r3, fp
 80085be:	aa0f      	add	r2, sp, #60	; 0x3c
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f9e2 	bl	800898c <_printf_common>
 80085c8:	3001      	adds	r0, #1
 80085ca:	f040 8090 	bne.w	80086ee <_printf_float+0x1ce>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	b011      	add	sp, #68	; 0x44
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	463a      	mov	r2, r7
 80085da:	464b      	mov	r3, r9
 80085dc:	4638      	mov	r0, r7
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 fa14 	bl	8000a0c <__aeabi_dcmpun>
 80085e4:	b110      	cbz	r0, 80085ec <_printf_float+0xcc>
 80085e6:	4f8c      	ldr	r7, [pc, #560]	; (8008818 <_printf_float+0x2f8>)
 80085e8:	4b8c      	ldr	r3, [pc, #560]	; (800881c <_printf_float+0x2fc>)
 80085ea:	e7db      	b.n	80085a4 <_printf_float+0x84>
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80085f2:	1c59      	adds	r1, r3, #1
 80085f4:	a80d      	add	r0, sp, #52	; 0x34
 80085f6:	a90e      	add	r1, sp, #56	; 0x38
 80085f8:	d140      	bne.n	800867c <_printf_float+0x15c>
 80085fa:	2306      	movs	r3, #6
 80085fc:	6063      	str	r3, [r4, #4]
 80085fe:	f04f 0c00 	mov.w	ip, #0
 8008602:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008606:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	463a      	mov	r2, r7
 8008616:	464b      	mov	r3, r9
 8008618:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800861c:	4628      	mov	r0, r5
 800861e:	f7ff feee 	bl	80083fe <__cvt>
 8008622:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008626:	2b47      	cmp	r3, #71	; 0x47
 8008628:	4607      	mov	r7, r0
 800862a:	d109      	bne.n	8008640 <_printf_float+0x120>
 800862c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800862e:	1cd8      	adds	r0, r3, #3
 8008630:	db02      	blt.n	8008638 <_printf_float+0x118>
 8008632:	6862      	ldr	r2, [r4, #4]
 8008634:	4293      	cmp	r3, r2
 8008636:	dd47      	ble.n	80086c8 <_printf_float+0x1a8>
 8008638:	f1a8 0802 	sub.w	r8, r8, #2
 800863c:	fa5f f888 	uxtb.w	r8, r8
 8008640:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008644:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008646:	d824      	bhi.n	8008692 <_printf_float+0x172>
 8008648:	3901      	subs	r1, #1
 800864a:	4642      	mov	r2, r8
 800864c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008650:	910d      	str	r1, [sp, #52]	; 0x34
 8008652:	f7ff ff30 	bl	80084b6 <__exponent>
 8008656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008658:	4681      	mov	r9, r0
 800865a:	1813      	adds	r3, r2, r0
 800865c:	2a01      	cmp	r2, #1
 800865e:	6123      	str	r3, [r4, #16]
 8008660:	dc02      	bgt.n	8008668 <_printf_float+0x148>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	07d1      	lsls	r1, r2, #31
 8008666:	d501      	bpl.n	800866c <_printf_float+0x14c>
 8008668:	3301      	adds	r3, #1
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0a2      	beq.n	80085ba <_printf_float+0x9a>
 8008674:	232d      	movs	r3, #45	; 0x2d
 8008676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867a:	e79e      	b.n	80085ba <_printf_float+0x9a>
 800867c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008680:	f000 816e 	beq.w	8008960 <_printf_float+0x440>
 8008684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008688:	d1b9      	bne.n	80085fe <_printf_float+0xde>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1b7      	bne.n	80085fe <_printf_float+0xde>
 800868e:	2301      	movs	r3, #1
 8008690:	e7b4      	b.n	80085fc <_printf_float+0xdc>
 8008692:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008696:	d119      	bne.n	80086cc <_printf_float+0x1ac>
 8008698:	2900      	cmp	r1, #0
 800869a:	6863      	ldr	r3, [r4, #4]
 800869c:	dd0c      	ble.n	80086b8 <_printf_float+0x198>
 800869e:	6121      	str	r1, [r4, #16]
 80086a0:	b913      	cbnz	r3, 80086a8 <_printf_float+0x188>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	07d2      	lsls	r2, r2, #31
 80086a6:	d502      	bpl.n	80086ae <_printf_float+0x18e>
 80086a8:	3301      	adds	r3, #1
 80086aa:	440b      	add	r3, r1
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80086b6:	e7d9      	b.n	800866c <_printf_float+0x14c>
 80086b8:	b913      	cbnz	r3, 80086c0 <_printf_float+0x1a0>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	07d0      	lsls	r0, r2, #31
 80086be:	d501      	bpl.n	80086c4 <_printf_float+0x1a4>
 80086c0:	3302      	adds	r3, #2
 80086c2:	e7f3      	b.n	80086ac <_printf_float+0x18c>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7f1      	b.n	80086ac <_printf_float+0x18c>
 80086c8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80086cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80086d0:	4293      	cmp	r3, r2
 80086d2:	db05      	blt.n	80086e0 <_printf_float+0x1c0>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	6123      	str	r3, [r4, #16]
 80086d8:	07d1      	lsls	r1, r2, #31
 80086da:	d5e8      	bpl.n	80086ae <_printf_float+0x18e>
 80086dc:	3301      	adds	r3, #1
 80086de:	e7e5      	b.n	80086ac <_printf_float+0x18c>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfcc      	ite	gt
 80086e4:	2301      	movgt	r3, #1
 80086e6:	f1c3 0302 	rsble	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	e7de      	b.n	80086ac <_printf_float+0x18c>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	055a      	lsls	r2, r3, #21
 80086f2:	d407      	bmi.n	8008704 <_printf_float+0x1e4>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	463a      	mov	r2, r7
 80086f8:	4659      	mov	r1, fp
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b0      	blx	r6
 80086fe:	3001      	adds	r0, #1
 8008700:	d129      	bne.n	8008756 <_printf_float+0x236>
 8008702:	e764      	b.n	80085ce <_printf_float+0xae>
 8008704:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008708:	f240 80d7 	bls.w	80088ba <_printf_float+0x39a>
 800870c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	f7f8 f948 	bl	80009a8 <__aeabi_dcmpeq>
 8008718:	b388      	cbz	r0, 800877e <_printf_float+0x25e>
 800871a:	2301      	movs	r3, #1
 800871c:	4a40      	ldr	r2, [pc, #256]	; (8008820 <_printf_float+0x300>)
 800871e:	4659      	mov	r1, fp
 8008720:	4628      	mov	r0, r5
 8008722:	47b0      	blx	r6
 8008724:	3001      	adds	r0, #1
 8008726:	f43f af52 	beq.w	80085ce <_printf_float+0xae>
 800872a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800872e:	429a      	cmp	r2, r3
 8008730:	db02      	blt.n	8008738 <_printf_float+0x218>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	07d8      	lsls	r0, r3, #31
 8008736:	d50e      	bpl.n	8008756 <_printf_float+0x236>
 8008738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873c:	4659      	mov	r1, fp
 800873e:	4628      	mov	r0, r5
 8008740:	47b0      	blx	r6
 8008742:	3001      	adds	r0, #1
 8008744:	f43f af43 	beq.w	80085ce <_printf_float+0xae>
 8008748:	2700      	movs	r7, #0
 800874a:	f104 081a 	add.w	r8, r4, #26
 800874e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008750:	3b01      	subs	r3, #1
 8008752:	42bb      	cmp	r3, r7
 8008754:	dc09      	bgt.n	800876a <_printf_float+0x24a>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	079f      	lsls	r7, r3, #30
 800875a:	f100 80fd 	bmi.w	8008958 <_printf_float+0x438>
 800875e:	68e0      	ldr	r0, [r4, #12]
 8008760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008762:	4298      	cmp	r0, r3
 8008764:	bfb8      	it	lt
 8008766:	4618      	movlt	r0, r3
 8008768:	e733      	b.n	80085d2 <_printf_float+0xb2>
 800876a:	2301      	movs	r3, #1
 800876c:	4642      	mov	r2, r8
 800876e:	4659      	mov	r1, fp
 8008770:	4628      	mov	r0, r5
 8008772:	47b0      	blx	r6
 8008774:	3001      	adds	r0, #1
 8008776:	f43f af2a 	beq.w	80085ce <_printf_float+0xae>
 800877a:	3701      	adds	r7, #1
 800877c:	e7e7      	b.n	800874e <_printf_float+0x22e>
 800877e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008780:	2b00      	cmp	r3, #0
 8008782:	dc2b      	bgt.n	80087dc <_printf_float+0x2bc>
 8008784:	2301      	movs	r3, #1
 8008786:	4a26      	ldr	r2, [pc, #152]	; (8008820 <_printf_float+0x300>)
 8008788:	4659      	mov	r1, fp
 800878a:	4628      	mov	r0, r5
 800878c:	47b0      	blx	r6
 800878e:	3001      	adds	r0, #1
 8008790:	f43f af1d 	beq.w	80085ce <_printf_float+0xae>
 8008794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008796:	b923      	cbnz	r3, 80087a2 <_printf_float+0x282>
 8008798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800879a:	b913      	cbnz	r3, 80087a2 <_printf_float+0x282>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d5d9      	bpl.n	8008756 <_printf_float+0x236>
 80087a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087a6:	4659      	mov	r1, fp
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b0      	blx	r6
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f af0e 	beq.w	80085ce <_printf_float+0xae>
 80087b2:	f04f 0800 	mov.w	r8, #0
 80087b6:	f104 091a 	add.w	r9, r4, #26
 80087ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087bc:	425b      	negs	r3, r3
 80087be:	4543      	cmp	r3, r8
 80087c0:	dc01      	bgt.n	80087c6 <_printf_float+0x2a6>
 80087c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c4:	e797      	b.n	80086f6 <_printf_float+0x1d6>
 80087c6:	2301      	movs	r3, #1
 80087c8:	464a      	mov	r2, r9
 80087ca:	4659      	mov	r1, fp
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b0      	blx	r6
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f aefc 	beq.w	80085ce <_printf_float+0xae>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	e7ee      	b.n	80087ba <_printf_float+0x29a>
 80087dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087e0:	429a      	cmp	r2, r3
 80087e2:	bfa8      	it	ge
 80087e4:	461a      	movge	r2, r3
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	4690      	mov	r8, r2
 80087ea:	dd07      	ble.n	80087fc <_printf_float+0x2dc>
 80087ec:	4613      	mov	r3, r2
 80087ee:	4659      	mov	r1, fp
 80087f0:	463a      	mov	r2, r7
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b0      	blx	r6
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f aee9 	beq.w	80085ce <_printf_float+0xae>
 80087fc:	f104 031a 	add.w	r3, r4, #26
 8008800:	f04f 0a00 	mov.w	sl, #0
 8008804:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008808:	930b      	str	r3, [sp, #44]	; 0x2c
 800880a:	e015      	b.n	8008838 <_printf_float+0x318>
 800880c:	7fefffff 	.word	0x7fefffff
 8008810:	0800c114 	.word	0x0800c114
 8008814:	0800c110 	.word	0x0800c110
 8008818:	0800c11c 	.word	0x0800c11c
 800881c:	0800c118 	.word	0x0800c118
 8008820:	0800c120 	.word	0x0800c120
 8008824:	2301      	movs	r3, #1
 8008826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008828:	4659      	mov	r1, fp
 800882a:	4628      	mov	r0, r5
 800882c:	47b0      	blx	r6
 800882e:	3001      	adds	r0, #1
 8008830:	f43f aecd 	beq.w	80085ce <_printf_float+0xae>
 8008834:	f10a 0a01 	add.w	sl, sl, #1
 8008838:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800883c:	eba9 0308 	sub.w	r3, r9, r8
 8008840:	4553      	cmp	r3, sl
 8008842:	dcef      	bgt.n	8008824 <_printf_float+0x304>
 8008844:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008848:	429a      	cmp	r2, r3
 800884a:	444f      	add	r7, r9
 800884c:	db14      	blt.n	8008878 <_printf_float+0x358>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	07da      	lsls	r2, r3, #31
 8008852:	d411      	bmi.n	8008878 <_printf_float+0x358>
 8008854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008856:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008858:	eba3 0209 	sub.w	r2, r3, r9
 800885c:	eba3 0901 	sub.w	r9, r3, r1
 8008860:	4591      	cmp	r9, r2
 8008862:	bfa8      	it	ge
 8008864:	4691      	movge	r9, r2
 8008866:	f1b9 0f00 	cmp.w	r9, #0
 800886a:	dc0d      	bgt.n	8008888 <_printf_float+0x368>
 800886c:	2700      	movs	r7, #0
 800886e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008872:	f104 081a 	add.w	r8, r4, #26
 8008876:	e018      	b.n	80088aa <_printf_float+0x38a>
 8008878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887c:	4659      	mov	r1, fp
 800887e:	4628      	mov	r0, r5
 8008880:	47b0      	blx	r6
 8008882:	3001      	adds	r0, #1
 8008884:	d1e6      	bne.n	8008854 <_printf_float+0x334>
 8008886:	e6a2      	b.n	80085ce <_printf_float+0xae>
 8008888:	464b      	mov	r3, r9
 800888a:	463a      	mov	r2, r7
 800888c:	4659      	mov	r1, fp
 800888e:	4628      	mov	r0, r5
 8008890:	47b0      	blx	r6
 8008892:	3001      	adds	r0, #1
 8008894:	d1ea      	bne.n	800886c <_printf_float+0x34c>
 8008896:	e69a      	b.n	80085ce <_printf_float+0xae>
 8008898:	2301      	movs	r3, #1
 800889a:	4642      	mov	r2, r8
 800889c:	4659      	mov	r1, fp
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f ae93 	beq.w	80085ce <_printf_float+0xae>
 80088a8:	3701      	adds	r7, #1
 80088aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	eba3 0309 	sub.w	r3, r3, r9
 80088b4:	42bb      	cmp	r3, r7
 80088b6:	dcef      	bgt.n	8008898 <_printf_float+0x378>
 80088b8:	e74d      	b.n	8008756 <_printf_float+0x236>
 80088ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088bc:	2a01      	cmp	r2, #1
 80088be:	dc01      	bgt.n	80088c4 <_printf_float+0x3a4>
 80088c0:	07db      	lsls	r3, r3, #31
 80088c2:	d538      	bpl.n	8008936 <_printf_float+0x416>
 80088c4:	2301      	movs	r3, #1
 80088c6:	463a      	mov	r2, r7
 80088c8:	4659      	mov	r1, fp
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b0      	blx	r6
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f ae7d 	beq.w	80085ce <_printf_float+0xae>
 80088d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d8:	4659      	mov	r1, fp
 80088da:	4628      	mov	r0, r5
 80088dc:	47b0      	blx	r6
 80088de:	3001      	adds	r0, #1
 80088e0:	f107 0701 	add.w	r7, r7, #1
 80088e4:	f43f ae73 	beq.w	80085ce <_printf_float+0xae>
 80088e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ee:	2200      	movs	r2, #0
 80088f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80088f4:	2300      	movs	r3, #0
 80088f6:	f7f8 f857 	bl	80009a8 <__aeabi_dcmpeq>
 80088fa:	b9c0      	cbnz	r0, 800892e <_printf_float+0x40e>
 80088fc:	4643      	mov	r3, r8
 80088fe:	463a      	mov	r2, r7
 8008900:	4659      	mov	r1, fp
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	3001      	adds	r0, #1
 8008908:	d10d      	bne.n	8008926 <_printf_float+0x406>
 800890a:	e660      	b.n	80085ce <_printf_float+0xae>
 800890c:	2301      	movs	r3, #1
 800890e:	4642      	mov	r2, r8
 8008910:	4659      	mov	r1, fp
 8008912:	4628      	mov	r0, r5
 8008914:	47b0      	blx	r6
 8008916:	3001      	adds	r0, #1
 8008918:	f43f ae59 	beq.w	80085ce <_printf_float+0xae>
 800891c:	3701      	adds	r7, #1
 800891e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008920:	3b01      	subs	r3, #1
 8008922:	42bb      	cmp	r3, r7
 8008924:	dcf2      	bgt.n	800890c <_printf_float+0x3ec>
 8008926:	464b      	mov	r3, r9
 8008928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800892c:	e6e4      	b.n	80086f8 <_printf_float+0x1d8>
 800892e:	2700      	movs	r7, #0
 8008930:	f104 081a 	add.w	r8, r4, #26
 8008934:	e7f3      	b.n	800891e <_printf_float+0x3fe>
 8008936:	2301      	movs	r3, #1
 8008938:	e7e1      	b.n	80088fe <_printf_float+0x3de>
 800893a:	2301      	movs	r3, #1
 800893c:	4642      	mov	r2, r8
 800893e:	4659      	mov	r1, fp
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae42 	beq.w	80085ce <_printf_float+0xae>
 800894a:	3701      	adds	r7, #1
 800894c:	68e3      	ldr	r3, [r4, #12]
 800894e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	42bb      	cmp	r3, r7
 8008954:	dcf1      	bgt.n	800893a <_printf_float+0x41a>
 8008956:	e702      	b.n	800875e <_printf_float+0x23e>
 8008958:	2700      	movs	r7, #0
 800895a:	f104 0819 	add.w	r8, r4, #25
 800895e:	e7f5      	b.n	800894c <_printf_float+0x42c>
 8008960:	2b00      	cmp	r3, #0
 8008962:	f43f ae94 	beq.w	800868e <_printf_float+0x16e>
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800896e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008972:	6022      	str	r2, [r4, #0]
 8008974:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008978:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	463a      	mov	r2, r7
 8008980:	464b      	mov	r3, r9
 8008982:	4628      	mov	r0, r5
 8008984:	f7ff fd3b 	bl	80083fe <__cvt>
 8008988:	4607      	mov	r7, r0
 800898a:	e64f      	b.n	800862c <_printf_float+0x10c>

0800898c <_printf_common>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	4691      	mov	r9, r2
 8008992:	461f      	mov	r7, r3
 8008994:	688a      	ldr	r2, [r1, #8]
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4606      	mov	r6, r0
 800899a:	4293      	cmp	r3, r2
 800899c:	bfb8      	it	lt
 800899e:	4613      	movlt	r3, r2
 80089a0:	f8c9 3000 	str.w	r3, [r9]
 80089a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089a8:	460c      	mov	r4, r1
 80089aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ae:	b112      	cbz	r2, 80089b6 <_printf_common+0x2a>
 80089b0:	3301      	adds	r3, #1
 80089b2:	f8c9 3000 	str.w	r3, [r9]
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	0699      	lsls	r1, r3, #26
 80089ba:	bf42      	ittt	mi
 80089bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089c0:	3302      	addmi	r3, #2
 80089c2:	f8c9 3000 	strmi.w	r3, [r9]
 80089c6:	6825      	ldr	r5, [r4, #0]
 80089c8:	f015 0506 	ands.w	r5, r5, #6
 80089cc:	d107      	bne.n	80089de <_printf_common+0x52>
 80089ce:	f104 0a19 	add.w	sl, r4, #25
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	f8d9 2000 	ldr.w	r2, [r9]
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	42ab      	cmp	r3, r5
 80089dc:	dc29      	bgt.n	8008a32 <_printf_common+0xa6>
 80089de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	3300      	adds	r3, #0
 80089e6:	bf18      	it	ne
 80089e8:	2301      	movne	r3, #1
 80089ea:	0692      	lsls	r2, r2, #26
 80089ec:	d42e      	bmi.n	8008a4c <_printf_common+0xc0>
 80089ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f2:	4639      	mov	r1, r7
 80089f4:	4630      	mov	r0, r6
 80089f6:	47c0      	blx	r8
 80089f8:	3001      	adds	r0, #1
 80089fa:	d021      	beq.n	8008a40 <_printf_common+0xb4>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	68e5      	ldr	r5, [r4, #12]
 8008a00:	f003 0306 	and.w	r3, r3, #6
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	bf18      	it	ne
 8008a08:	2500      	movne	r5, #0
 8008a0a:	f8d9 2000 	ldr.w	r2, [r9]
 8008a0e:	f04f 0900 	mov.w	r9, #0
 8008a12:	bf08      	it	eq
 8008a14:	1aad      	subeq	r5, r5, r2
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	6922      	ldr	r2, [r4, #16]
 8008a1a:	bf08      	it	eq
 8008a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a20:	4293      	cmp	r3, r2
 8008a22:	bfc4      	itt	gt
 8008a24:	1a9b      	subgt	r3, r3, r2
 8008a26:	18ed      	addgt	r5, r5, r3
 8008a28:	341a      	adds	r4, #26
 8008a2a:	454d      	cmp	r5, r9
 8008a2c:	d11a      	bne.n	8008a64 <_printf_common+0xd8>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e008      	b.n	8008a44 <_printf_common+0xb8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4639      	mov	r1, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	47c0      	blx	r8
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d103      	bne.n	8008a48 <_printf_common+0xbc>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	3501      	adds	r5, #1
 8008a4a:	e7c2      	b.n	80089d2 <_printf_common+0x46>
 8008a4c:	2030      	movs	r0, #48	; 0x30
 8008a4e:	18e1      	adds	r1, r4, r3
 8008a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a5a:	4422      	add	r2, r4
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a62:	e7c4      	b.n	80089ee <_printf_common+0x62>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4622      	mov	r2, r4
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d0e6      	beq.n	8008a40 <_printf_common+0xb4>
 8008a72:	f109 0901 	add.w	r9, r9, #1
 8008a76:	e7d8      	b.n	8008a2a <_printf_common+0x9e>

08008a78 <_printf_i>:
 8008a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a80:	460c      	mov	r4, r1
 8008a82:	7e09      	ldrb	r1, [r1, #24]
 8008a84:	b085      	sub	sp, #20
 8008a86:	296e      	cmp	r1, #110	; 0x6e
 8008a88:	4617      	mov	r7, r2
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a90:	f000 80b3 	beq.w	8008bfa <_printf_i+0x182>
 8008a94:	d822      	bhi.n	8008adc <_printf_i+0x64>
 8008a96:	2963      	cmp	r1, #99	; 0x63
 8008a98:	d036      	beq.n	8008b08 <_printf_i+0x90>
 8008a9a:	d80a      	bhi.n	8008ab2 <_printf_i+0x3a>
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	f000 80b9 	beq.w	8008c14 <_printf_i+0x19c>
 8008aa2:	2958      	cmp	r1, #88	; 0x58
 8008aa4:	f000 8083 	beq.w	8008bae <_printf_i+0x136>
 8008aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ab0:	e032      	b.n	8008b18 <_printf_i+0xa0>
 8008ab2:	2964      	cmp	r1, #100	; 0x64
 8008ab4:	d001      	beq.n	8008aba <_printf_i+0x42>
 8008ab6:	2969      	cmp	r1, #105	; 0x69
 8008ab8:	d1f6      	bne.n	8008aa8 <_printf_i+0x30>
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	6813      	ldr	r3, [r2, #0]
 8008abe:	0605      	lsls	r5, r0, #24
 8008ac0:	f103 0104 	add.w	r1, r3, #4
 8008ac4:	d52a      	bpl.n	8008b1c <_printf_i+0xa4>
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da03      	bge.n	8008ad6 <_printf_i+0x5e>
 8008ace:	222d      	movs	r2, #45	; 0x2d
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ad6:	486f      	ldr	r0, [pc, #444]	; (8008c94 <_printf_i+0x21c>)
 8008ad8:	220a      	movs	r2, #10
 8008ada:	e039      	b.n	8008b50 <_printf_i+0xd8>
 8008adc:	2973      	cmp	r1, #115	; 0x73
 8008ade:	f000 809d 	beq.w	8008c1c <_printf_i+0x1a4>
 8008ae2:	d808      	bhi.n	8008af6 <_printf_i+0x7e>
 8008ae4:	296f      	cmp	r1, #111	; 0x6f
 8008ae6:	d020      	beq.n	8008b2a <_printf_i+0xb2>
 8008ae8:	2970      	cmp	r1, #112	; 0x70
 8008aea:	d1dd      	bne.n	8008aa8 <_printf_i+0x30>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	f043 0320 	orr.w	r3, r3, #32
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	e003      	b.n	8008afe <_printf_i+0x86>
 8008af6:	2975      	cmp	r1, #117	; 0x75
 8008af8:	d017      	beq.n	8008b2a <_printf_i+0xb2>
 8008afa:	2978      	cmp	r1, #120	; 0x78
 8008afc:	d1d4      	bne.n	8008aa8 <_printf_i+0x30>
 8008afe:	2378      	movs	r3, #120	; 0x78
 8008b00:	4865      	ldr	r0, [pc, #404]	; (8008c98 <_printf_i+0x220>)
 8008b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b06:	e055      	b.n	8008bb4 <_printf_i+0x13c>
 8008b08:	6813      	ldr	r3, [r2, #0]
 8008b0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b0e:	1d19      	adds	r1, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6011      	str	r1, [r2, #0]
 8008b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e08c      	b.n	8008c36 <_printf_i+0x1be>
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b22:	6011      	str	r1, [r2, #0]
 8008b24:	bf18      	it	ne
 8008b26:	b21b      	sxthne	r3, r3
 8008b28:	e7cf      	b.n	8008aca <_printf_i+0x52>
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	6825      	ldr	r5, [r4, #0]
 8008b2e:	1d18      	adds	r0, r3, #4
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	0628      	lsls	r0, r5, #24
 8008b34:	d501      	bpl.n	8008b3a <_printf_i+0xc2>
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	e002      	b.n	8008b40 <_printf_i+0xc8>
 8008b3a:	0668      	lsls	r0, r5, #25
 8008b3c:	d5fb      	bpl.n	8008b36 <_printf_i+0xbe>
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	296f      	cmp	r1, #111	; 0x6f
 8008b42:	bf14      	ite	ne
 8008b44:	220a      	movne	r2, #10
 8008b46:	2208      	moveq	r2, #8
 8008b48:	4852      	ldr	r0, [pc, #328]	; (8008c94 <_printf_i+0x21c>)
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b50:	6865      	ldr	r5, [r4, #4]
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	60a5      	str	r5, [r4, #8]
 8008b56:	f2c0 8095 	blt.w	8008c84 <_printf_i+0x20c>
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	f021 0104 	bic.w	r1, r1, #4
 8008b60:	6021      	str	r1, [r4, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d13d      	bne.n	8008be2 <_printf_i+0x16a>
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	f040 808e 	bne.w	8008c88 <_printf_i+0x210>
 8008b6c:	4665      	mov	r5, ip
 8008b6e:	2a08      	cmp	r2, #8
 8008b70:	d10b      	bne.n	8008b8a <_printf_i+0x112>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	07db      	lsls	r3, r3, #31
 8008b76:	d508      	bpl.n	8008b8a <_printf_i+0x112>
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	bfde      	ittt	le
 8008b80:	2330      	movle	r3, #48	; 0x30
 8008b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b8a:	ebac 0305 	sub.w	r3, ip, r5
 8008b8e:	6123      	str	r3, [r4, #16]
 8008b90:	f8cd 8000 	str.w	r8, [sp]
 8008b94:	463b      	mov	r3, r7
 8008b96:	aa03      	add	r2, sp, #12
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff fef6 	bl	800898c <_printf_common>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d14d      	bne.n	8008c40 <_printf_i+0x1c8>
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	b005      	add	sp, #20
 8008baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bae:	4839      	ldr	r0, [pc, #228]	; (8008c94 <_printf_i+0x21c>)
 8008bb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008bb4:	6813      	ldr	r3, [r2, #0]
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	1d1d      	adds	r5, r3, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6015      	str	r5, [r2, #0]
 8008bbe:	060a      	lsls	r2, r1, #24
 8008bc0:	d50b      	bpl.n	8008bda <_printf_i+0x162>
 8008bc2:	07ca      	lsls	r2, r1, #31
 8008bc4:	bf44      	itt	mi
 8008bc6:	f041 0120 	orrmi.w	r1, r1, #32
 8008bca:	6021      	strmi	r1, [r4, #0]
 8008bcc:	b91b      	cbnz	r3, 8008bd6 <_printf_i+0x15e>
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	f022 0220 	bic.w	r2, r2, #32
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	e7b7      	b.n	8008b4a <_printf_i+0xd2>
 8008bda:	064d      	lsls	r5, r1, #25
 8008bdc:	bf48      	it	mi
 8008bde:	b29b      	uxthmi	r3, r3
 8008be0:	e7ef      	b.n	8008bc2 <_printf_i+0x14a>
 8008be2:	4665      	mov	r5, ip
 8008be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008be8:	fb02 3311 	mls	r3, r2, r1, r3
 8008bec:	5cc3      	ldrb	r3, [r0, r3]
 8008bee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d1f5      	bne.n	8008be4 <_printf_i+0x16c>
 8008bf8:	e7b9      	b.n	8008b6e <_printf_i+0xf6>
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	6825      	ldr	r5, [r4, #0]
 8008bfe:	1d18      	adds	r0, r3, #4
 8008c00:	6961      	ldr	r1, [r4, #20]
 8008c02:	6010      	str	r0, [r2, #0]
 8008c04:	0628      	lsls	r0, r5, #24
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	d501      	bpl.n	8008c0e <_printf_i+0x196>
 8008c0a:	6019      	str	r1, [r3, #0]
 8008c0c:	e002      	b.n	8008c14 <_printf_i+0x19c>
 8008c0e:	066a      	lsls	r2, r5, #25
 8008c10:	d5fb      	bpl.n	8008c0a <_printf_i+0x192>
 8008c12:	8019      	strh	r1, [r3, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	4665      	mov	r5, ip
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	e7b9      	b.n	8008b90 <_printf_i+0x118>
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	1d19      	adds	r1, r3, #4
 8008c20:	6011      	str	r1, [r2, #0]
 8008c22:	681d      	ldr	r5, [r3, #0]
 8008c24:	6862      	ldr	r2, [r4, #4]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f001 f9b1 	bl	8009f90 <memchr>
 8008c2e:	b108      	cbz	r0, 8008c34 <_printf_i+0x1bc>
 8008c30:	1b40      	subs	r0, r0, r5
 8008c32:	6060      	str	r0, [r4, #4]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	6123      	str	r3, [r4, #16]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c3e:	e7a7      	b.n	8008b90 <_printf_i+0x118>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	462a      	mov	r2, r5
 8008c44:	4639      	mov	r1, r7
 8008c46:	4630      	mov	r0, r6
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0aa      	beq.n	8008ba4 <_printf_i+0x12c>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	079b      	lsls	r3, r3, #30
 8008c52:	d413      	bmi.n	8008c7c <_printf_i+0x204>
 8008c54:	68e0      	ldr	r0, [r4, #12]
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	bfb8      	it	lt
 8008c5c:	4618      	movlt	r0, r3
 8008c5e:	e7a3      	b.n	8008ba8 <_printf_i+0x130>
 8008c60:	2301      	movs	r3, #1
 8008c62:	464a      	mov	r2, r9
 8008c64:	4639      	mov	r1, r7
 8008c66:	4630      	mov	r0, r6
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d09a      	beq.n	8008ba4 <_printf_i+0x12c>
 8008c6e:	3501      	adds	r5, #1
 8008c70:	68e3      	ldr	r3, [r4, #12]
 8008c72:	9a03      	ldr	r2, [sp, #12]
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	dcf2      	bgt.n	8008c60 <_printf_i+0x1e8>
 8008c7a:	e7eb      	b.n	8008c54 <_printf_i+0x1dc>
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	f104 0919 	add.w	r9, r4, #25
 8008c82:	e7f5      	b.n	8008c70 <_printf_i+0x1f8>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1ac      	bne.n	8008be2 <_printf_i+0x16a>
 8008c88:	7803      	ldrb	r3, [r0, #0]
 8008c8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c92:	e76c      	b.n	8008b6e <_printf_i+0xf6>
 8008c94:	0800c122 	.word	0x0800c122
 8008c98:	0800c133 	.word	0x0800c133

08008c9c <_puts_r>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	460e      	mov	r6, r1
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	b118      	cbz	r0, 8008cac <_puts_r+0x10>
 8008ca4:	6983      	ldr	r3, [r0, #24]
 8008ca6:	b90b      	cbnz	r3, 8008cac <_puts_r+0x10>
 8008ca8:	f001 f86e 	bl	8009d88 <__sinit>
 8008cac:	69ab      	ldr	r3, [r5, #24]
 8008cae:	68ac      	ldr	r4, [r5, #8]
 8008cb0:	b913      	cbnz	r3, 8008cb8 <_puts_r+0x1c>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f001 f868 	bl	8009d88 <__sinit>
 8008cb8:	4b23      	ldr	r3, [pc, #140]	; (8008d48 <_puts_r+0xac>)
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d117      	bne.n	8008cee <_puts_r+0x52>
 8008cbe:	686c      	ldr	r4, [r5, #4]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	071b      	lsls	r3, r3, #28
 8008cc4:	d51d      	bpl.n	8008d02 <_puts_r+0x66>
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	b1db      	cbz	r3, 8008d02 <_puts_r+0x66>
 8008cca:	3e01      	subs	r6, #1
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	b9e9      	cbnz	r1, 8008d14 <_puts_r+0x78>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da2e      	bge.n	8008d3a <_puts_r+0x9e>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	210a      	movs	r1, #10
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 f85f 	bl	8008da4 <__swbuf_r>
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d011      	beq.n	8008d0e <_puts_r+0x72>
 8008cea:	200a      	movs	r0, #10
 8008cec:	e011      	b.n	8008d12 <_puts_r+0x76>
 8008cee:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <_puts_r+0xb0>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d101      	bne.n	8008cf8 <_puts_r+0x5c>
 8008cf4:	68ac      	ldr	r4, [r5, #8]
 8008cf6:	e7e3      	b.n	8008cc0 <_puts_r+0x24>
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <_puts_r+0xb4>)
 8008cfa:	429c      	cmp	r4, r3
 8008cfc:	bf08      	it	eq
 8008cfe:	68ec      	ldreq	r4, [r5, #12]
 8008d00:	e7de      	b.n	8008cc0 <_puts_r+0x24>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 f89f 	bl	8008e48 <__swsetup_r>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d0dd      	beq.n	8008cca <_puts_r+0x2e>
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	da04      	bge.n	8008d22 <_puts_r+0x86>
 8008d18:	69a2      	ldr	r2, [r4, #24]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	dc06      	bgt.n	8008d2c <_puts_r+0x90>
 8008d1e:	290a      	cmp	r1, #10
 8008d20:	d004      	beq.n	8008d2c <_puts_r+0x90>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	7019      	strb	r1, [r3, #0]
 8008d2a:	e7cf      	b.n	8008ccc <_puts_r+0x30>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f838 	bl	8008da4 <__swbuf_r>
 8008d34:	3001      	adds	r0, #1
 8008d36:	d1c9      	bne.n	8008ccc <_puts_r+0x30>
 8008d38:	e7e9      	b.n	8008d0e <_puts_r+0x72>
 8008d3a:	200a      	movs	r0, #10
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	7018      	strb	r0, [r3, #0]
 8008d44:	e7e5      	b.n	8008d12 <_puts_r+0x76>
 8008d46:	bf00      	nop
 8008d48:	0800c174 	.word	0x0800c174
 8008d4c:	0800c194 	.word	0x0800c194
 8008d50:	0800c154 	.word	0x0800c154

08008d54 <puts>:
 8008d54:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <puts+0xc>)
 8008d56:	4601      	mov	r1, r0
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f7ff bf9f 	b.w	8008c9c <_puts_r>
 8008d5e:	bf00      	nop
 8008d60:	2000001c 	.word	0x2000001c

08008d64 <siprintf>:
 8008d64:	b40e      	push	{r1, r2, r3}
 8008d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d6a:	b500      	push	{lr}
 8008d6c:	b09c      	sub	sp, #112	; 0x70
 8008d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d70:	9002      	str	r0, [sp, #8]
 8008d72:	9006      	str	r0, [sp, #24]
 8008d74:	9107      	str	r1, [sp, #28]
 8008d76:	9104      	str	r1, [sp, #16]
 8008d78:	4808      	ldr	r0, [pc, #32]	; (8008d9c <siprintf+0x38>)
 8008d7a:	4909      	ldr	r1, [pc, #36]	; (8008da0 <siprintf+0x3c>)
 8008d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d80:	9105      	str	r1, [sp, #20]
 8008d82:	6800      	ldr	r0, [r0, #0]
 8008d84:	a902      	add	r1, sp, #8
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	f001 fcfa 	bl	800a780 <_svfiprintf_r>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	9b02      	ldr	r3, [sp, #8]
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	b01c      	add	sp, #112	; 0x70
 8008d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d98:	b003      	add	sp, #12
 8008d9a:	4770      	bx	lr
 8008d9c:	2000001c 	.word	0x2000001c
 8008da0:	ffff0208 	.word	0xffff0208

08008da4 <__swbuf_r>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	460e      	mov	r6, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	4605      	mov	r5, r0
 8008dac:	b118      	cbz	r0, 8008db6 <__swbuf_r+0x12>
 8008dae:	6983      	ldr	r3, [r0, #24]
 8008db0:	b90b      	cbnz	r3, 8008db6 <__swbuf_r+0x12>
 8008db2:	f000 ffe9 	bl	8009d88 <__sinit>
 8008db6:	4b21      	ldr	r3, [pc, #132]	; (8008e3c <__swbuf_r+0x98>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d12a      	bne.n	8008e12 <__swbuf_r+0x6e>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d52e      	bpl.n	8008e26 <__swbuf_r+0x82>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b363      	cbz	r3, 8008e26 <__swbuf_r+0x82>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	b2f6      	uxtb	r6, r6
 8008dd2:	1ac0      	subs	r0, r0, r3
 8008dd4:	6963      	ldr	r3, [r4, #20]
 8008dd6:	4637      	mov	r7, r6
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	dc04      	bgt.n	8008de6 <__swbuf_r+0x42>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 ff68 	bl	8009cb4 <_fflush_r>
 8008de4:	bb28      	cbnz	r0, 8008e32 <__swbuf_r+0x8e>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3001      	adds	r0, #1
 8008dea:	3b01      	subs	r3, #1
 8008dec:	60a3      	str	r3, [r4, #8]
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	701e      	strb	r6, [r3, #0]
 8008df6:	6963      	ldr	r3, [r4, #20]
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x62>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d519      	bpl.n	8008e36 <__swbuf_r+0x92>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d117      	bne.n	8008e36 <__swbuf_r+0x92>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 ff53 	bl	8009cb4 <_fflush_r>
 8008e0e:	b190      	cbz	r0, 8008e36 <__swbuf_r+0x92>
 8008e10:	e00f      	b.n	8008e32 <__swbuf_r+0x8e>
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <__swbuf_r+0x9c>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d101      	bne.n	8008e1c <__swbuf_r+0x78>
 8008e18:	68ac      	ldr	r4, [r5, #8]
 8008e1a:	e7d0      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <__swbuf_r+0xa0>)
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	bf08      	it	eq
 8008e22:	68ec      	ldreq	r4, [r5, #12]
 8008e24:	e7cb      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 f80d 	bl	8008e48 <__swsetup_r>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0cc      	beq.n	8008dcc <__swbuf_r+0x28>
 8008e32:	f04f 37ff 	mov.w	r7, #4294967295
 8008e36:	4638      	mov	r0, r7
 8008e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800c174 	.word	0x0800c174
 8008e40:	0800c194 	.word	0x0800c194
 8008e44:	0800c154 	.word	0x0800c154

08008e48 <__swsetup_r>:
 8008e48:	4b32      	ldr	r3, [pc, #200]	; (8008f14 <__swsetup_r+0xcc>)
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	b125      	cbz	r5, 8008e5e <__swsetup_r+0x16>
 8008e54:	69ab      	ldr	r3, [r5, #24]
 8008e56:	b913      	cbnz	r3, 8008e5e <__swsetup_r+0x16>
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 ff95 	bl	8009d88 <__sinit>
 8008e5e:	4b2e      	ldr	r3, [pc, #184]	; (8008f18 <__swsetup_r+0xd0>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	d10f      	bne.n	8008e84 <__swsetup_r+0x3c>
 8008e64:	686c      	ldr	r4, [r5, #4]
 8008e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	0715      	lsls	r5, r2, #28
 8008e6e:	d42c      	bmi.n	8008eca <__swsetup_r+0x82>
 8008e70:	06d0      	lsls	r0, r2, #27
 8008e72:	d411      	bmi.n	8008e98 <__swsetup_r+0x50>
 8008e74:	2209      	movs	r2, #9
 8008e76:	6032      	str	r2, [r6, #0]
 8008e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e82:	e03e      	b.n	8008f02 <__swsetup_r+0xba>
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <__swsetup_r+0xd4>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d101      	bne.n	8008e8e <__swsetup_r+0x46>
 8008e8a:	68ac      	ldr	r4, [r5, #8]
 8008e8c:	e7eb      	b.n	8008e66 <__swsetup_r+0x1e>
 8008e8e:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <__swsetup_r+0xd8>)
 8008e90:	429c      	cmp	r4, r3
 8008e92:	bf08      	it	eq
 8008e94:	68ec      	ldreq	r4, [r5, #12]
 8008e96:	e7e6      	b.n	8008e66 <__swsetup_r+0x1e>
 8008e98:	0751      	lsls	r1, r2, #29
 8008e9a:	d512      	bpl.n	8008ec2 <__swsetup_r+0x7a>
 8008e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9e:	b141      	cbz	r1, 8008eb2 <__swsetup_r+0x6a>
 8008ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <__swsetup_r+0x66>
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f001 fb69 	bl	800a580 <_free_r>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6063      	str	r3, [r4, #4]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f043 0308 	orr.w	r3, r3, #8
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	b94b      	cbnz	r3, 8008ee2 <__swsetup_r+0x9a>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed8:	d003      	beq.n	8008ee2 <__swsetup_r+0x9a>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4630      	mov	r0, r6
 8008ede:	f001 f80f 	bl	8009f00 <__smakebuf_r>
 8008ee2:	89a2      	ldrh	r2, [r4, #12]
 8008ee4:	f012 0301 	ands.w	r3, r2, #1
 8008ee8:	d00c      	beq.n	8008f04 <__swsetup_r+0xbc>
 8008eea:	2300      	movs	r3, #0
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	6963      	ldr	r3, [r4, #20]
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	61a3      	str	r3, [r4, #24]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	b953      	cbnz	r3, 8008f0e <__swsetup_r+0xc6>
 8008ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008f00:	d1ba      	bne.n	8008e78 <__swsetup_r+0x30>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	0792      	lsls	r2, r2, #30
 8008f06:	bf58      	it	pl
 8008f08:	6963      	ldrpl	r3, [r4, #20]
 8008f0a:	60a3      	str	r3, [r4, #8]
 8008f0c:	e7f2      	b.n	8008ef4 <__swsetup_r+0xac>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e7f7      	b.n	8008f02 <__swsetup_r+0xba>
 8008f12:	bf00      	nop
 8008f14:	2000001c 	.word	0x2000001c
 8008f18:	0800c174 	.word	0x0800c174
 8008f1c:	0800c194 	.word	0x0800c194
 8008f20:	0800c154 	.word	0x0800c154

08008f24 <quorem>:
 8008f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	6903      	ldr	r3, [r0, #16]
 8008f2a:	690c      	ldr	r4, [r1, #16]
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	f2c0 8084 	blt.w	800903c <quorem+0x118>
 8008f34:	3c01      	subs	r4, #1
 8008f36:	f101 0714 	add.w	r7, r1, #20
 8008f3a:	f100 0614 	add.w	r6, r0, #20
 8008f3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008f42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008f46:	3501      	adds	r5, #1
 8008f48:	fbb0 f5f5 	udiv	r5, r0, r5
 8008f4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008f50:	eb06 030c 	add.w	r3, r6, ip
 8008f54:	eb07 090c 	add.w	r9, r7, ip
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	b39d      	cbz	r5, 8008fc4 <quorem+0xa0>
 8008f5c:	f04f 0a00 	mov.w	sl, #0
 8008f60:	4638      	mov	r0, r7
 8008f62:	46b6      	mov	lr, r6
 8008f64:	46d3      	mov	fp, sl
 8008f66:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f6a:	b293      	uxth	r3, r2
 8008f6c:	fb05 a303 	mla	r3, r5, r3, sl
 8008f70:	0c12      	lsrs	r2, r2, #16
 8008f72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f76:	fb05 a202 	mla	r2, r5, r2, sl
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ebab 0303 	sub.w	r3, fp, r3
 8008f80:	f8de b000 	ldr.w	fp, [lr]
 8008f84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008f88:	fa1f fb8b 	uxth.w	fp, fp
 8008f8c:	445b      	add	r3, fp
 8008f8e:	fa1f fb82 	uxth.w	fp, r2
 8008f92:	f8de 2000 	ldr.w	r2, [lr]
 8008f96:	4581      	cmp	r9, r0
 8008f98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fa6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008faa:	f84e 3b04 	str.w	r3, [lr], #4
 8008fae:	d2da      	bcs.n	8008f66 <quorem+0x42>
 8008fb0:	f856 300c 	ldr.w	r3, [r6, ip]
 8008fb4:	b933      	cbnz	r3, 8008fc4 <quorem+0xa0>
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	429e      	cmp	r6, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	d331      	bcc.n	8009024 <quorem+0x100>
 8008fc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	f001 fa05 	bl	800a3d4 <__mcmp>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	db26      	blt.n	800901c <quorem+0xf8>
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f04f 0c00 	mov.w	ip, #0
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	f857 1b04 	ldr.w	r1, [r7], #4
 8008fda:	f8d0 e000 	ldr.w	lr, [r0]
 8008fde:	b28b      	uxth	r3, r1
 8008fe0:	ebac 0303 	sub.w	r3, ip, r3
 8008fe4:	fa1f f28e 	uxth.w	r2, lr
 8008fe8:	4413      	add	r3, r2
 8008fea:	0c0a      	lsrs	r2, r1, #16
 8008fec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ffa:	45b9      	cmp	r9, r7
 8008ffc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009000:	f840 3b04 	str.w	r3, [r0], #4
 8009004:	d2e7      	bcs.n	8008fd6 <quorem+0xb2>
 8009006:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800900a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800900e:	b92a      	cbnz	r2, 800901c <quorem+0xf8>
 8009010:	3b04      	subs	r3, #4
 8009012:	429e      	cmp	r6, r3
 8009014:	461a      	mov	r2, r3
 8009016:	d30b      	bcc.n	8009030 <quorem+0x10c>
 8009018:	f8c8 4010 	str.w	r4, [r8, #16]
 800901c:	4628      	mov	r0, r5
 800901e:	b003      	add	sp, #12
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	3b04      	subs	r3, #4
 8009028:	2a00      	cmp	r2, #0
 800902a:	d1c9      	bne.n	8008fc0 <quorem+0x9c>
 800902c:	3c01      	subs	r4, #1
 800902e:	e7c4      	b.n	8008fba <quorem+0x96>
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	3b04      	subs	r3, #4
 8009034:	2a00      	cmp	r2, #0
 8009036:	d1ef      	bne.n	8009018 <quorem+0xf4>
 8009038:	3c01      	subs	r4, #1
 800903a:	e7ea      	b.n	8009012 <quorem+0xee>
 800903c:	2000      	movs	r0, #0
 800903e:	e7ee      	b.n	800901e <quorem+0xfa>

08009040 <_dtoa_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4616      	mov	r6, r2
 8009046:	461f      	mov	r7, r3
 8009048:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800904a:	b095      	sub	sp, #84	; 0x54
 800904c:	4604      	mov	r4, r0
 800904e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009052:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009056:	b93d      	cbnz	r5, 8009068 <_dtoa_r+0x28>
 8009058:	2010      	movs	r0, #16
 800905a:	f000 ff91 	bl	8009f80 <malloc>
 800905e:	6260      	str	r0, [r4, #36]	; 0x24
 8009060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009064:	6005      	str	r5, [r0, #0]
 8009066:	60c5      	str	r5, [r0, #12]
 8009068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	b151      	cbz	r1, 8009084 <_dtoa_r+0x44>
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	2301      	movs	r3, #1
 8009072:	4093      	lsls	r3, r2
 8009074:	604a      	str	r2, [r1, #4]
 8009076:	608b      	str	r3, [r1, #8]
 8009078:	4620      	mov	r0, r4
 800907a:	f000 ffcb 	bl	800a014 <_Bfree>
 800907e:	2200      	movs	r2, #0
 8009080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	1e3b      	subs	r3, r7, #0
 8009086:	bfaf      	iteee	ge
 8009088:	2300      	movge	r3, #0
 800908a:	2201      	movlt	r2, #1
 800908c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009090:	9303      	strlt	r3, [sp, #12]
 8009092:	bfac      	ite	ge
 8009094:	f8c8 3000 	strge.w	r3, [r8]
 8009098:	f8c8 2000 	strlt.w	r2, [r8]
 800909c:	4bae      	ldr	r3, [pc, #696]	; (8009358 <_dtoa_r+0x318>)
 800909e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80090a2:	ea33 0308 	bics.w	r3, r3, r8
 80090a6:	d11b      	bne.n	80090e0 <_dtoa_r+0xa0>
 80090a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80090ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	9b02      	ldr	r3, [sp, #8]
 80090b2:	b923      	cbnz	r3, 80090be <_dtoa_r+0x7e>
 80090b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f000 8545 	beq.w	8009b48 <_dtoa_r+0xb08>
 80090be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c0:	b953      	cbnz	r3, 80090d8 <_dtoa_r+0x98>
 80090c2:	4ba6      	ldr	r3, [pc, #664]	; (800935c <_dtoa_r+0x31c>)
 80090c4:	e021      	b.n	800910a <_dtoa_r+0xca>
 80090c6:	4ba6      	ldr	r3, [pc, #664]	; (8009360 <_dtoa_r+0x320>)
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	3308      	adds	r3, #8
 80090cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	9806      	ldr	r0, [sp, #24]
 80090d2:	b015      	add	sp, #84	; 0x54
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	4ba0      	ldr	r3, [pc, #640]	; (800935c <_dtoa_r+0x31c>)
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	3303      	adds	r3, #3
 80090de:	e7f5      	b.n	80090cc <_dtoa_r+0x8c>
 80090e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	f7f7 fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80090f0:	4682      	mov	sl, r0
 80090f2:	b160      	cbz	r0, 800910e <_dtoa_r+0xce>
 80090f4:	2301      	movs	r3, #1
 80090f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8520 	beq.w	8009b42 <_dtoa_r+0xb02>
 8009102:	4b98      	ldr	r3, [pc, #608]	; (8009364 <_dtoa_r+0x324>)
 8009104:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	e7e0      	b.n	80090d0 <_dtoa_r+0x90>
 800910e:	ab12      	add	r3, sp, #72	; 0x48
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	ab13      	add	r3, sp, #76	; 0x4c
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	4632      	mov	r2, r6
 8009118:	463b      	mov	r3, r7
 800911a:	4620      	mov	r0, r4
 800911c:	f001 f9d2 	bl	800a4c4 <__d2b>
 8009120:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009124:	4683      	mov	fp, r0
 8009126:	2d00      	cmp	r5, #0
 8009128:	d07d      	beq.n	8009226 <_dtoa_r+0x1e6>
 800912a:	46b0      	mov	r8, r6
 800912c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009130:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009134:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009138:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800913c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009140:	2200      	movs	r2, #0
 8009142:	4b89      	ldr	r3, [pc, #548]	; (8009368 <_dtoa_r+0x328>)
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 f80e 	bl	8000168 <__aeabi_dsub>
 800914c:	a37c      	add	r3, pc, #496	; (adr r3, 8009340 <_dtoa_r+0x300>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f9c1 	bl	80004d8 <__aeabi_dmul>
 8009156:	a37c      	add	r3, pc, #496	; (adr r3, 8009348 <_dtoa_r+0x308>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 f806 	bl	800016c <__adddf3>
 8009160:	4606      	mov	r6, r0
 8009162:	4628      	mov	r0, r5
 8009164:	460f      	mov	r7, r1
 8009166:	f7f7 f94d 	bl	8000404 <__aeabi_i2d>
 800916a:	a379      	add	r3, pc, #484	; (adr r3, 8009350 <_dtoa_r+0x310>)
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f7f7 f9b2 	bl	80004d8 <__aeabi_dmul>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f6 fff6 	bl	800016c <__adddf3>
 8009180:	4606      	mov	r6, r0
 8009182:	460f      	mov	r7, r1
 8009184:	f7f7 fc58 	bl	8000a38 <__aeabi_d2iz>
 8009188:	2200      	movs	r2, #0
 800918a:	4682      	mov	sl, r0
 800918c:	2300      	movs	r3, #0
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fc13 	bl	80009bc <__aeabi_dcmplt>
 8009196:	b148      	cbz	r0, 80091ac <_dtoa_r+0x16c>
 8009198:	4650      	mov	r0, sl
 800919a:	f7f7 f933 	bl	8000404 <__aeabi_i2d>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	f7f7 fc01 	bl	80009a8 <__aeabi_dcmpeq>
 80091a6:	b908      	cbnz	r0, 80091ac <_dtoa_r+0x16c>
 80091a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ac:	f1ba 0f16 	cmp.w	sl, #22
 80091b0:	d85a      	bhi.n	8009268 <_dtoa_r+0x228>
 80091b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091b6:	496d      	ldr	r1, [pc, #436]	; (800936c <_dtoa_r+0x32c>)
 80091b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80091bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c0:	f7f7 fc1a 	bl	80009f8 <__aeabi_dcmpgt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d051      	beq.n	800926c <_dtoa_r+0x22c>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ce:	930d      	str	r3, [sp, #52]	; 0x34
 80091d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091d2:	1b5d      	subs	r5, r3, r5
 80091d4:	1e6b      	subs	r3, r5, #1
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	bf43      	ittte	mi
 80091da:	2300      	movmi	r3, #0
 80091dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80091e0:	9307      	strmi	r3, [sp, #28]
 80091e2:	f04f 0900 	movpl.w	r9, #0
 80091e6:	f1ba 0f00 	cmp.w	sl, #0
 80091ea:	db41      	blt.n	8009270 <_dtoa_r+0x230>
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80091f2:	4453      	add	r3, sl
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	2300      	movs	r3, #0
 80091f8:	9308      	str	r3, [sp, #32]
 80091fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	f200 808f 	bhi.w	8009320 <_dtoa_r+0x2e0>
 8009202:	2b05      	cmp	r3, #5
 8009204:	bfc4      	itt	gt
 8009206:	3b04      	subgt	r3, #4
 8009208:	931e      	strgt	r3, [sp, #120]	; 0x78
 800920a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800920c:	bfc8      	it	gt
 800920e:	2500      	movgt	r5, #0
 8009210:	f1a3 0302 	sub.w	r3, r3, #2
 8009214:	bfd8      	it	le
 8009216:	2501      	movle	r5, #1
 8009218:	2b03      	cmp	r3, #3
 800921a:	f200 808d 	bhi.w	8009338 <_dtoa_r+0x2f8>
 800921e:	e8df f003 	tbb	[pc, r3]
 8009222:	7d7b      	.short	0x7d7b
 8009224:	6f2f      	.short	0x6f2f
 8009226:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800922a:	441d      	add	r5, r3
 800922c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009230:	2820      	cmp	r0, #32
 8009232:	dd13      	ble.n	800925c <_dtoa_r+0x21c>
 8009234:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	fa08 f800 	lsl.w	r8, r8, r0
 800923e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009242:	fa23 f000 	lsr.w	r0, r3, r0
 8009246:	ea48 0000 	orr.w	r0, r8, r0
 800924a:	f7f7 f8cb 	bl	80003e4 <__aeabi_ui2d>
 800924e:	2301      	movs	r3, #1
 8009250:	4680      	mov	r8, r0
 8009252:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009256:	3d01      	subs	r5, #1
 8009258:	9310      	str	r3, [sp, #64]	; 0x40
 800925a:	e771      	b.n	8009140 <_dtoa_r+0x100>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	f1c0 0020 	rsb	r0, r0, #32
 8009262:	fa03 f000 	lsl.w	r0, r3, r0
 8009266:	e7f0      	b.n	800924a <_dtoa_r+0x20a>
 8009268:	2301      	movs	r3, #1
 800926a:	e7b0      	b.n	80091ce <_dtoa_r+0x18e>
 800926c:	900d      	str	r0, [sp, #52]	; 0x34
 800926e:	e7af      	b.n	80091d0 <_dtoa_r+0x190>
 8009270:	f1ca 0300 	rsb	r3, sl, #0
 8009274:	9308      	str	r3, [sp, #32]
 8009276:	2300      	movs	r3, #0
 8009278:	eba9 090a 	sub.w	r9, r9, sl
 800927c:	930c      	str	r3, [sp, #48]	; 0x30
 800927e:	e7bc      	b.n	80091fa <_dtoa_r+0x1ba>
 8009280:	2301      	movs	r3, #1
 8009282:	9309      	str	r3, [sp, #36]	; 0x24
 8009284:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd74      	ble.n	8009374 <_dtoa_r+0x334>
 800928a:	4698      	mov	r8, r3
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	2200      	movs	r2, #0
 8009290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009292:	6072      	str	r2, [r6, #4]
 8009294:	2204      	movs	r2, #4
 8009296:	f102 0014 	add.w	r0, r2, #20
 800929a:	4298      	cmp	r0, r3
 800929c:	6871      	ldr	r1, [r6, #4]
 800929e:	d96e      	bls.n	800937e <_dtoa_r+0x33e>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fe83 	bl	8009fac <_Balloc>
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	6030      	str	r0, [r6, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f1b8 0f0e 	cmp.w	r8, #14
 80092b0:	9306      	str	r3, [sp, #24]
 80092b2:	f200 80ed 	bhi.w	8009490 <_dtoa_r+0x450>
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	f000 80ea 	beq.w	8009490 <_dtoa_r+0x450>
 80092bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80092c8:	dd77      	ble.n	80093ba <_dtoa_r+0x37a>
 80092ca:	4a28      	ldr	r2, [pc, #160]	; (800936c <_dtoa_r+0x32c>)
 80092cc:	f00a 030f 	and.w	r3, sl, #15
 80092d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80092d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092d8:	06f0      	lsls	r0, r6, #27
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092e2:	d568      	bpl.n	80093b6 <_dtoa_r+0x376>
 80092e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80092e8:	4b21      	ldr	r3, [pc, #132]	; (8009370 <_dtoa_r+0x330>)
 80092ea:	2503      	movs	r5, #3
 80092ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092f0:	f7f7 fa1c 	bl	800072c <__aeabi_ddiv>
 80092f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092f8:	f006 060f 	and.w	r6, r6, #15
 80092fc:	4f1c      	ldr	r7, [pc, #112]	; (8009370 <_dtoa_r+0x330>)
 80092fe:	e04f      	b.n	80093a0 <_dtoa_r+0x360>
 8009300:	2301      	movs	r3, #1
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009306:	4453      	add	r3, sl
 8009308:	f103 0801 	add.w	r8, r3, #1
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	4643      	mov	r3, r8
 8009310:	2b01      	cmp	r3, #1
 8009312:	bfb8      	it	lt
 8009314:	2301      	movlt	r3, #1
 8009316:	e7ba      	b.n	800928e <_dtoa_r+0x24e>
 8009318:	2300      	movs	r3, #0
 800931a:	e7b2      	b.n	8009282 <_dtoa_r+0x242>
 800931c:	2300      	movs	r3, #0
 800931e:	e7f0      	b.n	8009302 <_dtoa_r+0x2c2>
 8009320:	2501      	movs	r5, #1
 8009322:	2300      	movs	r3, #0
 8009324:	9509      	str	r5, [sp, #36]	; 0x24
 8009326:	931e      	str	r3, [sp, #120]	; 0x78
 8009328:	f04f 33ff 	mov.w	r3, #4294967295
 800932c:	2200      	movs	r2, #0
 800932e:	9304      	str	r3, [sp, #16]
 8009330:	4698      	mov	r8, r3
 8009332:	2312      	movs	r3, #18
 8009334:	921f      	str	r2, [sp, #124]	; 0x7c
 8009336:	e7aa      	b.n	800928e <_dtoa_r+0x24e>
 8009338:	2301      	movs	r3, #1
 800933a:	9309      	str	r3, [sp, #36]	; 0x24
 800933c:	e7f4      	b.n	8009328 <_dtoa_r+0x2e8>
 800933e:	bf00      	nop
 8009340:	636f4361 	.word	0x636f4361
 8009344:	3fd287a7 	.word	0x3fd287a7
 8009348:	8b60c8b3 	.word	0x8b60c8b3
 800934c:	3fc68a28 	.word	0x3fc68a28
 8009350:	509f79fb 	.word	0x509f79fb
 8009354:	3fd34413 	.word	0x3fd34413
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	0800c14d 	.word	0x0800c14d
 8009360:	0800c144 	.word	0x0800c144
 8009364:	0800c121 	.word	0x0800c121
 8009368:	3ff80000 	.word	0x3ff80000
 800936c:	0800c1e0 	.word	0x0800c1e0
 8009370:	0800c1b8 	.word	0x0800c1b8
 8009374:	2301      	movs	r3, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	4698      	mov	r8, r3
 800937a:	461a      	mov	r2, r3
 800937c:	e7da      	b.n	8009334 <_dtoa_r+0x2f4>
 800937e:	3101      	adds	r1, #1
 8009380:	6071      	str	r1, [r6, #4]
 8009382:	0052      	lsls	r2, r2, #1
 8009384:	e787      	b.n	8009296 <_dtoa_r+0x256>
 8009386:	07f1      	lsls	r1, r6, #31
 8009388:	d508      	bpl.n	800939c <_dtoa_r+0x35c>
 800938a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800938e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009392:	f7f7 f8a1 	bl	80004d8 <__aeabi_dmul>
 8009396:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800939a:	3501      	adds	r5, #1
 800939c:	1076      	asrs	r6, r6, #1
 800939e:	3708      	adds	r7, #8
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	d1f0      	bne.n	8009386 <_dtoa_r+0x346>
 80093a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ac:	f7f7 f9be 	bl	800072c <__aeabi_ddiv>
 80093b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b4:	e01b      	b.n	80093ee <_dtoa_r+0x3ae>
 80093b6:	2502      	movs	r5, #2
 80093b8:	e7a0      	b.n	80092fc <_dtoa_r+0x2bc>
 80093ba:	f000 80a4 	beq.w	8009506 <_dtoa_r+0x4c6>
 80093be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093c2:	f1ca 0600 	rsb	r6, sl, #0
 80093c6:	4ba0      	ldr	r3, [pc, #640]	; (8009648 <_dtoa_r+0x608>)
 80093c8:	f006 020f 	and.w	r2, r6, #15
 80093cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f7f7 f880 	bl	80004d8 <__aeabi_dmul>
 80093d8:	2502      	movs	r5, #2
 80093da:	2300      	movs	r3, #0
 80093dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e0:	4f9a      	ldr	r7, [pc, #616]	; (800964c <_dtoa_r+0x60c>)
 80093e2:	1136      	asrs	r6, r6, #4
 80093e4:	2e00      	cmp	r6, #0
 80093e6:	f040 8083 	bne.w	80094f0 <_dtoa_r+0x4b0>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e0      	bne.n	80093b0 <_dtoa_r+0x370>
 80093ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 808a 	beq.w	800950a <_dtoa_r+0x4ca>
 80093f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009402:	2200      	movs	r2, #0
 8009404:	4b92      	ldr	r3, [pc, #584]	; (8009650 <_dtoa_r+0x610>)
 8009406:	f7f7 fad9 	bl	80009bc <__aeabi_dcmplt>
 800940a:	2800      	cmp	r0, #0
 800940c:	d07d      	beq.n	800950a <_dtoa_r+0x4ca>
 800940e:	f1b8 0f00 	cmp.w	r8, #0
 8009412:	d07a      	beq.n	800950a <_dtoa_r+0x4ca>
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd36      	ble.n	8009488 <_dtoa_r+0x448>
 800941a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800941e:	2200      	movs	r2, #0
 8009420:	4b8c      	ldr	r3, [pc, #560]	; (8009654 <_dtoa_r+0x614>)
 8009422:	f7f7 f859 	bl	80004d8 <__aeabi_dmul>
 8009426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942a:	9e04      	ldr	r6, [sp, #16]
 800942c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009430:	3501      	adds	r5, #1
 8009432:	4628      	mov	r0, r5
 8009434:	f7f6 ffe6 	bl	8000404 <__aeabi_i2d>
 8009438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800943c:	f7f7 f84c 	bl	80004d8 <__aeabi_dmul>
 8009440:	2200      	movs	r2, #0
 8009442:	4b85      	ldr	r3, [pc, #532]	; (8009658 <_dtoa_r+0x618>)
 8009444:	f7f6 fe92 	bl	800016c <__adddf3>
 8009448:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800944c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009450:	950b      	str	r5, [sp, #44]	; 0x2c
 8009452:	2e00      	cmp	r6, #0
 8009454:	d15c      	bne.n	8009510 <_dtoa_r+0x4d0>
 8009456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	4b7f      	ldr	r3, [pc, #508]	; (800965c <_dtoa_r+0x61c>)
 800945e:	f7f6 fe83 	bl	8000168 <__aeabi_dsub>
 8009462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009464:	462b      	mov	r3, r5
 8009466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800946a:	f7f7 fac5 	bl	80009f8 <__aeabi_dcmpgt>
 800946e:	2800      	cmp	r0, #0
 8009470:	f040 8281 	bne.w	8009976 <_dtoa_r+0x936>
 8009474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800947a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800947e:	f7f7 fa9d 	bl	80009bc <__aeabi_dcmplt>
 8009482:	2800      	cmp	r0, #0
 8009484:	f040 8275 	bne.w	8009972 <_dtoa_r+0x932>
 8009488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800948c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009492:	2b00      	cmp	r3, #0
 8009494:	f2c0 814b 	blt.w	800972e <_dtoa_r+0x6ee>
 8009498:	f1ba 0f0e 	cmp.w	sl, #14
 800949c:	f300 8147 	bgt.w	800972e <_dtoa_r+0x6ee>
 80094a0:	4b69      	ldr	r3, [pc, #420]	; (8009648 <_dtoa_r+0x608>)
 80094a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f280 80d7 	bge.w	8009664 <_dtoa_r+0x624>
 80094b6:	f1b8 0f00 	cmp.w	r8, #0
 80094ba:	f300 80d3 	bgt.w	8009664 <_dtoa_r+0x624>
 80094be:	f040 8257 	bne.w	8009970 <_dtoa_r+0x930>
 80094c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c6:	2200      	movs	r2, #0
 80094c8:	4b64      	ldr	r3, [pc, #400]	; (800965c <_dtoa_r+0x61c>)
 80094ca:	f7f7 f805 	bl	80004d8 <__aeabi_dmul>
 80094ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d2:	f7f7 fa87 	bl	80009e4 <__aeabi_dcmpge>
 80094d6:	4646      	mov	r6, r8
 80094d8:	4647      	mov	r7, r8
 80094da:	2800      	cmp	r0, #0
 80094dc:	f040 822d 	bne.w	800993a <_dtoa_r+0x8fa>
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	9a06      	ldr	r2, [sp, #24]
 80094e4:	1c5d      	adds	r5, r3, #1
 80094e6:	2331      	movs	r3, #49	; 0x31
 80094e8:	f10a 0a01 	add.w	sl, sl, #1
 80094ec:	7013      	strb	r3, [r2, #0]
 80094ee:	e228      	b.n	8009942 <_dtoa_r+0x902>
 80094f0:	07f2      	lsls	r2, r6, #31
 80094f2:	d505      	bpl.n	8009500 <_dtoa_r+0x4c0>
 80094f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f8:	f7f6 ffee 	bl	80004d8 <__aeabi_dmul>
 80094fc:	2301      	movs	r3, #1
 80094fe:	3501      	adds	r5, #1
 8009500:	1076      	asrs	r6, r6, #1
 8009502:	3708      	adds	r7, #8
 8009504:	e76e      	b.n	80093e4 <_dtoa_r+0x3a4>
 8009506:	2502      	movs	r5, #2
 8009508:	e771      	b.n	80093ee <_dtoa_r+0x3ae>
 800950a:	4657      	mov	r7, sl
 800950c:	4646      	mov	r6, r8
 800950e:	e790      	b.n	8009432 <_dtoa_r+0x3f2>
 8009510:	4b4d      	ldr	r3, [pc, #308]	; (8009648 <_dtoa_r+0x608>)
 8009512:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009516:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d048      	beq.n	80095b2 <_dtoa_r+0x572>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	2000      	movs	r0, #0
 8009526:	494e      	ldr	r1, [pc, #312]	; (8009660 <_dtoa_r+0x620>)
 8009528:	f7f7 f900 	bl	800072c <__aeabi_ddiv>
 800952c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009530:	f7f6 fe1a 	bl	8000168 <__aeabi_dsub>
 8009534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009538:	9d06      	ldr	r5, [sp, #24]
 800953a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953e:	f7f7 fa7b 	bl	8000a38 <__aeabi_d2iz>
 8009542:	9011      	str	r0, [sp, #68]	; 0x44
 8009544:	f7f6 ff5e 	bl	8000404 <__aeabi_i2d>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009550:	f7f6 fe0a 	bl	8000168 <__aeabi_dsub>
 8009554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800955a:	3330      	adds	r3, #48	; 0x30
 800955c:	f805 3b01 	strb.w	r3, [r5], #1
 8009560:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009564:	f7f7 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8009568:	2800      	cmp	r0, #0
 800956a:	d163      	bne.n	8009634 <_dtoa_r+0x5f4>
 800956c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009570:	2000      	movs	r0, #0
 8009572:	4937      	ldr	r1, [pc, #220]	; (8009650 <_dtoa_r+0x610>)
 8009574:	f7f6 fdf8 	bl	8000168 <__aeabi_dsub>
 8009578:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800957c:	f7f7 fa1e 	bl	80009bc <__aeabi_dcmplt>
 8009580:	2800      	cmp	r0, #0
 8009582:	f040 80b5 	bne.w	80096f0 <_dtoa_r+0x6b0>
 8009586:	9b06      	ldr	r3, [sp, #24]
 8009588:	1aeb      	subs	r3, r5, r3
 800958a:	429e      	cmp	r6, r3
 800958c:	f77f af7c 	ble.w	8009488 <_dtoa_r+0x448>
 8009590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009594:	2200      	movs	r2, #0
 8009596:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <_dtoa_r+0x614>)
 8009598:	f7f6 ff9e 	bl	80004d8 <__aeabi_dmul>
 800959c:	2200      	movs	r2, #0
 800959e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a6:	4b2b      	ldr	r3, [pc, #172]	; (8009654 <_dtoa_r+0x614>)
 80095a8:	f7f6 ff96 	bl	80004d8 <__aeabi_dmul>
 80095ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b0:	e7c3      	b.n	800953a <_dtoa_r+0x4fa>
 80095b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095b6:	f7f6 ff8f 	bl	80004d8 <__aeabi_dmul>
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095c0:	199d      	adds	r5, r3, r6
 80095c2:	461e      	mov	r6, r3
 80095c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c8:	f7f7 fa36 	bl	8000a38 <__aeabi_d2iz>
 80095cc:	9011      	str	r0, [sp, #68]	; 0x44
 80095ce:	f7f6 ff19 	bl	8000404 <__aeabi_i2d>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095da:	f7f6 fdc5 	bl	8000168 <__aeabi_dsub>
 80095de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e4:	3330      	adds	r3, #48	; 0x30
 80095e6:	f806 3b01 	strb.w	r3, [r6], #1
 80095ea:	42ae      	cmp	r6, r5
 80095ec:	f04f 0200 	mov.w	r2, #0
 80095f0:	d124      	bne.n	800963c <_dtoa_r+0x5fc>
 80095f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095f6:	4b1a      	ldr	r3, [pc, #104]	; (8009660 <_dtoa_r+0x620>)
 80095f8:	f7f6 fdb8 	bl	800016c <__adddf3>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009604:	f7f7 f9f8 	bl	80009f8 <__aeabi_dcmpgt>
 8009608:	2800      	cmp	r0, #0
 800960a:	d171      	bne.n	80096f0 <_dtoa_r+0x6b0>
 800960c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009610:	2000      	movs	r0, #0
 8009612:	4913      	ldr	r1, [pc, #76]	; (8009660 <_dtoa_r+0x620>)
 8009614:	f7f6 fda8 	bl	8000168 <__aeabi_dsub>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009620:	f7f7 f9cc 	bl	80009bc <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	f43f af2f 	beq.w	8009488 <_dtoa_r+0x448>
 800962a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800962e:	1e6a      	subs	r2, r5, #1
 8009630:	2b30      	cmp	r3, #48	; 0x30
 8009632:	d001      	beq.n	8009638 <_dtoa_r+0x5f8>
 8009634:	46ba      	mov	sl, r7
 8009636:	e04a      	b.n	80096ce <_dtoa_r+0x68e>
 8009638:	4615      	mov	r5, r2
 800963a:	e7f6      	b.n	800962a <_dtoa_r+0x5ea>
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <_dtoa_r+0x614>)
 800963e:	f7f6 ff4b 	bl	80004d8 <__aeabi_dmul>
 8009642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009646:	e7bd      	b.n	80095c4 <_dtoa_r+0x584>
 8009648:	0800c1e0 	.word	0x0800c1e0
 800964c:	0800c1b8 	.word	0x0800c1b8
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	40240000 	.word	0x40240000
 8009658:	401c0000 	.word	0x401c0000
 800965c:	40140000 	.word	0x40140000
 8009660:	3fe00000 	.word	0x3fe00000
 8009664:	9d06      	ldr	r5, [sp, #24]
 8009666:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800966a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800966e:	4630      	mov	r0, r6
 8009670:	4639      	mov	r1, r7
 8009672:	f7f7 f85b 	bl	800072c <__aeabi_ddiv>
 8009676:	f7f7 f9df 	bl	8000a38 <__aeabi_d2iz>
 800967a:	4681      	mov	r9, r0
 800967c:	f7f6 fec2 	bl	8000404 <__aeabi_i2d>
 8009680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009684:	f7f6 ff28 	bl	80004d8 <__aeabi_dmul>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f6 fd6a 	bl	8000168 <__aeabi_dsub>
 8009694:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009698:	f805 6b01 	strb.w	r6, [r5], #1
 800969c:	9e06      	ldr	r6, [sp, #24]
 800969e:	4602      	mov	r2, r0
 80096a0:	1bae      	subs	r6, r5, r6
 80096a2:	45b0      	cmp	r8, r6
 80096a4:	460b      	mov	r3, r1
 80096a6:	d135      	bne.n	8009714 <_dtoa_r+0x6d4>
 80096a8:	f7f6 fd60 	bl	800016c <__adddf3>
 80096ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	f7f7 f9a0 	bl	80009f8 <__aeabi_dcmpgt>
 80096b8:	b9c8      	cbnz	r0, 80096ee <_dtoa_r+0x6ae>
 80096ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096be:	4630      	mov	r0, r6
 80096c0:	4639      	mov	r1, r7
 80096c2:	f7f7 f971 	bl	80009a8 <__aeabi_dcmpeq>
 80096c6:	b110      	cbz	r0, 80096ce <_dtoa_r+0x68e>
 80096c8:	f019 0f01 	tst.w	r9, #1
 80096cc:	d10f      	bne.n	80096ee <_dtoa_r+0x6ae>
 80096ce:	4659      	mov	r1, fp
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fc9f 	bl	800a014 <_Bfree>
 80096d6:	2300      	movs	r3, #0
 80096d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096da:	702b      	strb	r3, [r5, #0]
 80096dc:	f10a 0301 	add.w	r3, sl, #1
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f43f acf3 	beq.w	80090d0 <_dtoa_r+0x90>
 80096ea:	601d      	str	r5, [r3, #0]
 80096ec:	e4f0      	b.n	80090d0 <_dtoa_r+0x90>
 80096ee:	4657      	mov	r7, sl
 80096f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096f4:	1e6b      	subs	r3, r5, #1
 80096f6:	2a39      	cmp	r2, #57	; 0x39
 80096f8:	d106      	bne.n	8009708 <_dtoa_r+0x6c8>
 80096fa:	9a06      	ldr	r2, [sp, #24]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d107      	bne.n	8009710 <_dtoa_r+0x6d0>
 8009700:	2330      	movs	r3, #48	; 0x30
 8009702:	7013      	strb	r3, [r2, #0]
 8009704:	4613      	mov	r3, r2
 8009706:	3701      	adds	r7, #1
 8009708:	781a      	ldrb	r2, [r3, #0]
 800970a:	3201      	adds	r2, #1
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e791      	b.n	8009634 <_dtoa_r+0x5f4>
 8009710:	461d      	mov	r5, r3
 8009712:	e7ed      	b.n	80096f0 <_dtoa_r+0x6b0>
 8009714:	2200      	movs	r2, #0
 8009716:	4b99      	ldr	r3, [pc, #612]	; (800997c <_dtoa_r+0x93c>)
 8009718:	f7f6 fede 	bl	80004d8 <__aeabi_dmul>
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	4606      	mov	r6, r0
 8009722:	460f      	mov	r7, r1
 8009724:	f7f7 f940 	bl	80009a8 <__aeabi_dcmpeq>
 8009728:	2800      	cmp	r0, #0
 800972a:	d09e      	beq.n	800966a <_dtoa_r+0x62a>
 800972c:	e7cf      	b.n	80096ce <_dtoa_r+0x68e>
 800972e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009730:	2a00      	cmp	r2, #0
 8009732:	f000 8088 	beq.w	8009846 <_dtoa_r+0x806>
 8009736:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009738:	2a01      	cmp	r2, #1
 800973a:	dc6d      	bgt.n	8009818 <_dtoa_r+0x7d8>
 800973c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800973e:	2a00      	cmp	r2, #0
 8009740:	d066      	beq.n	8009810 <_dtoa_r+0x7d0>
 8009742:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009746:	464d      	mov	r5, r9
 8009748:	9e08      	ldr	r6, [sp, #32]
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	2101      	movs	r1, #1
 800974e:	441a      	add	r2, r3
 8009750:	4620      	mov	r0, r4
 8009752:	4499      	add	r9, r3
 8009754:	9207      	str	r2, [sp, #28]
 8009756:	f000 fcfd 	bl	800a154 <__i2b>
 800975a:	4607      	mov	r7, r0
 800975c:	2d00      	cmp	r5, #0
 800975e:	dd0b      	ble.n	8009778 <_dtoa_r+0x738>
 8009760:	9b07      	ldr	r3, [sp, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd08      	ble.n	8009778 <_dtoa_r+0x738>
 8009766:	42ab      	cmp	r3, r5
 8009768:	bfa8      	it	ge
 800976a:	462b      	movge	r3, r5
 800976c:	9a07      	ldr	r2, [sp, #28]
 800976e:	eba9 0903 	sub.w	r9, r9, r3
 8009772:	1aed      	subs	r5, r5, r3
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	b1eb      	cbz	r3, 80097b8 <_dtoa_r+0x778>
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d065      	beq.n	800984e <_dtoa_r+0x80e>
 8009782:	b18e      	cbz	r6, 80097a8 <_dtoa_r+0x768>
 8009784:	4639      	mov	r1, r7
 8009786:	4632      	mov	r2, r6
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fd81 	bl	800a290 <__pow5mult>
 800978e:	465a      	mov	r2, fp
 8009790:	4601      	mov	r1, r0
 8009792:	4607      	mov	r7, r0
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fce6 	bl	800a166 <__multiply>
 800979a:	4659      	mov	r1, fp
 800979c:	900a      	str	r0, [sp, #40]	; 0x28
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fc38 	bl	800a014 <_Bfree>
 80097a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a6:	469b      	mov	fp, r3
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	1b9a      	subs	r2, r3, r6
 80097ac:	d004      	beq.n	80097b8 <_dtoa_r+0x778>
 80097ae:	4659      	mov	r1, fp
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fd6d 	bl	800a290 <__pow5mult>
 80097b6:	4683      	mov	fp, r0
 80097b8:	2101      	movs	r1, #1
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 fcca 	bl	800a154 <__i2b>
 80097c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c2:	4606      	mov	r6, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 81c6 	beq.w	8009b56 <_dtoa_r+0xb16>
 80097ca:	461a      	mov	r2, r3
 80097cc:	4601      	mov	r1, r0
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 fd5e 	bl	800a290 <__pow5mult>
 80097d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097d6:	4606      	mov	r6, r0
 80097d8:	2b01      	cmp	r3, #1
 80097da:	dc3e      	bgt.n	800985a <_dtoa_r+0x81a>
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d137      	bne.n	8009852 <_dtoa_r+0x812>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d134      	bne.n	8009856 <_dtoa_r+0x816>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097f2:	0d1b      	lsrs	r3, r3, #20
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	b12b      	cbz	r3, 8009804 <_dtoa_r+0x7c4>
 80097f8:	9b07      	ldr	r3, [sp, #28]
 80097fa:	f109 0901 	add.w	r9, r9, #1
 80097fe:	3301      	adds	r3, #1
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	2301      	movs	r3, #1
 8009804:	9308      	str	r3, [sp, #32]
 8009806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009808:	2b00      	cmp	r3, #0
 800980a:	d128      	bne.n	800985e <_dtoa_r+0x81e>
 800980c:	2001      	movs	r0, #1
 800980e:	e02e      	b.n	800986e <_dtoa_r+0x82e>
 8009810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009812:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009816:	e796      	b.n	8009746 <_dtoa_r+0x706>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	f108 36ff 	add.w	r6, r8, #4294967295
 800981e:	42b3      	cmp	r3, r6
 8009820:	bfb7      	itett	lt
 8009822:	9b08      	ldrlt	r3, [sp, #32]
 8009824:	1b9e      	subge	r6, r3, r6
 8009826:	1af2      	sublt	r2, r6, r3
 8009828:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800982a:	bfbf      	itttt	lt
 800982c:	9608      	strlt	r6, [sp, #32]
 800982e:	189b      	addlt	r3, r3, r2
 8009830:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009832:	2600      	movlt	r6, #0
 8009834:	f1b8 0f00 	cmp.w	r8, #0
 8009838:	bfb9      	ittee	lt
 800983a:	eba9 0508 	sublt.w	r5, r9, r8
 800983e:	2300      	movlt	r3, #0
 8009840:	464d      	movge	r5, r9
 8009842:	4643      	movge	r3, r8
 8009844:	e781      	b.n	800974a <_dtoa_r+0x70a>
 8009846:	9e08      	ldr	r6, [sp, #32]
 8009848:	464d      	mov	r5, r9
 800984a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800984c:	e786      	b.n	800975c <_dtoa_r+0x71c>
 800984e:	9a08      	ldr	r2, [sp, #32]
 8009850:	e7ad      	b.n	80097ae <_dtoa_r+0x76e>
 8009852:	2300      	movs	r3, #0
 8009854:	e7d6      	b.n	8009804 <_dtoa_r+0x7c4>
 8009856:	9b02      	ldr	r3, [sp, #8]
 8009858:	e7d4      	b.n	8009804 <_dtoa_r+0x7c4>
 800985a:	2300      	movs	r3, #0
 800985c:	9308      	str	r3, [sp, #32]
 800985e:	6933      	ldr	r3, [r6, #16]
 8009860:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009864:	6918      	ldr	r0, [r3, #16]
 8009866:	f000 fc27 	bl	800a0b8 <__hi0bits>
 800986a:	f1c0 0020 	rsb	r0, r0, #32
 800986e:	9b07      	ldr	r3, [sp, #28]
 8009870:	4418      	add	r0, r3
 8009872:	f010 001f 	ands.w	r0, r0, #31
 8009876:	d047      	beq.n	8009908 <_dtoa_r+0x8c8>
 8009878:	f1c0 0320 	rsb	r3, r0, #32
 800987c:	2b04      	cmp	r3, #4
 800987e:	dd3b      	ble.n	80098f8 <_dtoa_r+0x8b8>
 8009880:	9b07      	ldr	r3, [sp, #28]
 8009882:	f1c0 001c 	rsb	r0, r0, #28
 8009886:	4481      	add	r9, r0
 8009888:	4405      	add	r5, r0
 800988a:	4403      	add	r3, r0
 800988c:	9307      	str	r3, [sp, #28]
 800988e:	f1b9 0f00 	cmp.w	r9, #0
 8009892:	dd05      	ble.n	80098a0 <_dtoa_r+0x860>
 8009894:	4659      	mov	r1, fp
 8009896:	464a      	mov	r2, r9
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fd47 	bl	800a32c <__lshift>
 800989e:	4683      	mov	fp, r0
 80098a0:	9b07      	ldr	r3, [sp, #28]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dd05      	ble.n	80098b2 <_dtoa_r+0x872>
 80098a6:	4631      	mov	r1, r6
 80098a8:	461a      	mov	r2, r3
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fd3e 	bl	800a32c <__lshift>
 80098b0:	4606      	mov	r6, r0
 80098b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b4:	b353      	cbz	r3, 800990c <_dtoa_r+0x8cc>
 80098b6:	4631      	mov	r1, r6
 80098b8:	4658      	mov	r0, fp
 80098ba:	f000 fd8b 	bl	800a3d4 <__mcmp>
 80098be:	2800      	cmp	r0, #0
 80098c0:	da24      	bge.n	800990c <_dtoa_r+0x8cc>
 80098c2:	2300      	movs	r3, #0
 80098c4:	4659      	mov	r1, fp
 80098c6:	220a      	movs	r2, #10
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fbba 	bl	800a042 <__multadd>
 80098ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098d4:	4683      	mov	fp, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 8144 	beq.w	8009b64 <_dtoa_r+0xb24>
 80098dc:	2300      	movs	r3, #0
 80098de:	4639      	mov	r1, r7
 80098e0:	220a      	movs	r2, #10
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fbad 	bl	800a042 <__multadd>
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	4607      	mov	r7, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc4d      	bgt.n	800998c <_dtoa_r+0x94c>
 80098f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	dd4a      	ble.n	800998c <_dtoa_r+0x94c>
 80098f6:	e011      	b.n	800991c <_dtoa_r+0x8dc>
 80098f8:	d0c9      	beq.n	800988e <_dtoa_r+0x84e>
 80098fa:	9a07      	ldr	r2, [sp, #28]
 80098fc:	331c      	adds	r3, #28
 80098fe:	441a      	add	r2, r3
 8009900:	4499      	add	r9, r3
 8009902:	441d      	add	r5, r3
 8009904:	4613      	mov	r3, r2
 8009906:	e7c1      	b.n	800988c <_dtoa_r+0x84c>
 8009908:	4603      	mov	r3, r0
 800990a:	e7f6      	b.n	80098fa <_dtoa_r+0x8ba>
 800990c:	f1b8 0f00 	cmp.w	r8, #0
 8009910:	dc36      	bgt.n	8009980 <_dtoa_r+0x940>
 8009912:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009914:	2b02      	cmp	r3, #2
 8009916:	dd33      	ble.n	8009980 <_dtoa_r+0x940>
 8009918:	f8cd 8010 	str.w	r8, [sp, #16]
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	b963      	cbnz	r3, 800993a <_dtoa_r+0x8fa>
 8009920:	4631      	mov	r1, r6
 8009922:	2205      	movs	r2, #5
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fb8c 	bl	800a042 <__multadd>
 800992a:	4601      	mov	r1, r0
 800992c:	4606      	mov	r6, r0
 800992e:	4658      	mov	r0, fp
 8009930:	f000 fd50 	bl	800a3d4 <__mcmp>
 8009934:	2800      	cmp	r0, #0
 8009936:	f73f add3 	bgt.w	80094e0 <_dtoa_r+0x4a0>
 800993a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800993c:	9d06      	ldr	r5, [sp, #24]
 800993e:	ea6f 0a03 	mvn.w	sl, r3
 8009942:	f04f 0900 	mov.w	r9, #0
 8009946:	4631      	mov	r1, r6
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fb63 	bl	800a014 <_Bfree>
 800994e:	2f00      	cmp	r7, #0
 8009950:	f43f aebd 	beq.w	80096ce <_dtoa_r+0x68e>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	d005      	beq.n	8009966 <_dtoa_r+0x926>
 800995a:	45b9      	cmp	r9, r7
 800995c:	d003      	beq.n	8009966 <_dtoa_r+0x926>
 800995e:	4649      	mov	r1, r9
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fb57 	bl	800a014 <_Bfree>
 8009966:	4639      	mov	r1, r7
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fb53 	bl	800a014 <_Bfree>
 800996e:	e6ae      	b.n	80096ce <_dtoa_r+0x68e>
 8009970:	2600      	movs	r6, #0
 8009972:	4637      	mov	r7, r6
 8009974:	e7e1      	b.n	800993a <_dtoa_r+0x8fa>
 8009976:	46ba      	mov	sl, r7
 8009978:	4637      	mov	r7, r6
 800997a:	e5b1      	b.n	80094e0 <_dtoa_r+0x4a0>
 800997c:	40240000 	.word	0x40240000
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	f8cd 8010 	str.w	r8, [sp, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80f3 	beq.w	8009b72 <_dtoa_r+0xb32>
 800998c:	2d00      	cmp	r5, #0
 800998e:	dd05      	ble.n	800999c <_dtoa_r+0x95c>
 8009990:	4639      	mov	r1, r7
 8009992:	462a      	mov	r2, r5
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fcc9 	bl	800a32c <__lshift>
 800999a:	4607      	mov	r7, r0
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d04c      	beq.n	8009a3c <_dtoa_r+0x9fc>
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fb01 	bl	8009fac <_Balloc>
 80099aa:	4605      	mov	r5, r0
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	f107 010c 	add.w	r1, r7, #12
 80099b2:	3202      	adds	r2, #2
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	300c      	adds	r0, #12
 80099b8:	f7fe fd0e 	bl	80083d8 <memcpy>
 80099bc:	2201      	movs	r2, #1
 80099be:	4629      	mov	r1, r5
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fcb3 	bl	800a32c <__lshift>
 80099c6:	46b9      	mov	r9, r7
 80099c8:	4607      	mov	r7, r0
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	9307      	str	r3, [sp, #28]
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	9308      	str	r3, [sp, #32]
 80099d6:	4631      	mov	r1, r6
 80099d8:	4658      	mov	r0, fp
 80099da:	f7ff faa3 	bl	8008f24 <quorem>
 80099de:	4649      	mov	r1, r9
 80099e0:	4605      	mov	r5, r0
 80099e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80099e6:	4658      	mov	r0, fp
 80099e8:	f000 fcf4 	bl	800a3d4 <__mcmp>
 80099ec:	463a      	mov	r2, r7
 80099ee:	9002      	str	r0, [sp, #8]
 80099f0:	4631      	mov	r1, r6
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 fd08 	bl	800a408 <__mdiff>
 80099f8:	68c3      	ldr	r3, [r0, #12]
 80099fa:	4602      	mov	r2, r0
 80099fc:	bb03      	cbnz	r3, 8009a40 <_dtoa_r+0xa00>
 80099fe:	4601      	mov	r1, r0
 8009a00:	9009      	str	r0, [sp, #36]	; 0x24
 8009a02:	4658      	mov	r0, fp
 8009a04:	f000 fce6 	bl	800a3d4 <__mcmp>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4620      	mov	r0, r4
 8009a10:	9309      	str	r3, [sp, #36]	; 0x24
 8009a12:	f000 faff 	bl	800a014 <_Bfree>
 8009a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a18:	b9a3      	cbnz	r3, 8009a44 <_dtoa_r+0xa04>
 8009a1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a1c:	b992      	cbnz	r2, 8009a44 <_dtoa_r+0xa04>
 8009a1e:	9a08      	ldr	r2, [sp, #32]
 8009a20:	b982      	cbnz	r2, 8009a44 <_dtoa_r+0xa04>
 8009a22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a26:	d029      	beq.n	8009a7c <_dtoa_r+0xa3c>
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dd01      	ble.n	8009a32 <_dtoa_r+0x9f2>
 8009a2e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009a32:	9b07      	ldr	r3, [sp, #28]
 8009a34:	1c5d      	adds	r5, r3, #1
 8009a36:	f883 8000 	strb.w	r8, [r3]
 8009a3a:	e784      	b.n	8009946 <_dtoa_r+0x906>
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	e7c2      	b.n	80099c6 <_dtoa_r+0x986>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7e3      	b.n	8009a0c <_dtoa_r+0x9cc>
 8009a44:	9a02      	ldr	r2, [sp, #8]
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	db04      	blt.n	8009a54 <_dtoa_r+0xa14>
 8009a4a:	d123      	bne.n	8009a94 <_dtoa_r+0xa54>
 8009a4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a4e:	bb0a      	cbnz	r2, 8009a94 <_dtoa_r+0xa54>
 8009a50:	9a08      	ldr	r2, [sp, #32]
 8009a52:	b9fa      	cbnz	r2, 8009a94 <_dtoa_r+0xa54>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	ddec      	ble.n	8009a32 <_dtoa_r+0x9f2>
 8009a58:	4659      	mov	r1, fp
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fc65 	bl	800a32c <__lshift>
 8009a62:	4631      	mov	r1, r6
 8009a64:	4683      	mov	fp, r0
 8009a66:	f000 fcb5 	bl	800a3d4 <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	dc03      	bgt.n	8009a76 <_dtoa_r+0xa36>
 8009a6e:	d1e0      	bne.n	8009a32 <_dtoa_r+0x9f2>
 8009a70:	f018 0f01 	tst.w	r8, #1
 8009a74:	d0dd      	beq.n	8009a32 <_dtoa_r+0x9f2>
 8009a76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a7a:	d1d8      	bne.n	8009a2e <_dtoa_r+0x9ee>
 8009a7c:	9b07      	ldr	r3, [sp, #28]
 8009a7e:	9a07      	ldr	r2, [sp, #28]
 8009a80:	1c5d      	adds	r5, r3, #1
 8009a82:	2339      	movs	r3, #57	; 0x39
 8009a84:	7013      	strb	r3, [r2, #0]
 8009a86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a8a:	1e6a      	subs	r2, r5, #1
 8009a8c:	2b39      	cmp	r3, #57	; 0x39
 8009a8e:	d04d      	beq.n	8009b2c <_dtoa_r+0xaec>
 8009a90:	3301      	adds	r3, #1
 8009a92:	e052      	b.n	8009b3a <_dtoa_r+0xafa>
 8009a94:	9a07      	ldr	r2, [sp, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f102 0501 	add.w	r5, r2, #1
 8009a9c:	dd06      	ble.n	8009aac <_dtoa_r+0xa6c>
 8009a9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009aa2:	d0eb      	beq.n	8009a7c <_dtoa_r+0xa3c>
 8009aa4:	f108 0801 	add.w	r8, r8, #1
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	e7c4      	b.n	8009a36 <_dtoa_r+0x9f6>
 8009aac:	9b06      	ldr	r3, [sp, #24]
 8009aae:	9a04      	ldr	r2, [sp, #16]
 8009ab0:	1aeb      	subs	r3, r5, r3
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009ab8:	d021      	beq.n	8009afe <_dtoa_r+0xabe>
 8009aba:	4659      	mov	r1, fp
 8009abc:	2300      	movs	r3, #0
 8009abe:	220a      	movs	r2, #10
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fabe 	bl	800a042 <__multadd>
 8009ac6:	45b9      	cmp	r9, r7
 8009ac8:	4683      	mov	fp, r0
 8009aca:	f04f 0300 	mov.w	r3, #0
 8009ace:	f04f 020a 	mov.w	r2, #10
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	d105      	bne.n	8009ae4 <_dtoa_r+0xaa4>
 8009ad8:	f000 fab3 	bl	800a042 <__multadd>
 8009adc:	4681      	mov	r9, r0
 8009ade:	4607      	mov	r7, r0
 8009ae0:	9507      	str	r5, [sp, #28]
 8009ae2:	e778      	b.n	80099d6 <_dtoa_r+0x996>
 8009ae4:	f000 faad 	bl	800a042 <__multadd>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4681      	mov	r9, r0
 8009aec:	2300      	movs	r3, #0
 8009aee:	220a      	movs	r2, #10
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 faa6 	bl	800a042 <__multadd>
 8009af6:	4607      	mov	r7, r0
 8009af8:	e7f2      	b.n	8009ae0 <_dtoa_r+0xaa0>
 8009afa:	f04f 0900 	mov.w	r9, #0
 8009afe:	4659      	mov	r1, fp
 8009b00:	2201      	movs	r2, #1
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fc12 	bl	800a32c <__lshift>
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4683      	mov	fp, r0
 8009b0c:	f000 fc62 	bl	800a3d4 <__mcmp>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	dcb8      	bgt.n	8009a86 <_dtoa_r+0xa46>
 8009b14:	d102      	bne.n	8009b1c <_dtoa_r+0xadc>
 8009b16:	f018 0f01 	tst.w	r8, #1
 8009b1a:	d1b4      	bne.n	8009a86 <_dtoa_r+0xa46>
 8009b1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b20:	1e6a      	subs	r2, r5, #1
 8009b22:	2b30      	cmp	r3, #48	; 0x30
 8009b24:	f47f af0f 	bne.w	8009946 <_dtoa_r+0x906>
 8009b28:	4615      	mov	r5, r2
 8009b2a:	e7f7      	b.n	8009b1c <_dtoa_r+0xadc>
 8009b2c:	9b06      	ldr	r3, [sp, #24]
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d105      	bne.n	8009b3e <_dtoa_r+0xafe>
 8009b32:	2331      	movs	r3, #49	; 0x31
 8009b34:	9a06      	ldr	r2, [sp, #24]
 8009b36:	f10a 0a01 	add.w	sl, sl, #1
 8009b3a:	7013      	strb	r3, [r2, #0]
 8009b3c:	e703      	b.n	8009946 <_dtoa_r+0x906>
 8009b3e:	4615      	mov	r5, r2
 8009b40:	e7a1      	b.n	8009a86 <_dtoa_r+0xa46>
 8009b42:	4b17      	ldr	r3, [pc, #92]	; (8009ba0 <_dtoa_r+0xb60>)
 8009b44:	f7ff bae1 	b.w	800910a <_dtoa_r+0xca>
 8009b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f47f aabb 	bne.w	80090c6 <_dtoa_r+0x86>
 8009b50:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <_dtoa_r+0xb64>)
 8009b52:	f7ff bada 	b.w	800910a <_dtoa_r+0xca>
 8009b56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	f77f ae3f 	ble.w	80097dc <_dtoa_r+0x79c>
 8009b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b60:	9308      	str	r3, [sp, #32]
 8009b62:	e653      	b.n	800980c <_dtoa_r+0x7cc>
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dc03      	bgt.n	8009b72 <_dtoa_r+0xb32>
 8009b6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	f73f aed5 	bgt.w	800991c <_dtoa_r+0x8dc>
 8009b72:	9d06      	ldr	r5, [sp, #24]
 8009b74:	4631      	mov	r1, r6
 8009b76:	4658      	mov	r0, fp
 8009b78:	f7ff f9d4 	bl	8008f24 <quorem>
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b82:	f805 8b01 	strb.w	r8, [r5], #1
 8009b86:	9a04      	ldr	r2, [sp, #16]
 8009b88:	1aeb      	subs	r3, r5, r3
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	ddb5      	ble.n	8009afa <_dtoa_r+0xaba>
 8009b8e:	4659      	mov	r1, fp
 8009b90:	2300      	movs	r3, #0
 8009b92:	220a      	movs	r2, #10
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 fa54 	bl	800a042 <__multadd>
 8009b9a:	4683      	mov	fp, r0
 8009b9c:	e7ea      	b.n	8009b74 <_dtoa_r+0xb34>
 8009b9e:	bf00      	nop
 8009ba0:	0800c120 	.word	0x0800c120
 8009ba4:	0800c144 	.word	0x0800c144

08009ba8 <__sflush_r>:
 8009ba8:	898a      	ldrh	r2, [r1, #12]
 8009baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	4605      	mov	r5, r0
 8009bb0:	0710      	lsls	r0, r2, #28
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	d458      	bmi.n	8009c68 <__sflush_r+0xc0>
 8009bb6:	684b      	ldr	r3, [r1, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc05      	bgt.n	8009bc8 <__sflush_r+0x20>
 8009bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dc02      	bgt.n	8009bc8 <__sflush_r+0x20>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d0f9      	beq.n	8009bc2 <__sflush_r+0x1a>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bd4:	682f      	ldr	r7, [r5, #0]
 8009bd6:	6a21      	ldr	r1, [r4, #32]
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	d032      	beq.n	8009c42 <__sflush_r+0x9a>
 8009bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	075a      	lsls	r2, r3, #29
 8009be2:	d505      	bpl.n	8009bf0 <__sflush_r+0x48>
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	1ac0      	subs	r0, r0, r3
 8009be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bea:	b10b      	cbz	r3, 8009bf0 <__sflush_r+0x48>
 8009bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bee:	1ac0      	subs	r0, r0, r3
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bf6:	6a21      	ldr	r1, [r4, #32]
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b0      	blx	r6
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	d106      	bne.n	8009c10 <__sflush_r+0x68>
 8009c02:	6829      	ldr	r1, [r5, #0]
 8009c04:	291d      	cmp	r1, #29
 8009c06:	d848      	bhi.n	8009c9a <__sflush_r+0xf2>
 8009c08:	4a29      	ldr	r2, [pc, #164]	; (8009cb0 <__sflush_r+0x108>)
 8009c0a:	40ca      	lsrs	r2, r1
 8009c0c:	07d6      	lsls	r6, r2, #31
 8009c0e:	d544      	bpl.n	8009c9a <__sflush_r+0xf2>
 8009c10:	2200      	movs	r2, #0
 8009c12:	6062      	str	r2, [r4, #4]
 8009c14:	6922      	ldr	r2, [r4, #16]
 8009c16:	04d9      	lsls	r1, r3, #19
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	d504      	bpl.n	8009c26 <__sflush_r+0x7e>
 8009c1c:	1c42      	adds	r2, r0, #1
 8009c1e:	d101      	bne.n	8009c24 <__sflush_r+0x7c>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b903      	cbnz	r3, 8009c26 <__sflush_r+0x7e>
 8009c24:	6560      	str	r0, [r4, #84]	; 0x54
 8009c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c28:	602f      	str	r7, [r5, #0]
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	d0c9      	beq.n	8009bc2 <__sflush_r+0x1a>
 8009c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c32:	4299      	cmp	r1, r3
 8009c34:	d002      	beq.n	8009c3c <__sflush_r+0x94>
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 fca2 	bl	800a580 <_free_r>
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6360      	str	r0, [r4, #52]	; 0x34
 8009c40:	e7c0      	b.n	8009bc4 <__sflush_r+0x1c>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b0      	blx	r6
 8009c48:	1c41      	adds	r1, r0, #1
 8009c4a:	d1c8      	bne.n	8009bde <__sflush_r+0x36>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0c5      	beq.n	8009bde <__sflush_r+0x36>
 8009c52:	2b1d      	cmp	r3, #29
 8009c54:	d001      	beq.n	8009c5a <__sflush_r+0xb2>
 8009c56:	2b16      	cmp	r3, #22
 8009c58:	d101      	bne.n	8009c5e <__sflush_r+0xb6>
 8009c5a:	602f      	str	r7, [r5, #0]
 8009c5c:	e7b1      	b.n	8009bc2 <__sflush_r+0x1a>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	e7ad      	b.n	8009bc4 <__sflush_r+0x1c>
 8009c68:	690f      	ldr	r7, [r1, #16]
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	d0a9      	beq.n	8009bc2 <__sflush_r+0x1a>
 8009c6e:	0793      	lsls	r3, r2, #30
 8009c70:	bf18      	it	ne
 8009c72:	2300      	movne	r3, #0
 8009c74:	680e      	ldr	r6, [r1, #0]
 8009c76:	bf08      	it	eq
 8009c78:	694b      	ldreq	r3, [r1, #20]
 8009c7a:	eba6 0807 	sub.w	r8, r6, r7
 8009c7e:	600f      	str	r7, [r1, #0]
 8009c80:	608b      	str	r3, [r1, #8]
 8009c82:	f1b8 0f00 	cmp.w	r8, #0
 8009c86:	dd9c      	ble.n	8009bc2 <__sflush_r+0x1a>
 8009c88:	4643      	mov	r3, r8
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	6a21      	ldr	r1, [r4, #32]
 8009c8e:	4628      	mov	r0, r5
 8009c90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c92:	47b0      	blx	r6
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dc06      	bgt.n	8009ca6 <__sflush_r+0xfe>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	e78e      	b.n	8009bc4 <__sflush_r+0x1c>
 8009ca6:	4407      	add	r7, r0
 8009ca8:	eba8 0800 	sub.w	r8, r8, r0
 8009cac:	e7e9      	b.n	8009c82 <__sflush_r+0xda>
 8009cae:	bf00      	nop
 8009cb0:	20400001 	.word	0x20400001

08009cb4 <_fflush_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	690b      	ldr	r3, [r1, #16]
 8009cb8:	4605      	mov	r5, r0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	b1db      	cbz	r3, 8009cf6 <_fflush_r+0x42>
 8009cbe:	b118      	cbz	r0, 8009cc8 <_fflush_r+0x14>
 8009cc0:	6983      	ldr	r3, [r0, #24]
 8009cc2:	b90b      	cbnz	r3, 8009cc8 <_fflush_r+0x14>
 8009cc4:	f000 f860 	bl	8009d88 <__sinit>
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <_fflush_r+0x48>)
 8009cca:	429c      	cmp	r4, r3
 8009ccc:	d109      	bne.n	8009ce2 <_fflush_r+0x2e>
 8009cce:	686c      	ldr	r4, [r5, #4]
 8009cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd4:	b17b      	cbz	r3, 8009cf6 <_fflush_r+0x42>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cde:	f7ff bf63 	b.w	8009ba8 <__sflush_r>
 8009ce2:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <_fflush_r+0x4c>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d101      	bne.n	8009cec <_fflush_r+0x38>
 8009ce8:	68ac      	ldr	r4, [r5, #8]
 8009cea:	e7f1      	b.n	8009cd0 <_fflush_r+0x1c>
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <_fflush_r+0x50>)
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	bf08      	it	eq
 8009cf2:	68ec      	ldreq	r4, [r5, #12]
 8009cf4:	e7ec      	b.n	8009cd0 <_fflush_r+0x1c>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800c174 	.word	0x0800c174
 8009d00:	0800c194 	.word	0x0800c194
 8009d04:	0800c154 	.word	0x0800c154

08009d08 <std>:
 8009d08:	2300      	movs	r3, #0
 8009d0a:	b510      	push	{r4, lr}
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d12:	6083      	str	r3, [r0, #8]
 8009d14:	8181      	strh	r1, [r0, #12]
 8009d16:	6643      	str	r3, [r0, #100]	; 0x64
 8009d18:	81c2      	strh	r2, [r0, #14]
 8009d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1e:	6183      	str	r3, [r0, #24]
 8009d20:	4619      	mov	r1, r3
 8009d22:	2208      	movs	r2, #8
 8009d24:	305c      	adds	r0, #92	; 0x5c
 8009d26:	f7fe fb62 	bl	80083ee <memset>
 8009d2a:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <std+0x38>)
 8009d2c:	6224      	str	r4, [r4, #32]
 8009d2e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <std+0x3c>)
 8009d32:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d34:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <std+0x40>)
 8009d36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d38:	4b04      	ldr	r3, [pc, #16]	; (8009d4c <std+0x44>)
 8009d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d3c:	bd10      	pop	{r4, pc}
 8009d3e:	bf00      	nop
 8009d40:	0800a991 	.word	0x0800a991
 8009d44:	0800a9b3 	.word	0x0800a9b3
 8009d48:	0800a9eb 	.word	0x0800a9eb
 8009d4c:	0800aa0f 	.word	0x0800aa0f

08009d50 <_cleanup_r>:
 8009d50:	4901      	ldr	r1, [pc, #4]	; (8009d58 <_cleanup_r+0x8>)
 8009d52:	f000 b885 	b.w	8009e60 <_fwalk_reent>
 8009d56:	bf00      	nop
 8009d58:	08009cb5 	.word	0x08009cb5

08009d5c <__sfmoreglue>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	2568      	movs	r5, #104	; 0x68
 8009d60:	1e4a      	subs	r2, r1, #1
 8009d62:	4355      	muls	r5, r2
 8009d64:	460e      	mov	r6, r1
 8009d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d6a:	f000 fc55 	bl	800a618 <_malloc_r>
 8009d6e:	4604      	mov	r4, r0
 8009d70:	b140      	cbz	r0, 8009d84 <__sfmoreglue+0x28>
 8009d72:	2100      	movs	r1, #0
 8009d74:	e9c0 1600 	strd	r1, r6, [r0]
 8009d78:	300c      	adds	r0, #12
 8009d7a:	60a0      	str	r0, [r4, #8]
 8009d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d80:	f7fe fb35 	bl	80083ee <memset>
 8009d84:	4620      	mov	r0, r4
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__sinit>:
 8009d88:	6983      	ldr	r3, [r0, #24]
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	bb33      	cbnz	r3, 8009dde <__sinit+0x56>
 8009d90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009d94:	6503      	str	r3, [r0, #80]	; 0x50
 8009d96:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <__sinit+0x58>)
 8009d98:	4a12      	ldr	r2, [pc, #72]	; (8009de4 <__sinit+0x5c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6282      	str	r2, [r0, #40]	; 0x28
 8009d9e:	4298      	cmp	r0, r3
 8009da0:	bf04      	itt	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	6183      	streq	r3, [r0, #24]
 8009da6:	f000 f81f 	bl	8009de8 <__sfp>
 8009daa:	6060      	str	r0, [r4, #4]
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 f81b 	bl	8009de8 <__sfp>
 8009db2:	60a0      	str	r0, [r4, #8]
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 f817 	bl	8009de8 <__sfp>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	60e0      	str	r0, [r4, #12]
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	6860      	ldr	r0, [r4, #4]
 8009dc2:	f7ff ffa1 	bl	8009d08 <std>
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	2109      	movs	r1, #9
 8009dca:	68a0      	ldr	r0, [r4, #8]
 8009dcc:	f7ff ff9c 	bl	8009d08 <std>
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	2112      	movs	r1, #18
 8009dd4:	68e0      	ldr	r0, [r4, #12]
 8009dd6:	f7ff ff97 	bl	8009d08 <std>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	61a3      	str	r3, [r4, #24]
 8009dde:	bd10      	pop	{r4, pc}
 8009de0:	0800c10c 	.word	0x0800c10c
 8009de4:	08009d51 	.word	0x08009d51

08009de8 <__sfp>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <__sfp+0x70>)
 8009dec:	4607      	mov	r7, r0
 8009dee:	681e      	ldr	r6, [r3, #0]
 8009df0:	69b3      	ldr	r3, [r6, #24]
 8009df2:	b913      	cbnz	r3, 8009dfa <__sfp+0x12>
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff ffc7 	bl	8009d88 <__sinit>
 8009dfa:	3648      	adds	r6, #72	; 0x48
 8009dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	d503      	bpl.n	8009e0c <__sfp+0x24>
 8009e04:	6833      	ldr	r3, [r6, #0]
 8009e06:	b133      	cbz	r3, 8009e16 <__sfp+0x2e>
 8009e08:	6836      	ldr	r6, [r6, #0]
 8009e0a:	e7f7      	b.n	8009dfc <__sfp+0x14>
 8009e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e10:	b16d      	cbz	r5, 8009e2e <__sfp+0x46>
 8009e12:	3468      	adds	r4, #104	; 0x68
 8009e14:	e7f4      	b.n	8009e00 <__sfp+0x18>
 8009e16:	2104      	movs	r1, #4
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ff9f 	bl	8009d5c <__sfmoreglue>
 8009e1e:	6030      	str	r0, [r6, #0]
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1f1      	bne.n	8009e08 <__sfp+0x20>
 8009e24:	230c      	movs	r3, #12
 8009e26:	4604      	mov	r4, r0
 8009e28:	603b      	str	r3, [r7, #0]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <__sfp+0x74>)
 8009e30:	6665      	str	r5, [r4, #100]	; 0x64
 8009e32:	e9c4 5500 	strd	r5, r5, [r4]
 8009e36:	60a5      	str	r5, [r4, #8]
 8009e38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009e3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009e40:	2208      	movs	r2, #8
 8009e42:	4629      	mov	r1, r5
 8009e44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e48:	f7fe fad1 	bl	80083ee <memset>
 8009e4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e54:	e7e9      	b.n	8009e2a <__sfp+0x42>
 8009e56:	bf00      	nop
 8009e58:	0800c10c 	.word	0x0800c10c
 8009e5c:	ffff0001 	.word	0xffff0001

08009e60 <_fwalk_reent>:
 8009e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	4680      	mov	r8, r0
 8009e66:	4689      	mov	r9, r1
 8009e68:	2600      	movs	r6, #0
 8009e6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e6e:	b914      	cbnz	r4, 8009e76 <_fwalk_reent+0x16>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009e7a:	3f01      	subs	r7, #1
 8009e7c:	d501      	bpl.n	8009e82 <_fwalk_reent+0x22>
 8009e7e:	6824      	ldr	r4, [r4, #0]
 8009e80:	e7f5      	b.n	8009e6e <_fwalk_reent+0xe>
 8009e82:	89ab      	ldrh	r3, [r5, #12]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d907      	bls.n	8009e98 <_fwalk_reent+0x38>
 8009e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	d003      	beq.n	8009e98 <_fwalk_reent+0x38>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4640      	mov	r0, r8
 8009e94:	47c8      	blx	r9
 8009e96:	4306      	orrs	r6, r0
 8009e98:	3568      	adds	r5, #104	; 0x68
 8009e9a:	e7ee      	b.n	8009e7a <_fwalk_reent+0x1a>

08009e9c <_localeconv_r>:
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <_localeconv_r+0x14>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6a18      	ldr	r0, [r3, #32]
 8009ea2:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <_localeconv_r+0x18>)
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	bf08      	it	eq
 8009ea8:	4618      	moveq	r0, r3
 8009eaa:	30f0      	adds	r0, #240	; 0xf0
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	2000001c 	.word	0x2000001c
 8009eb4:	20000080 	.word	0x20000080

08009eb8 <__swhatbuf_r>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	460e      	mov	r6, r1
 8009ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec0:	b096      	sub	sp, #88	; 0x58
 8009ec2:	2900      	cmp	r1, #0
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	461d      	mov	r5, r3
 8009ec8:	da07      	bge.n	8009eda <__swhatbuf_r+0x22>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	89b3      	ldrh	r3, [r6, #12]
 8009ed0:	061a      	lsls	r2, r3, #24
 8009ed2:	d410      	bmi.n	8009ef6 <__swhatbuf_r+0x3e>
 8009ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ed8:	e00e      	b.n	8009ef8 <__swhatbuf_r+0x40>
 8009eda:	466a      	mov	r2, sp
 8009edc:	f000 fdbe 	bl	800aa5c <_fstat_r>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	dbf2      	blt.n	8009eca <__swhatbuf_r+0x12>
 8009ee4:	9a01      	ldr	r2, [sp, #4]
 8009ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009eee:	425a      	negs	r2, r3
 8009ef0:	415a      	adcs	r2, r3
 8009ef2:	602a      	str	r2, [r5, #0]
 8009ef4:	e7ee      	b.n	8009ed4 <__swhatbuf_r+0x1c>
 8009ef6:	2340      	movs	r3, #64	; 0x40
 8009ef8:	2000      	movs	r0, #0
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	b016      	add	sp, #88	; 0x58
 8009efe:	bd70      	pop	{r4, r5, r6, pc}

08009f00 <__smakebuf_r>:
 8009f00:	898b      	ldrh	r3, [r1, #12]
 8009f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f04:	079d      	lsls	r5, r3, #30
 8009f06:	4606      	mov	r6, r0
 8009f08:	460c      	mov	r4, r1
 8009f0a:	d507      	bpl.n	8009f1c <__smakebuf_r+0x1c>
 8009f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	6123      	str	r3, [r4, #16]
 8009f14:	2301      	movs	r3, #1
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	b002      	add	sp, #8
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	ab01      	add	r3, sp, #4
 8009f1e:	466a      	mov	r2, sp
 8009f20:	f7ff ffca 	bl	8009eb8 <__swhatbuf_r>
 8009f24:	9900      	ldr	r1, [sp, #0]
 8009f26:	4605      	mov	r5, r0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fb75 	bl	800a618 <_malloc_r>
 8009f2e:	b948      	cbnz	r0, 8009f44 <__smakebuf_r+0x44>
 8009f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f34:	059a      	lsls	r2, r3, #22
 8009f36:	d4ef      	bmi.n	8009f18 <__smakebuf_r+0x18>
 8009f38:	f023 0303 	bic.w	r3, r3, #3
 8009f3c:	f043 0302 	orr.w	r3, r3, #2
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	e7e3      	b.n	8009f0c <__smakebuf_r+0xc>
 8009f44:	4b0d      	ldr	r3, [pc, #52]	; (8009f7c <__smakebuf_r+0x7c>)
 8009f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	6020      	str	r0, [r4, #0]
 8009f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	9b00      	ldr	r3, [sp, #0]
 8009f54:	6120      	str	r0, [r4, #16]
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	9b01      	ldr	r3, [sp, #4]
 8009f5a:	b15b      	cbz	r3, 8009f74 <__smakebuf_r+0x74>
 8009f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 fd8d 	bl	800aa80 <_isatty_r>
 8009f66:	b128      	cbz	r0, 8009f74 <__smakebuf_r+0x74>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	f023 0303 	bic.w	r3, r3, #3
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	431d      	orrs	r5, r3
 8009f78:	81a5      	strh	r5, [r4, #12]
 8009f7a:	e7cd      	b.n	8009f18 <__smakebuf_r+0x18>
 8009f7c:	08009d51 	.word	0x08009d51

08009f80 <malloc>:
 8009f80:	4b02      	ldr	r3, [pc, #8]	; (8009f8c <malloc+0xc>)
 8009f82:	4601      	mov	r1, r0
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	f000 bb47 	b.w	800a618 <_malloc_r>
 8009f8a:	bf00      	nop
 8009f8c:	2000001c 	.word	0x2000001c

08009f90 <memchr>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	b2c9      	uxtb	r1, r1
 8009f94:	4402      	add	r2, r0
 8009f96:	4290      	cmp	r0, r2
 8009f98:	4603      	mov	r3, r0
 8009f9a:	d101      	bne.n	8009fa0 <memchr+0x10>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e003      	b.n	8009fa8 <memchr+0x18>
 8009fa0:	781c      	ldrb	r4, [r3, #0]
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	428c      	cmp	r4, r1
 8009fa6:	d1f6      	bne.n	8009f96 <memchr+0x6>
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd10      	pop	{r4, pc}

08009fac <_Balloc>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460e      	mov	r6, r1
 8009fb4:	b93d      	cbnz	r5, 8009fc6 <_Balloc+0x1a>
 8009fb6:	2010      	movs	r0, #16
 8009fb8:	f7ff ffe2 	bl	8009f80 <malloc>
 8009fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8009fbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fc2:	6005      	str	r5, [r0, #0]
 8009fc4:	60c5      	str	r5, [r0, #12]
 8009fc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009fc8:	68eb      	ldr	r3, [r5, #12]
 8009fca:	b183      	cbz	r3, 8009fee <_Balloc+0x42>
 8009fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009fd4:	b9b8      	cbnz	r0, 800a006 <_Balloc+0x5a>
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	fa01 f506 	lsl.w	r5, r1, r6
 8009fdc:	1d6a      	adds	r2, r5, #5
 8009fde:	0092      	lsls	r2, r2, #2
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fabe 	bl	800a562 <_calloc_r>
 8009fe6:	b160      	cbz	r0, 800a002 <_Balloc+0x56>
 8009fe8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009fec:	e00e      	b.n	800a00c <_Balloc+0x60>
 8009fee:	2221      	movs	r2, #33	; 0x21
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 fab5 	bl	800a562 <_calloc_r>
 8009ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ffa:	60e8      	str	r0, [r5, #12]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e4      	bne.n	8009fcc <_Balloc+0x20>
 800a002:	2000      	movs	r0, #0
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	6802      	ldr	r2, [r0, #0]
 800a008:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a00c:	2300      	movs	r3, #0
 800a00e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a012:	e7f7      	b.n	800a004 <_Balloc+0x58>

0800a014 <_Bfree>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a018:	4606      	mov	r6, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	b93c      	cbnz	r4, 800a02e <_Bfree+0x1a>
 800a01e:	2010      	movs	r0, #16
 800a020:	f7ff ffae 	bl	8009f80 <malloc>
 800a024:	6270      	str	r0, [r6, #36]	; 0x24
 800a026:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a02a:	6004      	str	r4, [r0, #0]
 800a02c:	60c4      	str	r4, [r0, #12]
 800a02e:	b13d      	cbz	r5, 800a040 <_Bfree+0x2c>
 800a030:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a032:	686a      	ldr	r2, [r5, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a03a:	6029      	str	r1, [r5, #0]
 800a03c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a040:	bd70      	pop	{r4, r5, r6, pc}

0800a042 <__multadd>:
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	461f      	mov	r7, r3
 800a048:	4606      	mov	r6, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	2300      	movs	r3, #0
 800a04e:	690d      	ldr	r5, [r1, #16]
 800a050:	f101 0c14 	add.w	ip, r1, #20
 800a054:	f8dc 0000 	ldr.w	r0, [ip]
 800a058:	3301      	adds	r3, #1
 800a05a:	b281      	uxth	r1, r0
 800a05c:	fb02 7101 	mla	r1, r2, r1, r7
 800a060:	0c00      	lsrs	r0, r0, #16
 800a062:	0c0f      	lsrs	r7, r1, #16
 800a064:	fb02 7000 	mla	r0, r2, r0, r7
 800a068:	b289      	uxth	r1, r1
 800a06a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a06e:	429d      	cmp	r5, r3
 800a070:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a074:	f84c 1b04 	str.w	r1, [ip], #4
 800a078:	dcec      	bgt.n	800a054 <__multadd+0x12>
 800a07a:	b1d7      	cbz	r7, 800a0b2 <__multadd+0x70>
 800a07c:	68a3      	ldr	r3, [r4, #8]
 800a07e:	42ab      	cmp	r3, r5
 800a080:	dc12      	bgt.n	800a0a8 <__multadd+0x66>
 800a082:	6861      	ldr	r1, [r4, #4]
 800a084:	4630      	mov	r0, r6
 800a086:	3101      	adds	r1, #1
 800a088:	f7ff ff90 	bl	8009fac <_Balloc>
 800a08c:	4680      	mov	r8, r0
 800a08e:	6922      	ldr	r2, [r4, #16]
 800a090:	f104 010c 	add.w	r1, r4, #12
 800a094:	3202      	adds	r2, #2
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	300c      	adds	r0, #12
 800a09a:	f7fe f99d 	bl	80083d8 <memcpy>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff ffb7 	bl	800a014 <_Bfree>
 800a0a6:	4644      	mov	r4, r8
 800a0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	615f      	str	r7, [r3, #20]
 800a0b0:	6125      	str	r5, [r4, #16]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0b8 <__hi0bits>:
 800a0b8:	0c02      	lsrs	r2, r0, #16
 800a0ba:	0412      	lsls	r2, r2, #16
 800a0bc:	4603      	mov	r3, r0
 800a0be:	b9b2      	cbnz	r2, 800a0ee <__hi0bits+0x36>
 800a0c0:	0403      	lsls	r3, r0, #16
 800a0c2:	2010      	movs	r0, #16
 800a0c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a0c8:	bf04      	itt	eq
 800a0ca:	021b      	lsleq	r3, r3, #8
 800a0cc:	3008      	addeq	r0, #8
 800a0ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a0d2:	bf04      	itt	eq
 800a0d4:	011b      	lsleq	r3, r3, #4
 800a0d6:	3004      	addeq	r0, #4
 800a0d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a0dc:	bf04      	itt	eq
 800a0de:	009b      	lsleq	r3, r3, #2
 800a0e0:	3002      	addeq	r0, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	db06      	blt.n	800a0f4 <__hi0bits+0x3c>
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	d503      	bpl.n	800a0f2 <__hi0bits+0x3a>
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	4770      	bx	lr
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e7e8      	b.n	800a0c4 <__hi0bits+0xc>
 800a0f2:	2020      	movs	r0, #32
 800a0f4:	4770      	bx	lr

0800a0f6 <__lo0bits>:
 800a0f6:	6803      	ldr	r3, [r0, #0]
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	f013 0207 	ands.w	r2, r3, #7
 800a0fe:	d00b      	beq.n	800a118 <__lo0bits+0x22>
 800a100:	07da      	lsls	r2, r3, #31
 800a102:	d423      	bmi.n	800a14c <__lo0bits+0x56>
 800a104:	0798      	lsls	r0, r3, #30
 800a106:	bf49      	itett	mi
 800a108:	085b      	lsrmi	r3, r3, #1
 800a10a:	089b      	lsrpl	r3, r3, #2
 800a10c:	2001      	movmi	r0, #1
 800a10e:	600b      	strmi	r3, [r1, #0]
 800a110:	bf5c      	itt	pl
 800a112:	600b      	strpl	r3, [r1, #0]
 800a114:	2002      	movpl	r0, #2
 800a116:	4770      	bx	lr
 800a118:	b298      	uxth	r0, r3
 800a11a:	b9a8      	cbnz	r0, 800a148 <__lo0bits+0x52>
 800a11c:	2010      	movs	r0, #16
 800a11e:	0c1b      	lsrs	r3, r3, #16
 800a120:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a124:	bf04      	itt	eq
 800a126:	0a1b      	lsreq	r3, r3, #8
 800a128:	3008      	addeq	r0, #8
 800a12a:	071a      	lsls	r2, r3, #28
 800a12c:	bf04      	itt	eq
 800a12e:	091b      	lsreq	r3, r3, #4
 800a130:	3004      	addeq	r0, #4
 800a132:	079a      	lsls	r2, r3, #30
 800a134:	bf04      	itt	eq
 800a136:	089b      	lsreq	r3, r3, #2
 800a138:	3002      	addeq	r0, #2
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d402      	bmi.n	800a144 <__lo0bits+0x4e>
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	d006      	beq.n	800a150 <__lo0bits+0x5a>
 800a142:	3001      	adds	r0, #1
 800a144:	600b      	str	r3, [r1, #0]
 800a146:	4770      	bx	lr
 800a148:	4610      	mov	r0, r2
 800a14a:	e7e9      	b.n	800a120 <__lo0bits+0x2a>
 800a14c:	2000      	movs	r0, #0
 800a14e:	4770      	bx	lr
 800a150:	2020      	movs	r0, #32
 800a152:	4770      	bx	lr

0800a154 <__i2b>:
 800a154:	b510      	push	{r4, lr}
 800a156:	460c      	mov	r4, r1
 800a158:	2101      	movs	r1, #1
 800a15a:	f7ff ff27 	bl	8009fac <_Balloc>
 800a15e:	2201      	movs	r2, #1
 800a160:	6144      	str	r4, [r0, #20]
 800a162:	6102      	str	r2, [r0, #16]
 800a164:	bd10      	pop	{r4, pc}

0800a166 <__multiply>:
 800a166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16a:	4614      	mov	r4, r2
 800a16c:	690a      	ldr	r2, [r1, #16]
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	4688      	mov	r8, r1
 800a172:	429a      	cmp	r2, r3
 800a174:	bfbe      	ittt	lt
 800a176:	460b      	movlt	r3, r1
 800a178:	46a0      	movlt	r8, r4
 800a17a:	461c      	movlt	r4, r3
 800a17c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a180:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a184:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a188:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a18c:	eb07 0609 	add.w	r6, r7, r9
 800a190:	42b3      	cmp	r3, r6
 800a192:	bfb8      	it	lt
 800a194:	3101      	addlt	r1, #1
 800a196:	f7ff ff09 	bl	8009fac <_Balloc>
 800a19a:	f100 0514 	add.w	r5, r0, #20
 800a19e:	462b      	mov	r3, r5
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a1a6:	4573      	cmp	r3, lr
 800a1a8:	d316      	bcc.n	800a1d8 <__multiply+0x72>
 800a1aa:	f104 0214 	add.w	r2, r4, #20
 800a1ae:	f108 0114 	add.w	r1, r8, #20
 800a1b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d80c      	bhi.n	800a1de <__multiply+0x78>
 800a1c4:	2e00      	cmp	r6, #0
 800a1c6:	dd03      	ble.n	800a1d0 <__multiply+0x6a>
 800a1c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d05d      	beq.n	800a28c <__multiply+0x126>
 800a1d0:	6106      	str	r6, [r0, #16]
 800a1d2:	b003      	add	sp, #12
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	f843 2b04 	str.w	r2, [r3], #4
 800a1dc:	e7e3      	b.n	800a1a6 <__multiply+0x40>
 800a1de:	f8b2 b000 	ldrh.w	fp, [r2]
 800a1e2:	f1bb 0f00 	cmp.w	fp, #0
 800a1e6:	d023      	beq.n	800a230 <__multiply+0xca>
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	46ac      	mov	ip, r5
 800a1ec:	f04f 0800 	mov.w	r8, #0
 800a1f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a1f4:	f8dc a000 	ldr.w	sl, [ip]
 800a1f8:	b2a3      	uxth	r3, r4
 800a1fa:	fa1f fa8a 	uxth.w	sl, sl
 800a1fe:	fb0b a303 	mla	r3, fp, r3, sl
 800a202:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a206:	f8dc 4000 	ldr.w	r4, [ip]
 800a20a:	4443      	add	r3, r8
 800a20c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a210:	fb0b 840a 	mla	r4, fp, sl, r8
 800a214:	46e2      	mov	sl, ip
 800a216:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a220:	454f      	cmp	r7, r9
 800a222:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a226:	f84a 3b04 	str.w	r3, [sl], #4
 800a22a:	d82b      	bhi.n	800a284 <__multiply+0x11e>
 800a22c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	3204      	adds	r2, #4
 800a234:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	d020      	beq.n	800a280 <__multiply+0x11a>
 800a23e:	4689      	mov	r9, r1
 800a240:	46a8      	mov	r8, r5
 800a242:	f04f 0b00 	mov.w	fp, #0
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	f8b9 c000 	ldrh.w	ip, [r9]
 800a24c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a250:	b29b      	uxth	r3, r3
 800a252:	fb0a 440c 	mla	r4, sl, ip, r4
 800a256:	46c4      	mov	ip, r8
 800a258:	445c      	add	r4, fp
 800a25a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a25e:	f84c 3b04 	str.w	r3, [ip], #4
 800a262:	f859 3b04 	ldr.w	r3, [r9], #4
 800a266:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	fb0a b303 	mla	r3, sl, r3, fp
 800a270:	454f      	cmp	r7, r9
 800a272:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a276:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a27a:	d805      	bhi.n	800a288 <__multiply+0x122>
 800a27c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a280:	3504      	adds	r5, #4
 800a282:	e79b      	b.n	800a1bc <__multiply+0x56>
 800a284:	46d4      	mov	ip, sl
 800a286:	e7b3      	b.n	800a1f0 <__multiply+0x8a>
 800a288:	46e0      	mov	r8, ip
 800a28a:	e7dd      	b.n	800a248 <__multiply+0xe2>
 800a28c:	3e01      	subs	r6, #1
 800a28e:	e799      	b.n	800a1c4 <__multiply+0x5e>

0800a290 <__pow5mult>:
 800a290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a294:	4615      	mov	r5, r2
 800a296:	f012 0203 	ands.w	r2, r2, #3
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	d007      	beq.n	800a2b0 <__pow5mult+0x20>
 800a2a0:	4c21      	ldr	r4, [pc, #132]	; (800a328 <__pow5mult+0x98>)
 800a2a2:	3a01      	subs	r2, #1
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2aa:	f7ff feca 	bl	800a042 <__multadd>
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	10ad      	asrs	r5, r5, #2
 800a2b2:	d035      	beq.n	800a320 <__pow5mult+0x90>
 800a2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2b6:	b93c      	cbnz	r4, 800a2c8 <__pow5mult+0x38>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	f7ff fe61 	bl	8009f80 <malloc>
 800a2be:	6270      	str	r0, [r6, #36]	; 0x24
 800a2c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2c4:	6004      	str	r4, [r0, #0]
 800a2c6:	60c4      	str	r4, [r0, #12]
 800a2c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2d0:	b94c      	cbnz	r4, 800a2e6 <__pow5mult+0x56>
 800a2d2:	f240 2171 	movw	r1, #625	; 0x271
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff3c 	bl	800a154 <__i2b>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	f04f 0800 	mov.w	r8, #0
 800a2ea:	07eb      	lsls	r3, r5, #31
 800a2ec:	d50a      	bpl.n	800a304 <__pow5mult+0x74>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ff37 	bl	800a166 <__multiply>
 800a2f8:	4681      	mov	r9, r0
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7ff fe89 	bl	800a014 <_Bfree>
 800a302:	464f      	mov	r7, r9
 800a304:	106d      	asrs	r5, r5, #1
 800a306:	d00b      	beq.n	800a320 <__pow5mult+0x90>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	b938      	cbnz	r0, 800a31c <__pow5mult+0x8c>
 800a30c:	4622      	mov	r2, r4
 800a30e:	4621      	mov	r1, r4
 800a310:	4630      	mov	r0, r6
 800a312:	f7ff ff28 	bl	800a166 <__multiply>
 800a316:	6020      	str	r0, [r4, #0]
 800a318:	f8c0 8000 	str.w	r8, [r0]
 800a31c:	4604      	mov	r4, r0
 800a31e:	e7e4      	b.n	800a2ea <__pow5mult+0x5a>
 800a320:	4638      	mov	r0, r7
 800a322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a326:	bf00      	nop
 800a328:	0800c2a8 	.word	0x0800c2a8

0800a32c <__lshift>:
 800a32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a330:	460c      	mov	r4, r1
 800a332:	4607      	mov	r7, r0
 800a334:	4616      	mov	r6, r2
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a33c:	eb0a 0903 	add.w	r9, sl, r3
 800a340:	6849      	ldr	r1, [r1, #4]
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	f109 0501 	add.w	r5, r9, #1
 800a348:	42ab      	cmp	r3, r5
 800a34a:	db32      	blt.n	800a3b2 <__lshift+0x86>
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff fe2d 	bl	8009fac <_Balloc>
 800a352:	2300      	movs	r3, #0
 800a354:	4680      	mov	r8, r0
 800a356:	461a      	mov	r2, r3
 800a358:	f100 0114 	add.w	r1, r0, #20
 800a35c:	4553      	cmp	r3, sl
 800a35e:	db2b      	blt.n	800a3b8 <__lshift+0x8c>
 800a360:	6920      	ldr	r0, [r4, #16]
 800a362:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a366:	f104 0314 	add.w	r3, r4, #20
 800a36a:	f016 021f 	ands.w	r2, r6, #31
 800a36e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a372:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a376:	d025      	beq.n	800a3c4 <__lshift+0x98>
 800a378:	2000      	movs	r0, #0
 800a37a:	f1c2 0e20 	rsb	lr, r2, #32
 800a37e:	468a      	mov	sl, r1
 800a380:	681e      	ldr	r6, [r3, #0]
 800a382:	4096      	lsls	r6, r2
 800a384:	4330      	orrs	r0, r6
 800a386:	f84a 0b04 	str.w	r0, [sl], #4
 800a38a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a38e:	459c      	cmp	ip, r3
 800a390:	fa20 f00e 	lsr.w	r0, r0, lr
 800a394:	d814      	bhi.n	800a3c0 <__lshift+0x94>
 800a396:	6048      	str	r0, [r1, #4]
 800a398:	b108      	cbz	r0, 800a39e <__lshift+0x72>
 800a39a:	f109 0502 	add.w	r5, r9, #2
 800a39e:	3d01      	subs	r5, #1
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff fe34 	bl	800a014 <_Bfree>
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b2:	3101      	adds	r1, #1
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	e7c7      	b.n	800a348 <__lshift+0x1c>
 800a3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	e7cd      	b.n	800a35c <__lshift+0x30>
 800a3c0:	4651      	mov	r1, sl
 800a3c2:	e7dc      	b.n	800a37e <__lshift+0x52>
 800a3c4:	3904      	subs	r1, #4
 800a3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ca:	459c      	cmp	ip, r3
 800a3cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3d0:	d8f9      	bhi.n	800a3c6 <__lshift+0x9a>
 800a3d2:	e7e4      	b.n	800a39e <__lshift+0x72>

0800a3d4 <__mcmp>:
 800a3d4:	6903      	ldr	r3, [r0, #16]
 800a3d6:	690a      	ldr	r2, [r1, #16]
 800a3d8:	b530      	push	{r4, r5, lr}
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	d10c      	bne.n	800a3f8 <__mcmp+0x24>
 800a3de:	0092      	lsls	r2, r2, #2
 800a3e0:	3014      	adds	r0, #20
 800a3e2:	3114      	adds	r1, #20
 800a3e4:	1884      	adds	r4, r0, r2
 800a3e6:	4411      	add	r1, r2
 800a3e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3f0:	4295      	cmp	r5, r2
 800a3f2:	d003      	beq.n	800a3fc <__mcmp+0x28>
 800a3f4:	d305      	bcc.n	800a402 <__mcmp+0x2e>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	bd30      	pop	{r4, r5, pc}
 800a3fc:	42a0      	cmp	r0, r4
 800a3fe:	d3f3      	bcc.n	800a3e8 <__mcmp+0x14>
 800a400:	e7fa      	b.n	800a3f8 <__mcmp+0x24>
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	e7f7      	b.n	800a3f8 <__mcmp+0x24>

0800a408 <__mdiff>:
 800a408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40c:	460d      	mov	r5, r1
 800a40e:	4607      	mov	r7, r0
 800a410:	4611      	mov	r1, r2
 800a412:	4628      	mov	r0, r5
 800a414:	4614      	mov	r4, r2
 800a416:	f7ff ffdd 	bl	800a3d4 <__mcmp>
 800a41a:	1e06      	subs	r6, r0, #0
 800a41c:	d108      	bne.n	800a430 <__mdiff+0x28>
 800a41e:	4631      	mov	r1, r6
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff fdc3 	bl	8009fac <_Balloc>
 800a426:	2301      	movs	r3, #1
 800a428:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a430:	bfa4      	itt	ge
 800a432:	4623      	movge	r3, r4
 800a434:	462c      	movge	r4, r5
 800a436:	4638      	mov	r0, r7
 800a438:	6861      	ldr	r1, [r4, #4]
 800a43a:	bfa6      	itte	ge
 800a43c:	461d      	movge	r5, r3
 800a43e:	2600      	movge	r6, #0
 800a440:	2601      	movlt	r6, #1
 800a442:	f7ff fdb3 	bl	8009fac <_Balloc>
 800a446:	f04f 0e00 	mov.w	lr, #0
 800a44a:	60c6      	str	r6, [r0, #12]
 800a44c:	692b      	ldr	r3, [r5, #16]
 800a44e:	6926      	ldr	r6, [r4, #16]
 800a450:	f104 0214 	add.w	r2, r4, #20
 800a454:	f105 0914 	add.w	r9, r5, #20
 800a458:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a45c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a460:	f100 0114 	add.w	r1, r0, #20
 800a464:	f852 ab04 	ldr.w	sl, [r2], #4
 800a468:	f859 5b04 	ldr.w	r5, [r9], #4
 800a46c:	fa1f f38a 	uxth.w	r3, sl
 800a470:	4473      	add	r3, lr
 800a472:	b2ac      	uxth	r4, r5
 800a474:	1b1b      	subs	r3, r3, r4
 800a476:	0c2c      	lsrs	r4, r5, #16
 800a478:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a47c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a480:	b29b      	uxth	r3, r3
 800a482:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a486:	45c8      	cmp	r8, r9
 800a488:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a48c:	4694      	mov	ip, r2
 800a48e:	f841 4b04 	str.w	r4, [r1], #4
 800a492:	d8e7      	bhi.n	800a464 <__mdiff+0x5c>
 800a494:	45bc      	cmp	ip, r7
 800a496:	d304      	bcc.n	800a4a2 <__mdiff+0x9a>
 800a498:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a49c:	b183      	cbz	r3, 800a4c0 <__mdiff+0xb8>
 800a49e:	6106      	str	r6, [r0, #16]
 800a4a0:	e7c4      	b.n	800a42c <__mdiff+0x24>
 800a4a2:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a4a6:	b2a2      	uxth	r2, r4
 800a4a8:	4472      	add	r2, lr
 800a4aa:	1413      	asrs	r3, r2, #16
 800a4ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4b6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a4ba:	f841 2b04 	str.w	r2, [r1], #4
 800a4be:	e7e9      	b.n	800a494 <__mdiff+0x8c>
 800a4c0:	3e01      	subs	r6, #1
 800a4c2:	e7e9      	b.n	800a498 <__mdiff+0x90>

0800a4c4 <__d2b>:
 800a4c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a4c8:	461c      	mov	r4, r3
 800a4ca:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4690      	mov	r8, r2
 800a4d2:	f7ff fd6b 	bl	8009fac <_Balloc>
 800a4d6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a4da:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a4de:	4607      	mov	r7, r0
 800a4e0:	bb34      	cbnz	r4, 800a530 <__d2b+0x6c>
 800a4e2:	9201      	str	r2, [sp, #4]
 800a4e4:	f1b8 0200 	subs.w	r2, r8, #0
 800a4e8:	d027      	beq.n	800a53a <__d2b+0x76>
 800a4ea:	a802      	add	r0, sp, #8
 800a4ec:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a4f0:	f7ff fe01 	bl	800a0f6 <__lo0bits>
 800a4f4:	9900      	ldr	r1, [sp, #0]
 800a4f6:	b1f0      	cbz	r0, 800a536 <__d2b+0x72>
 800a4f8:	9a01      	ldr	r2, [sp, #4]
 800a4fa:	f1c0 0320 	rsb	r3, r0, #32
 800a4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a502:	430b      	orrs	r3, r1
 800a504:	40c2      	lsrs	r2, r0
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	9201      	str	r2, [sp, #4]
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bf14      	ite	ne
 800a510:	2102      	movne	r1, #2
 800a512:	2101      	moveq	r1, #1
 800a514:	61bb      	str	r3, [r7, #24]
 800a516:	6139      	str	r1, [r7, #16]
 800a518:	b1c4      	cbz	r4, 800a54c <__d2b+0x88>
 800a51a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a51e:	4404      	add	r4, r0
 800a520:	6034      	str	r4, [r6, #0]
 800a522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a526:	6028      	str	r0, [r5, #0]
 800a528:	4638      	mov	r0, r7
 800a52a:	b002      	add	sp, #8
 800a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a530:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a534:	e7d5      	b.n	800a4e2 <__d2b+0x1e>
 800a536:	6179      	str	r1, [r7, #20]
 800a538:	e7e7      	b.n	800a50a <__d2b+0x46>
 800a53a:	a801      	add	r0, sp, #4
 800a53c:	f7ff fddb 	bl	800a0f6 <__lo0bits>
 800a540:	2101      	movs	r1, #1
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	6139      	str	r1, [r7, #16]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	3020      	adds	r0, #32
 800a54a:	e7e5      	b.n	800a518 <__d2b+0x54>
 800a54c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a550:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	6918      	ldr	r0, [r3, #16]
 800a558:	f7ff fdae 	bl	800a0b8 <__hi0bits>
 800a55c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a560:	e7e1      	b.n	800a526 <__d2b+0x62>

0800a562 <_calloc_r>:
 800a562:	b538      	push	{r3, r4, r5, lr}
 800a564:	fb02 f401 	mul.w	r4, r2, r1
 800a568:	4621      	mov	r1, r4
 800a56a:	f000 f855 	bl	800a618 <_malloc_r>
 800a56e:	4605      	mov	r5, r0
 800a570:	b118      	cbz	r0, 800a57a <_calloc_r+0x18>
 800a572:	4622      	mov	r2, r4
 800a574:	2100      	movs	r1, #0
 800a576:	f7fd ff3a 	bl	80083ee <memset>
 800a57a:	4628      	mov	r0, r5
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a580 <_free_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4605      	mov	r5, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	d043      	beq.n	800a610 <_free_r+0x90>
 800a588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58c:	1f0c      	subs	r4, r1, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bfb8      	it	lt
 800a592:	18e4      	addlt	r4, r4, r3
 800a594:	f000 fac1 	bl	800ab1a <__malloc_lock>
 800a598:	4a1e      	ldr	r2, [pc, #120]	; (800a614 <_free_r+0x94>)
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	4610      	mov	r0, r2
 800a59e:	b933      	cbnz	r3, 800a5ae <_free_r+0x2e>
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	6014      	str	r4, [r2, #0]
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5aa:	f000 bab7 	b.w	800ab1c <__malloc_unlock>
 800a5ae:	42a3      	cmp	r3, r4
 800a5b0:	d90b      	bls.n	800a5ca <_free_r+0x4a>
 800a5b2:	6821      	ldr	r1, [r4, #0]
 800a5b4:	1862      	adds	r2, r4, r1
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	bf01      	itttt	eq
 800a5ba:	681a      	ldreq	r2, [r3, #0]
 800a5bc:	685b      	ldreq	r3, [r3, #4]
 800a5be:	1852      	addeq	r2, r2, r1
 800a5c0:	6022      	streq	r2, [r4, #0]
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	6004      	str	r4, [r0, #0]
 800a5c6:	e7ed      	b.n	800a5a4 <_free_r+0x24>
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_free_r+0x52>
 800a5ce:	42a2      	cmp	r2, r4
 800a5d0:	d9fa      	bls.n	800a5c8 <_free_r+0x48>
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	1858      	adds	r0, r3, r1
 800a5d6:	42a0      	cmp	r0, r4
 800a5d8:	d10b      	bne.n	800a5f2 <_free_r+0x72>
 800a5da:	6820      	ldr	r0, [r4, #0]
 800a5dc:	4401      	add	r1, r0
 800a5de:	1858      	adds	r0, r3, r1
 800a5e0:	4282      	cmp	r2, r0
 800a5e2:	6019      	str	r1, [r3, #0]
 800a5e4:	d1de      	bne.n	800a5a4 <_free_r+0x24>
 800a5e6:	6810      	ldr	r0, [r2, #0]
 800a5e8:	6852      	ldr	r2, [r2, #4]
 800a5ea:	4401      	add	r1, r0
 800a5ec:	6019      	str	r1, [r3, #0]
 800a5ee:	605a      	str	r2, [r3, #4]
 800a5f0:	e7d8      	b.n	800a5a4 <_free_r+0x24>
 800a5f2:	d902      	bls.n	800a5fa <_free_r+0x7a>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	e7d4      	b.n	800a5a4 <_free_r+0x24>
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	1821      	adds	r1, r4, r0
 800a5fe:	428a      	cmp	r2, r1
 800a600:	bf01      	itttt	eq
 800a602:	6811      	ldreq	r1, [r2, #0]
 800a604:	6852      	ldreq	r2, [r2, #4]
 800a606:	1809      	addeq	r1, r1, r0
 800a608:	6021      	streq	r1, [r4, #0]
 800a60a:	6062      	str	r2, [r4, #4]
 800a60c:	605c      	str	r4, [r3, #4]
 800a60e:	e7c9      	b.n	800a5a4 <_free_r+0x24>
 800a610:	bd38      	pop	{r3, r4, r5, pc}
 800a612:	bf00      	nop
 800a614:	20000638 	.word	0x20000638

0800a618 <_malloc_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	1ccd      	adds	r5, r1, #3
 800a61c:	f025 0503 	bic.w	r5, r5, #3
 800a620:	3508      	adds	r5, #8
 800a622:	2d0c      	cmp	r5, #12
 800a624:	bf38      	it	cc
 800a626:	250c      	movcc	r5, #12
 800a628:	2d00      	cmp	r5, #0
 800a62a:	4606      	mov	r6, r0
 800a62c:	db01      	blt.n	800a632 <_malloc_r+0x1a>
 800a62e:	42a9      	cmp	r1, r5
 800a630:	d903      	bls.n	800a63a <_malloc_r+0x22>
 800a632:	230c      	movs	r3, #12
 800a634:	6033      	str	r3, [r6, #0]
 800a636:	2000      	movs	r0, #0
 800a638:	bd70      	pop	{r4, r5, r6, pc}
 800a63a:	f000 fa6e 	bl	800ab1a <__malloc_lock>
 800a63e:	4a21      	ldr	r2, [pc, #132]	; (800a6c4 <_malloc_r+0xac>)
 800a640:	6814      	ldr	r4, [r2, #0]
 800a642:	4621      	mov	r1, r4
 800a644:	b991      	cbnz	r1, 800a66c <_malloc_r+0x54>
 800a646:	4c20      	ldr	r4, [pc, #128]	; (800a6c8 <_malloc_r+0xb0>)
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	b91b      	cbnz	r3, 800a654 <_malloc_r+0x3c>
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f98f 	bl	800a970 <_sbrk_r>
 800a652:	6020      	str	r0, [r4, #0]
 800a654:	4629      	mov	r1, r5
 800a656:	4630      	mov	r0, r6
 800a658:	f000 f98a 	bl	800a970 <_sbrk_r>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d124      	bne.n	800a6aa <_malloc_r+0x92>
 800a660:	230c      	movs	r3, #12
 800a662:	4630      	mov	r0, r6
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	f000 fa59 	bl	800ab1c <__malloc_unlock>
 800a66a:	e7e4      	b.n	800a636 <_malloc_r+0x1e>
 800a66c:	680b      	ldr	r3, [r1, #0]
 800a66e:	1b5b      	subs	r3, r3, r5
 800a670:	d418      	bmi.n	800a6a4 <_malloc_r+0x8c>
 800a672:	2b0b      	cmp	r3, #11
 800a674:	d90f      	bls.n	800a696 <_malloc_r+0x7e>
 800a676:	600b      	str	r3, [r1, #0]
 800a678:	18cc      	adds	r4, r1, r3
 800a67a:	50cd      	str	r5, [r1, r3]
 800a67c:	4630      	mov	r0, r6
 800a67e:	f000 fa4d 	bl	800ab1c <__malloc_unlock>
 800a682:	f104 000b 	add.w	r0, r4, #11
 800a686:	1d23      	adds	r3, r4, #4
 800a688:	f020 0007 	bic.w	r0, r0, #7
 800a68c:	1ac3      	subs	r3, r0, r3
 800a68e:	d0d3      	beq.n	800a638 <_malloc_r+0x20>
 800a690:	425a      	negs	r2, r3
 800a692:	50e2      	str	r2, [r4, r3]
 800a694:	e7d0      	b.n	800a638 <_malloc_r+0x20>
 800a696:	684b      	ldr	r3, [r1, #4]
 800a698:	428c      	cmp	r4, r1
 800a69a:	bf16      	itet	ne
 800a69c:	6063      	strne	r3, [r4, #4]
 800a69e:	6013      	streq	r3, [r2, #0]
 800a6a0:	460c      	movne	r4, r1
 800a6a2:	e7eb      	b.n	800a67c <_malloc_r+0x64>
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	6849      	ldr	r1, [r1, #4]
 800a6a8:	e7cc      	b.n	800a644 <_malloc_r+0x2c>
 800a6aa:	1cc4      	adds	r4, r0, #3
 800a6ac:	f024 0403 	bic.w	r4, r4, #3
 800a6b0:	42a0      	cmp	r0, r4
 800a6b2:	d005      	beq.n	800a6c0 <_malloc_r+0xa8>
 800a6b4:	1a21      	subs	r1, r4, r0
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 f95a 	bl	800a970 <_sbrk_r>
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d0cf      	beq.n	800a660 <_malloc_r+0x48>
 800a6c0:	6025      	str	r5, [r4, #0]
 800a6c2:	e7db      	b.n	800a67c <_malloc_r+0x64>
 800a6c4:	20000638 	.word	0x20000638
 800a6c8:	2000063c 	.word	0x2000063c

0800a6cc <__ssputs_r>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	688e      	ldr	r6, [r1, #8]
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	429e      	cmp	r6, r3
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	4690      	mov	r8, r2
 800a6da:	4699      	mov	r9, r3
 800a6dc:	d837      	bhi.n	800a74e <__ssputs_r+0x82>
 800a6de:	898a      	ldrh	r2, [r1, #12]
 800a6e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6e4:	d031      	beq.n	800a74a <__ssputs_r+0x7e>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	6825      	ldr	r5, [r4, #0]
 800a6ea:	6909      	ldr	r1, [r1, #16]
 800a6ec:	1a6f      	subs	r7, r5, r1
 800a6ee:	6965      	ldr	r5, [r4, #20]
 800a6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a6f8:	f109 0301 	add.w	r3, r9, #1
 800a6fc:	443b      	add	r3, r7
 800a6fe:	429d      	cmp	r5, r3
 800a700:	bf38      	it	cc
 800a702:	461d      	movcc	r5, r3
 800a704:	0553      	lsls	r3, r2, #21
 800a706:	d530      	bpl.n	800a76a <__ssputs_r+0x9e>
 800a708:	4629      	mov	r1, r5
 800a70a:	f7ff ff85 	bl	800a618 <_malloc_r>
 800a70e:	4606      	mov	r6, r0
 800a710:	b950      	cbnz	r0, 800a728 <__ssputs_r+0x5c>
 800a712:	230c      	movs	r3, #12
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	f8ca 3000 	str.w	r3, [sl]
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a728:	463a      	mov	r2, r7
 800a72a:	6921      	ldr	r1, [r4, #16]
 800a72c:	f7fd fe54 	bl	80083d8 <memcpy>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	6126      	str	r6, [r4, #16]
 800a73e:	443e      	add	r6, r7
 800a740:	6026      	str	r6, [r4, #0]
 800a742:	464e      	mov	r6, r9
 800a744:	6165      	str	r5, [r4, #20]
 800a746:	1bed      	subs	r5, r5, r7
 800a748:	60a5      	str	r5, [r4, #8]
 800a74a:	454e      	cmp	r6, r9
 800a74c:	d900      	bls.n	800a750 <__ssputs_r+0x84>
 800a74e:	464e      	mov	r6, r9
 800a750:	4632      	mov	r2, r6
 800a752:	4641      	mov	r1, r8
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	f000 f9c7 	bl	800aae8 <memmove>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	2000      	movs	r0, #0
 800a75e:	1b9b      	subs	r3, r3, r6
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	441e      	add	r6, r3
 800a766:	6026      	str	r6, [r4, #0]
 800a768:	e7dc      	b.n	800a724 <__ssputs_r+0x58>
 800a76a:	462a      	mov	r2, r5
 800a76c:	f000 f9d7 	bl	800ab1e <_realloc_r>
 800a770:	4606      	mov	r6, r0
 800a772:	2800      	cmp	r0, #0
 800a774:	d1e2      	bne.n	800a73c <__ssputs_r+0x70>
 800a776:	6921      	ldr	r1, [r4, #16]
 800a778:	4650      	mov	r0, sl
 800a77a:	f7ff ff01 	bl	800a580 <_free_r>
 800a77e:	e7c8      	b.n	800a712 <__ssputs_r+0x46>

0800a780 <_svfiprintf_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	461d      	mov	r5, r3
 800a786:	898b      	ldrh	r3, [r1, #12]
 800a788:	b09d      	sub	sp, #116	; 0x74
 800a78a:	061f      	lsls	r7, r3, #24
 800a78c:	4680      	mov	r8, r0
 800a78e:	460c      	mov	r4, r1
 800a790:	4616      	mov	r6, r2
 800a792:	d50f      	bpl.n	800a7b4 <_svfiprintf_r+0x34>
 800a794:	690b      	ldr	r3, [r1, #16]
 800a796:	b96b      	cbnz	r3, 800a7b4 <_svfiprintf_r+0x34>
 800a798:	2140      	movs	r1, #64	; 0x40
 800a79a:	f7ff ff3d 	bl	800a618 <_malloc_r>
 800a79e:	6020      	str	r0, [r4, #0]
 800a7a0:	6120      	str	r0, [r4, #16]
 800a7a2:	b928      	cbnz	r0, 800a7b0 <_svfiprintf_r+0x30>
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	f8c8 3000 	str.w	r3, [r8]
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	e0c8      	b.n	800a942 <_svfiprintf_r+0x1c2>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	6163      	str	r3, [r4, #20]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b8:	2320      	movs	r3, #32
 800a7ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7be:	2330      	movs	r3, #48	; 0x30
 800a7c0:	f04f 0b01 	mov.w	fp, #1
 800a7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c8:	9503      	str	r5, [sp, #12]
 800a7ca:	4637      	mov	r7, r6
 800a7cc:	463d      	mov	r5, r7
 800a7ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_svfiprintf_r+0x58>
 800a7d4:	2b25      	cmp	r3, #37	; 0x25
 800a7d6:	d13e      	bne.n	800a856 <_svfiprintf_r+0xd6>
 800a7d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a7dc:	d00b      	beq.n	800a7f6 <_svfiprintf_r+0x76>
 800a7de:	4653      	mov	r3, sl
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	f7ff ff71 	bl	800a6cc <__ssputs_r>
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f000 80a4 	beq.w	800a938 <_svfiprintf_r+0x1b8>
 800a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f2:	4453      	add	r3, sl
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	783b      	ldrb	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 809d 	beq.w	800a938 <_svfiprintf_r+0x1b8>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	9307      	str	r3, [sp, #28]
 800a80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a810:	931a      	str	r3, [sp, #104]	; 0x68
 800a812:	462f      	mov	r7, r5
 800a814:	2205      	movs	r2, #5
 800a816:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a81a:	4850      	ldr	r0, [pc, #320]	; (800a95c <_svfiprintf_r+0x1dc>)
 800a81c:	f7ff fbb8 	bl	8009f90 <memchr>
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	b9d0      	cbnz	r0, 800a85a <_svfiprintf_r+0xda>
 800a824:	06d9      	lsls	r1, r3, #27
 800a826:	bf44      	itt	mi
 800a828:	2220      	movmi	r2, #32
 800a82a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a82e:	071a      	lsls	r2, r3, #28
 800a830:	bf44      	itt	mi
 800a832:	222b      	movmi	r2, #43	; 0x2b
 800a834:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a838:	782a      	ldrb	r2, [r5, #0]
 800a83a:	2a2a      	cmp	r2, #42	; 0x2a
 800a83c:	d015      	beq.n	800a86a <_svfiprintf_r+0xea>
 800a83e:	462f      	mov	r7, r5
 800a840:	2000      	movs	r0, #0
 800a842:	250a      	movs	r5, #10
 800a844:	9a07      	ldr	r2, [sp, #28]
 800a846:	4639      	mov	r1, r7
 800a848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84c:	3b30      	subs	r3, #48	; 0x30
 800a84e:	2b09      	cmp	r3, #9
 800a850:	d94d      	bls.n	800a8ee <_svfiprintf_r+0x16e>
 800a852:	b1b8      	cbz	r0, 800a884 <_svfiprintf_r+0x104>
 800a854:	e00f      	b.n	800a876 <_svfiprintf_r+0xf6>
 800a856:	462f      	mov	r7, r5
 800a858:	e7b8      	b.n	800a7cc <_svfiprintf_r+0x4c>
 800a85a:	4a40      	ldr	r2, [pc, #256]	; (800a95c <_svfiprintf_r+0x1dc>)
 800a85c:	463d      	mov	r5, r7
 800a85e:	1a80      	subs	r0, r0, r2
 800a860:	fa0b f000 	lsl.w	r0, fp, r0
 800a864:	4318      	orrs	r0, r3
 800a866:	9004      	str	r0, [sp, #16]
 800a868:	e7d3      	b.n	800a812 <_svfiprintf_r+0x92>
 800a86a:	9a03      	ldr	r2, [sp, #12]
 800a86c:	1d11      	adds	r1, r2, #4
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	9103      	str	r1, [sp, #12]
 800a872:	2a00      	cmp	r2, #0
 800a874:	db01      	blt.n	800a87a <_svfiprintf_r+0xfa>
 800a876:	9207      	str	r2, [sp, #28]
 800a878:	e004      	b.n	800a884 <_svfiprintf_r+0x104>
 800a87a:	4252      	negs	r2, r2
 800a87c:	f043 0302 	orr.w	r3, r3, #2
 800a880:	9207      	str	r2, [sp, #28]
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	783b      	ldrb	r3, [r7, #0]
 800a886:	2b2e      	cmp	r3, #46	; 0x2e
 800a888:	d10c      	bne.n	800a8a4 <_svfiprintf_r+0x124>
 800a88a:	787b      	ldrb	r3, [r7, #1]
 800a88c:	2b2a      	cmp	r3, #42	; 0x2a
 800a88e:	d133      	bne.n	800a8f8 <_svfiprintf_r+0x178>
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	3702      	adds	r7, #2
 800a894:	1d1a      	adds	r2, r3, #4
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	9203      	str	r2, [sp, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bfb8      	it	lt
 800a89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	4d2e      	ldr	r5, [pc, #184]	; (800a960 <_svfiprintf_r+0x1e0>)
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	7839      	ldrb	r1, [r7, #0]
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f7ff fb70 	bl	8009f90 <memchr>
 800a8b0:	b138      	cbz	r0, 800a8c2 <_svfiprintf_r+0x142>
 800a8b2:	2340      	movs	r3, #64	; 0x40
 800a8b4:	1b40      	subs	r0, r0, r5
 800a8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	3701      	adds	r7, #1
 800a8be:	4303      	orrs	r3, r0
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	7839      	ldrb	r1, [r7, #0]
 800a8c4:	2206      	movs	r2, #6
 800a8c6:	4827      	ldr	r0, [pc, #156]	; (800a964 <_svfiprintf_r+0x1e4>)
 800a8c8:	1c7e      	adds	r6, r7, #1
 800a8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ce:	f7ff fb5f 	bl	8009f90 <memchr>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d038      	beq.n	800a948 <_svfiprintf_r+0x1c8>
 800a8d6:	4b24      	ldr	r3, [pc, #144]	; (800a968 <_svfiprintf_r+0x1e8>)
 800a8d8:	bb13      	cbnz	r3, 800a920 <_svfiprintf_r+0x1a0>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	f023 0307 	bic.w	r3, r3, #7
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	444b      	add	r3, r9
 800a8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ec:	e76d      	b.n	800a7ca <_svfiprintf_r+0x4a>
 800a8ee:	fb05 3202 	mla	r2, r5, r2, r3
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	e7a6      	b.n	800a846 <_svfiprintf_r+0xc6>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	250a      	movs	r5, #10
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	3701      	adds	r7, #1
 800a900:	9305      	str	r3, [sp, #20]
 800a902:	4638      	mov	r0, r7
 800a904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a908:	3a30      	subs	r2, #48	; 0x30
 800a90a:	2a09      	cmp	r2, #9
 800a90c:	d903      	bls.n	800a916 <_svfiprintf_r+0x196>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0c8      	beq.n	800a8a4 <_svfiprintf_r+0x124>
 800a912:	9105      	str	r1, [sp, #20]
 800a914:	e7c6      	b.n	800a8a4 <_svfiprintf_r+0x124>
 800a916:	fb05 2101 	mla	r1, r5, r1, r2
 800a91a:	2301      	movs	r3, #1
 800a91c:	4607      	mov	r7, r0
 800a91e:	e7f0      	b.n	800a902 <_svfiprintf_r+0x182>
 800a920:	ab03      	add	r3, sp, #12
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	4622      	mov	r2, r4
 800a926:	4b11      	ldr	r3, [pc, #68]	; (800a96c <_svfiprintf_r+0x1ec>)
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4640      	mov	r0, r8
 800a92c:	f7fd fdf8 	bl	8008520 <_printf_float>
 800a930:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a934:	4681      	mov	r9, r0
 800a936:	d1d6      	bne.n	800a8e6 <_svfiprintf_r+0x166>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	065b      	lsls	r3, r3, #25
 800a93c:	f53f af35 	bmi.w	800a7aa <_svfiprintf_r+0x2a>
 800a940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a942:	b01d      	add	sp, #116	; 0x74
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4622      	mov	r2, r4
 800a94e:	4b07      	ldr	r3, [pc, #28]	; (800a96c <_svfiprintf_r+0x1ec>)
 800a950:	a904      	add	r1, sp, #16
 800a952:	4640      	mov	r0, r8
 800a954:	f7fe f890 	bl	8008a78 <_printf_i>
 800a958:	e7ea      	b.n	800a930 <_svfiprintf_r+0x1b0>
 800a95a:	bf00      	nop
 800a95c:	0800c2b4 	.word	0x0800c2b4
 800a960:	0800c2ba 	.word	0x0800c2ba
 800a964:	0800c2be 	.word	0x0800c2be
 800a968:	08008521 	.word	0x08008521
 800a96c:	0800a6cd 	.word	0x0800a6cd

0800a970 <_sbrk_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	2300      	movs	r3, #0
 800a974:	4c05      	ldr	r4, [pc, #20]	; (800a98c <_sbrk_r+0x1c>)
 800a976:	4605      	mov	r5, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	f7fd fc7c 	bl	8008278 <_sbrk>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_sbrk_r+0x1a>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	b103      	cbz	r3, 800a98a <_sbrk_r+0x1a>
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	200008bc 	.word	0x200008bc

0800a990 <__sread>:
 800a990:	b510      	push	{r4, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a998:	f000 f8e8 	bl	800ab6c <_read_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	bfab      	itete	ge
 800a9a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9a4:	181b      	addge	r3, r3, r0
 800a9a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9aa:	bfac      	ite	ge
 800a9ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ae:	81a3      	strhlt	r3, [r4, #12]
 800a9b0:	bd10      	pop	{r4, pc}

0800a9b2 <__swrite>:
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	898b      	ldrh	r3, [r1, #12]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	05db      	lsls	r3, r3, #23
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	d505      	bpl.n	800a9d0 <__swrite+0x1e>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9cc:	f000 f868 	bl	800aaa0 <_lseek_r>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9de:	463b      	mov	r3, r7
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	f000 b817 	b.w	800aa18 <_write_r>

0800a9ea <__sseek>:
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 f855 	bl	800aaa0 <_lseek_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	bf15      	itete	ne
 800a9fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa06:	81a3      	strheq	r3, [r4, #12]
 800aa08:	bf18      	it	ne
 800aa0a:	81a3      	strhne	r3, [r4, #12]
 800aa0c:	bd10      	pop	{r4, pc}

0800aa0e <__sclose>:
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	f000 b813 	b.w	800aa3c <_close_r>
	...

0800aa18 <_write_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	4611      	mov	r1, r2
 800aa20:	2200      	movs	r2, #0
 800aa22:	4c05      	ldr	r4, [pc, #20]	; (800aa38 <_write_r+0x20>)
 800aa24:	6022      	str	r2, [r4, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f7fd fbd9 	bl	80081de <_write>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_write_r+0x1e>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_write_r+0x1e>
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	200008bc 	.word	0x200008bc

0800aa3c <_close_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	2300      	movs	r3, #0
 800aa40:	4c05      	ldr	r4, [pc, #20]	; (800aa58 <_close_r+0x1c>)
 800aa42:	4605      	mov	r5, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	f7fd fbe5 	bl	8008216 <_close>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_close_r+0x1a>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_close_r+0x1a>
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	200008bc 	.word	0x200008bc

0800aa5c <_fstat_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4c06      	ldr	r4, [pc, #24]	; (800aa7c <_fstat_r+0x20>)
 800aa62:	4605      	mov	r5, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	f7fd fbdf 	bl	800822c <_fstat>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	d102      	bne.n	800aa78 <_fstat_r+0x1c>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	b103      	cbz	r3, 800aa78 <_fstat_r+0x1c>
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	bd38      	pop	{r3, r4, r5, pc}
 800aa7a:	bf00      	nop
 800aa7c:	200008bc 	.word	0x200008bc

0800aa80 <_isatty_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	2300      	movs	r3, #0
 800aa84:	4c05      	ldr	r4, [pc, #20]	; (800aa9c <_isatty_r+0x1c>)
 800aa86:	4605      	mov	r5, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	f7fd fbdd 	bl	800824a <_isatty>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_isatty_r+0x1a>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_isatty_r+0x1a>
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	200008bc 	.word	0x200008bc

0800aaa0 <_lseek_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	4c05      	ldr	r4, [pc, #20]	; (800aac0 <_lseek_r+0x20>)
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f7fd fbd5 	bl	800825e <_lseek>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_lseek_r+0x1e>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_lseek_r+0x1e>
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	200008bc 	.word	0x200008bc

0800aac4 <__ascii_mbtowc>:
 800aac4:	b082      	sub	sp, #8
 800aac6:	b901      	cbnz	r1, 800aaca <__ascii_mbtowc+0x6>
 800aac8:	a901      	add	r1, sp, #4
 800aaca:	b142      	cbz	r2, 800aade <__ascii_mbtowc+0x1a>
 800aacc:	b14b      	cbz	r3, 800aae2 <__ascii_mbtowc+0x1e>
 800aace:	7813      	ldrb	r3, [r2, #0]
 800aad0:	600b      	str	r3, [r1, #0]
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	1c10      	adds	r0, r2, #0
 800aad6:	bf18      	it	ne
 800aad8:	2001      	movne	r0, #1
 800aada:	b002      	add	sp, #8
 800aadc:	4770      	bx	lr
 800aade:	4610      	mov	r0, r2
 800aae0:	e7fb      	b.n	800aada <__ascii_mbtowc+0x16>
 800aae2:	f06f 0001 	mvn.w	r0, #1
 800aae6:	e7f8      	b.n	800aada <__ascii_mbtowc+0x16>

0800aae8 <memmove>:
 800aae8:	4288      	cmp	r0, r1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	eb01 0302 	add.w	r3, r1, r2
 800aaf0:	d807      	bhi.n	800ab02 <memmove+0x1a>
 800aaf2:	1e42      	subs	r2, r0, #1
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	d00a      	beq.n	800ab0e <memmove+0x26>
 800aaf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab00:	e7f8      	b.n	800aaf4 <memmove+0xc>
 800ab02:	4283      	cmp	r3, r0
 800ab04:	d9f5      	bls.n	800aaf2 <memmove+0xa>
 800ab06:	1881      	adds	r1, r0, r2
 800ab08:	1ad2      	subs	r2, r2, r3
 800ab0a:	42d3      	cmn	r3, r2
 800ab0c:	d100      	bne.n	800ab10 <memmove+0x28>
 800ab0e:	bd10      	pop	{r4, pc}
 800ab10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab18:	e7f7      	b.n	800ab0a <memmove+0x22>

0800ab1a <__malloc_lock>:
 800ab1a:	4770      	bx	lr

0800ab1c <__malloc_unlock>:
 800ab1c:	4770      	bx	lr

0800ab1e <_realloc_r>:
 800ab1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab20:	4607      	mov	r7, r0
 800ab22:	4614      	mov	r4, r2
 800ab24:	460e      	mov	r6, r1
 800ab26:	b921      	cbnz	r1, 800ab32 <_realloc_r+0x14>
 800ab28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	f7ff bd73 	b.w	800a618 <_malloc_r>
 800ab32:	b922      	cbnz	r2, 800ab3e <_realloc_r+0x20>
 800ab34:	f7ff fd24 	bl	800a580 <_free_r>
 800ab38:	4625      	mov	r5, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3e:	f000 f834 	bl	800abaa <_malloc_usable_size_r>
 800ab42:	42a0      	cmp	r0, r4
 800ab44:	d20f      	bcs.n	800ab66 <_realloc_r+0x48>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff fd65 	bl	800a618 <_malloc_r>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d0f2      	beq.n	800ab3a <_realloc_r+0x1c>
 800ab54:	4631      	mov	r1, r6
 800ab56:	4622      	mov	r2, r4
 800ab58:	f7fd fc3e 	bl	80083d8 <memcpy>
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff fd0e 	bl	800a580 <_free_r>
 800ab64:	e7e9      	b.n	800ab3a <_realloc_r+0x1c>
 800ab66:	4635      	mov	r5, r6
 800ab68:	e7e7      	b.n	800ab3a <_realloc_r+0x1c>
	...

0800ab6c <_read_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4605      	mov	r5, r0
 800ab70:	4608      	mov	r0, r1
 800ab72:	4611      	mov	r1, r2
 800ab74:	2200      	movs	r2, #0
 800ab76:	4c05      	ldr	r4, [pc, #20]	; (800ab8c <_read_r+0x20>)
 800ab78:	6022      	str	r2, [r4, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f7fd fb12 	bl	80081a4 <_read>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_read_r+0x1e>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_read_r+0x1e>
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	200008bc 	.word	0x200008bc

0800ab90 <__ascii_wctomb>:
 800ab90:	b149      	cbz	r1, 800aba6 <__ascii_wctomb+0x16>
 800ab92:	2aff      	cmp	r2, #255	; 0xff
 800ab94:	bf8b      	itete	hi
 800ab96:	238a      	movhi	r3, #138	; 0x8a
 800ab98:	700a      	strbls	r2, [r1, #0]
 800ab9a:	6003      	strhi	r3, [r0, #0]
 800ab9c:	2001      	movls	r0, #1
 800ab9e:	bf88      	it	hi
 800aba0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aba4:	4770      	bx	lr
 800aba6:	4608      	mov	r0, r1
 800aba8:	4770      	bx	lr

0800abaa <_malloc_usable_size_r>:
 800abaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abae:	1f18      	subs	r0, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	bfbc      	itt	lt
 800abb4:	580b      	ldrlt	r3, [r1, r0]
 800abb6:	18c0      	addlt	r0, r0, r3
 800abb8:	4770      	bx	lr
	...

0800abbc <_init>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr

0800abc8 <_fini>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr
