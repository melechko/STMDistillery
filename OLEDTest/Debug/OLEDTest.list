
OLEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019bc  0800c0c8  0800c0c8  0001c0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da84  0800da84  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da84  0800da84  0001da84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da8c  0800da8c  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da8c  0800da8c  0001da8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da90  0800da90  0001da90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800da94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  200002c8  0800dd5c  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  0800dd5c  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002476f  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045e7  00000000  00000000  00044a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00049048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0004a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b785  00000000  00000000  0004b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c51  00000000  00000000  000670fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c884  00000000  00000000  0007fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc5d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d00  00000000  00000000  000fc628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c8 	.word	0x200002c8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0ac 	.word	0x0800c0ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002cc 	.word	0x200002cc
 800014c:	0800c0ac 	.word	0x0800c0ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_ldivmod>:
 8000fe4:	b97b      	cbnz	r3, 8001006 <__aeabi_ldivmod+0x22>
 8000fe6:	b972      	cbnz	r2, 8001006 <__aeabi_ldivmod+0x22>
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	bfbe      	ittt	lt
 8000fec:	2000      	movlt	r0, #0
 8000fee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ff2:	e006      	blt.n	8001002 <__aeabi_ldivmod+0x1e>
 8000ff4:	bf08      	it	eq
 8000ff6:	2800      	cmpeq	r0, #0
 8000ff8:	bf1c      	itt	ne
 8000ffa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ffe:	f04f 30ff 	movne.w	r0, #4294967295
 8001002:	f000 b9a1 	b.w	8001348 <__aeabi_idiv0>
 8001006:	f1ad 0c08 	sub.w	ip, sp, #8
 800100a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800100e:	2900      	cmp	r1, #0
 8001010:	db09      	blt.n	8001026 <__aeabi_ldivmod+0x42>
 8001012:	2b00      	cmp	r3, #0
 8001014:	db1a      	blt.n	800104c <__aeabi_ldivmod+0x68>
 8001016:	f000 f835 	bl	8001084 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	4240      	negs	r0, r0
 8001028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1b      	blt.n	8001068 <__aeabi_ldivmod+0x84>
 8001030:	f000 f828 	bl	8001084 <__udivmoddi4>
 8001034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103c:	b004      	add	sp, #16
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	4770      	bx	lr
 800104c:	4252      	negs	r2, r2
 800104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001052:	f000 f817 	bl	8001084 <__udivmoddi4>
 8001056:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105e:	b004      	add	sp, #16
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	4770      	bx	lr
 8001068:	4252      	negs	r2, r2
 800106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800106e:	f000 f809 	bl	8001084 <__udivmoddi4>
 8001072:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107a:	b004      	add	sp, #16
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	4770      	bx	lr

08001084 <__udivmoddi4>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	9e08      	ldr	r6, [sp, #32]
 800108a:	460d      	mov	r5, r1
 800108c:	4604      	mov	r4, r0
 800108e:	468e      	mov	lr, r1
 8001090:	2b00      	cmp	r3, #0
 8001092:	f040 8083 	bne.w	800119c <__udivmoddi4+0x118>
 8001096:	428a      	cmp	r2, r1
 8001098:	4617      	mov	r7, r2
 800109a:	d947      	bls.n	800112c <__udivmoddi4+0xa8>
 800109c:	fab2 f382 	clz	r3, r2
 80010a0:	b14b      	cbz	r3, 80010b6 <__udivmoddi4+0x32>
 80010a2:	f1c3 0120 	rsb	r1, r3, #32
 80010a6:	fa05 fe03 	lsl.w	lr, r5, r3
 80010aa:	fa20 f101 	lsr.w	r1, r0, r1
 80010ae:	409f      	lsls	r7, r3
 80010b0:	ea41 0e0e 	orr.w	lr, r1, lr
 80010b4:	409c      	lsls	r4, r3
 80010b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010ba:	fbbe fcf8 	udiv	ip, lr, r8
 80010be:	fa1f f987 	uxth.w	r9, r7
 80010c2:	fb08 e21c 	mls	r2, r8, ip, lr
 80010c6:	fb0c f009 	mul.w	r0, ip, r9
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80010d0:	4290      	cmp	r0, r2
 80010d2:	d90a      	bls.n	80010ea <__udivmoddi4+0x66>
 80010d4:	18ba      	adds	r2, r7, r2
 80010d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80010da:	f080 8118 	bcs.w	800130e <__udivmoddi4+0x28a>
 80010de:	4290      	cmp	r0, r2
 80010e0:	f240 8115 	bls.w	800130e <__udivmoddi4+0x28a>
 80010e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80010e8:	443a      	add	r2, r7
 80010ea:	1a12      	subs	r2, r2, r0
 80010ec:	fbb2 f0f8 	udiv	r0, r2, r8
 80010f0:	fb08 2210 	mls	r2, r8, r0, r2
 80010f4:	fb00 f109 	mul.w	r1, r0, r9
 80010f8:	b2a4      	uxth	r4, r4
 80010fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010fe:	42a1      	cmp	r1, r4
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x92>
 8001102:	193c      	adds	r4, r7, r4
 8001104:	f100 32ff 	add.w	r2, r0, #4294967295
 8001108:	f080 8103 	bcs.w	8001312 <__udivmoddi4+0x28e>
 800110c:	42a1      	cmp	r1, r4
 800110e:	f240 8100 	bls.w	8001312 <__udivmoddi4+0x28e>
 8001112:	3802      	subs	r0, #2
 8001114:	443c      	add	r4, r7
 8001116:	1a64      	subs	r4, r4, r1
 8001118:	2100      	movs	r1, #0
 800111a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800111e:	b11e      	cbz	r6, 8001128 <__udivmoddi4+0xa4>
 8001120:	2200      	movs	r2, #0
 8001122:	40dc      	lsrs	r4, r3
 8001124:	e9c6 4200 	strd	r4, r2, [r6]
 8001128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112c:	b902      	cbnz	r2, 8001130 <__udivmoddi4+0xac>
 800112e:	deff      	udf	#255	; 0xff
 8001130:	fab2 f382 	clz	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d14f      	bne.n	80011d8 <__udivmoddi4+0x154>
 8001138:	1a8d      	subs	r5, r1, r2
 800113a:	2101      	movs	r1, #1
 800113c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001140:	fa1f f882 	uxth.w	r8, r2
 8001144:	fbb5 fcfe 	udiv	ip, r5, lr
 8001148:	fb0e 551c 	mls	r5, lr, ip, r5
 800114c:	fb08 f00c 	mul.w	r0, r8, ip
 8001150:	0c22      	lsrs	r2, r4, #16
 8001152:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001156:	42a8      	cmp	r0, r5
 8001158:	d907      	bls.n	800116a <__udivmoddi4+0xe6>
 800115a:	197d      	adds	r5, r7, r5
 800115c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001160:	d202      	bcs.n	8001168 <__udivmoddi4+0xe4>
 8001162:	42a8      	cmp	r0, r5
 8001164:	f200 80e9 	bhi.w	800133a <__udivmoddi4+0x2b6>
 8001168:	4694      	mov	ip, r2
 800116a:	1a2d      	subs	r5, r5, r0
 800116c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001170:	fb0e 5510 	mls	r5, lr, r0, r5
 8001174:	fb08 f800 	mul.w	r8, r8, r0
 8001178:	b2a4      	uxth	r4, r4
 800117a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800117e:	45a0      	cmp	r8, r4
 8001180:	d907      	bls.n	8001192 <__udivmoddi4+0x10e>
 8001182:	193c      	adds	r4, r7, r4
 8001184:	f100 32ff 	add.w	r2, r0, #4294967295
 8001188:	d202      	bcs.n	8001190 <__udivmoddi4+0x10c>
 800118a:	45a0      	cmp	r8, r4
 800118c:	f200 80d9 	bhi.w	8001342 <__udivmoddi4+0x2be>
 8001190:	4610      	mov	r0, r2
 8001192:	eba4 0408 	sub.w	r4, r4, r8
 8001196:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800119a:	e7c0      	b.n	800111e <__udivmoddi4+0x9a>
 800119c:	428b      	cmp	r3, r1
 800119e:	d908      	bls.n	80011b2 <__udivmoddi4+0x12e>
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	f000 80b1 	beq.w	8001308 <__udivmoddi4+0x284>
 80011a6:	2100      	movs	r1, #0
 80011a8:	e9c6 0500 	strd	r0, r5, [r6]
 80011ac:	4608      	mov	r0, r1
 80011ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b2:	fab3 f183 	clz	r1, r3
 80011b6:	2900      	cmp	r1, #0
 80011b8:	d14b      	bne.n	8001252 <__udivmoddi4+0x1ce>
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	d302      	bcc.n	80011c4 <__udivmoddi4+0x140>
 80011be:	4282      	cmp	r2, r0
 80011c0:	f200 80b9 	bhi.w	8001336 <__udivmoddi4+0x2b2>
 80011c4:	1a84      	subs	r4, r0, r2
 80011c6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ca:	2001      	movs	r0, #1
 80011cc:	469e      	mov	lr, r3
 80011ce:	2e00      	cmp	r6, #0
 80011d0:	d0aa      	beq.n	8001128 <__udivmoddi4+0xa4>
 80011d2:	e9c6 4e00 	strd	r4, lr, [r6]
 80011d6:	e7a7      	b.n	8001128 <__udivmoddi4+0xa4>
 80011d8:	409f      	lsls	r7, r3
 80011da:	f1c3 0220 	rsb	r2, r3, #32
 80011de:	40d1      	lsrs	r1, r2
 80011e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80011e8:	fa1f f887 	uxth.w	r8, r7
 80011ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80011f0:	fa24 f202 	lsr.w	r2, r4, r2
 80011f4:	409d      	lsls	r5, r3
 80011f6:	fb00 fc08 	mul.w	ip, r0, r8
 80011fa:	432a      	orrs	r2, r5
 80011fc:	0c15      	lsrs	r5, r2, #16
 80011fe:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001202:	45ac      	cmp	ip, r5
 8001204:	fa04 f403 	lsl.w	r4, r4, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x19a>
 800120a:	197d      	adds	r5, r7, r5
 800120c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001210:	f080 808f 	bcs.w	8001332 <__udivmoddi4+0x2ae>
 8001214:	45ac      	cmp	ip, r5
 8001216:	f240 808c 	bls.w	8001332 <__udivmoddi4+0x2ae>
 800121a:	3802      	subs	r0, #2
 800121c:	443d      	add	r5, r7
 800121e:	eba5 050c 	sub.w	r5, r5, ip
 8001222:	fbb5 f1fe 	udiv	r1, r5, lr
 8001226:	fb0e 5c11 	mls	ip, lr, r1, r5
 800122a:	fb01 f908 	mul.w	r9, r1, r8
 800122e:	b295      	uxth	r5, r2
 8001230:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001234:	45a9      	cmp	r9, r5
 8001236:	d907      	bls.n	8001248 <__udivmoddi4+0x1c4>
 8001238:	197d      	adds	r5, r7, r5
 800123a:	f101 32ff 	add.w	r2, r1, #4294967295
 800123e:	d274      	bcs.n	800132a <__udivmoddi4+0x2a6>
 8001240:	45a9      	cmp	r9, r5
 8001242:	d972      	bls.n	800132a <__udivmoddi4+0x2a6>
 8001244:	3902      	subs	r1, #2
 8001246:	443d      	add	r5, r7
 8001248:	eba5 0509 	sub.w	r5, r5, r9
 800124c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001250:	e778      	b.n	8001144 <__udivmoddi4+0xc0>
 8001252:	f1c1 0720 	rsb	r7, r1, #32
 8001256:	408b      	lsls	r3, r1
 8001258:	fa22 fc07 	lsr.w	ip, r2, r7
 800125c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001260:	fa25 f407 	lsr.w	r4, r5, r7
 8001264:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001268:	fbb4 f9fe 	udiv	r9, r4, lr
 800126c:	fa1f f88c 	uxth.w	r8, ip
 8001270:	fb0e 4419 	mls	r4, lr, r9, r4
 8001274:	fa20 f307 	lsr.w	r3, r0, r7
 8001278:	fb09 fa08 	mul.w	sl, r9, r8
 800127c:	408d      	lsls	r5, r1
 800127e:	431d      	orrs	r5, r3
 8001280:	0c2b      	lsrs	r3, r5, #16
 8001282:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001286:	45a2      	cmp	sl, r4
 8001288:	fa02 f201 	lsl.w	r2, r2, r1
 800128c:	fa00 f301 	lsl.w	r3, r0, r1
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x222>
 8001292:	eb1c 0404 	adds.w	r4, ip, r4
 8001296:	f109 30ff 	add.w	r0, r9, #4294967295
 800129a:	d248      	bcs.n	800132e <__udivmoddi4+0x2aa>
 800129c:	45a2      	cmp	sl, r4
 800129e:	d946      	bls.n	800132e <__udivmoddi4+0x2aa>
 80012a0:	f1a9 0902 	sub.w	r9, r9, #2
 80012a4:	4464      	add	r4, ip
 80012a6:	eba4 040a 	sub.w	r4, r4, sl
 80012aa:	fbb4 f0fe 	udiv	r0, r4, lr
 80012ae:	fb0e 4410 	mls	r4, lr, r0, r4
 80012b2:	fb00 fa08 	mul.w	sl, r0, r8
 80012b6:	b2ad      	uxth	r5, r5
 80012b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012bc:	45a2      	cmp	sl, r4
 80012be:	d908      	bls.n	80012d2 <__udivmoddi4+0x24e>
 80012c0:	eb1c 0404 	adds.w	r4, ip, r4
 80012c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012c8:	d22d      	bcs.n	8001326 <__udivmoddi4+0x2a2>
 80012ca:	45a2      	cmp	sl, r4
 80012cc:	d92b      	bls.n	8001326 <__udivmoddi4+0x2a2>
 80012ce:	3802      	subs	r0, #2
 80012d0:	4464      	add	r4, ip
 80012d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012d6:	fba0 8902 	umull	r8, r9, r0, r2
 80012da:	eba4 040a 	sub.w	r4, r4, sl
 80012de:	454c      	cmp	r4, r9
 80012e0:	46c6      	mov	lr, r8
 80012e2:	464d      	mov	r5, r9
 80012e4:	d319      	bcc.n	800131a <__udivmoddi4+0x296>
 80012e6:	d016      	beq.n	8001316 <__udivmoddi4+0x292>
 80012e8:	b15e      	cbz	r6, 8001302 <__udivmoddi4+0x27e>
 80012ea:	ebb3 020e 	subs.w	r2, r3, lr
 80012ee:	eb64 0405 	sbc.w	r4, r4, r5
 80012f2:	fa04 f707 	lsl.w	r7, r4, r7
 80012f6:	fa22 f301 	lsr.w	r3, r2, r1
 80012fa:	431f      	orrs	r7, r3
 80012fc:	40cc      	lsrs	r4, r1
 80012fe:	e9c6 7400 	strd	r7, r4, [r6]
 8001302:	2100      	movs	r1, #0
 8001304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001308:	4631      	mov	r1, r6
 800130a:	4630      	mov	r0, r6
 800130c:	e70c      	b.n	8001128 <__udivmoddi4+0xa4>
 800130e:	468c      	mov	ip, r1
 8001310:	e6eb      	b.n	80010ea <__udivmoddi4+0x66>
 8001312:	4610      	mov	r0, r2
 8001314:	e6ff      	b.n	8001116 <__udivmoddi4+0x92>
 8001316:	4543      	cmp	r3, r8
 8001318:	d2e6      	bcs.n	80012e8 <__udivmoddi4+0x264>
 800131a:	ebb8 0e02 	subs.w	lr, r8, r2
 800131e:	eb69 050c 	sbc.w	r5, r9, ip
 8001322:	3801      	subs	r0, #1
 8001324:	e7e0      	b.n	80012e8 <__udivmoddi4+0x264>
 8001326:	4628      	mov	r0, r5
 8001328:	e7d3      	b.n	80012d2 <__udivmoddi4+0x24e>
 800132a:	4611      	mov	r1, r2
 800132c:	e78c      	b.n	8001248 <__udivmoddi4+0x1c4>
 800132e:	4681      	mov	r9, r0
 8001330:	e7b9      	b.n	80012a6 <__udivmoddi4+0x222>
 8001332:	4608      	mov	r0, r1
 8001334:	e773      	b.n	800121e <__udivmoddi4+0x19a>
 8001336:	4608      	mov	r0, r1
 8001338:	e749      	b.n	80011ce <__udivmoddi4+0x14a>
 800133a:	f1ac 0c02 	sub.w	ip, ip, #2
 800133e:	443d      	add	r5, r7
 8001340:	e713      	b.n	800116a <__udivmoddi4+0xe6>
 8001342:	3802      	subs	r0, #2
 8001344:	443c      	add	r4, r7
 8001346:	e724      	b.n	8001192 <__udivmoddi4+0x10e>

08001348 <__aeabi_idiv0>:
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f947 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f007 fc6a 	bl	8008c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f95f 	bl	800165a <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f927 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000f0 	.word	0x200000f0
 80013d0:	20000004 	.word	0x20000004
 80013d4:	20000000 	.word	0x20000000

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x1c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x20>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_IncTick+0x20>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000744 	.word	0x20000744

080013fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_GetTick+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000744 	.word	0x20000744

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fff0 	bl	80013fc <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffe0 	bl	80013fc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000004 	.word	0x20000004

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <__NVIC_EnableIRQ+0x34>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff90 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff2d 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff42 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff35 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e043      	b.n	8001712 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_DMA_Init+0xa8>)
 8001692:	4413      	add	r3, r2
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_DMA_Init+0xac>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_DMA_Init+0xb0>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_DMA_Start_IT+0x20>
 8001744:	2302      	movs	r3, #2
 8001746:	e04a      	b.n	80017de <HAL_DMA_Start_IT+0xb6>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	2b01      	cmp	r3, #1
 8001758:	d13a      	bne.n	80017d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f938 	bl	80019f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 020e 	orr.w	r2, r2, #14
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e00f      	b.n	80017be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0204 	bic.w	r2, r2, #4
 80017ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 020a 	orr.w	r2, r2, #10
 80017bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e005      	b.n	80017dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
 80017da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	2204      	movs	r2, #4
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d04f      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xc8>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d04a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a66      	ldr	r2, [pc, #408]	; (80019d8 <HAL_DMA_IRQHandler+0x1f0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d029      	beq.n	8001896 <HAL_DMA_IRQHandler+0xae>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a65      	ldr	r2, [pc, #404]	; (80019dc <HAL_DMA_IRQHandler+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <HAL_DMA_IRQHandler+0xaa>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01a      	beq.n	800188c <HAL_DMA_IRQHandler+0xa4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <HAL_DMA_IRQHandler+0x1fc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d012      	beq.n	8001886 <HAL_DMA_IRQHandler+0x9e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_DMA_IRQHandler+0x200>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x98>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5f      	ldr	r2, [pc, #380]	; (80019ec <HAL_DMA_IRQHandler+0x204>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <HAL_DMA_IRQHandler+0x92>
 8001874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001878:	e00e      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 800187a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800187e:	e00b      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001884:	e008      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188a:	e005      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	e002      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	e000      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001896:	2304      	movs	r3, #4
 8001898:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <HAL_DMA_IRQHandler+0x208>)
 800189a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8094 	beq.w	80019ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018ae:	e08e      	b.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2202      	movs	r2, #2
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d056      	beq.n	800196e <HAL_DMA_IRQHandler+0x186>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d051      	beq.n	800196e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020a 	bic.w	r2, r2, #10
 80018e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_DMA_IRQHandler+0x1f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d029      	beq.n	800194e <HAL_DMA_IRQHandler+0x166>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_DMA_IRQHandler+0x1f4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d022      	beq.n	800194a <HAL_DMA_IRQHandler+0x162>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a35      	ldr	r2, [pc, #212]	; (80019e0 <HAL_DMA_IRQHandler+0x1f8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x15c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d012      	beq.n	800193e <HAL_DMA_IRQHandler+0x156>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_DMA_IRQHandler+0x200>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00a      	beq.n	8001938 <HAL_DMA_IRQHandler+0x150>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_DMA_IRQHandler+0x204>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d102      	bne.n	8001932 <HAL_DMA_IRQHandler+0x14a>
 800192c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001930:	e00e      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001936:	e00b      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	e008      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	e005      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	e002      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800194a:	2320      	movs	r3, #32
 800194c:	e000      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800194e:	2302      	movs	r3, #2
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_DMA_IRQHandler+0x208>)
 8001952:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d034      	beq.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800196c:	e02f      	b.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2208      	movs	r2, #8
 8001974:	409a      	lsls	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d028      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020e 	bic.w	r2, r2, #14
 8001996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    }
  }
  return;
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020008 	.word	0x40020008
 80019dc:	4002001c 	.word	0x4002001c
 80019e0:	40020030 	.word	0x40020030
 80019e4:	40020044 	.word	0x40020044
 80019e8:	40020058 	.word	0x40020058
 80019ec:	4002006c 	.word	0x4002006c
 80019f0:	40020000 	.word	0x40020000

080019f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d108      	bne.n	8001a34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a32:	e007      	b.n	8001a44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e169      	b.n	8001d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8158 	bne.w	8001d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a9a      	ldr	r2, [pc, #616]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d05e      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a98      	ldr	r2, [pc, #608]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d875      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a92:	4a98      	ldr	r2, [pc, #608]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d058      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001a98:	4a96      	ldr	r2, [pc, #600]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d86f      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001a9e:	4a96      	ldr	r2, [pc, #600]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d052      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001aa4:	4a94      	ldr	r2, [pc, #592]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d869      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aaa:	4a94      	ldr	r2, [pc, #592]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d04c      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001ab0:	4a92      	ldr	r2, [pc, #584]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ab6:	4a92      	ldr	r2, [pc, #584]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d046      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
 8001abc:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d85d      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d82a      	bhi.n	8001b1c <HAL_GPIO_Init+0xcc>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d859      	bhi.n	8001b7e <HAL_GPIO_Init+0x12e>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <HAL_GPIO_Init+0x80>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b4b 	.word	0x08001b4b
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001b37 	.word	0x08001b37
 8001adc:	08001b79 	.word	0x08001b79
 8001ae0:	08001b7f 	.word	0x08001b7f
 8001ae4:	08001b7f 	.word	0x08001b7f
 8001ae8:	08001b7f 	.word	0x08001b7f
 8001aec:	08001b7f 	.word	0x08001b7f
 8001af0:	08001b7f 	.word	0x08001b7f
 8001af4:	08001b7f 	.word	0x08001b7f
 8001af8:	08001b7f 	.word	0x08001b7f
 8001afc:	08001b7f 	.word	0x08001b7f
 8001b00:	08001b7f 	.word	0x08001b7f
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b7f 	.word	0x08001b7f
 8001b0c:	08001b7f 	.word	0x08001b7f
 8001b10:	08001b7f 	.word	0x08001b7f
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	4a79      	ldr	r2, [pc, #484]	; (8001d04 <HAL_GPIO_Init+0x2b4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b22:	e02c      	b.n	8001b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e029      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e024      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e01f      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	330c      	adds	r3, #12
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e01a      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b52:	2304      	movs	r3, #4
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e013      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b60:	2308      	movs	r3, #8
 8001b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	611a      	str	r2, [r3, #16]
          break;
 8001b6a:	e009      	b.n	8001b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	615a      	str	r2, [r3, #20]
          break;
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x130>
          break;
 8001b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d801      	bhi.n	8001b8a <HAL_GPIO_Init+0x13a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_Init+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d802      	bhi.n	8001b9c <HAL_GPIO_Init+0x14c>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x152>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3b08      	subs	r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	210f      	movs	r1, #15
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b1 	beq.w	8001d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_GPIO_Init+0x2b8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_GPIO_Init+0x2c0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1ec>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <HAL_GPIO_Init+0x2c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1e8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3e      	ldr	r2, [pc, #248]	; (8001d18 <HAL_GPIO_Init+0x2c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1e4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_GPIO_Init+0x2cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1e0>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1ee>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	492f      	ldr	r1, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x2bc>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4928      	ldr	r1, [pc, #160]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	491e      	ldr	r1, [pc, #120]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4918      	ldr	r1, [pc, #96]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4914      	ldr	r1, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d021      	beq.n	8001d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e021      	b.n	8001d32 <HAL_GPIO_Init+0x2e2>
 8001cee:	bf00      	nop
 8001cf0:	10320000 	.word	0x10320000
 8001cf4:	10310000 	.word	0x10310000
 8001cf8:	10220000 	.word	0x10220000
 8001cfc:	10210000 	.word	0x10210000
 8001d00:	10120000 	.word	0x10120000
 8001d04:	10110000 	.word	0x10110000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	3301      	adds	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f47f ae8e 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	372c      	adds	r7, #44	; 0x2c
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e11b      	b.n	8001fd2 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 ff78 	bl	8008ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dcc:	f001 fde6 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a81      	ldr	r2, [pc, #516]	; (8001fdc <HAL_I2C_Init+0x254>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d807      	bhi.n	8001dec <HAL_I2C_Init+0x64>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a80      	ldr	r2, [pc, #512]	; (8001fe0 <HAL_I2C_Init+0x258>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	bf94      	ite	ls
 8001de4:	2301      	movls	r3, #1
 8001de6:	2300      	movhi	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e006      	b.n	8001dfa <HAL_I2C_Init+0x72>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a7d      	ldr	r2, [pc, #500]	; (8001fe4 <HAL_I2C_Init+0x25c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	bf94      	ite	ls
 8001df4:	2301      	movls	r3, #1
 8001df6:	2300      	movhi	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0e7      	b.n	8001fd2 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a78      	ldr	r2, [pc, #480]	; (8001fe8 <HAL_I2C_Init+0x260>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9b      	lsrs	r3, r3, #18
 8001e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_I2C_Init+0x254>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d802      	bhi.n	8001e3c <HAL_I2C_Init+0xb4>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	e009      	b.n	8001e50 <HAL_I2C_Init+0xc8>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_I2C_Init+0x264>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	3301      	adds	r3, #1
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	495c      	ldr	r1, [pc, #368]	; (8001fdc <HAL_I2C_Init+0x254>)
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	d819      	bhi.n	8001ea4 <HAL_I2C_Init+0x11c>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e59      	subs	r1, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7e:	1c59      	adds	r1, r3, #1
 8001e80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e84:	400b      	ands	r3, r1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_I2C_Init+0x118>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e59      	subs	r1, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	e051      	b.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e04f      	b.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <HAL_I2C_Init+0x148>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e012      	b.n	8001ef6 <HAL_I2C_Init+0x16e>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	0099      	lsls	r1, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Init+0x176>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e022      	b.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10e      	bne.n	8001f24 <HAL_I2C_Init+0x19c>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1e58      	subs	r0, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	440b      	add	r3, r1
 8001f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	e00f      	b.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	0099      	lsls	r1, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	6809      	ldr	r1, [r1, #0]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6911      	ldr	r1, [r2, #16]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68d2      	ldr	r2, [r2, #12]
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	000186a0 	.word	0x000186a0
 8001fe0:	001e847f 	.word	0x001e847f
 8001fe4:	003d08ff 	.word	0x003d08ff
 8001fe8:	431bde83 	.word	0x431bde83
 8001fec:	10624dd3 	.word	0x10624dd3

08001ff0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	817b      	strh	r3, [r7, #10]
 8002000:	4613      	mov	r3, r2
 8002002:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff f9fa 	bl	80013fc <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	f040 80e0 	bne.w	80021d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2319      	movs	r3, #25
 800201e:	2201      	movs	r2, #1
 8002020:	4970      	ldr	r1, [pc, #448]	; (80021e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 ff0a 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	e0d3      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_I2C_Master_Transmit+0x50>
 800203c:	2302      	movs	r3, #2
 800203e:	e0cc      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d007      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002074:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2221      	movs	r2, #33	; 0x21
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2210      	movs	r2, #16
 8002082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a8:	8979      	ldrh	r1, [r7, #10]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6a3a      	ldr	r2, [r7, #32]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fcf4 	bl	8002a9c <I2C_MasterRequestWrite>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e08d      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020d4:	e066      	b.n	80021a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 ff84 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00d      	beq.n	8002102 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d107      	bne.n	80020fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b04      	cmp	r3, #4
 800213e:	d11b      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x188>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d017      	beq.n	8002178 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6a39      	ldr	r1, [r7, #32]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 ff74 	bl	800306a <I2C_WaitOnBTFFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2b04      	cmp	r3, #4
 800218e:	d107      	bne.n	80021a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e01a      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d194      	bne.n	80020d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	00100002 	.word	0x00100002
 80021e8:	ffff0000 	.word	0xffff0000

080021ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	817b      	strh	r3, [r7, #10]
 80021fe:	460b      	mov	r3, r1
 8002200:	813b      	strh	r3, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002206:	f7ff f8f9 	bl	80013fc <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	f040 80d9 	bne.w	80023cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2319      	movs	r3, #25
 8002220:	2201      	movs	r2, #1
 8002222:	496d      	ldr	r1, [pc, #436]	; (80023d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fe09 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	e0cc      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Mem_Write+0x56>
 800223e:	2302      	movs	r3, #2
 8002240:	e0c5      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d007      	beq.n	8002268 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2221      	movs	r2, #33	; 0x21
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <HAL_I2C_Mem_Write+0x1f0>)
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022aa:	88f8      	ldrh	r0, [r7, #6]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	8979      	ldrh	r1, [r7, #10]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4603      	mov	r3, r0
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fc64 	bl	8002b88 <I2C_RequestMemoryWrite>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d052      	beq.n	800236c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e081      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fe8a 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d107      	bne.n	80022f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06b      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b04      	cmp	r3, #4
 8002332:	d11b      	bne.n	800236c <HAL_I2C_Mem_Write+0x180>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d017      	beq.n	800236c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1aa      	bne.n	80022ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fe76 	bl	800306a <I2C_WaitOnBTFFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e016      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	00100002 	.word	0x00100002
 80023dc:	ffff0000 	.word	0xffff0000

080023e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7fe ffff 	bl	80013fc <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 821e 	bne.w	800284a <HAL_I2C_Mem_Read+0x46a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	4982      	ldr	r1, [pc, #520]	; (8002620 <HAL_I2C_Mem_Read+0x240>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fd0f 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	e211      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Mem_Read+0x56>
 8002432:	2302      	movs	r3, #2
 8002434:	e20a      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d007      	beq.n	800245c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2222      	movs	r2, #34	; 0x22
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_I2C_Mem_Read+0x244>)
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249e:	88f8      	ldrh	r0, [r7, #6]
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fbf4 	bl	8002c9c <I2C_RequestMemoryRead>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1c6      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
    }

    if (hi2c->XferSize == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e19a      	b.n	8002824 <HAL_I2C_Mem_Read+0x444>
    }
    else if (hi2c->XferSize == 1U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d11e      	bne.n	8002534 <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002506:	b672      	cpsid	i
}
 8002508:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002530:	b662      	cpsie	i
}
 8002532:	e035      	b.n	80025a0 <HAL_I2C_Mem_Read+0x1c0>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	2b02      	cmp	r3, #2
 800253a:	d11e      	bne.n	800257a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002576:	b662      	cpsie	i
}
 8002578:	e012      	b.n	80025a0 <HAL_I2C_Mem_Read+0x1c0>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025a0:	e140      	b.n	8002824 <HAL_I2C_Mem_Read+0x444>
    {
      if (hi2c->XferSize <= 3U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	f200 80f9 	bhi.w	800279e <HAL_I2C_Mem_Read+0x3be>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d123      	bne.n	80025fc <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fd97 	bl	80030ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e141      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fa:	e113      	b.n	8002824 <HAL_I2C_Mem_Read+0x444>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b02      	cmp	r3, #2
 8002602:	d152      	bne.n	80026aa <HAL_I2C_Mem_Read+0x2ca>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	2200      	movs	r2, #0
 800260c:	4906      	ldr	r1, [pc, #24]	; (8002628 <HAL_I2C_Mem_Read+0x248>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fc14 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e116      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
 800261e:	bf00      	nop
 8002620:	00100002 	.word	0x00100002
 8002624:	ffff0000 	.word	0xffff0000
 8002628:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002672:	b662      	cpsie	i
}
 8002674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a8:	e0bc      	b.n	8002824 <HAL_I2C_Mem_Read+0x444>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	2200      	movs	r2, #0
 80026b2:	4968      	ldr	r1, [pc, #416]	; (8002854 <HAL_I2C_Mem_Read+0x474>)
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fbc1 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x2e4>
          {
            return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0c3      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	4950      	ldr	r1, [pc, #320]	; (8002854 <HAL_I2C_Mem_Read+0x474>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fb91 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x344>
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e093      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002766:	b662      	cpsie	i
}
 8002768:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800279c:	e042      	b.n	8002824 <HAL_I2C_Mem_Read+0x444>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fca2 	bl	80030ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Mem_Read+0x3d2>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e04c      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d118      	bne.n	8002824 <HAL_I2C_Mem_Read+0x444>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f aeba 	bne.w	80025a2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_I2C_Mem_Read+0x46c>
  }
  else
  {
    return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
  }
}
 800284c:	4618      	mov	r0, r3
 800284e:	3728      	adds	r7, #40	; 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	00010004 	.word	0x00010004

08002858 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7fe fdc8 	bl	80013fc <HAL_GetTick>
 800286c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	f040 8105 	bne.w	8002a8a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2319      	movs	r3, #25
 8002886:	2201      	movs	r2, #1
 8002888:	4982      	ldr	r1, [pc, #520]	; (8002a94 <HAL_I2C_IsDeviceReady+0x23c>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fad6 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
 8002898:	e0f8      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_I2C_IsDeviceReady+0x50>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0f1      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d007      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2224      	movs	r2, #36	; 0x24
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_I2C_IsDeviceReady+0x240>)
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa94 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0b6      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800292c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe fd65 	bl	80013fc <HAL_GetTick>
 8002932:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	bf0c      	ite	eq
 8002942:	2301      	moveq	r3, #1
 8002944:	2300      	movne	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002962:	e025      	b.n	80029b0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe fd4a 	bl	80013fc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <HAL_I2C_IsDeviceReady+0x122>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22a0      	movs	r2, #160	; 0xa0
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2ba0      	cmp	r3, #160	; 0xa0
 80029ba:	d005      	beq.n	80029c8 <HAL_I2C_IsDeviceReady+0x170>
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HAL_I2C_IsDeviceReady+0x170>
 80029c2:	7dbb      	ldrb	r3, [r7, #22]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0cd      	beq.n	8002964 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d129      	bne.n	8002a32 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2319      	movs	r3, #25
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4921      	ldr	r1, [pc, #132]	; (8002a94 <HAL_I2C_IsDeviceReady+0x23c>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa14 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e036      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e02c      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	490f      	ldr	r1, [pc, #60]	; (8002a94 <HAL_I2C_IsDeviceReady+0x23c>)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f9f0 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e012      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f4ff af3e 	bcc.w	80028f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	00100002 	.word	0x00100002
 8002a98:	ffff0000 	.word	0xffff0000

08002a9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d006      	beq.n	8002ac6 <I2C_MasterRequestWrite+0x2a>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d003      	beq.n	8002ac6 <I2C_MasterRequestWrite+0x2a>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac4:	d108      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b12      	cmp	r3, #18
 8002ade:	d107      	bne.n	8002af0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f99d 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e035      	b.n	8002b78 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b14:	d108      	bne.n	8002b28 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	e01b      	b.n	8002b60 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	11db      	asrs	r3, r3, #7
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f063 030f 	orn	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <I2C_MasterRequestWrite+0xe4>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9cf 	bl	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e010      	b.n	8002b78 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <I2C_MasterRequestWrite+0xe8>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f9bf 	bl	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	00010008 	.word	0x00010008
 8002b84:	00010002 	.word	0x00010002

08002b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	817b      	strh	r3, [r7, #10]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	813b      	strh	r3, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f93c 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e05f      	b.n	8002c8e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	492d      	ldr	r1, [pc, #180]	; (8002c98 <I2C_RequestMemoryWrite+0x110>)
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f980 	bl	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e04c      	b.n	8002c8e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	6a39      	ldr	r1, [r7, #32]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f9ea 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d107      	bne.n	8002c32 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e02b      	b.n	8002c8e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	e021      	b.n	8002c8c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f9c4 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d107      	bne.n	8002c7e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e005      	b.n	8002c8e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	00010002 	.word	0x00010002

08002c9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8aa 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09e      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	494c      	ldr	r1, [pc, #304]	; (8002e38 <I2C_RequestMemoryRead+0x19c>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f8ee 	bl	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e08b      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f958 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06a      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e021      	b.n	8002db0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6c:	893b      	ldrh	r3, [r7, #8]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f932 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e044      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	6a39      	ldr	r1, [r7, #32]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f917 	bl	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d107      	bne.n	8002dd8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e029      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f81f 	bl	8002e3c <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e013      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	4906      	ldr	r1, [pc, #24]	; (8002e38 <I2C_RequestMemoryRead+0x19c>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f863 	bl	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010002 	.word	0x00010002

08002e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4c:	e025      	b.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d021      	beq.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fad1 	bl	80013fc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e023      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10d      	bne.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	e00c      	b.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0b6      	beq.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef8:	e051      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f08:	d123      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0204 	orr.w	r2, r3, #4
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e046      	b.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d021      	beq.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fa4f 	bl	80013fc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d116      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e020      	b.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10c      	bne.n	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e00b      	b.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d18d      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff4:	e02d      	b.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8ce 	bl	8003198 <I2C_IsAcknowledgeFailed>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e02d      	b.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d021      	beq.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe f9f5 	bl	80013fc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d116      	bne.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e007      	b.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d1ca      	bne.n	8002ff6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003076:	e02d      	b.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f88d 	bl	8003198 <I2C_IsAcknowledgeFailed>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e02d      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d021      	beq.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7fe f9b4 	bl	80013fc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d116      	bne.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d1ca      	bne.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f8:	e042      	b.n	8003180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d119      	bne.n	800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0210 	mvn.w	r2, #16
 8003110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e029      	b.n	8003190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe f95e 	bl	80013fc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d1b5      	bne.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d11b      	bne.n	80031e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e26c      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8087 	beq.w	8003322 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d112      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
 800322c:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06c      	beq.n	8003320 <HAL_RCC_OscConfig+0x12c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d168      	bne.n	8003320 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e246      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x76>
 800325c:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e02e      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x98>
 8003272:	4b7b      	ldr	r3, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b78      	ldr	r3, [pc, #480]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a77      	ldr	r2, [pc, #476]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xbc>
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a71      	ldr	r2, [pc, #452]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 80032b0:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe f894 	bl	80013fc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe f890 	bl	80013fc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1fa      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe4>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe f880 	bl	80013fc <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe f87c 	bl	80013fc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1e6      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x10c>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1ba      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4939      	ldr	r1, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e03a      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7fe f835 	bl	80013fc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003396:	f7fe f831 	bl	80013fc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e19b      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4927      	ldr	r1, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e015      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe f814 	bl	80013fc <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe f810 	bl	80013fc <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e17a      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03a      	beq.n	8003478 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fd fff4 	bl	80013fc <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fd fff0 	bl	80013fc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e15a      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 fad8 	bl	80039ec <RCC_Delay>
 800343c:	e01c      	b.n	8003478 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fd ffda 	bl	80013fc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344a:	e00f      	b.n	800346c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fd ffd6 	bl	80013fc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d908      	bls.n	800346c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e140      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	42420000 	.word	0x42420000
 8003468:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e9      	bne.n	800344c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a6 	beq.w	80035d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b97      	ldr	r3, [pc, #604]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b94      	ldr	r3, [pc, #592]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a93      	ldr	r2, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b91      	ldr	r3, [pc, #580]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b8e      	ldr	r3, [pc, #568]	; (80036ec <HAL_RCC_OscConfig+0x4f8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a8a      	ldr	r2, [pc, #552]	; (80036ec <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7fd ff97 	bl	80013fc <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fd ff93 	bl	80013fc <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0fd      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x312>
 80034f8:	4b7b      	ldr	r3, [pc, #492]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a7a      	ldr	r2, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	e02d      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x334>
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a75      	ldr	r2, [pc, #468]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	e01c      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x356>
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a6c      	ldr	r2, [pc, #432]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a69      	ldr	r2, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	e00b      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 800354a:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d015      	beq.n	8003596 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fd ff47 	bl	80013fc <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fd ff43 	bl	80013fc <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0ab      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ee      	beq.n	8003572 <HAL_RCC_OscConfig+0x37e>
 8003594:	e014      	b.n	80035c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fd ff31 	bl	80013fc <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd ff2d 	bl	80013fc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e095      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	4b4c      	ldr	r3, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ee      	bne.n	800359e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4a47      	ldr	r2, [pc, #284]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8081 	beq.w	80036de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d061      	beq.n	80036ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d146      	bne.n	800367e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCC_OscConfig+0x4fc>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fd ff01 	bl	80013fc <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fd fefd 	bl	80013fc <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e067      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d108      	bne.n	8003638 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	492d      	ldr	r1, [pc, #180]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a19      	ldr	r1, [r3, #32]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	430b      	orrs	r3, r1
 800364a:	4927      	ldr	r1, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_RCC_OscConfig+0x4fc>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fd fed1 	bl	80013fc <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7fd fecd 	bl	80013fc <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e037      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x46a>
 800367c:	e02f      	b.n	80036de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_RCC_OscConfig+0x4fc>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fd feba 	bl	80013fc <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd feb6 	bl	80013fc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e020      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x498>
 80036aa:	e018      	b.n	80036de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e013      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42420060 	.word	0x42420060

080036f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d0      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0207 	bic.w	r2, r3, #7
 800371e:	4965      	ldr	r1, [pc, #404]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0b8      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800375a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003772:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	494d      	ldr	r1, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d040      	beq.n	8003814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d115      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e073      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06b      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4936      	ldr	r1, [pc, #216]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fd fe0a 	bl	80013fc <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd fe06 	bl	80013fc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e053      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d210      	bcs.n	8003844 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	4922      	ldr	r1, [pc, #136]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e032      	b.n	80038aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003882:	f000 f821 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	5ccb      	ldrb	r3, [r1, r3]
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1cc>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1d0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fd68 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40021000 	.word	0x40021000
 80038bc:	0800d688 	.word	0x0800d688
 80038c0:	200000f0 	.word	0x200000f0
 80038c4:	20000000 	.word	0x20000000

080038c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	b490      	push	{r4, r7}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038d0:	1d3c      	adds	r4, r7, #4
 80038d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d8:	f240 2301 	movw	r3, #513	; 0x201
 80038dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d002      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x40>
 8003902:	2b08      	cmp	r3, #8
 8003904:	d003      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x46>
 8003906:	e02d      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb8>)
 800390a:	623b      	str	r3, [r7, #32]
      break;
 800390c:	e02d      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	0c9b      	lsrs	r3, r3, #18
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800391a:	4413      	add	r3, r2
 800391c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003920:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_GetSysClockFreq+0xb4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	0c5b      	lsrs	r3, r3, #17
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800393a:	4413      	add	r3, r2
 800393c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003940:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003946:	fb02 f203 	mul.w	r2, r2, r3
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	e004      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	623b      	str	r3, [r7, #32]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003966:	623b      	str	r3, [r7, #32]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6a3b      	ldr	r3, [r7, #32]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc90      	pop	{r4, r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	0800c0c8 	.word	0x0800c0c8
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	003d0900 	.word	0x003d0900

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b02      	ldr	r3, [pc, #8]	; (8003998 <HAL_RCC_GetHCLKFreq+0x10>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	200000f0 	.word	0x200000f0

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff2 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800d698 	.word	0x0800d698

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffde 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0adb      	lsrs	r3, r3, #11
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	0800d698 	.word	0x0800d698

080039ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <RCC_Delay+0x34>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <RCC_Delay+0x38>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a5b      	lsrs	r3, r3, #9
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a08:	bf00      	nop
  }
  while (Delay --);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e5a      	subs	r2, r3, #1
 8003a0e:	60fa      	str	r2, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f9      	bne.n	8003a08 <RCC_Delay+0x1c>
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	200000f0 	.word	0x200000f0
 8003a24:	10624dd3 	.word	0x10624dd3

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e053      	b.n	8003ae2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f005 f963 	bl	8008d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	ea42 0103 	orr.w	r1, r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	0c1a      	lsrs	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f002 0204 	and.w	r2, r2, #4
 8003ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b088      	sub	sp, #32
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_SPI_Transmit+0x22>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e11e      	b.n	8003d4a <HAL_SPI_Transmit+0x260>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b14:	f7fd fc72 	bl	80013fc <HAL_GetTick>
 8003b18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d002      	beq.n	8003b30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b2e:	e103      	b.n	8003d38 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Transmit+0x52>
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b40:	e0fa      	b.n	8003d38 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2203      	movs	r2, #3
 8003b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	d107      	bne.n	8003b9a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d007      	beq.n	8003bb8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc0:	d14b      	bne.n	8003c5a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Transmit+0xe6>
 8003bca:	8afb      	ldrh	r3, [r7, #22]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d13e      	bne.n	8003c4e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf4:	e02b      	b.n	8003c4e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d112      	bne.n	8003c2a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c28:	e011      	b.n	8003c4e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2a:	f7fd fbe7 	bl	80013fc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d803      	bhi.n	8003c42 <HAL_SPI_Transmit+0x158>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d102      	bne.n	8003c48 <HAL_SPI_Transmit+0x15e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c4c:	e074      	b.n	8003d38 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ce      	bne.n	8003bf6 <HAL_SPI_Transmit+0x10c>
 8003c58:	e04c      	b.n	8003cf4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0x17e>
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d140      	bne.n	8003cea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c8e:	e02c      	b.n	8003cea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d113      	bne.n	8003cc6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cc4:	e011      	b.n	8003cea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc6:	f7fd fb99 	bl	80013fc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d803      	bhi.n	8003cde <HAL_SPI_Transmit+0x1f4>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit+0x1fa>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce8:	e026      	b.n	8003d38 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1cd      	bne.n	8003c90 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb91 	bl	8004420 <SPI_EndRxTxTransaction>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e000      	b.n	8003d38 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b088      	sub	sp, #32
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d112      	bne.n	8003d96 <HAL_SPI_Receive+0x44>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10e      	bne.n	8003d96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f8e9 	bl	8003f64 <HAL_SPI_TransmitReceive>
 8003d92:	4603      	mov	r3, r0
 8003d94:	e0e2      	b.n	8003f5c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_SPI_Receive+0x52>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0db      	b.n	8003f5c <HAL_SPI_Receive+0x20a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dac:	f7fd fb26 	bl	80013fc <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dc2:	e0c2      	b.n	8003f4a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Receive+0x7e>
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd4:	e0b9      	b.n	8003f4a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1c:	d107      	bne.n	8003e2e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d162      	bne.n	8003f1a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e54:	e02e      	b.n	8003eb4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f103 020c 	add.w	r2, r3, #12
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e8e:	e011      	b.n	8003eb4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e90:	f7fd fab4 	bl	80013fc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d803      	bhi.n	8003ea8 <HAL_SPI_Receive+0x156>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x15c>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eb2:	e04a      	b.n	8003f4a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1cb      	bne.n	8003e56 <HAL_SPI_Receive+0x104>
 8003ebe:	e031      	b.n	8003f24 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d113      	bne.n	8003ef6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef4:	e011      	b.n	8003f1a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef6:	f7fd fa81 	bl	80013fc <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d803      	bhi.n	8003f0e <HAL_SPI_Receive+0x1bc>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_Receive+0x1c2>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f18:	e017      	b.n	8003f4a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1cd      	bne.n	8003ec0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa27 	bl	800437c <SPI_EndRxTransaction>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
 8003f46:	e000      	b.n	8003f4a <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08c      	sub	sp, #48	; 0x30
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f72:	2301      	movs	r3, #1
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x26>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e18a      	b.n	80042a0 <HAL_SPI_TransmitReceive+0x33c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f92:	f7fd fa33 	bl	80013fc <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d00f      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x70>
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fba:	d107      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x68>
 8003fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d003      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fd2:	e15b      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x82>
 8003fe0:	887b      	ldrh	r3, [r7, #2]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fec:	e14e      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	887a      	ldrh	r2, [r7, #2]
 800402a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d007      	beq.n	8004056 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405e:	d178      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_TransmitReceive+0x10a>
 8004068:	8b7b      	ldrh	r3, [r7, #26]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d166      	bne.n	800413c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004092:	e053      	b.n	800413c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11b      	bne.n	80040da <HAL_SPI_TransmitReceive+0x176>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_SPI_TransmitReceive+0x176>
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d113      	bne.n	80040da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d119      	bne.n	800411c <HAL_SPI_TransmitReceive+0x1b8>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	b292      	uxth	r2, r2
 80040fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004118:	2301      	movs	r3, #1
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800411c:	f7fd f96e 	bl	80013fc <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004128:	429a      	cmp	r2, r3
 800412a:	d807      	bhi.n	800413c <HAL_SPI_TransmitReceive+0x1d8>
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800413a:	e0a7      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1a6      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x130>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1a1      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x130>
 8004150:	e07c      	b.n	800424c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x1fc>
 800415a:	8b7b      	ldrh	r3, [r7, #26]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d16b      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004186:	e057      	b.n	8004238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d11c      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x26c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d017      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x26c>
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d114      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d119      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x2ae>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d014      	beq.n	8004212 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420e:	2301      	movs	r3, #1
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004212:	f7fd f8f3 	bl	80013fc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421e:	429a      	cmp	r2, r3
 8004220:	d803      	bhi.n	800422a <HAL_SPI_TransmitReceive+0x2c6>
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d102      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x2cc>
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004236:	e029      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1a2      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x224>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d19d      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f8e5 	bl	8004420 <SPI_EndRxTxTransaction>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d006      	beq.n	800426a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004268:	e010      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	e000      	b.n	800428c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800428a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800429c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3730      	adds	r7, #48	; 0x30
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b8:	e04c      	b.n	8004354 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d048      	beq.n	8004354 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042c2:	f7fd f89b 	bl	80013fc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d902      	bls.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d13d      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f0:	d111      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d004      	beq.n	8004306 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d107      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d10f      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e00f      	b.n	8004374 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	429a      	cmp	r2, r3
 8004370:	d1a3      	bne.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004390:	d111      	bne.n	80043b6 <SPI_EndRxTransaction+0x3a>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d004      	beq.n	80043a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d107      	bne.n	80043b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043be:	d117      	bne.n	80043f0 <SPI_EndRxTransaction+0x74>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d112      	bne.n	80043f0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2101      	movs	r1, #1
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff ff67 	bl	80042a8 <SPI_WaitFlagStateUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e013      	b.n	8004418 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff ff54 	bl	80042a8 <SPI_WaitFlagStateUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e000      	b.n	8004418 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff36 	bl	80042a8 <SPI_WaitFlagStateUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e000      	b.n	8004454 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01d      	b.n	80044aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f004 fc8c 	bl	8008da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 fb6e 	bl	8004b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d007      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e01d      	b.n	8004546 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f815 	bl	800454e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 fb20 	bl	8004b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d841      	bhi.n	80045f4 <HAL_TIM_OC_Start_IT+0x94>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_TIM_OC_Start_IT+0x18>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080045f5 	.word	0x080045f5
 8004580:	080045f5 	.word	0x080045f5
 8004584:	080045f5 	.word	0x080045f5
 8004588:	080045bf 	.word	0x080045bf
 800458c:	080045f5 	.word	0x080045f5
 8004590:	080045f5 	.word	0x080045f5
 8004594:	080045f5 	.word	0x080045f5
 8004598:	080045d1 	.word	0x080045d1
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	080045f5 	.word	0x080045f5
 80045a8:	080045e3 	.word	0x080045e3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0202 	orr.w	r2, r2, #2
 80045ba:	60da      	str	r2, [r3, #12]
      break;
 80045bc:	e01b      	b.n	80045f6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0204 	orr.w	r2, r2, #4
 80045cc:	60da      	str	r2, [r3, #12]
      break;
 80045ce:	e012      	b.n	80045f6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	60da      	str	r2, [r3, #12]
      break;
 80045e0:	e009      	b.n	80045f6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0210 	orr.w	r2, r2, #16
 80045f0:	60da      	str	r2, [r3, #12]
      break;
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80045f4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd3c 	bl	800507c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <HAL_TIM_OC_Start_IT+0xec>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d107      	bne.n	800461e <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d007      	beq.n	8004640 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00

08004650 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e02d      	b.n	80046c0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f825 	bl	80046c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fa73 	bl	8004b7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0208 	bic.w	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d122      	bne.n	8004736 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d11b      	bne.n	8004736 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0202 	mvn.w	r2, #2
 8004706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa12 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
 8004722:	e005      	b.n	8004730 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa05 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa14 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d122      	bne.n	800478a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d11b      	bne.n	800478a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f06f 0204 	mvn.w	r2, #4
 800475a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9e8 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
 8004776:	e005      	b.n	8004784 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f9db 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9ea 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b08      	cmp	r3, #8
 8004796:	d122      	bne.n	80047de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d11b      	bne.n	80047de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f06f 0208 	mvn.w	r2, #8
 80047ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f9be 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
 80047ca:	e005      	b.n	80047d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f9b1 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f9c0 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d122      	bne.n	8004832 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d11b      	bne.n	8004832 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0210 	mvn.w	r2, #16
 8004802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2208      	movs	r2, #8
 8004808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f994 	bl	8004b46 <HAL_TIM_IC_CaptureCallback>
 800481e:	e005      	b.n	800482c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f987 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f996 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0201 	mvn.w	r2, #1
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f003 f889 	bl	8007970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b80      	cmp	r3, #128	; 0x80
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fcbb 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d10e      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f95a 	bl	8004b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d10e      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0220 	mvn.w	r2, #32
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fc86 	bl	80051ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004902:	2302      	movs	r3, #2
 8004904:	e04e      	b.n	80049a4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d839      	bhi.n	8004990 <HAL_TIM_OC_ConfigChannel+0xa4>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_TIM_OC_ConfigChannel+0x38>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004991 	.word	0x08004991
 800492c:	08004991 	.word	0x08004991
 8004930:	08004991 	.word	0x08004991
 8004934:	08004967 	.word	0x08004967
 8004938:	08004991 	.word	0x08004991
 800493c:	08004991 	.word	0x08004991
 8004940:	08004991 	.word	0x08004991
 8004944:	08004975 	.word	0x08004975
 8004948:	08004991 	.word	0x08004991
 800494c:	08004991 	.word	0x08004991
 8004950:	08004991 	.word	0x08004991
 8004954:	08004983 	.word	0x08004983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f96e 	bl	8004c40 <TIM_OC1_SetConfig>
      break;
 8004964:	e015      	b.n	8004992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f9cd 	bl	8004d0c <TIM_OC2_SetConfig>
      break;
 8004972:	e00e      	b.n	8004992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fa30 	bl	8004de0 <TIM_OC3_SetConfig>
      break;
 8004980:	e007      	b.n	8004992 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fa93 	bl	8004eb4 <TIM_OC4_SetConfig>
      break;
 800498e:	e000      	b.n	8004992 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004990:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIM_ConfigClockSource+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e0b3      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x180>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fc:	d03e      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0xd0>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	f200 8087 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0a:	f000 8085 	beq.w	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d87f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a14:	2b70      	cmp	r3, #112	; 0x70
 8004a16:	d01a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0xa2>
 8004a18:	2b70      	cmp	r3, #112	; 0x70
 8004a1a:	d87b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a1c:	2b60      	cmp	r3, #96	; 0x60
 8004a1e:	d050      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x116>
 8004a20:	2b60      	cmp	r3, #96	; 0x60
 8004a22:	d877      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a24:	2b50      	cmp	r3, #80	; 0x50
 8004a26:	d03c      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xf6>
 8004a28:	2b50      	cmp	r3, #80	; 0x50
 8004a2a:	d873      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d058      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x136>
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d86f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d064      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x156>
 8004a38:	2b30      	cmp	r3, #48	; 0x30
 8004a3a:	d86b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d060      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x156>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d867      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x156>
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d05a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a4c:	e062      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f000 faee 	bl	800503e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e04e      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f000 fad7 	bl	800503e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e03b      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fa4e 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2150      	movs	r1, #80	; 0x50
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 faa5 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e02b      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fa6c 	bl	8004fac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2160      	movs	r1, #96	; 0x60
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa95 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e01b      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fa2e 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa85 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004b00:	e00b      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fa7c 	bl	800500a <TIM_ITRx_SetConfig>
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <TIM_Base_SetConfig+0xb8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x30>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x30>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <TIM_Base_SetConfig+0xbc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x30>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <TIM_Base_SetConfig+0xc0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_Base_SetConfig+0xb8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0x62>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <TIM_Base_SetConfig+0xbc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0x62>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_Base_SetConfig+0xc0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <TIM_Base_SetConfig+0xb8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d103      	bne.n	8004c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	615a      	str	r2, [r3, #20]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0308 	bic.w	r3, r3, #8
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00

08004d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0210 	bic.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0320 	bic.w	r3, r3, #32
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <TIM_OC2_SetConfig+0xd0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d10d      	bne.n	8004d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC2_SetConfig+0xd0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d113      	bne.n	8004db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40012c00 	.word	0x40012c00

08004de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <TIM_OC3_SetConfig+0xd0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10d      	bne.n	8004e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <TIM_OC3_SetConfig+0xd0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d113      	bne.n	8004e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40012c00 	.word	0x40012c00

08004eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0f      	ldr	r2, [pc, #60]	; (8004f4c <TIM_OC4_SetConfig+0x98>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d109      	bne.n	8004f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	019b      	lsls	r3, r3, #6
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00

08004f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 030a 	bic.w	r3, r3, #10
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 0210 	bic.w	r2, r3, #16
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	f043 0307 	orr.w	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005058:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	431a      	orrs	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4313      	orrs	r3, r2
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	609a      	str	r2, [r3, #8]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2201      	movs	r2, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e032      	b.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005114:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4313      	orrs	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005164:	2302      	movs	r3, #2
 8005166:	e03d      	b.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e047      	b.n	80052b4 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f003 fe27 	bl	8008e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2224      	movs	r2, #36	; 0x24
 8005242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fbc8 	bl	80059ec <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800527a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0208 	orr.w	r2, r2, #8
 800528a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	f040 8083 	bne.w	80053e4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_Transmit+0x2e>
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e07b      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_UART_Transmit+0x40>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e074      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2221      	movs	r2, #33	; 0x21
 800530e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005312:	f7fc f873 	bl	80013fc <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	88fa      	ldrh	r2, [r7, #6]
 8005322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005324:	e042      	b.n	80053ac <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d122      	bne.n	8005384 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fad3 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e046      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3302      	adds	r3, #2
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	e017      	b.n	80053ac <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	3301      	adds	r3, #1
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	e013      	b.n	80053ac <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fab0 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e023      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	60ba      	str	r2, [r7, #8]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1b7      	bne.n	8005326 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	2140      	movs	r1, #64	; 0x40
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa97 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e00a      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b088      	sub	sp, #32
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	f040 8090 	bne.w	8005530 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Receive+0x2e>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e088      	b.n	8005532 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_UART_Receive+0x40>
 800542a:	2302      	movs	r3, #2
 800542c:	e081      	b.n	8005532 <HAL_UART_Receive+0x144>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2222      	movs	r2, #34	; 0x22
 8005440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005444:	f7fb ffda 	bl	80013fc <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005456:	e05c      	b.n	8005512 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d12b      	bne.n	80054c8 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	2120      	movs	r1, #32
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa3a 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e053      	b.n	8005532 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3302      	adds	r3, #2
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	e030      	b.n	8005512 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	e024      	b.n	8005512 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2120      	movs	r1, #32
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa0e 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e027      	b.n	8005532 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d108      	bne.n	80054fc <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	60ba      	str	r2, [r7, #8]
 80054f6:	b2ca      	uxtb	r2, r1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e00a      	b.n	8005512 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d19d      	bne.n	8005458 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	d153      	bne.n	80055fe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_UART_Transmit_DMA+0x26>
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e04c      	b.n	8005600 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UART_Transmit_DMA+0x38>
 8005570:	2302      	movs	r3, #2
 8005572:	e045      	b.n	8005600 <HAL_UART_Transmit_DMA+0xc4>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2221      	movs	r2, #33	; 0x21
 8005598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_UART_Transmit_DMA+0xcc>)
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_UART_Transmit_DMA+0xd0>)
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	4a17      	ldr	r2, [pc, #92]	; (8005610 <HAL_UART_Transmit_DMA+0xd4>)
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3304      	adds	r3, #4
 80055d0:	461a      	mov	r2, r3
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	f7fc f8a8 	bl	8001728 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055f8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	0800576f 	.word	0x0800576f
 800560c:	080057c1 	.word	0x080057c1
 8005610:	08005861 	.word	0x08005861

08005614 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d166      	bne.n	80056fc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Receive_DMA+0x26>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e05f      	b.n	80056fe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UART_Receive_DMA+0x38>
 8005648:	2302      	movs	r3, #2
 800564a:	e058      	b.n	80056fe <HAL_UART_Receive_DMA+0xea>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2222      	movs	r2, #34	; 0x22
 800566a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	4a25      	ldr	r2, [pc, #148]	; (8005708 <HAL_UART_Receive_DMA+0xf4>)
 8005674:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	4a24      	ldr	r2, [pc, #144]	; (800570c <HAL_UART_Receive_DMA+0xf8>)
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	4a23      	ldr	r2, [pc, #140]	; (8005710 <HAL_UART_Receive_DMA+0xfc>)
 8005684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	2200      	movs	r2, #0
 800568c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	f7fc f83f 	bl	8001728 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	080057dd 	.word	0x080057dd
 800570c:	08005845 	.word	0x08005845
 8005710:	08005861 	.word	0x08005861

08005714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d113      	bne.n	80057b2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ae:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057b0:	e002      	b.n	80057b8 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ffae 	bl	8005714 <HAL_UART_TxCpltCallback>
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ffa9 	bl	8005726 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11e      	bne.n	8005836 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ff7e 	bl	8005738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff ff79 	bl	800574a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b21      	cmp	r3, #33	; 0x21
 8005892:	d108      	bne.n	80058a6 <UART_DMAError+0x46>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058a0:	68b8      	ldr	r0, [r7, #8]
 80058a2:	f000 f871 	bl	8005988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b22      	cmp	r3, #34	; 0x22
 80058c6:	d108      	bne.n	80058da <UART_DMAError+0x7a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2200      	movs	r2, #0
 80058d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f000 f86c 	bl	80059b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	f043 0210 	orr.w	r2, r3, #16
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7ff ff38 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	e02c      	b.n	8005960 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d028      	beq.n	8005960 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <UART_WaitOnFlagUntilTimeout+0x30>
 8005914:	f7fb fd72 	bl	80013fc <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	d21d      	bcs.n	8005960 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005932:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e00f      	b.n	8005980 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d0c3      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800599e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a26:	f023 030c 	bic.w	r3, r3, #12
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <UART_SetConfig+0x1ac>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d14e      	bne.n	8005af2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a54:	f7fd ffb6 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8005a58:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009a      	lsls	r2, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	4a4a      	ldr	r2, [pc, #296]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	0119      	lsls	r1, r3, #4
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005a92:	fba3 0302 	umull	r0, r3, r3, r2
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2064      	movs	r0, #100	; 0x64
 8005a9a:	fb00 f303 	mul.w	r3, r0, r3
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	3332      	adds	r3, #50	; 0x32
 8005aa4:	4a3d      	ldr	r2, [pc, #244]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab0:	4419      	add	r1, r3
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac8:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005aca:	fba3 0302 	umull	r0, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2064      	movs	r0, #100	; 0x64
 8005ad2:	fb00 f303 	mul.w	r3, r0, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	3332      	adds	r3, #50	; 0x32
 8005adc:	4a2f      	ldr	r2, [pc, #188]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 020f 	and.w	r2, r3, #15
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	440a      	add	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005af0:	e04d      	b.n	8005b8e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005af2:	f7fd ff53 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005af6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009a      	lsls	r2, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	0119      	lsls	r1, r3, #4
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009a      	lsls	r2, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005b30:	fba3 0302 	umull	r0, r3, r3, r2
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	2064      	movs	r0, #100	; 0x64
 8005b38:	fb00 f303 	mul.w	r3, r0, r3
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	3332      	adds	r3, #50	; 0x32
 8005b42:	4a16      	ldr	r2, [pc, #88]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4e:	4419      	add	r1, r3
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009a      	lsls	r2, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005b68:	fba3 0302 	umull	r0, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2064      	movs	r0, #100	; 0x64
 8005b70:	fb00 f303 	mul.w	r3, r0, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <UART_SetConfig+0x1b0>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	f003 020f 	and.w	r2, r3, #15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40013800 	.word	0x40013800
 8005b9c:	51eb851f 	.word	0x51eb851f

08005ba0 <_Z5Errorv>:
//extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0

}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <_ZL14I2Cx_WriteDatathh>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af04      	add	r7, sp, #16
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	80fb      	strh	r3, [r7, #6]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	717b      	strb	r3, [r7, #5]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8005bc2:	797b      	ldrb	r3, [r7, #5]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	88f9      	ldrh	r1, [r7, #6]
 8005bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4806      	ldr	r0, [pc, #24]	; (8005bf4 <_ZL14I2Cx_WriteDatathh+0x48>)
 8005bda:	f7fc fb07 	bl	80021ec <HAL_I2C_Mem_Write>
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <_ZL14I2Cx_WriteDatathh+0x40>
 8005be8:	f7ff ffda 	bl	8005ba0 <_Z5Errorv>
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000089c 	.word	0x2000089c

08005bf8 <_ZL13I2Cx_ReadDatath>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af04      	add	r7, sp, #16
 8005bfe:	4603      	mov	r3, r0
 8005c00:	460a      	mov	r2, r1
 8005c02:	80fb      	strh	r3, [r7, #6]
 8005c04:	4613      	mov	r3, r2
 8005c06:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8005c10:	797b      	ldrb	r3, [r7, #5]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	88f9      	ldrh	r1, [r7, #6]
 8005c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	f107 030e 	add.w	r3, r7, #14
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	2301      	movs	r3, #1
 8005c28:	4807      	ldr	r0, [pc, #28]	; (8005c48 <_ZL13I2Cx_ReadDatath+0x50>)
 8005c2a:	f7fc fbd9 	bl	80023e0 <HAL_I2C_Mem_Read>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <_ZL13I2Cx_ReadDatath+0x44>
 8005c38:	f7ff ffb2 	bl	8005ba0 <_Z5Errorv>
  return value;
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	2000089c 	.word	0x2000089c

08005c4c <_ZL15I2Cx_ReadData16thPt>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af04      	add	r7, sp, #16
 8005c52:	4603      	mov	r3, r0
 8005c54:	603a      	str	r2, [r7, #0]
 8005c56:	80fb      	strh	r3, [r7, #6]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8005c60:	797b      	ldrb	r3, [r7, #5]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	88f9      	ldrh	r1, [r7, #6]
 8005c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c6a:	9302      	str	r3, [sp, #8]
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2301      	movs	r3, #1
 8005c76:	4807      	ldr	r0, [pc, #28]	; (8005c94 <_ZL15I2Cx_ReadData16thPt+0x48>)
 8005c78:	f7fc fbb2 	bl	80023e0 <HAL_I2C_Mem_Read>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <_ZL15I2Cx_ReadData16thPt+0x3e>
 8005c86:	f7ff ff8b 	bl	8005ba0 <_Z5Errorv>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	2000089c 	.word	0x2000089c

08005c98 <_ZL15I2Cx_ReadData24thPm>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af04      	add	r7, sp, #16
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	603a      	str	r2, [r7, #0]
 8005ca2:	80fb      	strh	r3, [r7, #6]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8005cac:	797b      	ldrb	r3, [r7, #5]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	88f9      	ldrh	r1, [r7, #6]
 8005cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cb6:	9302      	str	r3, [sp, #8]
 8005cb8:	2303      	movs	r3, #3
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4807      	ldr	r0, [pc, #28]	; (8005ce0 <_ZL15I2Cx_ReadData24thPm+0x48>)
 8005cc4:	f7fc fb8c 	bl	80023e0 <HAL_I2C_Mem_Read>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <_ZL15I2Cx_ReadData24thPm+0x3e>
 8005cd2:	f7ff ff65 	bl	8005ba0 <_Z5Errorv>
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000089c 	.word	0x2000089c

08005ce4 <_Z15BME280_WriteReghh>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	460a      	mov	r2, r1
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8005cf4:	79ba      	ldrb	r2, [r7, #6]
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	20ec      	movs	r0, #236	; 0xec
 8005cfc:	f7ff ff56 	bl	8005bac <_ZL14I2Cx_WriteDatathh>
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <_Z14BME280_ReadRegh>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	4619      	mov	r1, r3
 8005d16:	20ec      	movs	r0, #236	; 0xec
 8005d18:	f7ff ff6e 	bl	8005bf8 <_ZL13I2Cx_ReadDatath>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <_Z18BME280_ReadReg_U16hPt>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4603      	mov	r3, r0
 8005d32:	6039      	str	r1, [r7, #0]
 8005d34:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	20ec      	movs	r0, #236	; 0xec
 8005d3e:	f7ff ff85 	bl	8005c4c <_ZL15I2Cx_ReadData16thPt>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <_Z18BME280_ReadReg_S16hPs>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	4603      	mov	r3, r0
 8005d52:	6039      	str	r1, [r7, #0]
 8005d54:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	20ec      	movs	r0, #236	; 0xec
 8005d5e:	f7ff ff75 	bl	8005c4c <_ZL15I2Cx_ReadData16thPt>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <_Z21BME280_ReadReg_BE_U24hPm>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	4603      	mov	r3, r0
 8005d72:	6039      	str	r1, [r7, #0]
 8005d74:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	20ec      	movs	r0, #236	; 0xec
 8005d7e:	f7ff ff8b 	bl	8005c98 <_ZL15I2Cx_ReadData24thPm>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d92:	431a      	orrs	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	601a      	str	r2, [r3, #0]
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_Z17BME280_ReadStatusv>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8005db6:	20f3      	movs	r0, #243	; 0xf3
 8005db8:	f7ff ffa6 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f003 0309 	and.w	r3, r3, #9
 8005dc2:	71fb      	strb	r3, [r7, #7]
  return res;
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <_Z23BME280_ReadCoefficientsv>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8005dd0:	b598      	push	{r3, r4, r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8005dd4:	4936      	ldr	r1, [pc, #216]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005dd6:	2088      	movs	r0, #136	; 0x88
 8005dd8:	f7ff ffa7 	bl	8005d2a <_Z18BME280_ReadReg_U16hPt>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8005ddc:	4935      	ldr	r1, [pc, #212]	; (8005eb4 <_Z23BME280_ReadCoefficientsv+0xe4>)
 8005dde:	208a      	movs	r0, #138	; 0x8a
 8005de0:	f7ff ffb3 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8005de4:	4934      	ldr	r1, [pc, #208]	; (8005eb8 <_Z23BME280_ReadCoefficientsv+0xe8>)
 8005de6:	208c      	movs	r0, #140	; 0x8c
 8005de8:	f7ff ffaf 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8005dec:	4933      	ldr	r1, [pc, #204]	; (8005ebc <_Z23BME280_ReadCoefficientsv+0xec>)
 8005dee:	208e      	movs	r0, #142	; 0x8e
 8005df0:	f7ff ff9b 	bl	8005d2a <_Z18BME280_ReadReg_U16hPt>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8005df4:	4932      	ldr	r1, [pc, #200]	; (8005ec0 <_Z23BME280_ReadCoefficientsv+0xf0>)
 8005df6:	2090      	movs	r0, #144	; 0x90
 8005df8:	f7ff ffa7 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005dfc:	4931      	ldr	r1, [pc, #196]	; (8005ec4 <_Z23BME280_ReadCoefficientsv+0xf4>)
 8005dfe:	2092      	movs	r0, #146	; 0x92
 8005e00:	f7ff ffa3 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8005e04:	4930      	ldr	r1, [pc, #192]	; (8005ec8 <_Z23BME280_ReadCoefficientsv+0xf8>)
 8005e06:	2094      	movs	r0, #148	; 0x94
 8005e08:	f7ff ff9f 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005e0c:	492f      	ldr	r1, [pc, #188]	; (8005ecc <_Z23BME280_ReadCoefficientsv+0xfc>)
 8005e0e:	2096      	movs	r0, #150	; 0x96
 8005e10:	f7ff ff9b 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8005e14:	492e      	ldr	r1, [pc, #184]	; (8005ed0 <_Z23BME280_ReadCoefficientsv+0x100>)
 8005e16:	2098      	movs	r0, #152	; 0x98
 8005e18:	f7ff ff97 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005e1c:	492d      	ldr	r1, [pc, #180]	; (8005ed4 <_Z23BME280_ReadCoefficientsv+0x104>)
 8005e1e:	209a      	movs	r0, #154	; 0x9a
 8005e20:	f7ff ff93 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8005e24:	492c      	ldr	r1, [pc, #176]	; (8005ed8 <_Z23BME280_ReadCoefficientsv+0x108>)
 8005e26:	209c      	movs	r0, #156	; 0x9c
 8005e28:	f7ff ff8f 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005e2c:	492b      	ldr	r1, [pc, #172]	; (8005edc <_Z23BME280_ReadCoefficientsv+0x10c>)
 8005e2e:	209e      	movs	r0, #158	; 0x9e
 8005e30:	f7ff ff8b 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8005e34:	20a1      	movs	r0, #161	; 0xa1
 8005e36:	f7ff ff67 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005e40:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8005e42:	4927      	ldr	r1, [pc, #156]	; (8005ee0 <_Z23BME280_ReadCoefficientsv+0x110>)
 8005e44:	20e1      	movs	r0, #225	; 0xe1
 8005e46:	f7ff ff80 	bl	8005d4a <_Z18BME280_ReadReg_S16hPs>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8005e4a:	20e3      	movs	r0, #227	; 0xe3
 8005e4c:	f7ff ff5c 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005e56:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8005e58:	20e4      	movs	r0, #228	; 0xe4
 8005e5a:	f7ff ff55 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	b21c      	sxth	r4, r3
 8005e64:	20e5      	movs	r0, #229	; 0xe5
 8005e66:	f7ff ff4f 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	b21b      	sxth	r3, r3
 8005e74:	4323      	orrs	r3, r4
 8005e76:	b21a      	sxth	r2, r3
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005e7a:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8005e7c:	20e6      	movs	r0, #230	; 0xe6
 8005e7e:	f7ff ff43 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e82:	4603      	mov	r3, r0
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	b21c      	sxth	r4, r3
 8005e88:	20e5      	movs	r0, #229	; 0xe5
 8005e8a:	f7ff ff3d 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	111b      	asrs	r3, r3, #4
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4323      	orrs	r3, r4
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005e9a:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8005e9c:	20e7      	movs	r0, #231	; 0xe7
 8005e9e:	f7ff ff33 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	b25a      	sxtb	r2, r3
 8005ea6:	4b02      	ldr	r3, [pc, #8]	; (8005eb0 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005ea8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005eac:	bf00      	nop
 8005eae:	bd98      	pop	{r3, r4, r7, pc}
 8005eb0:	200002e4 	.word	0x200002e4
 8005eb4:	200002e6 	.word	0x200002e6
 8005eb8:	200002e8 	.word	0x200002e8
 8005ebc:	200002ea 	.word	0x200002ea
 8005ec0:	200002ec 	.word	0x200002ec
 8005ec4:	200002ee 	.word	0x200002ee
 8005ec8:	200002f0 	.word	0x200002f0
 8005ecc:	200002f2 	.word	0x200002f2
 8005ed0:	200002f4 	.word	0x200002f4
 8005ed4:	200002f6 	.word	0x200002f6
 8005ed8:	200002f8 	.word	0x200002f8
 8005edc:	200002fa 	.word	0x200002fa
 8005ee0:	200002fe 	.word	0x200002fe

08005ee4 <_Z17BME280_SetStandbyh>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8005eee:	20f5      	movs	r0, #245	; 0xf5
 8005ef0:	f7ff ff0a 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	f023 031f 	bic.w	r3, r3, #31
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	20f5      	movs	r0, #245	; 0xf5
 8005f10:	f7ff fee8 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <_Z16BME280_SetFilterh>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8005f26:	20f5      	movs	r0, #245	; 0xf5
 8005f28:	f7ff feee 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f023 031c 	bic.w	r3, r3, #28
 8005f32:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	f003 031c 	and.w	r3, r3, #28
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	4619      	mov	r1, r3
 8005f46:	20f5      	movs	r0, #245	; 0xf5
 8005f48:	f7ff fecc 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <_Z28BME280_SetOversamplingTemperh>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8005f5e:	20f4      	movs	r0, #244	; 0xf4
 8005f60:	f7ff fed2 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	f023 031f 	bic.w	r3, r3, #31
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	20f4      	movs	r0, #244	; 0xf4
 8005f80:	f7ff feb0 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_Z30BME280_SetOversamplingPressureh>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8005f96:	20f4      	movs	r0, #244	; 0xf4
 8005f98:	f7ff feb6 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f023 031c 	bic.w	r3, r3, #28
 8005fa2:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	f003 031c 	and.w	r3, r3, #28
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	20f4      	movs	r0, #244	; 0xf4
 8005fb8:	f7ff fe94 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <_Z25BME280_SetOversamplingHumh>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8005fce:	20f2      	movs	r0, #242	; 0xf2
 8005fd0:	f7ff fe9a 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	4619      	mov	r1, r3
 8005fee:	20f2      	movs	r0, #242	; 0xf2
 8005ff0:	f7ff fe78 	bl	8005ce4 <_Z15BME280_WriteReghh>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8005ff4:	20f4      	movs	r0, #244	; 0xf4
 8005ff6:	f7ff fe87 	bl	8005d08 <_Z14BME280_ReadRegh>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	4619      	mov	r1, r3
 8006002:	20f4      	movs	r0, #244	; 0xf4
 8006004:	f7ff fe6e 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <_Z14BME280_SetModeh>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 800601a:	20f4      	movs	r0, #244	; 0xf4
 800601c:	f7ff fe74 	bl	8005d08 <_Z14BME280_ReadRegh>
 8006020:	4603      	mov	r3, r0
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	b2da      	uxtb	r2, r3
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	4313      	orrs	r3, r2
 8006034:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	4619      	mov	r1, r3
 800603a:	20f4      	movs	r0, #244	; 0xf4
 800603c:	f7ff fe52 	bl	8005ce4 <_Z15BME280_WriteReghh>
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8006054:	463b      	mov	r3, r7
 8006056:	4619      	mov	r1, r3
 8006058:	20fa      	movs	r0, #250	; 0xfa
 800605a:	f7ff fe86 	bl	8005d6a <_Z21BME280_ReadReg_BE_U24hPm>
	temper_raw >>= 4;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <BME280_ReadTemperature+0x98>)
 800606a:	8812      	ldrh	r2, [r2, #0]
 800606c:	0052      	lsls	r2, r2, #1
 800606e:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <BME280_ReadTemperature+0x98>)
 8006072:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8006076:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 800607a:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800607c:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <BME280_ReadTemperature+0x98>)
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	0912      	lsrs	r2, r2, #4
 800608c:	4914      	ldr	r1, [pc, #80]	; (80060e0 <BME280_ReadTemperature+0x98>)
 800608e:	8809      	ldrh	r1, [r1, #0]
 8006090:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8006092:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8006096:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8006098:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <BME280_ReadTemperature+0x98>)
 800609a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800609e:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 80060a2:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80060a4:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <BME280_ReadTemperature+0x9c>)
 80060ae:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <BME280_ReadTemperature+0x9c>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	3380      	adds	r3, #128	; 0x80
 80060bc:	121b      	asrs	r3, r3, #8
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa fdec 	bl	8000c9c <__aeabi_i2f>
 80060c4:	4603      	mov	r3, r0
 80060c6:	60fb      	str	r3, [r7, #12]
	temper_float /= 100.0f;
 80060c8:	4907      	ldr	r1, [pc, #28]	; (80060e8 <BME280_ReadTemperature+0xa0>)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7fa feee 	bl	8000eac <__aeabi_fdiv>
 80060d0:	4603      	mov	r3, r0
 80060d2:	60fb      	str	r3, [r7, #12]
  return temper_float;
 80060d4:	68fb      	ldr	r3, [r7, #12]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	200002e4 	.word	0x200002e4
 80060e4:	20000308 	.word	0x20000308
 80060e8:	42c80000 	.word	0x42c80000

080060ec <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 80060ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f0:	b09e      	sub	sp, #120	; 0x78
 80060f2:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 80060fa:	f7ff ffa5 	bl	8006048 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 80060fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006102:	4619      	mov	r1, r3
 8006104:	20f7      	movs	r0, #247	; 0xf7
 8006106:	f7ff fe30 	bl	8005d6a <_Z21BME280_ReadReg_BE_U24hPm>
	press_raw >>= 4;
 800610a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	653b      	str	r3, [r7, #80]	; 0x50
	val1 = ((int64_t) temper_int) - 128000;
 8006110:	4b6b      	ldr	r3, [pc, #428]	; (80062c0 <BME280_ReadPressure+0x1d4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800611a:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800611e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8006122:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8006126:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800612a:	fb03 f102 	mul.w	r1, r3, r2
 800612e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006132:	fb03 f302 	mul.w	r3, r3, r2
 8006136:	18ca      	adds	r2, r1, r3
 8006138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613a:	fba3 4503 	umull	r4, r5, r3, r3
 800613e:	1953      	adds	r3, r2, r5
 8006140:	461d      	mov	r5, r3
 8006142:	4b60      	ldr	r3, [pc, #384]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 8006144:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006148:	b21a      	sxth	r2, r3
 800614a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800614e:	fb02 f005 	mul.w	r0, r2, r5
 8006152:	fb04 f103 	mul.w	r1, r4, r3
 8006156:	4401      	add	r1, r0
 8006158:	fba4 2302 	umull	r2, r3, r4, r2
 800615c:	4419      	add	r1, r3
 800615e:	460b      	mov	r3, r1
 8006160:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8006164:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8006168:	4b56      	ldr	r3, [pc, #344]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 800616a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800616e:	b21a      	sxth	r2, r3
 8006170:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006174:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006176:	fb03 f001 	mul.w	r0, r3, r1
 800617a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800617c:	fb02 f101 	mul.w	r1, r2, r1
 8006180:	4408      	add	r0, r1
 8006182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006184:	fba1 2302 	umull	r2, r3, r1, r2
 8006188:	18c1      	adds	r1, r0, r3
 800618a:	460b      	mov	r3, r1
 800618c:	f04f 0000 	mov.w	r0, #0
 8006190:	f04f 0100 	mov.w	r1, #0
 8006194:	0459      	lsls	r1, r3, #17
 8006196:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800619a:	0450      	lsls	r0, r2, #17
 800619c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80061a0:	eb12 0800 	adds.w	r8, r2, r0
 80061a4:	eb43 0901 	adc.w	r9, r3, r1
 80061a8:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 80061ac:	4b45      	ldr	r3, [pc, #276]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 80061ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80061b2:	b21a      	sxth	r2, r3
 80061b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80061b8:	f04f 0000 	mov.w	r0, #0
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	00d1      	lsls	r1, r2, #3
 80061c2:	2000      	movs	r0, #0
 80061c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80061c8:	1814      	adds	r4, r2, r0
 80061ca:	61bc      	str	r4, [r7, #24]
 80061cc:	414b      	adcs	r3, r1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80061d4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80061d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061dc:	fb03 f102 	mul.w	r1, r3, r2
 80061e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e4:	fb03 f302 	mul.w	r3, r3, r2
 80061e8:	18ca      	adds	r2, r1, r3
 80061ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ec:	fba3 4503 	umull	r4, r5, r3, r3
 80061f0:	1953      	adds	r3, r2, r5
 80061f2:	461d      	mov	r5, r3
 80061f4:	4b33      	ldr	r3, [pc, #204]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 80061f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80061fa:	b21a      	sxth	r2, r3
 80061fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006200:	fb02 f005 	mul.w	r0, r2, r5
 8006204:	fb04 f103 	mul.w	r1, r4, r3
 8006208:	4401      	add	r1, r0
 800620a:	fba4 2302 	umull	r2, r3, r4, r2
 800620e:	4419      	add	r1, r3
 8006210:	460b      	mov	r3, r1
 8006212:	f04f 0800 	mov.w	r8, #0
 8006216:	f04f 0900 	mov.w	r9, #0
 800621a:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800621e:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8006222:	ea4f 2923 	mov.w	r9, r3, asr #8
 8006226:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 8006228:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800622c:	b21a      	sxth	r2, r3
 800622e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006234:	fb03 f001 	mul.w	r0, r3, r1
 8006238:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800623a:	fb02 f101 	mul.w	r1, r2, r1
 800623e:	1844      	adds	r4, r0, r1
 8006240:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006242:	fba1 0102 	umull	r0, r1, r1, r2
 8006246:	1863      	adds	r3, r4, r1
 8006248:	4619      	mov	r1, r3
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	030b      	lsls	r3, r1, #12
 8006254:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8006258:	0302      	lsls	r2, r0, #12
 800625a:	eb18 0102 	adds.w	r1, r8, r2
 800625e:	6139      	str	r1, [r7, #16]
 8006260:	eb49 0303 	adc.w	r3, r9, r3
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800626a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 800626e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006272:	1c11      	adds	r1, r2, #0
 8006274:	64b9      	str	r1, [r7, #72]	; 0x48
 8006276:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <BME280_ReadPressure+0x1d8>)
 800627e:	88db      	ldrh	r3, [r3, #6]
 8006280:	b29a      	uxth	r2, r3
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800628a:	4629      	mov	r1, r5
 800628c:	fb02 f001 	mul.w	r0, r2, r1
 8006290:	4621      	mov	r1, r4
 8006292:	fb01 f103 	mul.w	r1, r1, r3
 8006296:	4401      	add	r1, r0
 8006298:	4620      	mov	r0, r4
 800629a:	fba0 2302 	umull	r2, r3, r0, r2
 800629e:	4419      	add	r1, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	1058      	asrs	r0, r3, #1
 80062ac:	17d9      	asrs	r1, r3, #31
 80062ae:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	if (val1 == 0) {
 80062b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d106      	bne.n	80062c8 <BME280_ReadPressure+0x1dc>
		return 0; // avoid exception caused by division by zero
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e123      	b.n	8006508 <BME280_ReadPressure+0x41c>
 80062c0:	20000308 	.word	0x20000308
 80062c4:	200002e4 	.word	0x200002e4
	}
	p = 1048576 - press_raw;
 80062c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ca:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - val2) * 3125) / val1;
 80062d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	07db      	lsls	r3, r3, #31
 80062e2:	643b      	str	r3, [r7, #64]	; 0x40
 80062e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80062e8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80062ec:	4621      	mov	r1, r4
 80062ee:	ebb1 0a02 	subs.w	sl, r1, r2
 80062f2:	4629      	mov	r1, r5
 80062f4:	eb61 0b03 	sbc.w	fp, r1, r3
 80062f8:	4652      	mov	r2, sl
 80062fa:	465b      	mov	r3, fp
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	415b      	adcs	r3, r3
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006308:	eb12 020a 	adds.w	r2, r2, sl
 800630c:	eb43 030b 	adc.w	r3, r3, fp
 8006310:	f04f 0000 	mov.w	r0, #0
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	0199      	lsls	r1, r3, #6
 800631a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800631e:	0190      	lsls	r0, r2, #6
 8006320:	1812      	adds	r2, r2, r0
 8006322:	eb41 0303 	adc.w	r3, r1, r3
 8006326:	f04f 0000 	mov.w	r0, #0
 800632a:	f04f 0100 	mov.w	r1, #0
 800632e:	0099      	lsls	r1, r3, #2
 8006330:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006334:	0090      	lsls	r0, r2, #2
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	eb12 020a 	adds.w	r2, r2, sl
 800633e:	eb43 030b 	adc.w	r3, r3, fp
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f04f 0100 	mov.w	r1, #0
 800634a:	0099      	lsls	r1, r3, #2
 800634c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006350:	0090      	lsls	r0, r2, #2
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	eb12 010a 	adds.w	r1, r2, sl
 800635a:	63b9      	str	r1, [r7, #56]	; 0x38
 800635c:	eb43 030b 	adc.w	r3, r3, fp
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006362:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006366:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800636a:	f7fa fe3b 	bl	8000fe4 <__aeabi_ldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8006376:	4b67      	ldr	r3, [pc, #412]	; (8006514 <BME280_ReadPressure+0x428>)
 8006378:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800637c:	b218      	sxth	r0, r3
 800637e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006382:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	0b62      	lsrs	r2, r4, #13
 8006390:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8006394:	136b      	asrs	r3, r5, #13
 8006396:	fb02 f501 	mul.w	r5, r2, r1
 800639a:	fb00 f403 	mul.w	r4, r0, r3
 800639e:	442c      	add	r4, r5
 80063a0:	fba0 0102 	umull	r0, r1, r0, r2
 80063a4:	1863      	adds	r3, r4, r1
 80063a6:	4619      	mov	r1, r3
 80063a8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	0b62      	lsrs	r2, r4, #13
 80063b6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80063ba:	136b      	asrs	r3, r5, #13
 80063bc:	fb02 f501 	mul.w	r5, r2, r1
 80063c0:	fb00 f403 	mul.w	r4, r0, r3
 80063c4:	442c      	add	r4, r5
 80063c6:	fba0 0102 	umull	r0, r1, r0, r2
 80063ca:	1863      	adds	r3, r4, r1
 80063cc:	4619      	mov	r1, r3
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	0e42      	lsrs	r2, r0, #25
 80063d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80063dc:	164b      	asrs	r3, r1, #25
 80063de:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 80063e2:	4b4c      	ldr	r3, [pc, #304]	; (8006514 <BME280_ReadPressure+0x428>)
 80063e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80063e8:	b21a      	sxth	r2, r3
 80063ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80063ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063f0:	fb03 f001 	mul.w	r0, r3, r1
 80063f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80063f6:	fb02 f101 	mul.w	r1, r2, r1
 80063fa:	1844      	adds	r4, r0, r1
 80063fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063fe:	fba1 0102 	umull	r0, r1, r1, r2
 8006402:	1863      	adds	r3, r4, r1
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	0cc2      	lsrs	r2, r0, #19
 8006410:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8006414:	14cb      	asrs	r3, r1, #19
 8006416:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 800641a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800641e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006422:	1884      	adds	r4, r0, r2
 8006424:	633c      	str	r4, [r7, #48]	; 0x30
 8006426:	eb41 0303 	adc.w	r3, r1, r3
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
 800642c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006430:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006434:	4621      	mov	r1, r4
 8006436:	1889      	adds	r1, r1, r2
 8006438:	62b9      	str	r1, [r7, #40]	; 0x28
 800643a:	4629      	mov	r1, r5
 800643c:	eb43 0101 	adc.w	r1, r3, r1
 8006440:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800644e:	4623      	mov	r3, r4
 8006450:	0a18      	lsrs	r0, r3, #8
 8006452:	462b      	mov	r3, r5
 8006454:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8006458:	462b      	mov	r3, r5
 800645a:	1219      	asrs	r1, r3, #8
 800645c:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <BME280_ReadPressure+0x428>)
 800645e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006462:	b21c      	sxth	r4, r3
 8006464:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	012b      	lsls	r3, r5, #4
 8006472:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8006476:	0122      	lsls	r2, r4, #4
 8006478:	1884      	adds	r4, r0, r2
 800647a:	603c      	str	r4, [r7, #0]
 800647c:	eb41 0303 	adc.w	r3, r1, r3
 8006480:	607b      	str	r3, [r7, #4]
 8006482:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006486:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 800648a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	0a02      	lsrs	r2, r0, #8
 8006498:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800649c:	120b      	asrs	r3, r1, #8
 800649e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a2:	fb03 f402 	mul.w	r4, r3, r2
 80064a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064aa:	f04f 00ff 	mov.w	r0, #255	; 0xff
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	ea02 0500 	and.w	r5, r2, r0
 80064b6:	623d      	str	r5, [r7, #32]
 80064b8:	400b      	ands	r3, r1
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
 80064bc:	4b16      	ldr	r3, [pc, #88]	; (8006518 <BME280_ReadPressure+0x42c>)
 80064be:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064c2:	464a      	mov	r2, r9
 80064c4:	fb03 f202 	mul.w	r2, r3, r2
 80064c8:	2300      	movs	r3, #0
 80064ca:	4641      	mov	r1, r8
 80064cc:	fb03 f301 	mul.w	r3, r3, r1
 80064d0:	4413      	add	r3, r2
 80064d2:	4a11      	ldr	r2, [pc, #68]	; (8006518 <BME280_ReadPressure+0x42c>)
 80064d4:	4641      	mov	r1, r8
 80064d6:	fba1 0102 	umull	r0, r1, r1, r2
 80064da:	440b      	add	r3, r1
 80064dc:	4619      	mov	r1, r3
 80064de:	4a0f      	ldr	r2, [pc, #60]	; (800651c <BME280_ReadPressure+0x430>)
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	f7fa fd7e 	bl	8000fe4 <__aeabi_ldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	4423      	add	r3, r4
 80064f0:	657b      	str	r3, [r7, #84]	; 0x54
	press_float = pres_int / 100.0f;
 80064f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80064f4:	f7fa fbce 	bl	8000c94 <__aeabi_ui2f>
 80064f8:	4603      	mov	r3, r0
 80064fa:	4909      	ldr	r1, [pc, #36]	; (8006520 <BME280_ReadPressure+0x434>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa fcd5 	bl	8000eac <__aeabi_fdiv>
 8006502:	4603      	mov	r3, r0
 8006504:	677b      	str	r3, [r7, #116]	; 0x74
  return press_float;
 8006506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8006508:	4618      	mov	r0, r3
 800650a:	3778      	adds	r7, #120	; 0x78
 800650c:	46bd      	mov	sp, r7
 800650e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006512:	bf00      	nop
 8006514:	200002e4 	.word	0x200002e4
 8006518:	0005f5e1 	.word	0x0005f5e1
 800651c:	000186a0 	.word	0x000186a0
 8006520:	42c80000 	.word	0x42c80000

08006524 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  uint8_t value=0;
 800652a:	2300      	movs	r3, #0
 800652c:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 800652e:	2300      	movs	r3, #0
 8006530:	603b      	str	r3, [r7, #0]

	value = BME280_ReadReg(BME280_REG_ID);
 8006532:	20d0      	movs	r0, #208	; 0xd0
 8006534:	f7ff fbe8 	bl	8005d08 <_Z14BME280_ReadRegh>
 8006538:	4603      	mov	r3, r0
 800653a:	71fb      	strb	r3, [r7, #7]
	if(value !=BME280_ID)
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b60      	cmp	r3, #96	; 0x60
 8006540:	d002      	beq.n	8006548 <BME280_Init+0x24>
	{
		Error();
 8006542:	f7ff fb2d 	bl	8005ba0 <_Z5Errorv>
		return;
 8006546:	e032      	b.n	80065ae <BME280_Init+0x8a>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8006548:	21b6      	movs	r1, #182	; 0xb6
 800654a:	20e0      	movs	r0, #224	; 0xe0
 800654c:	f7ff fbca 	bl	8005ce4 <_Z15BME280_WriteReghh>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8006550:	f7ff fc2e 	bl	8005db0 <_Z17BME280_ReadStatusv>
 8006554:	4603      	mov	r3, r0
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d000      	beq.n	800656a <BME280_Init+0x46>
 8006568:	e7f2      	b.n	8006550 <BME280_Init+0x2c>
	BME280_ReadCoefficients();
 800656a:	f7ff fc31 	bl	8005dd0 <_Z23BME280_ReadCoefficientsv>
	BME280_SetStandby(BME280_STBY_1000);
 800656e:	20a0      	movs	r0, #160	; 0xa0
 8006570:	f7ff fcb8 	bl	8005ee4 <_Z17BME280_SetStandbyh>
	BME280_SetFilter(BME280_FILTER_16);
 8006574:	2010      	movs	r0, #16
 8006576:	f7ff fcd1 	bl	8005f1c <_Z16BME280_SetFilterh>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x16);
 800657a:	20a0      	movs	r0, #160	; 0xa0
 800657c:	f7ff fcea 	bl	8005f54 <_Z28BME280_SetOversamplingTemperh>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x16);
 8006580:	2014      	movs	r0, #20
 8006582:	f7ff fd03 	bl	8005f8c <_Z30BME280_SetOversamplingPressureh>
	BME280_SetOversamplingHum(BME280_OSRS_H_x16);
 8006586:	2005      	movs	r0, #5
 8006588:	f7ff fd1c 	bl	8005fc4 <_Z25BME280_SetOversamplingHumh>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800658c:	20f4      	movs	r0, #244	; 0xf4
 800658e:	f7ff fbbb 	bl	8005d08 <_Z14BME280_ReadRegh>
 8006592:	4603      	mov	r3, r0
 8006594:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8006596:	20f2      	movs	r0, #242	; 0xf2
 8006598:	f7ff fbb6 	bl	8005d08 <_Z14BME280_ReadRegh>
 800659c:	4603      	mov	r3, r0
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	461a      	mov	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	603b      	str	r3, [r7, #0]
	BME280_SetMode(BME280_MODE_NORMAL);
 80065a8:	2003      	movs	r0, #3
 80065aa:	f7ff fd31 	bl	8006010 <_Z14BME280_SetModeh>
}
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <_ZN7CScreenC1Ev>:

#ifndef SCREEN_H_
#define SCREEN_H_
#include <stdint.h>

class CScreen{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <_ZN7CScreenC1Ev+0x1c>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	0800c110 	.word	0x0800c110

080065d4 <_ZN12CStartScreenC1Ev>:
	virtual void Update(uint8_t bNew)=0;
protected:
	void DisplayLedTEMP();
};

class CStartScreen: public CScreen {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ffe8 	bl	80065b4 <_ZN7CScreenC1Ev>
 80065e4:	4a03      	ldr	r2, [pc, #12]	; (80065f4 <_ZN12CStartScreenC1Ev+0x20>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	0800c180 	.word	0x0800c180

080065f8 <MainLoopInit>:
#include "bitmap.h"
#include "onewire.h"
#include "MainLoop.h"
#include "PowerRelay.h"
CScreen *gScreen=NULL;
void MainLoopInit(){
 80065f8:	b598      	push	{r3, r4, r7, lr}
 80065fa:	af00      	add	r7, sp, #0
	gScreen= new CStartScreen();
 80065fc:	2008      	movs	r0, #8
 80065fe:	f002 fe42 	bl	8009286 <_Znwj>
 8006602:	4603      	mov	r3, r0
 8006604:	461c      	mov	r4, r3
 8006606:	2300      	movs	r3, #0
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	7123      	strb	r3, [r4, #4]
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff ffe0 	bl	80065d4 <_ZN12CStartScreenC1Ev>
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <MainLoopInit+0x3c>)
 8006616:	601c      	str	r4, [r3, #0]
	TM1638_Init();
 8006618:	f000 feac 	bl	8007374 <_Z11TM1638_Initv>
	gScreen->Init();
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <MainLoopInit+0x3c>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <MainLoopInit+0x3c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4610      	mov	r0, r2
 800662c:	4798      	blx	r3
};
 800662e:	bf00      	nop
 8006630:	bd98      	pop	{r3, r4, r7, pc}
 8006632:	bf00      	nop
 8006634:	2000030c 	.word	0x2000030c

08006638 <MainLoopRun>:
void MainLoopRun(){
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	uint16_t keys;
	keys = TM1638_ReadKey();
 800663e:	f000 ff67 	bl	8007510 <_Z14TM1638_ReadKeyv>
 8006642:	4603      	mov	r3, r0
 8006644:	80bb      	strh	r3, [r7, #4]
		if (keys) {
 8006646:	88bb      	ldrh	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03f      	beq.n	80066cc <MainLoopRun+0x94>
			if((PowerRelayCheck()&1)&&(keys&0x8000))
 800664c:	f000 f8c4 	bl	80067d8 <_Z15PowerRelayCheckv>
 8006650:	4603      	mov	r3, r0
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <MainLoopRun+0x2e>
 800665a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	da01      	bge.n	8006666 <MainLoopRun+0x2e>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <MainLoopRun+0x30>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <MainLoopRun+0x38>
				PowerRelayOff();
 800666c:	f000 f898 	bl	80067a0 <_Z13PowerRelayOffv>
			if (gScreen) {
 8006670:	4b3a      	ldr	r3, [pc, #232]	; (800675c <MainLoopRun+0x124>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d029      	beq.n	80066cc <MainLoopRun+0x94>
				CScreen *pScreen = gScreen->ProcessKey(keys);
 8006678:	4b38      	ldr	r3, [pc, #224]	; (800675c <MainLoopRun+0x124>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b37      	ldr	r3, [pc, #220]	; (800675c <MainLoopRun+0x124>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	88b9      	ldrh	r1, [r7, #4]
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	6038      	str	r0, [r7, #0]
				if (pScreen) {
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01b      	beq.n	80066cc <MainLoopRun+0x94>
					if (gScreen) {
 8006694:	4b31      	ldr	r3, [pc, #196]	; (800675c <MainLoopRun+0x124>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <MainLoopRun+0x7c>
						delete gScreen;
 800669c:	4b2f      	ldr	r3, [pc, #188]	; (800675c <MainLoopRun+0x124>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <MainLoopRun+0x76>
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	3204      	adds	r2, #4
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	4790      	blx	r2
						gScreen = NULL;
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <MainLoopRun+0x124>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
					}
					gScreen = pScreen;
 80066b4:	4a29      	ldr	r2, [pc, #164]	; (800675c <MainLoopRun+0x124>)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6013      	str	r3, [r2, #0]
					gScreen->Init();
 80066ba:	4b28      	ldr	r3, [pc, #160]	; (800675c <MainLoopRun+0x124>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b27      	ldr	r3, [pc, #156]	; (800675c <MainLoopRun+0x124>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
			}

		}


	if (timer1 > 800) {
 80066cc:	4b24      	ldr	r3, [pc, #144]	; (8006760 <MainLoopRun+0x128>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80066d4:	bf8c      	ite	hi
 80066d6:	2301      	movhi	r3, #1
 80066d8:	2300      	movls	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d028      	beq.n	8006732 <MainLoopRun+0xfa>
		if (owdevices) {
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <MainLoopRun+0x12c>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <MainLoopRun+0xd2>
			for (uint8_t i = 0; i < owdevices; i++)
 80066e8:	2300      	movs	r3, #0
 80066ea:	71fb      	strb	r3, [r7, #7]
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <MainLoopRun+0x12c>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	79fa      	ldrb	r2, [r7, #7]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d207      	bcs.n	8006706 <MainLoopRun+0xce>
				ds18b20_get_temp(i);
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f85d 	bl	80077b8 <ds18b20_get_temp>
			for (uint8_t i = 0; i < owdevices; i++)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	3301      	adds	r3, #1
 8006702:	71fb      	strb	r3, [r7, #7]
 8006704:	e7f2      	b.n	80066ec <MainLoopRun+0xb4>
			ds18b20_start_convert();
 8006706:	f001 f83d 	bl	8007784 <ds18b20_start_convert>
		SSD1306_Puts(str1, &Font_7x10, SSD1306_COLOR_WHITE);
		sprintf(str1, "%.1f%%     ", BME280_ReadHumidity());
		SSD1306_GotoXY(0, 2 * 20 + 10);
		SSD1306_Puts(str1, &Font_7x10, SSD1306_COLOR_WHITE);
		  SSD1306_UpdateScreen();*/
		timer1 = 0;
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <MainLoopRun+0x128>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
		PowerRelayLimitCheck();
 8006710:	f000 f86c 	bl	80067ec <_Z20PowerRelayLimitCheckv>
		if(gScreen)
 8006714:	4b11      	ldr	r3, [pc, #68]	; (800675c <MainLoopRun+0x124>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d018      	beq.n	800674e <MainLoopRun+0x116>
		  gScreen->Update(1);
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <MainLoopRun+0x124>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b0e      	ldr	r3, [pc, #56]	; (800675c <MainLoopRun+0x124>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3310      	adds	r3, #16
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2101      	movs	r1, #1
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	e00d      	b.n	800674e <MainLoopRun+0x116>
	} else {
		if(gScreen)
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <MainLoopRun+0x124>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <MainLoopRun+0x116>
		  gScreen->Update(0);
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <MainLoopRun+0x124>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <MainLoopRun+0x124>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3310      	adds	r3, #16
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2100      	movs	r1, #0
 800674a:	4610      	mov	r0, r2
 800674c:	4798      	blx	r3
	}
	HAL_Delay(30);
 800674e:	201e      	movs	r0, #30
 8006750:	f7fa fe5e 	bl	8001410 <HAL_Delay>



};
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	2000030c 	.word	0x2000030c
 8006760:	20000328 	.word	0x20000328
 8006764:	20000327 	.word	0x20000327

08006768 <_Z12PowerRelayOnv>:
#include "TM1638.h"
#include "ds18b20.h"
extern TIM_HandleTypeDef htim1;
uint8_t g_PowerState=0;
uint16_t g_StopTemp=990;
void PowerRelayOn(){
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
   g_PowerState=1;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <_Z12PowerRelayOnv+0x30>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
   TM1638_Led(1, 0);
 8006772:	2100      	movs	r1, #0
 8006774:	2001      	movs	r0, #1
 8006776:	f000 fe2d 	bl	80073d4 <_Z10TM1638_Ledhh>
   TM1638_Led(7, 1);
 800677a:	2101      	movs	r1, #1
 800677c:	2007      	movs	r0, #7
 800677e:	f000 fe29 	bl	80073d4 <_Z10TM1638_Ledhh>
   TM1638_Update();
 8006782:	f000 fe5d 	bl	8007440 <_Z13TM1638_Updatev>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8006786:	2201      	movs	r2, #1
 8006788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800678c:	4803      	ldr	r0, [pc, #12]	; (800679c <_Z12PowerRelayOnv+0x34>)
 800678e:	f7fb fae3 	bl	8001d58 <HAL_GPIO_WritePin>
};
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000310 	.word	0x20000310
 800679c:	40010800 	.word	0x40010800

080067a0 <_Z13PowerRelayOffv>:
void PowerRelayOff(){
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	g_PowerState=g_PowerState&0xfe;
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <_Z13PowerRelayOffv+0x30>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <_Z13PowerRelayOffv+0x30>)
 80067b0:	701a      	strb	r2, [r3, #0]
	TM1638_Led(7, 0);
 80067b2:	2100      	movs	r1, #0
 80067b4:	2007      	movs	r0, #7
 80067b6:	f000 fe0d 	bl	80073d4 <_Z10TM1638_Ledhh>
	TM1638_Update();
 80067ba:	f000 fe41 	bl	8007440 <_Z13TM1638_Updatev>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80067be:	2200      	movs	r2, #0
 80067c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067c4:	4803      	ldr	r0, [pc, #12]	; (80067d4 <_Z13PowerRelayOffv+0x34>)
 80067c6:	f7fb fac7 	bl	8001d58 <HAL_GPIO_WritePin>
};
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000310 	.word	0x20000310
 80067d4:	40010800 	.word	0x40010800

080067d8 <_Z15PowerRelayCheckv>:
uint8_t PowerRelayCheck(){
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	return g_PowerState;
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <_Z15PowerRelayCheckv+0x10>)
 80067de:	781b      	ldrb	r3, [r3, #0]
};
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	20000310 	.word	0x20000310

080067ec <_Z20PowerRelayLimitCheckv>:
void PowerRelayLimitCheck(){
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	af00      	add	r7, sp, #0
	if( g_PowerState){
 80067f0:	4b23      	ldr	r3, [pc, #140]	; (8006880 <_Z20PowerRelayLimitCheckv+0x94>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d041      	beq.n	800687c <_Z20PowerRelayLimitCheckv+0x90>
		if((ds18_sensors[dev_index[/*2*/0]].bError)||(g_StopTemp<(ds18_sensors[dev_index[/*2*/0]].temp*10.0))){
 80067f8:	4b22      	ldr	r3, [pc, #136]	; (8006884 <_Z20PowerRelayLimitCheckv+0x98>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	4a22      	ldr	r2, [pc, #136]	; (8006888 <_Z20PowerRelayLimitCheckv+0x9c>)
 8006800:	460b      	mov	r3, r1
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	440b      	add	r3, r1
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	3314      	adds	r3, #20
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d123      	bne.n	800685a <_Z20PowerRelayLimitCheckv+0x6e>
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <_Z20PowerRelayLimitCheckv+0xa0>)
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7f9 fdf4 	bl	8000404 <__aeabi_i2d>
 800681c:	4604      	mov	r4, r0
 800681e:	460d      	mov	r5, r1
 8006820:	4b18      	ldr	r3, [pc, #96]	; (8006884 <_Z20PowerRelayLimitCheckv+0x98>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	4a18      	ldr	r2, [pc, #96]	; (8006888 <_Z20PowerRelayLimitCheckv+0x9c>)
 8006828:	460b      	mov	r3, r1
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	440b      	add	r3, r1
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	3310      	adds	r3, #16
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7f9 fdf6 	bl	8000428 <__aeabi_f2d>
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	4b13      	ldr	r3, [pc, #76]	; (8006890 <_Z20PowerRelayLimitCheckv+0xa4>)
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4620      	mov	r0, r4
 800684c:	4629      	mov	r1, r5
 800684e:	f7fa f8b5 	bl	80009bc <__aeabi_dcmplt>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d100      	bne.n	800685a <_Z20PowerRelayLimitCheckv+0x6e>
		  g_PowerState=g_PowerState|0x2;
		  PowerRelayOff();
		  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		}
	}
};
 8006858:	e010      	b.n	800687c <_Z20PowerRelayLimitCheckv+0x90>
		  TM1638_Led(1, 1);
 800685a:	2101      	movs	r1, #1
 800685c:	2001      	movs	r0, #1
 800685e:	f000 fdb9 	bl	80073d4 <_Z10TM1638_Ledhh>
		  g_PowerState=g_PowerState|0x2;
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <_Z20PowerRelayLimitCheckv+0x94>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f043 0302 	orr.w	r3, r3, #2
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <_Z20PowerRelayLimitCheckv+0x94>)
 800686e:	701a      	strb	r2, [r3, #0]
		  PowerRelayOff();
 8006870:	f7ff ff96 	bl	80067a0 <_Z13PowerRelayOffv>
		  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8006874:	2100      	movs	r1, #0
 8006876:	4807      	ldr	r0, [pc, #28]	; (8006894 <_Z20PowerRelayLimitCheckv+0xa8>)
 8006878:	f7fd fe72 	bl	8004560 <HAL_TIM_OC_Start_IT>
};
 800687c:	bf00      	nop
 800687e:	bdb0      	pop	{r4, r5, r7, pc}
 8006880:	20000310 	.word	0x20000310
 8006884:	200000dc 	.word	0x200000dc
 8006888:	20000748 	.word	0x20000748
 800688c:	20000006 	.word	0x20000006
 8006890:	40240000 	.word	0x40240000
 8006894:	20000934 	.word	0x20000934

08006898 <_ZN7CScreenD1Ev>:
	virtual ~CScreen(){};
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <_ZN7CScreenD1Ev+0x1c>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	0800c110 	.word	0x0800c110

080068b8 <_ZN7CScreenD0Ev>:
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ffe9 	bl	8006898 <_ZN7CScreenD1Ev>
 80068c6:	2104      	movs	r1, #4
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 fcda 	bl	8009282 <_ZdlPvj>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZN7CScreen14DisplayLedTEMPEv>:
#include "ds18b20.h"
#include "BME280.h"
#include "PowerRelay.h"
#include <cstdio>

void CScreen::DisplayLedTEMP() {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	if (dev_index[0] != 255) {
 80068e0:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <_ZN7CScreen14DisplayLedTEMPEv+0xf0>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2bff      	cmp	r3, #255	; 0xff
 80068e6:	d01f      	beq.n	8006928 <_ZN7CScreen14DisplayLedTEMPEv+0x50>
		for (int i = 0; i < 4; i++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	dc2b      	bgt.n	800694a <_ZN7CScreen14DisplayLedTEMPEv+0x72>
			TM1638_Char(i, (ds18_sensors[dev_index[0]].itemp >> (8 * (3 - i))) & 0xff);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	b2d8      	uxtb	r0, r3
 80068f6:	4b34      	ldr	r3, [pc, #208]	; (80069c8 <_ZN7CScreen14DisplayLedTEMPEv+0xf0>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4a33      	ldr	r2, [pc, #204]	; (80069cc <_ZN7CScreen14DisplayLedTEMPEv+0xf4>)
 80068fe:	460b      	mov	r3, r1
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	440b      	add	r3, r1
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4413      	add	r3, r2
 8006908:	330c      	adds	r3, #12
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f1c3 0303 	rsb	r3, r3, #3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	f000 fd78 	bl	8007410 <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	3301      	adds	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e7e1      	b.n	80068ec <_ZN7CScreen14DisplayLedTEMPEv+0x14>
	} else
		for (int i = 0; i < 4; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b03      	cmp	r3, #3
 8006930:	dc0b      	bgt.n	800694a <_ZN7CScreen14DisplayLedTEMPEv+0x72>
			TM1638_Char(i, digitToSegment[0x10]);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	4a26      	ldr	r2, [pc, #152]	; (80069d0 <_ZN7CScreen14DisplayLedTEMPEv+0xf8>)
 8006938:	7c12      	ldrb	r2, [r2, #16]
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fd67 	bl	8007410 <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	e7f0      	b.n	800692c <_ZN7CScreen14DisplayLedTEMPEv+0x54>
	if (dev_index[1] != 255) {
 800694a:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <_ZN7CScreen14DisplayLedTEMPEv+0xf0>)
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2bff      	cmp	r3, #255	; 0xff
 8006950:	d021      	beq.n	8006996 <_ZN7CScreen14DisplayLedTEMPEv+0xbe>
		for (int i = 0; i < 4; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b03      	cmp	r3, #3
 800695a:	dc2f      	bgt.n	80069bc <_ZN7CScreen14DisplayLedTEMPEv+0xe4>
			TM1638_Char(i + 4, (ds18_sensors[dev_index[1]].itemp >> (8 * (3 - i))) & 0xff);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	3304      	adds	r3, #4
 8006962:	b2d8      	uxtb	r0, r3
 8006964:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <_ZN7CScreen14DisplayLedTEMPEv+0xf0>)
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	4619      	mov	r1, r3
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <_ZN7CScreen14DisplayLedTEMPEv+0xf4>)
 800696c:	460b      	mov	r3, r1
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	330c      	adds	r3, #12
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f1c3 0303 	rsb	r3, r3, #3
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	fa22 f303 	lsr.w	r3, r2, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	4619      	mov	r1, r3
 800698a:	f000 fd41 	bl	8007410 <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e7df      	b.n	8006956 <_ZN7CScreen14DisplayLedTEMPEv+0x7e>
	} else
		for (int i = 0; i < 4; i++)
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b03      	cmp	r3, #3
 800699e:	dc0d      	bgt.n	80069bc <_ZN7CScreen14DisplayLedTEMPEv+0xe4>
			TM1638_Char(i + 4, digitToSegment[0x10]);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	3304      	adds	r3, #4
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <_ZN7CScreen14DisplayLedTEMPEv+0xf8>)
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	4611      	mov	r1, r2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fd2e 	bl	8007410 <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	e7ee      	b.n	800699a <_ZN7CScreen14DisplayLedTEMPEv+0xc2>
	TM1638_Update();
 80069bc:	f000 fd40 	bl	8007440 <_Z13TM1638_Updatev>

}
 80069c0:	bf00      	nop
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200000dc 	.word	0x200000dc
 80069cc:	20000748 	.word	0x20000748
 80069d0:	0800c194 	.word	0x0800c194

080069d4 <_Z13PrintStopTempv>:
char cSensor[]  =   "t:     'C";
char cStopTemp[]="Stop:  %3.1f'C ";
char cPressEnter[]=     "Press ~ to start";
char cPressEnterBlank[]="                ";
//----------------------------------
void PrintStopTemp(){
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
	char Str[16];
	sprintf(Str,cStopTemp, g_StopTemp/10.0);
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <_Z13PrintStopTempv+0x3c>)
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7f9 fd10 	bl	8000404 <__aeabi_i2d>
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <_Z13PrintStopTempv+0x40>)
 80069ea:	f7f9 fe9f 	bl	800072c <__aeabi_ddiv>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4638      	mov	r0, r7
 80069f4:	4908      	ldr	r1, [pc, #32]	; (8006a18 <_Z13PrintStopTempv+0x44>)
 80069f6:	f003 fa37 	bl	8009e68 <siprintf>
	SSD1306_Puts (Str, &Font_7x10, SSD1306_COLOR_WHITE);
 80069fa:	463b      	mov	r3, r7
 80069fc:	2201      	movs	r2, #1
 80069fe:	4907      	ldr	r1, [pc, #28]	; (8006a1c <_Z13PrintStopTempv+0x48>)
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 fec9 	bl	8008798 <SSD1306_Puts>
};
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000006 	.word	0x20000006
 8006a14:	40240000 	.word	0x40240000
 8006a18:	200000a0 	.word	0x200000a0
 8006a1c:	200000e0 	.word	0x200000e0

08006a20 <_ZN12CStartScreenD1Ev>:
CStartScreen::~CStartScreen(){
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <_ZN12CStartScreenD1Ev+0x20>)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff31 	bl	8006898 <_ZN7CScreenD1Ev>

};
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	0800c180 	.word	0x0800c180

08006a44 <_ZN12CStartScreenD0Ev>:
CStartScreen::~CStartScreen(){
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
};
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff ffe7 	bl	8006a20 <_ZN12CStartScreenD1Ev>
 8006a52:	2108      	movs	r1, #8
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f002 fc14 	bl	8009282 <_ZdlPvj>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZN11CMenuScreenC1Ev>:
	virtual void Init();
	virtual void Update(uint8_t bNew);
private:
	uint8_t m_count;
};
class CMenuScreen: public CScreen{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fda0 	bl	80065b4 <_ZN7CScreenC1Ev>
 8006a74:	4a03      	ldr	r2, [pc, #12]	; (8006a84 <_ZN11CMenuScreenC1Ev+0x20>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	0800c164 	.word	0x0800c164

08006a88 <_ZN12CStartScreen10ProcessKeyEt>:
CScreen * CStartScreen::ProcessKey(uint16_t keys){
 8006a88:	b590      	push	{r4, r7, lr}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
	if(keys&0xff00){
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <_ZN12CStartScreen10ProcessKeyEt+0x2c>
		return new CMenuScreen();
 8006a9e:	2004      	movs	r0, #4
 8006aa0:	f002 fbf1 	bl	8009286 <_Znwj>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7ff ffd9 	bl	8006a64 <_ZN11CMenuScreenC1Ev>
 8006ab2:	e000      	b.n	8006ab6 <_ZN12CStartScreen10ProcessKeyEt+0x2e>
	}
  return NULL;
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	4623      	mov	r3, r4
};
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd90      	pop	{r4, r7, pc}

08006ac0 <_ZN12CStartScreen4InitEv>:
void CStartScreen::Init(){
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
	m_count=0;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	711a      	strb	r2, [r3, #4]
	SSD1306_DrawRectangle(0, 0, 127, 63, SSD1306_COLOR_WHITE);
 8006ace:	2301      	movs	r3, #1
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	233f      	movs	r3, #63	; 0x3f
 8006ad4:	227f      	movs	r2, #127	; 0x7f
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f001 ff84 	bl	80089e6 <SSD1306_DrawRectangle>
	SSD1306_DrawFilledRectangle(8, 8, 127-16, 63-16, SSD1306_COLOR_WHITE);
 8006ade:	2301      	movs	r3, #1
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	232f      	movs	r3, #47	; 0x2f
 8006ae4:	226f      	movs	r2, #111	; 0x6f
 8006ae6:	2108      	movs	r1, #8
 8006ae8:	2008      	movs	r0, #8
 8006aea:	f001 ffe6 	bl	8008aba <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY (16,9);
 8006aee:	2109      	movs	r1, #9
 8006af0:	2010      	movs	r0, #16
 8006af2:	f001 fdbb 	bl	800866c <SSD1306_GotoXY>
	SSD1306_Puts (cMoonShine, &Font_11x18, SSD1306_COLOR_BLACK);
 8006af6:	2200      	movs	r2, #0
 8006af8:	4912      	ldr	r1, [pc, #72]	; (8006b44 <_ZN12CStartScreen4InitEv+0x84>)
 8006afa:	4813      	ldr	r0, [pc, #76]	; (8006b48 <_ZN12CStartScreen4InitEv+0x88>)
 8006afc:	f001 fe4c 	bl	8008798 <SSD1306_Puts>
	SSD1306_GotoXY (44,27);
 8006b00:	211b      	movs	r1, #27
 8006b02:	202c      	movs	r0, #44	; 0x2c
 8006b04:	f001 fdb2 	bl	800866c <SSD1306_GotoXY>
	SSD1306_Puts (cVersion, &Font_11x18, SSD1306_COLOR_BLACK);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	490e      	ldr	r1, [pc, #56]	; (8006b44 <_ZN12CStartScreen4InitEv+0x84>)
 8006b0c:	480f      	ldr	r0, [pc, #60]	; (8006b4c <_ZN12CStartScreen4InitEv+0x8c>)
 8006b0e:	f001 fe43 	bl	8008798 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8006b12:	f001 fd07 	bl	8008524 <SSD1306_UpdateScreen>
    for(int i=0;i<8;i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	dc0b      	bgt.n	8006b38 <_ZN12CStartScreen4InitEv+0x78>
    	TM1638_Char(i,digitToSegment[0x10]);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <_ZN12CStartScreen4InitEv+0x90>)
 8006b26:	7c12      	ldrb	r2, [r2, #16]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fc70 	bl	8007410 <_Z11TM1638_Charhh>
    for(int i=0;i<8;i++)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e7f0      	b.n	8006b1a <_ZN12CStartScreen4InitEv+0x5a>
    TM1638_Update();
 8006b38:	f000 fc82 	bl	8007440 <_Z13TM1638_Updatev>

};
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200000e8 	.word	0x200000e8
 8006b48:	20000008 	.word	0x20000008
 8006b4c:	20000014 	.word	0x20000014
 8006b50:	0800c194 	.word	0x0800c194

08006b54 <_ZN12CStartScreen6UpdateEh>:
void CStartScreen::Update(uint8_t bNew) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
	m_count++;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	3301      	adds	r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	711a      	strb	r2, [r3, #4]
	if (m_count == 32) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	791b      	ldrb	r3, [r3, #4]
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d10b      	bne.n	8006b8c <_ZN12CStartScreen6UpdateEh+0x38>
		SSD1306_GotoXY(20, 45);
 8006b74:	212d      	movs	r1, #45	; 0x2d
 8006b76:	2014      	movs	r0, #20
 8006b78:	f001 fd78 	bl	800866c <SSD1306_GotoXY>
		SSD1306_Puts(cPressAnyKey, &Font_7x10, SSD1306_COLOR_BLACK);
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <_ZN12CStartScreen6UpdateEh+0x64>)
 8006b80:	480e      	ldr	r0, [pc, #56]	; (8006bbc <_ZN12CStartScreen6UpdateEh+0x68>)
 8006b82:	f001 fe09 	bl	8008798 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8006b86:	f001 fccd 	bl	8008524 <SSD1306_UpdateScreen>
			SSD1306_Puts(cPressAnyKeyBlank, &Font_7x10, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			m_count = 0;
		}
	}
};
 8006b8a:	e011      	b.n	8006bb0 <_ZN12CStartScreen6UpdateEh+0x5c>
		if (m_count >= 64) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	791b      	ldrb	r3, [r3, #4]
 8006b90:	2b3f      	cmp	r3, #63	; 0x3f
 8006b92:	d90d      	bls.n	8006bb0 <_ZN12CStartScreen6UpdateEh+0x5c>
			SSD1306_GotoXY(20, 45);
 8006b94:	212d      	movs	r1, #45	; 0x2d
 8006b96:	2014      	movs	r0, #20
 8006b98:	f001 fd68 	bl	800866c <SSD1306_GotoXY>
			SSD1306_Puts(cPressAnyKeyBlank, &Font_7x10, SSD1306_COLOR_BLACK);
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <_ZN12CStartScreen6UpdateEh+0x64>)
 8006ba0:	4807      	ldr	r0, [pc, #28]	; (8006bc0 <_ZN12CStartScreen6UpdateEh+0x6c>)
 8006ba2:	f001 fdf9 	bl	8008798 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8006ba6:	f001 fcbd 	bl	8008524 <SSD1306_UpdateScreen>
			m_count = 0;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	711a      	strb	r2, [r3, #4]
};
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	200000e0 	.word	0x200000e0
 8006bbc:	2000001c 	.word	0x2000001c
 8006bc0:	2000002c 	.word	0x2000002c

08006bc4 <_ZN11CMenuScreenD1Ev>:

CMenuScreen::~CMenuScreen(){
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <_ZN11CMenuScreenD1Ev+0x20>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fe5f 	bl	8006898 <_ZN7CScreenD1Ev>

};
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	0800c164 	.word	0x0800c164

08006be8 <_ZN11CMenuScreenD0Ev>:
CMenuScreen::~CMenuScreen(){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
};
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ffe7 	bl	8006bc4 <_ZN11CMenuScreenD1Ev>
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 fb42 	bl	8009282 <_ZdlPvj>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <_ZN17CStartBeginScreenC1Ev>:
	virtual ~CInfoScreen();
	virtual CScreen * ProcessKey(uint16_t keys);
	virtual void Init();
	virtual void Update(uint8_t bNew);
};
class CStartBeginScreen: public CScreen{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fcce 	bl	80065b4 <_ZN7CScreenC1Ev>
 8006c18:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <_ZN17CStartBeginScreenC1Ev+0x20>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	0800c12c 	.word	0x0800c12c

08006c2c <_ZN11CInfoScreenC1Ev>:
class CInfoScreen: public CScreen{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fcbc 	bl	80065b4 <_ZN7CScreenC1Ev>
 8006c3c:	4a03      	ldr	r2, [pc, #12]	; (8006c4c <_ZN11CInfoScreenC1Ev+0x20>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	0800c148 	.word	0x0800c148

08006c50 <_ZN11CMenuScreen10ProcessKeyEt>:
uint8_t CMenuScreen::m_curr=0;
uint8_t CMenuScreen::m_start=0;
CScreen* CMenuScreen::ProcessKey(uint16_t keys) {
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	807b      	strh	r3, [r7, #2]
	uint8_t b = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
	if (keys & 0x100) {
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <_ZN11CMenuScreen10ProcessKeyEt+0x4a>
		if (m_curr) {
 8006c6a:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d013      	beq.n	8006c9a <_ZN11CMenuScreen10ProcessKeyEt+0x4a>
			m_curr--;
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006c7c:	701a      	strb	r2, [r3, #0]
			if (m_curr < m_start)
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	4b34      	ldr	r3, [pc, #208]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d205      	bcs.n	8006c96 <_ZN11CMenuScreen10ProcessKeyEt+0x46>
				m_start--;
 8006c8a:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006c94:	701a      	strb	r2, [r3, #0]
			b = 1;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
		}

	}
	if (keys & 0x200) {
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d018      	beq.n	8006cd6 <_ZN11CMenuScreen10ProcessKeyEt+0x86>
		if (m_curr < MENU_SIZE - 1) {
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d814      	bhi.n	8006cd6 <_ZN11CMenuScreen10ProcessKeyEt+0x86>
			m_curr++;
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006cb6:	701a      	strb	r2, [r3, #0]
			if (m_curr >= m_start + 3)
 8006cb8:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	da05      	bge.n	8006cd2 <_ZN11CMenuScreen10ProcessKeyEt+0x82>
				m_start++;
 8006cc6:	4b23      	ldr	r3, [pc, #140]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <_ZN11CMenuScreen10ProcessKeyEt+0x104>)
 8006cd0:	701a      	strb	r2, [r3, #0]
			b = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (b) {
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <_ZN11CMenuScreen10ProcessKeyEt+0x92>
		DrawMenu();
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f863 	bl	8006da8 <_ZN11CMenuScreen8DrawMenuEv>
	}
	if(keys & 0x1000){
 8006ce2:	887b      	ldrh	r3, [r7, #2]
 8006ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d02b      	beq.n	8006d44 <_ZN11CMenuScreen10ProcessKeyEt+0xf4>
		switch(m_curr){
 8006cec:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <_ZN11CMenuScreen10ProcessKeyEt+0x100>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d827      	bhi.n	8006d44 <_ZN11CMenuScreen10ProcessKeyEt+0xf4>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <_ZN11CMenuScreen10ProcessKeyEt+0xac>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d11 	.word	0x08006d11
 8006d00:	08006d45 	.word	0x08006d45
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
		case 0:{
            return new CStartBeginScreen();
 8006d10:	2008      	movs	r0, #8
 8006d12:	f002 fab8 	bl	8009286 <_Znwj>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461c      	mov	r4, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	7123      	strb	r3, [r4, #4]
 8006d22:	2300      	movs	r3, #0
 8006d24:	7163      	strb	r3, [r4, #5]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff ff6e 	bl	8006c08 <_ZN17CStartBeginScreenC1Ev>
 8006d2c:	e00b      	b.n	8006d46 <_ZN11CMenuScreen10ProcessKeyEt+0xf6>
		case 1:{

		}
		break;
		case 2:{
			return  new CInfoScreen();
 8006d2e:	2004      	movs	r0, #4
 8006d30:	f002 faa9 	bl	8009286 <_Znwj>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461c      	mov	r4, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f7ff ff75 	bl	8006c2c <_ZN11CInfoScreenC1Ev>
 8006d42:	e000      	b.n	8006d46 <_ZN11CMenuScreen10ProcessKeyEt+0xf6>
	}
	/*if(keys & 0x20)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	if(keys & 0x2000)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);*/
	return NULL;
 8006d44:	2400      	movs	r4, #0
 8006d46:	4623      	mov	r3, r4
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	20000311 	.word	0x20000311
 8006d54:	20000312 	.word	0x20000312

08006d58 <_ZN11CMenuScreen4InitEv>:
;
void CMenuScreen::Init(){
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	6078      	str	r0, [r7, #4]
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006d60:	2000      	movs	r0, #0
 8006d62:	f001 fc0d 	bl	8008580 <SSD1306_Fill>
	SSD1306_DrawRectangle(0, 0, 127, 63, SSD1306_COLOR_WHITE);
 8006d66:	2301      	movs	r3, #1
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	233f      	movs	r3, #63	; 0x3f
 8006d6c:	227f      	movs	r2, #127	; 0x7f
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2000      	movs	r0, #0
 8006d72:	f001 fe38 	bl	80089e6 <SSD1306_DrawRectangle>
//    m_start=0;
//    m_curr=0;
    DrawMenu();
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f816 	bl	8006da8 <_ZN11CMenuScreen8DrawMenuEv>
};
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN11CMenuScreen6UpdateEh>:
void CMenuScreen::Update(uint8_t bNew){
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
	if(bNew)
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <_ZN11CMenuScreen6UpdateEh+0x1a>
		DisplayLedTEMP();
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fd9d 	bl	80068d8 <_ZN7CScreen14DisplayLedTEMPEv>

};
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <_ZN11CMenuScreen8DrawMenuEv>:
void CMenuScreen::DrawMenu() {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	dc2a      	bgt.n	8006e10 <_ZN11CMenuScreen8DrawMenuEv+0x68>
		SSD1306_GotoXY(2, 2 + 20 * i);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	0092      	lsls	r2, r2, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3302      	adds	r3, #2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	2002      	movs	r0, #2
 8006dd0:	f001 fc4c 	bl	800866c <SSD1306_GotoXY>
		SSD1306_Puts(acMenu[m_start + i], &Font_11x18,
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <_ZN11CMenuScreen8DrawMenuEv+0x74>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	441a      	add	r2, r3
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4413      	add	r3, r2
 8006de4:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <_ZN11CMenuScreen8DrawMenuEv+0x78>)
 8006de6:	1898      	adds	r0, r3, r2
				m_start + i == m_curr ?
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <_ZN11CMenuScreen8DrawMenuEv+0x74>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <_ZN11CMenuScreen8DrawMenuEv+0x7c>)
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	bf14      	ite	ne
 8006dfa:	2301      	movne	r3, #1
 8006dfc:	2300      	moveq	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
		SSD1306_Puts(acMenu[m_start + i], &Font_11x18,
 8006e00:	461a      	mov	r2, r3
 8006e02:	4909      	ldr	r1, [pc, #36]	; (8006e28 <_ZN11CMenuScreen8DrawMenuEv+0x80>)
 8006e04:	f001 fcc8 	bl	8008798 <SSD1306_Puts>
	for (int i = 0; i < 3; i++) {
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e7d1      	b.n	8006db4 <_ZN11CMenuScreen8DrawMenuEv+0xc>
						SSD1306_COLOR_BLACK : SSD1306_COLOR_WHITE);
	}
	SSD1306_UpdateScreen();
 8006e10:	f001 fb88 	bl	8008524 <SSD1306_UpdateScreen>

}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000312 	.word	0x20000312
 8006e20:	2000003c 	.word	0x2000003c
 8006e24:	20000311 	.word	0x20000311
 8006e28:	200000e8 	.word	0x200000e8

08006e2c <_ZN11CInfoScreenD1Ev>:
;
CInfoScreen::~CInfoScreen() {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	4a05      	ldr	r2, [pc, #20]	; (8006e4c <_ZN11CInfoScreenD1Ev+0x20>)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fd2b 	bl	8006898 <_ZN7CScreenD1Ev>

}
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	0800c148 	.word	0x0800c148

08006e50 <_ZN11CInfoScreenD0Ev>:
CInfoScreen::~CInfoScreen() {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
}
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ffe7 	bl	8006e2c <_ZN11CInfoScreenD1Ev>
 8006e5e:	2104      	movs	r1, #4
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fa0e 	bl	8009282 <_ZdlPvj>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <_ZN11CInfoScreen10ProcessKeyEt>:
;
CScreen* CInfoScreen::ProcessKey(uint16_t keys) {
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
	if (keys & 0x7f00) {
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <_ZN11CInfoScreen10ProcessKeyEt+0x2c>
		return new CMenuScreen();
 8006e86:	2004      	movs	r0, #4
 8006e88:	f002 f9fd 	bl	8009286 <_Znwj>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461c      	mov	r4, r3
 8006e90:	2300      	movs	r3, #0
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7ff fde5 	bl	8006a64 <_ZN11CMenuScreenC1Ev>
 8006e9a:	e000      	b.n	8006e9e <_ZN11CInfoScreen10ProcessKeyEt+0x2e>
	}
	return NULL;
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	4623      	mov	r3, r4
};
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <_ZN11CInfoScreen4InitEv>:
void CInfoScreen::Init() {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f001 fb65 	bl	8008580 <SSD1306_Fill>
	if (owdevices) {
 8006eb6:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <_ZN11CInfoScreen4InitEv+0x144>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8086 	beq.w	8006fcc <_ZN11CInfoScreen4InitEv+0x124>
		char str[20];
		uint32_t p;
		for (int i = 0; i < owdevices; i++) {
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	4b49      	ldr	r3, [pc, #292]	; (8006fec <_ZN11CInfoScreen4InitEv+0x144>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f280 8086 	bge.w	8006fde <_ZN11CInfoScreen4InitEv+0x136>
			//p=(uint32_t*) ds18_sensors[i].rom_code
			p=ds18_sensors[i].rom_code[3]+(ds18_sensors[i].rom_code[2]<<8)+(ds18_sensors[i].rom_code[1]<<16)+(ds18_sensors[i].rom_code[0]<<24);
 8006ed2:	4947      	ldr	r1, [pc, #284]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	440b      	add	r3, r1
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	4942      	ldr	r1, [pc, #264]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	18c1      	adds	r1, r0, r3
 8006efc:	483c      	ldr	r0, [pc, #240]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f00:	4613      	mov	r3, r2
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	4413      	add	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4403      	add	r3, r0
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	4419      	add	r1, r3
 8006f12:	4837      	ldr	r0, [pc, #220]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	4613      	mov	r3, r2
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4413      	add	r3, r2
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	4403      	add	r3, r0
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	061b      	lsls	r3, r3, #24
 8006f24:	440b      	add	r3, r1
 8006f26:	623b      	str	r3, [r7, #32]
			sprintf(str, "%d)%08lX",i+1, p);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	f107 000c 	add.w	r0, r7, #12
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	4930      	ldr	r1, [pc, #192]	; (8006ff4 <_ZN11CInfoScreen4InitEv+0x14c>)
 8006f34:	f002 ff98 	bl	8009e68 <siprintf>
			p=ds18_sensors[i].rom_code[7]+(ds18_sensors[i].rom_code[6]<<8)+(ds18_sensors[i].rom_code[5]<<16)+(ds18_sensors[i].rom_code[4]<<24);
 8006f38:	492d      	ldr	r1, [pc, #180]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	4413      	add	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	440b      	add	r3, r1
 8006f46:	3307      	adds	r3, #7
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	4928      	ldr	r1, [pc, #160]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	4613      	mov	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4413      	add	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	440b      	add	r3, r1
 8006f5a:	3306      	adds	r3, #6
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	18c1      	adds	r1, r0, r3
 8006f62:	4823      	ldr	r0, [pc, #140]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f66:	4613      	mov	r3, r2
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	4413      	add	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4403      	add	r3, r0
 8006f70:	3305      	adds	r3, #5
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	4419      	add	r1, r3
 8006f78:	481d      	ldr	r0, [pc, #116]	; (8006ff0 <_ZN11CInfoScreen4InitEv+0x148>)
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4403      	add	r3, r0
 8006f86:	3304      	adds	r3, #4
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	440b      	add	r3, r1
 8006f8e:	623b      	str	r3, [r7, #32]
			sprintf(str+10, "%08lX", p);
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	330a      	adds	r3, #10
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	4917      	ldr	r1, [pc, #92]	; (8006ff8 <_ZN11CInfoScreen4InitEv+0x150>)
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 ff64 	bl	8009e68 <siprintf>
			SSD1306_GotoXY(0, 10 * i);
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f001 fb5b 	bl	800866c <SSD1306_GotoXY>
			SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	2201      	movs	r2, #1
 8006fbc:	490f      	ldr	r1, [pc, #60]	; (8006ffc <_ZN11CInfoScreen4InitEv+0x154>)
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fbea 	bl	8008798 <SSD1306_Puts>
		for (int i = 0; i < owdevices; i++) {
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fca:	e77b      	b.n	8006ec4 <_ZN11CInfoScreen4InitEv+0x1c>
		}

	} else {
		SSD1306_GotoXY(0, 10);
 8006fcc:	210a      	movs	r1, #10
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f001 fb4c 	bl	800866c <SSD1306_GotoXY>
		SSD1306_Puts(cDeviceNotFound, &Font_7x10, SSD1306_COLOR_WHITE);
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4909      	ldr	r1, [pc, #36]	; (8006ffc <_ZN11CInfoScreen4InitEv+0x154>)
 8006fd8:	4809      	ldr	r0, [pc, #36]	; (8007000 <_ZN11CInfoScreen4InitEv+0x158>)
 8006fda:	f001 fbdd 	bl	8008798 <SSD1306_Puts>
	}

	SSD1306_UpdateScreen();
 8006fde:	f001 faa1 	bl	8008524 <SSD1306_UpdateScreen>
}
 8006fe2:	bf00      	nop
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000327 	.word	0x20000327
 8006ff0:	20000748 	.word	0x20000748
 8006ff4:	0800c0d8 	.word	0x0800c0d8
 8006ff8:	0800c0e4 	.word	0x0800c0e4
 8006ffc:	200000e0 	.word	0x200000e0
 8007000:	2000006c 	.word	0x2000006c

08007004 <_ZN11CInfoScreen6UpdateEh>:
;
void CInfoScreen::Update(uint8_t bNew) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
	if (bNew)
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <_ZN11CInfoScreen6UpdateEh+0x1a>
		DisplayLedTEMP();
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fc5d 	bl	80068d8 <_ZN7CScreen14DisplayLedTEMPEv>

};
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <_ZN17CStartBeginScreenD1Ev>:

CStartBeginScreen::~CStartBeginScreen(){
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4a05      	ldr	r2, [pc, #20]	; (8007048 <_ZN17CStartBeginScreenD1Ev+0x20>)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fc2d 	bl	8006898 <_ZN7CScreenD1Ev>

};
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	0800c12c 	.word	0x0800c12c

0800704c <_ZN17CStartBeginScreenD0Ev>:
CStartBeginScreen::~CStartBeginScreen(){
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
};
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ffe7 	bl	8007028 <_ZN17CStartBeginScreenD1Ev>
 800705a:	2108      	movs	r1, #8
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f002 f910 	bl	8009282 <_ZdlPvj>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN17CStartBeginScreen10ProcessKeyEt>:
extern TIM_HandleTypeDef htim1;
CScreen* CStartBeginScreen::ProcessKey(uint16_t keys) {
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	807b      	strh	r3, [r7, #2]
	if (bFalse) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	791b      	ldrb	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00f      	beq.n	80070a0 <_ZN17CStartBeginScreen10ProcessKeyEt+0x34>
		if (keys & 0xff00) {
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007086:	2b00      	cmp	r3, #0
 8007088:	d05e      	beq.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
			return new CMenuScreen();
 800708a:	2004      	movs	r0, #4
 800708c:	f002 f8fb 	bl	8009286 <_Znwj>
 8007090:	4603      	mov	r3, r0
 8007092:	461c      	mov	r4, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff fce3 	bl	8006a64 <_ZN11CMenuScreenC1Ev>
 800709e:	e054      	b.n	800714a <_ZN17CStartBeginScreen10ProcessKeyEt+0xde>
		}
	} else {
		if (keys & 0x1000) {
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <_ZN17CStartBeginScreen10ProcessKeyEt+0x44>
           PowerRelayOn();
 80070aa:	f7ff fb5d 	bl	8006768 <_Z12PowerRelayOnv>
 80070ae:	e04b      	b.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
		}
		else
		if(keys & 0x400){
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d018      	beq.n	80070ec <_ZN17CStartBeginScreen10ProcessKeyEt+0x80>
			if(g_StopTemp>401){
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 80070c2:	d30e      	bcc.n	80070e2 <_ZN17CStartBeginScreen10ProcessKeyEt+0x76>
			  g_StopTemp--;
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	4b21      	ldr	r3, [pc, #132]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 80070ce:	801a      	strh	r2, [r3, #0]
			  SSD1306_GotoXY (7,19);
 80070d0:	2113      	movs	r1, #19
 80070d2:	2007      	movs	r0, #7
 80070d4:	f001 faca 	bl	800866c <SSD1306_GotoXY>
			  PrintStopTemp();
 80070d8:	f7ff fc7c 	bl	80069d4 <_Z13PrintStopTempv>
			  SSD1306_UpdateScreen();
 80070dc:	f001 fa22 	bl	8008524 <SSD1306_UpdateScreen>
 80070e0:	e032      	b.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
			}
			else
			  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80070e2:	2100      	movs	r1, #0
 80070e4:	481c      	ldr	r0, [pc, #112]	; (8007158 <_ZN17CStartBeginScreen10ProcessKeyEt+0xec>)
 80070e6:	f7fd fa3b 	bl	8004560 <HAL_TIM_OC_Start_IT>
 80070ea:	e02d      	b.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
		}
		else
		if(keys & 0x800){
 80070ec:	887b      	ldrh	r3, [r7, #2]
 80070ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d018      	beq.n	8007128 <_ZN17CStartBeginScreen10ProcessKeyEt+0xbc>
			if(g_StopTemp<1009){
 80070f6:	4b17      	ldr	r3, [pc, #92]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80070fe:	d80e      	bhi.n	800711e <_ZN17CStartBeginScreen10ProcessKeyEt+0xb2>
			  g_StopTemp++;
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <_ZN17CStartBeginScreen10ProcessKeyEt+0xe8>)
 800710a:	801a      	strh	r2, [r3, #0]
			  SSD1306_GotoXY (7,19);
 800710c:	2113      	movs	r1, #19
 800710e:	2007      	movs	r0, #7
 8007110:	f001 faac 	bl	800866c <SSD1306_GotoXY>
			  PrintStopTemp();
 8007114:	f7ff fc5e 	bl	80069d4 <_Z13PrintStopTempv>
			  SSD1306_UpdateScreen();
 8007118:	f001 fa04 	bl	8008524 <SSD1306_UpdateScreen>
 800711c:	e014      	b.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
			}
			else
			  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800711e:	2100      	movs	r1, #0
 8007120:	480d      	ldr	r0, [pc, #52]	; (8007158 <_ZN17CStartBeginScreen10ProcessKeyEt+0xec>)
 8007122:	f7fd fa1d 	bl	8004560 <HAL_TIM_OC_Start_IT>
 8007126:	e00f      	b.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
		}
		else
		if (keys & 0x2000) {
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <_ZN17CStartBeginScreen10ProcessKeyEt+0xdc>
				return new CMenuScreen();
 8007132:	2004      	movs	r0, #4
 8007134:	f002 f8a7 	bl	8009286 <_Znwj>
 8007138:	4603      	mov	r3, r0
 800713a:	461c      	mov	r4, r3
 800713c:	2300      	movs	r3, #0
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	4620      	mov	r0, r4
 8007142:	f7ff fc8f 	bl	8006a64 <_ZN11CMenuScreenC1Ev>
 8007146:	e000      	b.n	800714a <_ZN17CStartBeginScreen10ProcessKeyEt+0xde>
			}


	}

	return NULL;
 8007148:	2400      	movs	r4, #0
 800714a:	4623      	mov	r3, r4
};
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bd90      	pop	{r4, r7, pc}
 8007154:	20000006 	.word	0x20000006
 8007158:	20000934 	.word	0x20000934

0800715c <_ZN17CStartBeginScreen4InitEv>:
void CStartBeginScreen::Init(){
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	bFalse=1;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	711a      	strb	r2, [r3, #4]
	m_count=0;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	715a      	strb	r2, [r3, #5]
	//m_StopTemp=990;
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8007170:	2000      	movs	r0, #0
 8007172:	f001 fa05 	bl	8008580 <SSD1306_Fill>
	if(dev_index[/*2*/0] != 255){
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <_ZN17CStartBeginScreen4InitEv+0x6c>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d012      	beq.n	80071a4 <_ZN17CStartBeginScreen4InitEv+0x48>
		SSD1306_GotoXY (7+21,9);
 800717e:	2109      	movs	r1, #9
 8007180:	201c      	movs	r0, #28
 8007182:	f001 fa73 	bl	800866c <SSD1306_GotoXY>
		SSD1306_Puts (cSensor, &Font_7x10, SSD1306_COLOR_WHITE);
 8007186:	2201      	movs	r2, #1
 8007188:	4910      	ldr	r1, [pc, #64]	; (80071cc <_ZN17CStartBeginScreen4InitEv+0x70>)
 800718a:	4811      	ldr	r0, [pc, #68]	; (80071d0 <_ZN17CStartBeginScreen4InitEv+0x74>)
 800718c:	f001 fb04 	bl	8008798 <SSD1306_Puts>
		SSD1306_GotoXY (7,19);
 8007190:	2113      	movs	r1, #19
 8007192:	2007      	movs	r0, #7
 8007194:	f001 fa6a 	bl	800866c <SSD1306_GotoXY>
		PrintStopTemp();
 8007198:	f7ff fc1c 	bl	80069d4 <_Z13PrintStopTempv>
		bFalse=0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	711a      	strb	r2, [r3, #4]
 80071a2:	e00b      	b.n	80071bc <_ZN17CStartBeginScreen4InitEv+0x60>
	}
	else
	{
		SSD1306_GotoXY (0,9);
 80071a4:	2109      	movs	r1, #9
 80071a6:	2000      	movs	r0, #0
 80071a8:	f001 fa60 	bl	800866c <SSD1306_GotoXY>
		SSD1306_Puts (cManinSensorNotFoud, &Font_7x10, SSD1306_COLOR_WHITE);
 80071ac:	2201      	movs	r2, #1
 80071ae:	4907      	ldr	r1, [pc, #28]	; (80071cc <_ZN17CStartBeginScreen4InitEv+0x70>)
 80071b0:	4808      	ldr	r0, [pc, #32]	; (80071d4 <_ZN17CStartBeginScreen4InitEv+0x78>)
 80071b2:	f001 faf1 	bl	8008798 <SSD1306_Puts>
		bFalse=1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	711a      	strb	r2, [r3, #4]
	}
	SSD1306_UpdateScreen();
 80071bc:	f001 f9b2 	bl	8008524 <SSD1306_UpdateScreen>
};
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200000dc 	.word	0x200000dc
 80071cc:	200000e0 	.word	0x200000e0
 80071d0:	20000094 	.word	0x20000094
 80071d4:	20000080 	.word	0x20000080

080071d8 <_ZN17CStartBeginScreen6UpdateEh>:
void CStartBeginScreen::Update(uint8_t bNew){
 80071d8:	b5b0      	push	{r4, r5, r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
	if (bFalse) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	791b      	ldrb	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d028      	beq.n	800723e <_ZN17CStartBeginScreen6UpdateEh+0x66>
		m_count++;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	795b      	ldrb	r3, [r3, #5]
 80071f0:	3301      	adds	r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	715a      	strb	r2, [r3, #5]
		if (m_count == 32) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	795b      	ldrb	r3, [r3, #5]
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d10b      	bne.n	8007218 <_ZN17CStartBeginScreen6UpdateEh+0x40>
			SSD1306_GotoXY(20, 45);
 8007200:	212d      	movs	r1, #45	; 0x2d
 8007202:	2014      	movs	r0, #20
 8007204:	f001 fa32 	bl	800866c <SSD1306_GotoXY>
			SSD1306_Puts(cPressAnyKey, &Font_7x10, SSD1306_COLOR_WHITE);
 8007208:	2201      	movs	r2, #1
 800720a:	4950      	ldr	r1, [pc, #320]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 800720c:	4850      	ldr	r0, [pc, #320]	; (8007350 <_ZN17CStartBeginScreen6UpdateEh+0x178>)
 800720e:	f001 fac3 	bl	8008798 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8007212:	f001 f987 	bl	8008524 <SSD1306_UpdateScreen>
 8007216:	e05f      	b.n	80072d8 <_ZN17CStartBeginScreen6UpdateEh+0x100>
		} else {
			if (m_count >= 64) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	795b      	ldrb	r3, [r3, #5]
 800721c:	2b3f      	cmp	r3, #63	; 0x3f
 800721e:	d95b      	bls.n	80072d8 <_ZN17CStartBeginScreen6UpdateEh+0x100>
				SSD1306_GotoXY(20, 45);
 8007220:	212d      	movs	r1, #45	; 0x2d
 8007222:	2014      	movs	r0, #20
 8007224:	f001 fa22 	bl	800866c <SSD1306_GotoXY>
				SSD1306_Puts(cPressAnyKeyBlank, &Font_7x10,
 8007228:	2201      	movs	r2, #1
 800722a:	4948      	ldr	r1, [pc, #288]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 800722c:	4849      	ldr	r0, [pc, #292]	; (8007354 <_ZN17CStartBeginScreen6UpdateEh+0x17c>)
 800722e:	f001 fab3 	bl	8008798 <SSD1306_Puts>
						SSD1306_COLOR_WHITE);
				SSD1306_UpdateScreen();
 8007232:	f001 f977 	bl	8008524 <SSD1306_UpdateScreen>
				m_count = 0;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	715a      	strb	r2, [r3, #5]
 800723c:	e04c      	b.n	80072d8 <_ZN17CStartBeginScreen6UpdateEh+0x100>
			}
		}
	} else {
		m_count++;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795b      	ldrb	r3, [r3, #5]
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	715a      	strb	r2, [r3, #5]
		if (m_count == 32) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	795b      	ldrb	r3, [r3, #5]
 800724e:	2b20      	cmp	r3, #32
 8007250:	d10b      	bne.n	800726a <_ZN17CStartBeginScreen6UpdateEh+0x92>
			SSD1306_GotoXY(0, 45);
 8007252:	212d      	movs	r1, #45	; 0x2d
 8007254:	2000      	movs	r0, #0
 8007256:	f001 fa09 	bl	800866c <SSD1306_GotoXY>
			SSD1306_Puts(cPressEnter, &Font_7x10, SSD1306_COLOR_WHITE);
 800725a:	2201      	movs	r2, #1
 800725c:	493b      	ldr	r1, [pc, #236]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 800725e:	483e      	ldr	r0, [pc, #248]	; (8007358 <_ZN17CStartBeginScreen6UpdateEh+0x180>)
 8007260:	f001 fa9a 	bl	8008798 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8007264:	f001 f95e 	bl	8008524 <SSD1306_UpdateScreen>
 8007268:	e011      	b.n	800728e <_ZN17CStartBeginScreen6UpdateEh+0xb6>
		} else {
			if (m_count >= 64) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	795b      	ldrb	r3, [r3, #5]
 800726e:	2b3f      	cmp	r3, #63	; 0x3f
 8007270:	d90d      	bls.n	800728e <_ZN17CStartBeginScreen6UpdateEh+0xb6>
				SSD1306_GotoXY(0, 45);
 8007272:	212d      	movs	r1, #45	; 0x2d
 8007274:	2000      	movs	r0, #0
 8007276:	f001 f9f9 	bl	800866c <SSD1306_GotoXY>
				SSD1306_Puts(cPressEnterBlank, &Font_7x10,
 800727a:	2201      	movs	r2, #1
 800727c:	4933      	ldr	r1, [pc, #204]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 800727e:	4837      	ldr	r0, [pc, #220]	; (800735c <_ZN17CStartBeginScreen6UpdateEh+0x184>)
 8007280:	f001 fa8a 	bl	8008798 <SSD1306_Puts>
						SSD1306_COLOR_WHITE);
				SSD1306_UpdateScreen();
 8007284:	f001 f94e 	bl	8008524 <SSD1306_UpdateScreen>
				m_count = 0;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	715a      	strb	r2, [r3, #5]
			}
		}
		if (bNew) {
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <_ZN17CStartBeginScreen6UpdateEh+0x100>
			char Str[8];
			sprintf(Str,"%4.2f",ds18_sensors[dev_index[/*2*/0]].temp );
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <_ZN17CStartBeginScreen6UpdateEh+0x188>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	4a32      	ldr	r2, [pc, #200]	; (8007364 <_ZN17CStartBeginScreen6UpdateEh+0x18c>)
 800729c:	460b      	mov	r3, r1
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	440b      	add	r3, r1
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	3310      	adds	r3, #16
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7f9 f8bc 	bl	8000428 <__aeabi_f2d>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	f107 0018 	add.w	r0, r7, #24
 80072b8:	492b      	ldr	r1, [pc, #172]	; (8007368 <_ZN17CStartBeginScreen6UpdateEh+0x190>)
 80072ba:	f002 fdd5 	bl	8009e68 <siprintf>
			SSD1306_GotoXY (7+21+21,9);
 80072be:	2109      	movs	r1, #9
 80072c0:	2031      	movs	r0, #49	; 0x31
 80072c2:	f001 f9d3 	bl	800866c <SSD1306_GotoXY>
			SSD1306_Puts (Str, &Font_7x10, SSD1306_COLOR_WHITE);
 80072c6:	f107 0318 	add.w	r3, r7, #24
 80072ca:	2201      	movs	r2, #1
 80072cc:	491f      	ldr	r1, [pc, #124]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fa62 	bl	8008798 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80072d4:	f001 f926 	bl	8008524 <SSD1306_UpdateScreen>

		}
	}
	if((m_count)==1){
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	795b      	ldrb	r3, [r3, #5]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d12a      	bne.n	8007336 <_ZN17CStartBeginScreen6UpdateEh+0x15e>
		char Str[16];
		SSD1306_GotoXY (7,29);
 80072e0:	211d      	movs	r1, #29
 80072e2:	2007      	movs	r0, #7
 80072e4:	f001 f9c2 	bl	800866c <SSD1306_GotoXY>
		sprintf(Str, "%.2f'C %.2fmm    ", BME280_ReadTemperature(),
 80072e8:	f7fe feae 	bl	8006048 <BME280_ReadTemperature>
 80072ec:	4603      	mov	r3, r0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f89a 	bl	8000428 <__aeabi_f2d>
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
						BME280_ReadPressure() * 0.000750063755f);
 80072f8:	f7fe fef8 	bl	80060ec <BME280_ReadPressure>
 80072fc:	4603      	mov	r3, r0
 80072fe:	491b      	ldr	r1, [pc, #108]	; (800736c <_ZN17CStartBeginScreen6UpdateEh+0x194>)
 8007300:	4618      	mov	r0, r3
 8007302:	f7f9 fd1f 	bl	8000d44 <__aeabi_fmul>
 8007306:	4603      	mov	r3, r0
		sprintf(Str, "%.2f'C %.2fmm    ", BME280_ReadTemperature(),
 8007308:	4618      	mov	r0, r3
 800730a:	f7f9 f88d 	bl	8000428 <__aeabi_f2d>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	f107 0008 	add.w	r0, r7, #8
 8007316:	e9cd 2300 	strd	r2, r3, [sp]
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	4914      	ldr	r1, [pc, #80]	; (8007370 <_ZN17CStartBeginScreen6UpdateEh+0x198>)
 8007320:	f002 fda2 	bl	8009e68 <siprintf>
		SSD1306_Puts (Str, &Font_7x10, SSD1306_COLOR_WHITE);
 8007324:	f107 0308 	add.w	r3, r7, #8
 8007328:	2201      	movs	r2, #1
 800732a:	4908      	ldr	r1, [pc, #32]	; (800734c <_ZN17CStartBeginScreen6UpdateEh+0x174>)
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fa33 	bl	8008798 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8007332:	f001 f8f7 	bl	8008524 <SSD1306_UpdateScreen>
	}
	if (bNew)
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <_ZN17CStartBeginScreen6UpdateEh+0x16c>
		DisplayLedTEMP();
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff faca 	bl	80068d8 <_ZN7CScreen14DisplayLedTEMPEv>
};
 8007344:	bf00      	nop
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bdb0      	pop	{r4, r5, r7, pc}
 800734c:	200000e0 	.word	0x200000e0
 8007350:	2000001c 	.word	0x2000001c
 8007354:	2000002c 	.word	0x2000002c
 8007358:	200000b0 	.word	0x200000b0
 800735c:	200000c4 	.word	0x200000c4
 8007360:	200000dc 	.word	0x200000dc
 8007364:	20000748 	.word	0x20000748
 8007368:	0800c0ec 	.word	0x0800c0ec
 800736c:	3a449fed 	.word	0x3a449fed
 8007370:	0800c0f4 	.word	0x0800c0f4

08007374 <_Z11TM1638_Initv>:
uint8_t  tm1638_keys;
SPI_HandleTypeDef *pSPI=&hspi2;

void TM1638WriteBuff();

void TM1638_Init(){
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
	tm1638_keys=0;
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <_Z11TM1638_Initv+0x4c>)
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
	memset(tm1638_buff,0x00,16);
 800737e:	2210      	movs	r2, #16
 8007380:	2100      	movs	r1, #0
 8007382:	4810      	ldr	r0, [pc, #64]	; (80073c4 <_Z11TM1638_Initv+0x50>)
 8007384:	f002 f80e 	bl	80093a4 <memset>
	tm1638_command=0x8f;
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <_Z11TM1638_Initv+0x54>)
 800738a:	228f      	movs	r2, #143	; 0x8f
 800738c:	701a      	strb	r2, [r3, #0]
	CS_L;
 800738e:	2200      	movs	r2, #0
 8007390:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007394:	480d      	ldr	r0, [pc, #52]	; (80073cc <_Z11TM1638_Initv+0x58>)
 8007396:	f7fa fcdf 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 800739a:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <_Z11TM1638_Initv+0x5c>)
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80073a2:	2201      	movs	r2, #1
 80073a4:	4908      	ldr	r1, [pc, #32]	; (80073c8 <_Z11TM1638_Initv+0x54>)
 80073a6:	f7fc fba0 	bl	8003aea <HAL_SPI_Transmit>
	CS_H;
 80073aa:	2201      	movs	r2, #1
 80073ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073b0:	4806      	ldr	r0, [pc, #24]	; (80073cc <_Z11TM1638_Initv+0x58>)
 80073b2:	f7fa fcd1 	bl	8001d58 <HAL_GPIO_WritePin>
	TM1638WriteBuff();
 80073b6:	f000 f867 	bl	8007488 <_Z15TM1638WriteBuffv>
};
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000326 	.word	0x20000326
 80073c4:	20000314 	.word	0x20000314
 80073c8:	20000324 	.word	0x20000324
 80073cc:	40010c00 	.word	0x40010c00
 80073d0:	200000d8 	.word	0x200000d8

080073d4 <_Z10TM1638_Ledhh>:

void TM1638_Led(uint8_t num, uint8_t value){
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	460a      	mov	r2, r1
 80073de:	71fb      	strb	r3, [r7, #7]
 80073e0:	4613      	mov	r3, r2
 80073e2:	71bb      	strb	r3, [r7, #6]
	if(num>7)
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	2b07      	cmp	r3, #7
 80073e8:	d80b      	bhi.n	8007402 <_Z10TM1638_Ledhh+0x2e>
		return;
	tm1638_buff[1+num*2]=value?0x0f:0;
 80073ea:	79bb      	ldrb	r3, [r7, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <_Z10TM1638_Ledhh+0x20>
 80073f0:	210f      	movs	r1, #15
 80073f2:	e000      	b.n	80073f6 <_Z10TM1638_Ledhh+0x22>
 80073f4:	2100      	movs	r1, #0
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	3301      	adds	r3, #1
 80073fc:	4a03      	ldr	r2, [pc, #12]	; (800740c <_Z10TM1638_Ledhh+0x38>)
 80073fe:	54d1      	strb	r1, [r2, r3]
 8007400:	e000      	b.n	8007404 <_Z10TM1638_Ledhh+0x30>
		return;
 8007402:	bf00      	nop
};
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	20000314 	.word	0x20000314

08007410 <_Z11TM1638_Charhh>:
void TM1638_Char(uint8_t num, uint8_t value){
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	460a      	mov	r2, r1
 800741a:	71fb      	strb	r3, [r7, #7]
 800741c:	4613      	mov	r3, r2
 800741e:	71bb      	strb	r3, [r7, #6]
	if(num>7)
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	2b07      	cmp	r3, #7
 8007424:	d805      	bhi.n	8007432 <_Z11TM1638_Charhh+0x22>
		return;
	tm1638_buff[num*2]=value;
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4904      	ldr	r1, [pc, #16]	; (800743c <_Z11TM1638_Charhh+0x2c>)
 800742c:	79ba      	ldrb	r2, [r7, #6]
 800742e:	54ca      	strb	r2, [r1, r3]
 8007430:	e000      	b.n	8007434 <_Z11TM1638_Charhh+0x24>
		return;
 8007432:	bf00      	nop
};
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	20000314 	.word	0x20000314

08007440 <_Z13TM1638_Updatev>:
void TM1638_Update(){
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
	tm1638_command=0x8f;
 8007444:	4b0d      	ldr	r3, [pc, #52]	; (800747c <_Z13TM1638_Updatev+0x3c>)
 8007446:	228f      	movs	r2, #143	; 0x8f
 8007448:	701a      	strb	r2, [r3, #0]
	CS_L;
 800744a:	2200      	movs	r2, #0
 800744c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007450:	480b      	ldr	r0, [pc, #44]	; (8007480 <_Z13TM1638_Updatev+0x40>)
 8007452:	f7fa fc81 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <_Z13TM1638_Updatev+0x44>)
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800745e:	2201      	movs	r2, #1
 8007460:	4906      	ldr	r1, [pc, #24]	; (800747c <_Z13TM1638_Updatev+0x3c>)
 8007462:	f7fc fb42 	bl	8003aea <HAL_SPI_Transmit>
	CS_H;
 8007466:	2201      	movs	r2, #1
 8007468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800746c:	4804      	ldr	r0, [pc, #16]	; (8007480 <_Z13TM1638_Updatev+0x40>)
 800746e:	f7fa fc73 	bl	8001d58 <HAL_GPIO_WritePin>
	TM1638WriteBuff();
 8007472:	f000 f809 	bl	8007488 <_Z15TM1638WriteBuffv>
};
 8007476:	bf00      	nop
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000324 	.word	0x20000324
 8007480:	40010c00 	.word	0x40010c00
 8007484:	200000d8 	.word	0x200000d8

08007488 <_Z15TM1638WriteBuffv>:

void TM1638WriteBuff(){
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
	tm1638_command=0x40;
 800748c:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <_Z15TM1638WriteBuffv+0x74>)
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	701a      	strb	r2, [r3, #0]
	tm1638_addr=0xc0;
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <_Z15TM1638WriteBuffv+0x78>)
 8007494:	22c0      	movs	r2, #192	; 0xc0
 8007496:	701a      	strb	r2, [r3, #0]
	CS_L;
 8007498:	2200      	movs	r2, #0
 800749a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800749e:	4819      	ldr	r0, [pc, #100]	; (8007504 <_Z15TM1638WriteBuffv+0x7c>)
 80074a0:	f7fa fc5a 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 80074a4:	4b18      	ldr	r3, [pc, #96]	; (8007508 <_Z15TM1638WriteBuffv+0x80>)
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80074ac:	2201      	movs	r2, #1
 80074ae:	4913      	ldr	r1, [pc, #76]	; (80074fc <_Z15TM1638WriteBuffv+0x74>)
 80074b0:	f7fc fb1b 	bl	8003aea <HAL_SPI_Transmit>
	CS_H;
 80074b4:	2201      	movs	r2, #1
 80074b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074ba:	4812      	ldr	r0, [pc, #72]	; (8007504 <_Z15TM1638WriteBuffv+0x7c>)
 80074bc:	f7fa fc4c 	bl	8001d58 <HAL_GPIO_WritePin>

	CS_L;
 80074c0:	2200      	movs	r2, #0
 80074c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074c6:	480f      	ldr	r0, [pc, #60]	; (8007504 <_Z15TM1638WriteBuffv+0x7c>)
 80074c8:	f7fa fc46 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_addr,1,500);
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <_Z15TM1638WriteBuffv+0x80>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80074d4:	2201      	movs	r2, #1
 80074d6:	490a      	ldr	r1, [pc, #40]	; (8007500 <_Z15TM1638WriteBuffv+0x78>)
 80074d8:	f7fc fb07 	bl	8003aea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pSPI,tm1638_buff,16,500);
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <_Z15TM1638WriteBuffv+0x80>)
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80074e4:	2210      	movs	r2, #16
 80074e6:	4909      	ldr	r1, [pc, #36]	; (800750c <_Z15TM1638WriteBuffv+0x84>)
 80074e8:	f7fc faff 	bl	8003aea <HAL_SPI_Transmit>

	CS_H;
 80074ec:	2201      	movs	r2, #1
 80074ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074f2:	4804      	ldr	r0, [pc, #16]	; (8007504 <_Z15TM1638WriteBuffv+0x7c>)
 80074f4:	f7fa fc30 	bl	8001d58 <HAL_GPIO_WritePin>



};
 80074f8:	bf00      	nop
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000324 	.word	0x20000324
 8007500:	20000325 	.word	0x20000325
 8007504:	40010c00 	.word	0x40010c00
 8007508:	200000d8 	.word	0x200000d8
 800750c:	20000314 	.word	0x20000314

08007510 <_Z14TM1638_ReadKeyv>:
uint16_t TM1638_ReadKey(){
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
	uint8_t keys=0;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4];
	tm1638_command=0x42;
 800751a:	4b38      	ldr	r3, [pc, #224]	; (80075fc <_Z14TM1638_ReadKeyv+0xec>)
 800751c:	2242      	movs	r2, #66	; 0x42
 800751e:	701a      	strb	r2, [r3, #0]
	CS_L;
 8007520:	2200      	movs	r2, #0
 8007522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007526:	4836      	ldr	r0, [pc, #216]	; (8007600 <_Z14TM1638_ReadKeyv+0xf0>)
 8007528:	f7fa fc16 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 800752c:	4b35      	ldr	r3, [pc, #212]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007534:	2201      	movs	r2, #1
 8007536:	4931      	ldr	r1, [pc, #196]	; (80075fc <_Z14TM1638_ReadKeyv+0xec>)
 8007538:	f7fc fad7 	bl	8003aea <HAL_SPI_Transmit>
	pSPI->Instance->CR1 &= ~SPI_CR1_BIDIOE;
 800753c:	4b31      	ldr	r3, [pc, #196]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800754e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive(pSPI,data,4,500);
 8007550:	4b2c      	ldr	r3, [pc, #176]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	1d39      	adds	r1, r7, #4
 8007556:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800755a:	2204      	movs	r2, #4
 800755c:	f7fc fbf9 	bl	8003d52 <HAL_SPI_Receive>
	pSPI->Instance->CR1 |= SPI_CR1_BIDIOE;
 8007560:	4b28      	ldr	r3, [pc, #160]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	4b26      	ldr	r3, [pc, #152]	; (8007604 <_Z14TM1638_ReadKeyv+0xf4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007572:	601a      	str	r2, [r3, #0]
	CS_H;
 8007574:	2201      	movs	r2, #1
 8007576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800757a:	4821      	ldr	r0, [pc, #132]	; (8007600 <_Z14TM1638_ReadKeyv+0xf0>)
 800757c:	f7fa fbec 	bl	8001d58 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++)
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b03      	cmp	r3, #3
 8007588:	dc12      	bgt.n	80075b0 <_Z14TM1638_ReadKeyv+0xa0>
		keys |= (data[i]&0x11)<<i;
 800758a:	1d3a      	adds	r2, r7, #4
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 0211 	and.w	r2, r3, #17
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	b25a      	sxtb	r2, r3
 800759e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<4;i++)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	3301      	adds	r3, #1
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	e7e9      	b.n	8007584 <_Z14TM1638_ReadKeyv+0x74>
	if(keys==tm1638_keys){
 80075b0:	4b15      	ldr	r3, [pc, #84]	; (8007608 <_Z14TM1638_ReadKeyv+0xf8>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	7bfa      	ldrb	r2, [r7, #15]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d101      	bne.n	80075be <_Z14TM1638_ReadKeyv+0xae>
		return 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e01a      	b.n	80075f4 <_Z14TM1638_ReadKeyv+0xe4>
	}

		data[0]=(keys^tm1638_keys)&keys;
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <_Z14TM1638_ReadKeyv+0xf8>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	4013      	ands	r3, r2
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	713b      	strb	r3, [r7, #4]
		data[1]=(keys^tm1638_keys)&tm1638_keys;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <_Z14TM1638_ReadKeyv+0xf8>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	4013      	ands	r3, r2
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	717b      	strb	r3, [r7, #5]
	    tm1638_keys=keys;
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <_Z14TM1638_ReadKeyv+0xf8>)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	7013      	strb	r3, [r2, #0]
	    return (data[1]<<8)|data[0];
 80075e4:	797b      	ldrb	r3, [r7, #5]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	b21a      	sxth	r2, r3
 80075ea:	793b      	ldrb	r3, [r7, #4]
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b21b      	sxth	r3, r3
 80075f2:	b29b      	uxth	r3, r3


};
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000324 	.word	0x20000324
 8007600:	40010c00 	.word	0x40010c00
 8007604:	200000d8 	.word	0x200000d8
 8007608:	20000326 	.word	0x20000326

0800760c <ds18b20_tconvert>:
uint8_t owdevices = 0;
//uint32_t ow_tickstart=0;
//static uint8_t curr_device=0xff;//devices index

void ds18b20_tconvert(uint8_t LSB, uint8_t MSB,owdevice_t *owdevices_)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	603a      	str	r2, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
 8007618:	460b      	mov	r3, r1
 800761a:	71bb      	strb	r3, [r7, #6]
    //float data;

    uint16_t temperature;

    temperature = LSB | (MSB << 8);
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	b21a      	sxth	r2, r3
 8007620:	79bb      	ldrb	r3, [r7, #6]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	b21b      	sxth	r3, r3
 8007626:	4313      	orrs	r3, r2
 8007628:	b21b      	sxth	r3, r3
 800762a:	81fb      	strh	r3, [r7, #14]
    if(temperature==0xffff){
 800762c:	89fb      	ldrh	r3, [r7, #14]
 800762e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007632:	4293      	cmp	r3, r2
 8007634:	d112      	bne.n	800765c <ds18b20_tconvert+0x50>
    	if(owdevices_->bError<5)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	7d1b      	ldrb	r3, [r3, #20]
 800763a:	2b04      	cmp	r3, #4
 800763c:	d805      	bhi.n	800764a <ds18b20_tconvert+0x3e>
    	  owdevices_->bError++;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	7d1b      	ldrb	r3, [r3, #20]
 8007642:	3301      	adds	r3, #1
 8007644:	b2da      	uxtb	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	751a      	strb	r2, [r3, #20]
    	if(owdevices_->bError>=5)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	7d1b      	ldrb	r3, [r3, #20]
 800764e:	2b04      	cmp	r3, #4
 8007650:	f240 808b 	bls.w	800776a <ds18b20_tconvert+0x15e>
    	  owdevices_->itemp=0x79505000;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	4a47      	ldr	r2, [pc, #284]	; (8007774 <ds18b20_tconvert+0x168>)
 8007658:	60da      	str	r2, [r3, #12]
    	return;
 800765a:	e086      	b.n	800776a <ds18b20_tconvert+0x15e>
    }
    owdevices_->bError=0;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2200      	movs	r2, #0
 8007660:	751a      	strb	r2, [r3, #20]
    owdevices_->itemp=0;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2200      	movs	r2, #0
 8007666:	60da      	str	r2, [r3, #12]
	if (temperature & 0x8000) {
 8007668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800766c:	2b00      	cmp	r3, #0
 800766e:	da22      	bge.n	80076b6 <ds18b20_tconvert+0xaa>
		temperature = ~temperature + 1;
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	425b      	negs	r3, r3
 8007674:	81fb      	strh	r3, [r7, #14]
		owdevices_->itemp=digitToSegment[0x10];
 8007676:	4b40      	ldr	r3, [pc, #256]	; (8007778 <ds18b20_tconvert+0x16c>)
 8007678:	7c1b      	ldrb	r3, [r3, #16]
 800767a:	461a      	mov	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	60da      	str	r2, [r3, #12]
		owdevices_->temp = 0.0 - (temperature / 16.0);
 8007680:	89fb      	ldrh	r3, [r7, #14]
 8007682:	4618      	mov	r0, r3
 8007684:	f7f8 febe 	bl	8000404 <__aeabi_i2d>
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	4b3b      	ldr	r3, [pc, #236]	; (800777c <ds18b20_tconvert+0x170>)
 800768e:	f7f9 f84d 	bl	800072c <__aeabi_ddiv>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	f04f 0000 	mov.w	r0, #0
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	f7f8 fd63 	bl	8000168 <__aeabi_dsub>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4610      	mov	r0, r2
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7f9 f9ed 	bl	8000a88 <__aeabi_d2f>
 80076ae:	4602      	mov	r2, r0
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	611a      	str	r2, [r3, #16]
 80076b4:	e01e      	b.n	80076f4 <ds18b20_tconvert+0xe8>
       // return data;
	}
	else{
	owdevices_->temp = temperature / 16.0;
 80076b6:	89fb      	ldrh	r3, [r7, #14]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7f8 fea3 	bl	8000404 <__aeabi_i2d>
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	4b2e      	ldr	r3, [pc, #184]	; (800777c <ds18b20_tconvert+0x170>)
 80076c4:	f7f9 f832 	bl	800072c <__aeabi_ddiv>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4610      	mov	r0, r2
 80076ce:	4619      	mov	r1, r3
 80076d0:	f7f9 f9da 	bl	8000a88 <__aeabi_d2f>
 80076d4:	4602      	mov	r2, r0
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	611a      	str	r2, [r3, #16]
	  if(temperature>1599){
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076e0:	d308      	bcc.n	80076f4 <ds18b20_tconvert+0xe8>
		owdevices_->itemp=digitToSegment[0x1];
 80076e2:	4b25      	ldr	r3, [pc, #148]	; (8007778 <ds18b20_tconvert+0x16c>)
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	461a      	mov	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	60da      	str	r2, [r3, #12]
		temperature-=1600;
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80076f2:	81fb      	strh	r3, [r7, #14]
	  }
	}

	owdevices_->itemp=(owdevices_->itemp<<8)+digitToSegment[temperature / 160];
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	89fa      	ldrh	r2, [r7, #14]
 80076fc:	4920      	ldr	r1, [pc, #128]	; (8007780 <ds18b20_tconvert+0x174>)
 80076fe:	fba1 1202 	umull	r1, r2, r1, r2
 8007702:	09d2      	lsrs	r2, r2, #7
 8007704:	b292      	uxth	r2, r2
 8007706:	4611      	mov	r1, r2
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <ds18b20_tconvert+0x16c>)
 800770a:	5c52      	ldrb	r2, [r2, r1]
 800770c:	441a      	add	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	60da      	str	r2, [r3, #12]
	temperature%=160;
 8007712:	89fa      	ldrh	r2, [r7, #14]
 8007714:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <ds18b20_tconvert+0x174>)
 8007716:	fba3 1302 	umull	r1, r3, r3, r2
 800771a:	09d9      	lsrs	r1, r3, #7
 800771c:	460b      	mov	r3, r1
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	015b      	lsls	r3, r3, #5
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	81fb      	strh	r3, [r7, #14]
	owdevices_->itemp=(owdevices_->itemp<<8)+(digitToSegment[temperature >>4]|0x80);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	89fa      	ldrh	r2, [r7, #14]
 8007730:	0912      	lsrs	r2, r2, #4
 8007732:	b292      	uxth	r2, r2
 8007734:	4611      	mov	r1, r2
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <ds18b20_tconvert+0x16c>)
 8007738:	5c52      	ldrb	r2, [r2, r1]
 800773a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	441a      	add	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	60da      	str	r2, [r3, #12]
	temperature&=0xf;
 8007746:	89fb      	ldrh	r3, [r7, #14]
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	81fb      	strh	r3, [r7, #14]
	owdevices_->itemp=(owdevices_->itemp<<8)+digitToSegment[(temperature* 5)>>3];
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	0219      	lsls	r1, r3, #8
 8007754:	89fa      	ldrh	r2, [r7, #14]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	10db      	asrs	r3, r3, #3
 800775e:	4a06      	ldr	r2, [pc, #24]	; (8007778 <ds18b20_tconvert+0x16c>)
 8007760:	5cd3      	ldrb	r3, [r2, r3]
 8007762:	18ca      	adds	r2, r1, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e000      	b.n	800776c <ds18b20_tconvert+0x160>
    	return;
 800776a:	bf00      	nop

    //return data ;
}
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	79505000 	.word	0x79505000
 8007778:	0800c194 	.word	0x0800c194
 800777c:	40300000 	.word	0x40300000
 8007780:	cccccccd 	.word	0xcccccccd

08007784 <ds18b20_start_convert>:
uint8_t ds18b20_start_convert()
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	_OW_Reset();
 800778a:	f000 fd71 	bl	8008270 <_OW_Reset>
    buff[0]=0xcc;
 800778e:	23cc      	movs	r3, #204	; 0xcc
 8007790:	713b      	strb	r3, [r7, #4]
    buff[1]=0x44;
 8007792:	2344      	movs	r3, #68	; 0x44
 8007794:	717b      	strb	r3, [r7, #5]
    buff[0]=_OW_SwapByte(buff[0]);
 8007796:	793b      	ldrb	r3, [r7, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fdc5 	bl	8008328 <_OW_SwapByte>
 800779e:	4603      	mov	r3, r0
 80077a0:	713b      	strb	r3, [r7, #4]
    buff[1]=_OW_SwapByte(buff[1]);
 80077a2:	797b      	ldrb	r3, [r7, #5]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fdbf 	bl	8008328 <_OW_SwapByte>
 80077aa:	4603      	mov	r3, r0
 80077ac:	717b      	strb	r3, [r7, #5]
    return 0;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <ds18b20_get_temp>:

void ds18b20_get_temp(uint8_t dev_id)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	71fb      	strb	r3, [r7, #7]

	uint8_t buff[12];
	_OW_Reset();
 80077c2:	f000 fd55 	bl	8008270 <_OW_Reset>
    buff[0]=0x55;
 80077c6:	2355      	movs	r3, #85	; 0x55
 80077c8:	723b      	strb	r3, [r7, #8]
    memcpy(&buff[1], ds18_sensors[dev_id].rom_code, 8);
 80077ca:	79fa      	ldrb	r2, [r7, #7]
 80077cc:	4613      	mov	r3, r2
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <ds18b20_get_temp+0x8c>)
 80077d6:	1899      	adds	r1, r3, r2
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	3301      	adds	r3, #1
 80077de:	2208      	movs	r2, #8
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 fdd1 	bl	8009388 <memcpy>
	buff[9]=0xbe;
 80077e6:	23be      	movs	r3, #190	; 0xbe
 80077e8:	747b      	strb	r3, [r7, #17]
    buff[10]=0xff;
 80077ea:	23ff      	movs	r3, #255	; 0xff
 80077ec:	74bb      	strb	r3, [r7, #18]
	buff[11]=0xff;
 80077ee:	23ff      	movs	r3, #255	; 0xff
 80077f0:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<12;i++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e012      	b.n	800781e <ds18b20_get_temp+0x66>
	  buff[i]=_OW_SwapByte(buff[i]);
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	4413      	add	r3, r2
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd90 	bl	8008328 <_OW_SwapByte>
 8007808:	4603      	mov	r3, r0
 800780a:	4619      	mov	r1, r3
 800780c:	f107 0208 	add.w	r2, r7, #8
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4413      	add	r3, r2
 8007814:	460a      	mov	r2, r1
 8007816:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<12;i++)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3301      	adds	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b0b      	cmp	r3, #11
 8007822:	dde9      	ble.n	80077f8 <ds18b20_get_temp+0x40>
	ds18b20_tconvert(buff[10], buff[11],&ds18_sensors[dev_id]);
 8007824:	7cb8      	ldrb	r0, [r7, #18]
 8007826:	7cf9      	ldrb	r1, [r7, #19]
 8007828:	79fa      	ldrb	r2, [r7, #7]
 800782a:	4613      	mov	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	4a04      	ldr	r2, [pc, #16]	; (8007844 <ds18b20_get_temp+0x8c>)
 8007834:	4413      	add	r3, r2
 8007836:	461a      	mov	r2, r3
 8007838:	f7ff fee8 	bl	800760c <ds18b20_tconvert>

}
 800783c:	bf00      	nop
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000748 	.word	0x20000748

08007848 <ds18b20_init>:

void ds18b20_init()
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	owdevices=0;
 800784e:	4b2d      	ldr	r3, [pc, #180]	; (8007904 <ds18b20_init+0xbc>)
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
    dev_index[0]=255;
 8007854:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <ds18b20_init+0xc0>)
 8007856:	22ff      	movs	r2, #255	; 0xff
 8007858:	701a      	strb	r2, [r3, #0]
    dev_index[1]=255;
 800785a:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <ds18b20_init+0xc0>)
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	705a      	strb	r2, [r3, #1]
    dev_index[2]=255;
 8007860:	4b29      	ldr	r3, [pc, #164]	; (8007908 <ds18b20_init+0xc0>)
 8007862:	22ff      	movs	r2, #255	; 0xff
 8007864:	709a      	strb	r2, [r3, #2]

	OW_Search(ds18_sensors);
 8007866:	4829      	ldr	r0, [pc, #164]	; (800790c <ds18b20_init+0xc4>)
 8007868:	f000 fbf2 	bl	8008050 <OW_Search>
	for (int i = 0; i < owdevices; i++) {
 800786c:	2300      	movs	r3, #0
 800786e:	607b      	str	r3, [r7, #4]
 8007870:	e03d      	b.n	80078ee <ds18b20_init+0xa6>
  	  if(memcmp(ds18_sensors[i].rom_code,cSensor1,8)==0)
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4a23      	ldr	r2, [pc, #140]	; (800790c <ds18b20_init+0xc4>)
 800787e:	4413      	add	r3, r2
 8007880:	2208      	movs	r2, #8
 8007882:	4923      	ldr	r1, [pc, #140]	; (8007910 <ds18b20_init+0xc8>)
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fd71 	bl	800936c <memcmp>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <ds18b20_init+0x52>
	    dev_index[0]=i;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	4b1c      	ldr	r3, [pc, #112]	; (8007908 <ds18b20_init+0xc0>)
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e026      	b.n	80078e8 <ds18b20_init+0xa0>
	  else
	  if(memcmp(ds18_sensors[i].rom_code,cSensor2,8)==0)
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	4413      	add	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <ds18b20_init+0xc4>)
 80078a6:	4413      	add	r3, r2
 80078a8:	2208      	movs	r2, #8
 80078aa:	491a      	ldr	r1, [pc, #104]	; (8007914 <ds18b20_init+0xcc>)
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fd5d 	bl	800936c <memcmp>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <ds18b20_init+0x7a>
	    dev_index[1]=i;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <ds18b20_init+0xc0>)
 80078be:	705a      	strb	r2, [r3, #1]
 80078c0:	e012      	b.n	80078e8 <ds18b20_init+0xa0>
	  else
	  if(memcmp(ds18_sensors[i].rom_code,cSensor3,8)==0)
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	4413      	add	r3, r2
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	4a0f      	ldr	r2, [pc, #60]	; (800790c <ds18b20_init+0xc4>)
 80078ce:	4413      	add	r3, r2
 80078d0:	2208      	movs	r2, #8
 80078d2:	4911      	ldr	r1, [pc, #68]	; (8007918 <ds18b20_init+0xd0>)
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fd49 	bl	800936c <memcmp>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <ds18b20_init+0xa0>
	    dev_index[2]=i;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	4b08      	ldr	r3, [pc, #32]	; (8007908 <ds18b20_init+0xc0>)
 80078e6:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < owdevices; i++) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3301      	adds	r3, #1
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <ds18b20_init+0xbc>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4293      	cmp	r3, r2
 80078f8:	dbbb      	blt.n	8007872 <ds18b20_init+0x2a>
    }

};
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000327 	.word	0x20000327
 8007908:	200000dc 	.word	0x200000dc
 800790c:	20000748 	.word	0x20000748
 8007910:	0800c1a8 	.word	0x0800c1a8
 8007914:	0800c1b8 	.word	0x0800c1b8
 8007918:	0800c1b0 	.word	0x0800c1b0

0800791c <__NVIC_SetPriority>:
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792c:	2b00      	cmp	r3, #0
 800792e:	db0a      	blt.n	8007946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	490c      	ldr	r1, [pc, #48]	; (8007968 <__NVIC_SetPriority+0x4c>)
 8007936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	440b      	add	r3, r1
 8007940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007944:	e00a      	b.n	800795c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4908      	ldr	r1, [pc, #32]	; (800796c <__NVIC_SetPriority+0x50>)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	3b04      	subs	r3, #4
 8007954:	0112      	lsls	r2, r2, #4
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	440b      	add	r3, r1
 800795a:	761a      	strb	r2, [r3, #24]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	e000e100 	.word	0xe000e100
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  }
  if (htim->Instance==TIM4) //check if the interrupt comes from TIM1
    {
	  GetDeviceData();
    }*/
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
	...

08007984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007988:	f7f9 fce0 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800798c:	f000 f82c 	bl	80079e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007990:	f000 fa20 	bl	8007dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007994:	f000 f9f8 	bl	8007d88 <MX_DMA_Init>
  MX_I2C1_Init();
 8007998:	f000 f86c 	bl	8007a74 <MX_I2C1_Init>
  MX_TIM1_Init();
 800799c:	f000 f8d0 	bl	8007b40 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80079a0:	f000 f9c8 	bl	8007d34 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80079a4:	f000 f978 	bl	8007c98 <MX_TIM4_Init>
  MX_SPI2_Init();
 80079a8:	f000 f892 	bl	8007ad0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80079ac:	f000 fcf2 	bl	8008394 <SSD1306_Init>

  NVIC_SetPriority(TIM4_IRQn, 15);
 80079b0:	210f      	movs	r1, #15
 80079b2:	201e      	movs	r0, #30
 80079b4:	f7ff ffb2 	bl	800791c <__NVIC_SetPriority>



  BME280_Init();
 80079b8:	f7fe fdb4 	bl	8006524 <BME280_Init>
  ds18b20_init();
 80079bc:	f7ff ff44 	bl	8007848 <ds18b20_init>
 //
  HAL_TIM_Base_Start_IT(&htim1);
 80079c0:	4807      	ldr	r0, [pc, #28]	; (80079e0 <main+0x5c>)
 80079c2:	f7fc fd76 	bl	80044b2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80079c6:	4807      	ldr	r0, [pc, #28]	; (80079e4 <main+0x60>)
 80079c8:	f7fc fd73 	bl	80044b2 <HAL_TIM_Base_Start_IT>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80079cc:	2100      	movs	r1, #0
 80079ce:	4804      	ldr	r0, [pc, #16]	; (80079e0 <main+0x5c>)
 80079d0:	f7fc fdc6 	bl	8004560 <HAL_TIM_OC_Start_IT>
  //HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);

  MainLoopInit();
 80079d4:	f7fe fe10 	bl	80065f8 <MainLoopInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  MainLoopRun();
 80079d8:	f7fe fe2e 	bl	8006638 <MainLoopRun>
 80079dc:	e7fc      	b.n	80079d8 <main+0x54>
 80079de:	bf00      	nop
 80079e0:	20000934 	.word	0x20000934
 80079e4:	2000085c 	.word	0x2000085c

080079e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	; 0x40
 80079ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	2228      	movs	r2, #40	; 0x28
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fcd4 	bl	80093a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	605a      	str	r2, [r3, #4]
 8007a04:	609a      	str	r2, [r3, #8]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a14:	2300      	movs	r3, #0
 8007a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a2c:	f107 0318 	add.w	r3, r7, #24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fb fbdf 	bl	80031f4 <HAL_RCC_OscConfig>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007a3c:	f000 fa50 	bl	8007ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a40:	230f      	movs	r3, #15
 8007a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a44:	2302      	movs	r3, #2
 8007a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fb fe4a 	bl	80036f4 <HAL_RCC_ClockConfig>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007a66:	f000 fa3b 	bl	8007ee0 <Error_Handler>
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3740      	adds	r7, #64	; 0x40
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a7a:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <MX_I2C1_Init+0x54>)
 8007a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a80:	4a12      	ldr	r2, [pc, #72]	; (8007acc <MX_I2C1_Init+0x58>)
 8007a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007a8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a90:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007aa4:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007ab0:	4804      	ldr	r0, [pc, #16]	; (8007ac4 <MX_I2C1_Init+0x50>)
 8007ab2:	f7fa f969 	bl	8001d88 <HAL_I2C_Init>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007abc:	f000 fa10 	bl	8007ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	2000089c 	.word	0x2000089c
 8007ac8:	40005400 	.word	0x40005400
 8007acc:	00061a80 	.word	0x00061a80

08007ad0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007ad4:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007ad6:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <MX_SPI2_Init+0x6c>)
 8007ad8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ada:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ae0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007ae4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007ae8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007aea:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007af0:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007af2:	2202      	movs	r2, #2
 8007af4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b06:	2228      	movs	r2, #40	; 0x28
 8007b08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b0c:	2280      	movs	r2, #128	; 0x80
 8007b0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b16:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b1e:	220a      	movs	r2, #10
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007b22:	4805      	ldr	r0, [pc, #20]	; (8007b38 <MX_SPI2_Init+0x68>)
 8007b24:	f7fb ff80 	bl	8003a28 <HAL_SPI_Init>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007b2e:	f000 f9d7 	bl	8007ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000804 	.word	0x20000804
 8007b3c:	40003800 	.word	0x40003800

08007b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b096      	sub	sp, #88	; 0x58
 8007b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	609a      	str	r2, [r3, #8]
 8007b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	609a      	str	r2, [r3, #8]
 8007b6a:	60da      	str	r2, [r3, #12]
 8007b6c:	611a      	str	r2, [r3, #16]
 8007b6e:	615a      	str	r2, [r3, #20]
 8007b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007b72:	1d3b      	adds	r3, r7, #4
 8007b74:	2220      	movs	r2, #32
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 fc13 	bl	80093a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007b7e:	4b44      	ldr	r3, [pc, #272]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007b80:	4a44      	ldr	r2, [pc, #272]	; (8007c94 <MX_TIM1_Init+0x154>)
 8007b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8007b84:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007b86:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b8c:	4b40      	ldr	r3, [pc, #256]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8007b92:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007b94:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8007b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007bac:	4838      	ldr	r0, [pc, #224]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007bae:	f7fc fc55 	bl	800445c <HAL_TIM_Base_Init>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007bb8:	f000 f992 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4831      	ldr	r0, [pc, #196]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007bca:	f7fc feef 	bl	80049ac <HAL_TIM_ConfigClockSource>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8007bd4:	f000 f984 	bl	8007ee0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8007bd8:	482d      	ldr	r0, [pc, #180]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007bda:	f7fc fc8d 	bl	80044f8 <HAL_TIM_OC_Init>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8007be4:	f000 f97c 	bl	8007ee0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8007be8:	2108      	movs	r1, #8
 8007bea:	4829      	ldr	r0, [pc, #164]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007bec:	f7fc fd30 	bl	8004650 <HAL_TIM_OnePulse_Init>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8007bf6:	f000 f973 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007c02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c06:	4619      	mov	r1, r3
 8007c08:	4821      	ldr	r0, [pc, #132]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007c0a:	f7fd fa5b 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8007c14:	f000 f964 	bl	8007ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25000;
 8007c1c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8007c22:	2302      	movs	r3, #2
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007c26:	2300      	movs	r3, #0
 8007c28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4814      	ldr	r0, [pc, #80]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007c40:	f7fc fe54 	bl	80048ec <HAL_TIM_OC_ConfigChannel>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8007c4a:	f000 f949 	bl	8007ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007c6c:	1d3b      	adds	r3, r7, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4807      	ldr	r0, [pc, #28]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007c72:	f7fd fa6b 	bl	800514c <HAL_TIMEx_ConfigBreakDeadTime>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8007c7c:	f000 f930 	bl	8007ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007c80:	4803      	ldr	r0, [pc, #12]	; (8007c90 <MX_TIM1_Init+0x150>)
 8007c82:	f001 f8cf 	bl	8008e24 <HAL_TIM_MspPostInit>

}
 8007c86:	bf00      	nop
 8007c88:	3758      	adds	r7, #88	; 0x58
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000934 	.word	0x20000934
 8007c94:	40012c00 	.word	0x40012c00

08007c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c9e:	f107 0308 	add.w	r3, r7, #8
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	605a      	str	r2, [r3, #4]
 8007ca8:	609a      	str	r2, [r3, #8]
 8007caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cac:	463b      	mov	r3, r7
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007cb4:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <MX_TIM4_Init+0x98>)
 8007cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8007cba:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cbc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007cc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8007cc8:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cca:	f242 720f 	movw	r2, #9999	; 0x270f
 8007cce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cd6:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007cdc:	4813      	ldr	r0, [pc, #76]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cde:	f7fc fbbd 	bl	800445c <HAL_TIM_Base_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8007ce8:	f000 f8fa 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	480c      	ldr	r0, [pc, #48]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007cfa:	f7fc fe57 	bl	80049ac <HAL_TIM_ConfigClockSource>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8007d04:	f000 f8ec 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007d10:	463b      	mov	r3, r7
 8007d12:	4619      	mov	r1, r3
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <MX_TIM4_Init+0x94>)
 8007d16:	f7fd f9d5 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8007d20:	f000 f8de 	bl	8007ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	2000085c 	.word	0x2000085c
 8007d30:	40000800 	.word	0x40000800

08007d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007d38:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d3a:	4a12      	ldr	r2, [pc, #72]	; (8007d84 <MX_USART2_UART_Init+0x50>)
 8007d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d46:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d58:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d5a:	220c      	movs	r2, #12
 8007d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8007d6a:	4805      	ldr	r0, [pc, #20]	; (8007d80 <MX_USART2_UART_Init+0x4c>)
 8007d6c:	f7fd fa51 	bl	8005212 <HAL_HalfDuplex_Init>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007d76:	f000 f8b3 	bl	8007ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000974 	.word	0x20000974
 8007d84:	40004400 	.word	0x40004400

08007d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <MX_DMA_Init+0x48>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	4a0f      	ldr	r2, [pc, #60]	; (8007dd0 <MX_DMA_Init+0x48>)
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	6153      	str	r3, [r2, #20]
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <MX_DMA_Init+0x48>)
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	2010      	movs	r0, #16
 8007dac:	f7f9 fc2b 	bl	8001606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007db0:	2010      	movs	r0, #16
 8007db2:	f7f9 fc44 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	2011      	movs	r0, #17
 8007dbc:	f7f9 fc23 	bl	8001606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007dc0:	2011      	movs	r0, #17
 8007dc2:	f7f9 fc3c 	bl	800163e <HAL_NVIC_EnableIRQ>

}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40021000 	.word	0x40021000

08007dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dda:	f107 0310 	add.w	r3, r7, #16
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	609a      	str	r2, [r3, #8]
 8007de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007de8:	4b39      	ldr	r3, [pc, #228]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	4a38      	ldr	r2, [pc, #224]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007dee:	f043 0310 	orr.w	r3, r3, #16
 8007df2:	6193      	str	r3, [r2, #24]
 8007df4:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e00:	4b33      	ldr	r3, [pc, #204]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	4a32      	ldr	r2, [pc, #200]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e06:	f043 0320 	orr.w	r3, r3, #32
 8007e0a:	6193      	str	r3, [r2, #24]
 8007e0c:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e18:	4b2d      	ldr	r3, [pc, #180]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	4a2c      	ldr	r2, [pc, #176]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e1e:	f043 0304 	orr.w	r3, r3, #4
 8007e22:	6193      	str	r3, [r2, #24]
 8007e24:	4b2a      	ldr	r3, [pc, #168]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e30:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e36:	f043 0308 	orr.w	r3, r3, #8
 8007e3a:	6193      	str	r3, [r2, #24]
 8007e3c:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <MX_GPIO_Init+0xfc>)
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e4e:	4821      	ldr	r0, [pc, #132]	; (8007ed4 <MX_GPIO_Init+0x100>)
 8007e50:	f7f9 ff82 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8007e54:	2200      	movs	r2, #0
 8007e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e5a:	481f      	ldr	r0, [pc, #124]	; (8007ed8 <MX_GPIO_Init+0x104>)
 8007e5c:	f7f9 ff7c 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e66:	481d      	ldr	r0, [pc, #116]	; (8007edc <MX_GPIO_Init+0x108>)
 8007e68:	f7f9 ff76 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e72:	2301      	movs	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e7e:	f107 0310 	add.w	r3, r7, #16
 8007e82:	4619      	mov	r1, r3
 8007e84:	4813      	ldr	r0, [pc, #76]	; (8007ed4 <MX_GPIO_Init+0x100>)
 8007e86:	f7f9 fde3 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e9c:	f107 0310 	add.w	r3, r7, #16
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	480d      	ldr	r0, [pc, #52]	; (8007ed8 <MX_GPIO_Init+0x104>)
 8007ea4:	f7f9 fdd4 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eba:	f107 0310 	add.w	r3, r7, #16
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4806      	ldr	r0, [pc, #24]	; (8007edc <MX_GPIO_Init+0x108>)
 8007ec2:	f7f9 fdc5 	bl	8001a50 <HAL_GPIO_Init>

}
 8007ec6:	bf00      	nop
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	40011000 	.word	0x40011000
 8007ed8:	40010c00 	.word	0x40010c00
 8007edc:	40010800 	.word	0x40010800

08007ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <ds18b20_crc8>:
static uint8_t data[16];
static uint8_t data_len;
static uint8_t current_pos;*/


uint8_t ds18b20_crc8(uint8_t *addr, uint8_t len) {
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8007efc:	e022      	b.n	8007f44 <ds18b20_crc8+0x58>
		inbyte = *addr++;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8007f08:	2308      	movs	r3, #8
 8007f0a:	737b      	strb	r3, [r7, #13]
 8007f0c:	e017      	b.n	8007f3e <ds18b20_crc8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	4053      	eors	r3, r2
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8007f22:	7b3b      	ldrb	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <ds18b20_crc8+0x46>
				crc ^= 0x8C;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8007f38:	7b7b      	ldrb	r3, [r7, #13]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	737b      	strb	r3, [r7, #13]
 8007f3e:	7b7b      	ldrb	r3, [r7, #13]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e4      	bne.n	8007f0e <ds18b20_crc8+0x22>
	while (len--) {
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	1e5a      	subs	r2, r3, #1
 8007f48:	70fa      	strb	r2, [r7, #3]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1d7      	bne.n	8007efe <ds18b20_crc8+0x12>
		}
	}
	return crc;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <OW_toBits>:

static void OW_toBits(uint8_t ow_byte, uint8_t *ow_bits) {
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	4603      	mov	r3, r0
 8007f62:	6039      	str	r1, [r7, #0]
 8007f64:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e014      	b.n	8007f96 <OW_toBits+0x3c>
		if (ow_byte & 0x01) {
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <OW_toBits+0x24>
			*ow_bits = OW_1;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	22ff      	movs	r2, #255	; 0xff
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e002      	b.n	8007f84 <OW_toBits+0x2a>
		} else {
			*ow_bits = OW_0;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
		}
		ow_bits++;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	603b      	str	r3, [r7, #0]
		ow_byte = ow_byte >> 1;
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3301      	adds	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b07      	cmp	r3, #7
 8007f9a:	d9e7      	bls.n	8007f6c <OW_toBits+0x12>
	}
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bc80      	pop	{r7}
 8007fa6:	4770      	bx	lr

08007fa8 <OW_toByte>:

static uint8_t OW_toByte(uint8_t *ow_bits) {
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	uint8_t ow_byte, i;
	ow_byte = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73bb      	strb	r3, [r7, #14]
 8007fb8:	e010      	b.n	8007fdc <OW_toByte+0x34>
		ow_byte = ow_byte >> 1;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
		if (*ow_bits == OW_1) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2bff      	cmp	r3, #255	; 0xff
 8007fc6:	d103      	bne.n	8007fd0 <OW_toByte+0x28>
			ow_byte |= 0x80;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fce:	73fb      	strb	r3, [r7, #15]
		}

		ow_bits++;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	73bb      	strb	r3, [r7, #14]
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	d9eb      	bls.n	8007fba <OW_toByte+0x12>
	}
	return ow_byte;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
	...

08007ff0 <OW_SendBits>:





uint8_t OW_SendBits(uint8_t data) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t d=data?0xff:0;
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <OW_SendBits+0x14>
 8008000:	23ff      	movs	r3, #255	; 0xff
 8008002:	e000      	b.n	8008006 <OW_SendBits+0x16>
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,&d,1,100);
 8008008:	f107 010f 	add.w	r1, r7, #15
 800800c:	2364      	movs	r3, #100	; 0x64
 800800e:	2201      	movs	r2, #1
 8008010:	4807      	ldr	r0, [pc, #28]	; (8008030 <OW_SendBits+0x40>)
 8008012:	f7fd f953 	bl	80052bc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2,&d,1,100);
 8008016:	f107 010f 	add.w	r1, r7, #15
 800801a:	2364      	movs	r3, #100	; 0x64
 800801c:	2201      	movs	r2, #1
 800801e:	4804      	ldr	r0, [pc, #16]	; (8008030 <OW_SendBits+0x40>)
 8008020:	f7fd f9e5 	bl	80053ee <HAL_UART_Receive>
    return d;
 8008024:	7bfb      	ldrb	r3, [r7, #15]


}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000974 	.word	0x20000974

08008034 <OW_ReadBit>:

uint8_t OW_ReadBit(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0


    if(OW_SendBits(1) == 0xff) {
 8008038:	2001      	movs	r0, #1
 800803a:	f7ff ffd9 	bl	8007ff0 <OW_SendBits>
 800803e:	4603      	mov	r3, r0
 8008040:	2bff      	cmp	r3, #255	; 0xff
 8008042:	d101      	bne.n	8008048 <OW_ReadBit+0x14>
        return 1;
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <OW_ReadBit+0x16>
    }
    else {
        return 0;
 8008048:	2300      	movs	r3, #0
    }
}
 800804a:	4618      	mov	r0, r3
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <OW_Search>:


uint8_t OW_Search(owdevice_t *owdevices_) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	uint8_t LastDeviceFlag = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	77fb      	strb	r3, [r7, #31]
	uint8_t LastDiscrepancy =0;
 800805c:	2300      	movs	r3, #0
 800805e:	77bb      	strb	r3, [r7, #30]
	uint8_t ROM_NO[8];
	while (1) {
		uint8_t search_result = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	777b      	strb	r3, [r7, #29]
		_OW_Reset();
 8008064:	f000 f904 	bl	8008270 <_OW_Reset>
		_OW_SwapByte(OW_CMD_SEARCH);
 8008068:	20f0      	movs	r0, #240	; 0xf0
 800806a:	f000 f95d 	bl	8008328 <_OW_SwapByte>
		{
			uint8_t id_bit_number = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	773b      	strb	r3, [r7, #28]
			uint8_t last_zero = 0, rom_byte_number = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	76fb      	strb	r3, [r7, #27]
 8008076:	2300      	movs	r3, #0
 8008078:	76bb      	strb	r3, [r7, #26]
			uint8_t id_bit, cmp_id_bit;
			uint8_t rom_byte_mask = 1, search_direction;
 800807a:	2301      	movs	r3, #1
 800807c:	767b      	strb	r3, [r7, #25]
			if (!LastDeviceFlag) {
 800807e:	7ffb      	ldrb	r3, [r7, #31]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 80b6 	bne.w	80081f2 <OW_Search+0x1a2>

				while (hdma_usart2_rx.State == HAL_DMA_STATE_BUSY)
 8008086:	bf00      	nop
 8008088:	4b77      	ldr	r3, [pc, #476]	; (8008268 <OW_Search+0x218>)
 800808a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800808e:	2b02      	cmp	r3, #2
 8008090:	d0fa      	beq.n	8008088 <OW_Search+0x38>
					;
				// loop to do the search
				do {
					// read a bit and its complement
					id_bit = OW_ReadBit();
 8008092:	f7ff ffcf 	bl	8008034 <OW_ReadBit>
 8008096:	4603      	mov	r3, r0
 8008098:	74fb      	strb	r3, [r7, #19]
					cmp_id_bit = OW_ReadBit();
 800809a:	f7ff ffcb 	bl	8008034 <OW_ReadBit>
 800809e:	4603      	mov	r3, r0
 80080a0:	74bb      	strb	r3, [r7, #18]

					// check for no devices on 1-wire
					if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80080a2:	7cfb      	ldrb	r3, [r7, #19]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d102      	bne.n	80080ae <OW_Search+0x5e>
 80080a8:	7cbb      	ldrb	r3, [r7, #18]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d063      	beq.n	8008176 <OW_Search+0x126>
						break;
					} else {
						// all devices coupled have 0 or 1
						if (id_bit != cmp_id_bit) {
 80080ae:	7cfa      	ldrb	r2, [r7, #19]
 80080b0:	7cbb      	ldrb	r3, [r7, #18]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d002      	beq.n	80080bc <OW_Search+0x6c>
							search_direction = id_bit; // bit write value for search
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	763b      	strb	r3, [r7, #24]
 80080ba:	e020      	b.n	80080fe <OW_Search+0xae>
						} else {
							// if this discrepancy if before the Last Discrepancy
							// on a previous next then pick the same as last time
							if (id_bit_number < LastDiscrepancy) {
 80080bc:	7f3a      	ldrb	r2, [r7, #28]
 80080be:	7fbb      	ldrb	r3, [r7, #30]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d20f      	bcs.n	80080e4 <OW_Search+0x94>
								search_direction = ((ROM_NO[rom_byte_number]
 80080c4:	7ebb      	ldrb	r3, [r7, #26]
 80080c6:	f107 0220 	add.w	r2, r7, #32
 80080ca:	4413      	add	r3, r2
 80080cc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
										& rom_byte_mask) > 0);
 80080d0:	7e7b      	ldrb	r3, [r7, #25]
 80080d2:	4013      	ands	r3, r2
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
								search_direction = ((ROM_NO[rom_byte_number]
 80080e0:	763b      	strb	r3, [r7, #24]
 80080e2:	e007      	b.n	80080f4 <OW_Search+0xa4>
							} else {
								// if equal to last pick 1, if not then pick 0
								search_direction = (id_bit_number
										== LastDiscrepancy);
 80080e4:	7f3a      	ldrb	r2, [r7, #28]
 80080e6:	7fbb      	ldrb	r3, [r7, #30]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bf0c      	ite	eq
 80080ec:	2301      	moveq	r3, #1
 80080ee:	2300      	movne	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
								search_direction = (id_bit_number
 80080f2:	763b      	strb	r3, [r7, #24]
							}

							// if 0 was picked then record its position in LastZero
							if (search_direction == 0) {
 80080f4:	7e3b      	ldrb	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <OW_Search+0xae>
								last_zero = id_bit_number;
 80080fa:	7f3b      	ldrb	r3, [r7, #28]
 80080fc:	76fb      	strb	r3, [r7, #27]
							}
						}

						// set or clear the bit in the ROM byte rom_byte_number
						// with mask rom_byte_mask
						if (search_direction == 1) {
 80080fe:	7e3b      	ldrb	r3, [r7, #24]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d10f      	bne.n	8008124 <OW_Search+0xd4>
							ROM_NO[rom_byte_number] |= rom_byte_mask;
 8008104:	7ebb      	ldrb	r3, [r7, #26]
 8008106:	f107 0220 	add.w	r2, r7, #32
 800810a:	4413      	add	r3, r2
 800810c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8008110:	7ebb      	ldrb	r3, [r7, #26]
 8008112:	7e7a      	ldrb	r2, [r7, #25]
 8008114:	430a      	orrs	r2, r1
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	f107 0120 	add.w	r1, r7, #32
 800811c:	440b      	add	r3, r1
 800811e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8008122:	e013      	b.n	800814c <OW_Search+0xfc>
						} else {
							ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8008124:	7ebb      	ldrb	r3, [r7, #26]
 8008126:	f107 0220 	add.w	r2, r7, #32
 800812a:	4413      	add	r3, r2
 800812c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008130:	b25a      	sxtb	r2, r3
 8008132:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008136:	43db      	mvns	r3, r3
 8008138:	b25b      	sxtb	r3, r3
 800813a:	4013      	ands	r3, r2
 800813c:	b25a      	sxtb	r2, r3
 800813e:	7ebb      	ldrb	r3, [r7, #26]
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	f107 0120 	add.w	r1, r7, #32
 8008146:	440b      	add	r3, r1
 8008148:	f803 2c18 	strb.w	r2, [r3, #-24]
						}

						// serial number search direction write bit
						//OW_toBits(search_direction, ow_buf);
						OW_SendBits(search_direction);
 800814c:	7e3b      	ldrb	r3, [r7, #24]
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff ff4e 	bl	8007ff0 <OW_SendBits>

						// increment the byte counter id_bit_number
						// and shift the mask rom_byte_mask
						id_bit_number++;
 8008154:	7f3b      	ldrb	r3, [r7, #28]
 8008156:	3301      	adds	r3, #1
 8008158:	773b      	strb	r3, [r7, #28]
						rom_byte_mask <<= 1;
 800815a:	7e7b      	ldrb	r3, [r7, #25]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	767b      	strb	r3, [r7, #25]

						// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
						if (rom_byte_mask == 0) {
 8008160:	7e7b      	ldrb	r3, [r7, #25]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <OW_Search+0x120>
							//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
							rom_byte_number++;
 8008166:	7ebb      	ldrb	r3, [r7, #26]
 8008168:	3301      	adds	r3, #1
 800816a:	76bb      	strb	r3, [r7, #26]
							rom_byte_mask = 1;
 800816c:	2301      	movs	r3, #1
 800816e:	767b      	strb	r3, [r7, #25]
						}
					}
				} while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 8008170:	7ebb      	ldrb	r3, [r7, #26]
 8008172:	2b07      	cmp	r3, #7
 8008174:	d98d      	bls.n	8008092 <OW_Search+0x42>

				// if the search was successful then
				if (!(id_bit_number < 65)) {
 8008176:	7f3b      	ldrb	r3, [r7, #28]
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d931      	bls.n	80081e0 <OW_Search+0x190>
					// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
					LastDiscrepancy = last_zero;
 800817c:	7efb      	ldrb	r3, [r7, #27]
 800817e:	77bb      	strb	r3, [r7, #30]

					// check for last device
					if (LastDiscrepancy == 0) {
 8008180:	7fbb      	ldrb	r3, [r7, #30]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <OW_Search+0x13a>
						LastDeviceFlag = 1;
 8008186:	2301      	movs	r3, #1
 8008188:	77fb      	strb	r3, [r7, #31]
					}

					search_result = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	777b      	strb	r3, [r7, #29]
					owdevices_[owdevices].id = owdevices;
 800818e:	4b37      	ldr	r3, [pc, #220]	; (800826c <OW_Search+0x21c>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	4613      	mov	r3, r2
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	4413      	add	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	4a32      	ldr	r2, [pc, #200]	; (800826c <OW_Search+0x21c>)
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	721a      	strb	r2, [r3, #8]
					for (int i = 0; i < 8; i++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e015      	b.n	80081da <OW_Search+0x18a>
						owdevices_[owdevices].rom_code[i] = ROM_NO[i];
 80081ae:	4b2f      	ldr	r3, [pc, #188]	; (800826c <OW_Search+0x21c>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	461a      	mov	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	441a      	add	r2, r3
 80081c2:	f107 0108 	add.w	r1, r7, #8
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	440b      	add	r3, r1
 80081ca:	7819      	ldrb	r1, [r3, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4413      	add	r3, r2
 80081d0:	460a      	mov	r2, r1
 80081d2:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 8; i++)
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	3301      	adds	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b07      	cmp	r3, #7
 80081de:	dde6      	ble.n	80081ae <OW_Search+0x15e>
					//owdevices++;
				}

				// if no device found then reset counters so next 'search' will be like a first
				if (!search_result) {
 80081e0:	7f7b      	ldrb	r3, [r7, #29]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <OW_Search+0x1a2>
					LastDiscrepancy = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	77bb      	strb	r3, [r7, #30]
					LastDeviceFlag = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	77fb      	strb	r3, [r7, #31]
					search_result = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	777b      	strb	r3, [r7, #29]
					//DeviceID = 0;
				}
			}

		}
		if (search_result) {
 80081f2:	7f7b      	ldrb	r3, [r7, #29]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d030      	beq.n	800825a <OW_Search+0x20a>
			if (ds18b20_crc8(owdevices_[owdevices].rom_code, 7)
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <OW_Search+0x21c>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	4613      	mov	r3, r2
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4413      	add	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	2107      	movs	r1, #7
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fe6c 	bl	8007eec <ds18b20_crc8>
 8008214:	4603      	mov	r3, r0
 8008216:	4619      	mov	r1, r3
					== owdevices_[owdevices].rom_code[7]) {
 8008218:	4b14      	ldr	r3, [pc, #80]	; (800826c <OW_Search+0x21c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	4613      	mov	r3, r2
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	4413      	add	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4413      	add	r3, r2
 800822c:	79db      	ldrb	r3, [r3, #7]
			if (ds18b20_crc8(owdevices_[owdevices].rom_code, 7)
 800822e:	4299      	cmp	r1, r3
 8008230:	f47f af16 	bne.w	8008060 <OW_Search+0x10>
				owdevices_[owdevices].bError=0;
 8008234:	4b0d      	ldr	r3, [pc, #52]	; (800826c <OW_Search+0x21c>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4413      	add	r3, r2
 8008248:	2200      	movs	r2, #0
 800824a:	751a      	strb	r2, [r3, #20]
				owdevices++;
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <OW_Search+0x21c>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	3301      	adds	r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <OW_Search+0x21c>)
 8008256:	701a      	strb	r2, [r3, #0]
	while (1) {
 8008258:	e702      	b.n	8008060 <OW_Search+0x10>
			}
		} else
			break;
 800825a:	bf00      	nop
	}
	return owdevices;
 800825c:	4b03      	ldr	r3, [pc, #12]	; (800826c <OW_Search+0x21c>)
 800825e:	781b      	ldrb	r3, [r3, #0]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	200007c0 	.word	0x200007c0
 800826c:	20000327 	.word	0x20000327

08008270 <_OW_Reset>:
;

void _OW_Reset(void){
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
	uint8_t ow_buf[1];
	huart2.Instance = USART2;
 8008276:	4b29      	ldr	r3, [pc, #164]	; (800831c <_OW_Reset+0xac>)
 8008278:	4a29      	ldr	r2, [pc, #164]	; (8008320 <_OW_Reset+0xb0>)
 800827a:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 800827c:	4b27      	ldr	r3, [pc, #156]	; (800831c <_OW_Reset+0xac>)
 800827e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008282:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008284:	4b25      	ldr	r3, [pc, #148]	; (800831c <_OW_Reset+0xac>)
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800828a:	4b24      	ldr	r3, [pc, #144]	; (800831c <_OW_Reset+0xac>)
 800828c:	2200      	movs	r2, #0
 800828e:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8008290:	4b22      	ldr	r3, [pc, #136]	; (800831c <_OW_Reset+0xac>)
 8008292:	2200      	movs	r2, #0
 8008294:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008296:	4b21      	ldr	r3, [pc, #132]	; (800831c <_OW_Reset+0xac>)
 8008298:	220c      	movs	r2, #12
 800829a:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800829c:	4b1f      	ldr	r3, [pc, #124]	; (800831c <_OW_Reset+0xac>)
 800829e:	2200      	movs	r2, #0
 80082a0:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80082a2:	4b1e      	ldr	r3, [pc, #120]	; (800831c <_OW_Reset+0xac>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	61da      	str	r2, [r3, #28]
    HAL_HalfDuplex_Init(&huart2);
 80082a8:	481c      	ldr	r0, [pc, #112]	; (800831c <_OW_Reset+0xac>)
 80082aa:	f7fc ffb2 	bl	8005212 <HAL_HalfDuplex_Init>

	ow_buf[0]=0xf0;
 80082ae:	23f0      	movs	r3, #240	; 0xf0
 80082b0:	713b      	strb	r3, [r7, #4]

	HAL_UART_Transmit_DMA(&huart2,ow_buf,1);
 80082b2:	1d3b      	adds	r3, r7, #4
 80082b4:	2201      	movs	r2, #1
 80082b6:	4619      	mov	r1, r3
 80082b8:	4818      	ldr	r0, [pc, #96]	; (800831c <_OW_Reset+0xac>)
 80082ba:	f7fd f93f 	bl	800553c <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart2,ow_buf,1);
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	2201      	movs	r2, #1
 80082c2:	4619      	mov	r1, r3
 80082c4:	4815      	ldr	r0, [pc, #84]	; (800831c <_OW_Reset+0xac>)
 80082c6:	f7fd f9a5 	bl	8005614 <HAL_UART_Receive_DMA>
	while(hdma_usart2_rx.State==HAL_DMA_STATE_BUSY){
 80082ca:	e002      	b.n	80082d2 <_OW_Reset+0x62>
		HAL_Delay(1);
 80082cc:	2001      	movs	r0, #1
 80082ce:	f7f9 f89f 	bl	8001410 <HAL_Delay>
	while(hdma_usart2_rx.State==HAL_DMA_STATE_BUSY){
 80082d2:	4b14      	ldr	r3, [pc, #80]	; (8008324 <_OW_Reset+0xb4>)
 80082d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d0f7      	beq.n	80082cc <_OW_Reset+0x5c>
	}
	huart2.Instance = USART2;
 80082dc:	4b0f      	ldr	r3, [pc, #60]	; (800831c <_OW_Reset+0xac>)
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <_OW_Reset+0xb0>)
 80082e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <_OW_Reset+0xac>)
 80082e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <_OW_Reset+0xac>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <_OW_Reset+0xac>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <_OW_Reset+0xac>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80082fc:	4b07      	ldr	r3, [pc, #28]	; (800831c <_OW_Reset+0xac>)
 80082fe:	220c      	movs	r2, #12
 8008300:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <_OW_Reset+0xac>)
 8008304:	2200      	movs	r2, #0
 8008306:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <_OW_Reset+0xac>)
 800830a:	2200      	movs	r2, #0
 800830c:	61da      	str	r2, [r3, #28]
	HAL_HalfDuplex_Init(&huart2);
 800830e:	4803      	ldr	r0, [pc, #12]	; (800831c <_OW_Reset+0xac>)
 8008310:	f7fc ff7f 	bl	8005212 <HAL_HalfDuplex_Init>
	//      ow_state&=~OW_STATE_RESET2;
	//      if(ow_buf[0]==0xf0){
};
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000974 	.word	0x20000974
 8008320:	40004400 	.word	0x40004400
 8008324:	200007c0 	.word	0x200007c0

08008328 <_OW_SwapByte>:
uint8_t _OW_SwapByte(uint8_t data){
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[8];
	OW_toBits(data,buff);
 8008332:	f107 020c 	add.w	r2, r7, #12
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fe0d 	bl	8007f5a <OW_toBits>
	for(int i=0;i<8;i++){
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e014      	b.n	8008370 <_OW_SwapByte+0x48>
		HAL_UART_Transmit(&huart2,&buff[i],1,100);
 8008346:	f107 020c 	add.w	r2, r7, #12
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	18d1      	adds	r1, r2, r3
 800834e:	2364      	movs	r3, #100	; 0x64
 8008350:	2201      	movs	r2, #1
 8008352:	480f      	ldr	r0, [pc, #60]	; (8008390 <_OW_SwapByte+0x68>)
 8008354:	f7fc ffb2 	bl	80052bc <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2,&buff[i],1,100);
 8008358:	f107 020c 	add.w	r2, r7, #12
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	18d1      	adds	r1, r2, r3
 8008360:	2364      	movs	r3, #100	; 0x64
 8008362:	2201      	movs	r2, #1
 8008364:	480a      	ldr	r0, [pc, #40]	; (8008390 <_OW_SwapByte+0x68>)
 8008366:	f7fd f842 	bl	80053ee <HAL_UART_Receive>
	for(int i=0;i<8;i++){
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	3301      	adds	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b07      	cmp	r3, #7
 8008374:	dde7      	ble.n	8008346 <_OW_SwapByte+0x1e>
	}
	data=OW_toByte(buff);
 8008376:	f107 030c 	add.w	r3, r7, #12
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fe14 	bl	8007fa8 <OW_toByte>
 8008380:	4603      	mov	r3, r0
 8008382:	71fb      	strb	r3, [r7, #7]
	return data;
 8008384:	79fb      	ldrb	r3, [r7, #7]
};
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000974 	.word	0x20000974

08008394 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800839a:	f000 fbd9 	bl	8008b50 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800839e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80083a2:	2201      	movs	r2, #1
 80083a4:	2178      	movs	r1, #120	; 0x78
 80083a6:	485d      	ldr	r0, [pc, #372]	; (800851c <SSD1306_Init+0x188>)
 80083a8:	f7fa fa56 	bl	8002858 <HAL_I2C_IsDeviceReady>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bf14      	ite	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	2300      	moveq	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <SSD1306_Init+0x2c>
		/* Return false */
		return 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	e0a9      	b.n	8008514 <SSD1306_Init+0x180>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80083c0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80083c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <SSD1306_Init+0x40>
		p--;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80083d2:	e7f8      	b.n	80083c6 <SSD1306_Init+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80083d4:	22ae      	movs	r2, #174	; 0xae
 80083d6:	2100      	movs	r1, #0
 80083d8:	2078      	movs	r0, #120	; 0x78
 80083da:	f000 fc13 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80083de:	2220      	movs	r2, #32
 80083e0:	2100      	movs	r1, #0
 80083e2:	2078      	movs	r0, #120	; 0x78
 80083e4:	f000 fc0e 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80083e8:	2210      	movs	r2, #16
 80083ea:	2100      	movs	r1, #0
 80083ec:	2078      	movs	r0, #120	; 0x78
 80083ee:	f000 fc09 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80083f2:	22b0      	movs	r2, #176	; 0xb0
 80083f4:	2100      	movs	r1, #0
 80083f6:	2078      	movs	r0, #120	; 0x78
 80083f8:	f000 fc04 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80083fc:	22c8      	movs	r2, #200	; 0xc8
 80083fe:	2100      	movs	r1, #0
 8008400:	2078      	movs	r0, #120	; 0x78
 8008402:	f000 fbff 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	2078      	movs	r0, #120	; 0x78
 800840c:	f000 fbfa 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8008410:	2210      	movs	r2, #16
 8008412:	2100      	movs	r1, #0
 8008414:	2078      	movs	r0, #120	; 0x78
 8008416:	f000 fbf5 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800841a:	2240      	movs	r2, #64	; 0x40
 800841c:	2100      	movs	r1, #0
 800841e:	2078      	movs	r0, #120	; 0x78
 8008420:	f000 fbf0 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8008424:	2281      	movs	r2, #129	; 0x81
 8008426:	2100      	movs	r1, #0
 8008428:	2078      	movs	r0, #120	; 0x78
 800842a:	f000 fbeb 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800842e:	22ff      	movs	r2, #255	; 0xff
 8008430:	2100      	movs	r1, #0
 8008432:	2078      	movs	r0, #120	; 0x78
 8008434:	f000 fbe6 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8008438:	22a1      	movs	r2, #161	; 0xa1
 800843a:	2100      	movs	r1, #0
 800843c:	2078      	movs	r0, #120	; 0x78
 800843e:	f000 fbe1 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8008442:	22a6      	movs	r2, #166	; 0xa6
 8008444:	2100      	movs	r1, #0
 8008446:	2078      	movs	r0, #120	; 0x78
 8008448:	f000 fbdc 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800844c:	22a8      	movs	r2, #168	; 0xa8
 800844e:	2100      	movs	r1, #0
 8008450:	2078      	movs	r0, #120	; 0x78
 8008452:	f000 fbd7 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8008456:	223f      	movs	r2, #63	; 0x3f
 8008458:	2100      	movs	r1, #0
 800845a:	2078      	movs	r0, #120	; 0x78
 800845c:	f000 fbd2 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008460:	22a4      	movs	r2, #164	; 0xa4
 8008462:	2100      	movs	r1, #0
 8008464:	2078      	movs	r0, #120	; 0x78
 8008466:	f000 fbcd 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800846a:	22d3      	movs	r2, #211	; 0xd3
 800846c:	2100      	movs	r1, #0
 800846e:	2078      	movs	r0, #120	; 0x78
 8008470:	f000 fbc8 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8008474:	2200      	movs	r2, #0
 8008476:	2100      	movs	r1, #0
 8008478:	2078      	movs	r0, #120	; 0x78
 800847a:	f000 fbc3 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800847e:	22d5      	movs	r2, #213	; 0xd5
 8008480:	2100      	movs	r1, #0
 8008482:	2078      	movs	r0, #120	; 0x78
 8008484:	f000 fbbe 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8008488:	22f0      	movs	r2, #240	; 0xf0
 800848a:	2100      	movs	r1, #0
 800848c:	2078      	movs	r0, #120	; 0x78
 800848e:	f000 fbb9 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8008492:	22d9      	movs	r2, #217	; 0xd9
 8008494:	2100      	movs	r1, #0
 8008496:	2078      	movs	r0, #120	; 0x78
 8008498:	f000 fbb4 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800849c:	2222      	movs	r2, #34	; 0x22
 800849e:	2100      	movs	r1, #0
 80084a0:	2078      	movs	r0, #120	; 0x78
 80084a2:	f000 fbaf 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80084a6:	22da      	movs	r2, #218	; 0xda
 80084a8:	2100      	movs	r1, #0
 80084aa:	2078      	movs	r0, #120	; 0x78
 80084ac:	f000 fbaa 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80084b0:	2212      	movs	r2, #18
 80084b2:	2100      	movs	r1, #0
 80084b4:	2078      	movs	r0, #120	; 0x78
 80084b6:	f000 fba5 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80084ba:	22db      	movs	r2, #219	; 0xdb
 80084bc:	2100      	movs	r1, #0
 80084be:	2078      	movs	r0, #120	; 0x78
 80084c0:	f000 fba0 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80084c4:	2220      	movs	r2, #32
 80084c6:	2100      	movs	r1, #0
 80084c8:	2078      	movs	r0, #120	; 0x78
 80084ca:	f000 fb9b 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80084ce:	228d      	movs	r2, #141	; 0x8d
 80084d0:	2100      	movs	r1, #0
 80084d2:	2078      	movs	r0, #120	; 0x78
 80084d4:	f000 fb96 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80084d8:	2214      	movs	r2, #20
 80084da:	2100      	movs	r1, #0
 80084dc:	2078      	movs	r0, #120	; 0x78
 80084de:	f000 fb91 	bl	8008c04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80084e2:	22af      	movs	r2, #175	; 0xaf
 80084e4:	2100      	movs	r1, #0
 80084e6:	2078      	movs	r0, #120	; 0x78
 80084e8:	f000 fb8c 	bl	8008c04 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80084ec:	222e      	movs	r2, #46	; 0x2e
 80084ee:	2100      	movs	r1, #0
 80084f0:	2078      	movs	r0, #120	; 0x78
 80084f2:	f000 fb87 	bl	8008c04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80084f6:	2000      	movs	r0, #0
 80084f8:	f000 f842 	bl	8008580 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80084fc:	f000 f812 	bl	8008524 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <SSD1306_Init+0x18c>)
 8008502:	2200      	movs	r2, #0
 8008504:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <SSD1306_Init+0x18c>)
 8008508:	2200      	movs	r2, #0
 800850a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800850c:	4b04      	ldr	r3, [pc, #16]	; (8008520 <SSD1306_Init+0x18c>)
 800850e:	2201      	movs	r2, #1
 8008510:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8008512:	2301      	movs	r3, #1
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000089c 	.word	0x2000089c
 8008520:	2000072c 	.word	0x2000072c

08008524 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800852a:	2300      	movs	r3, #0
 800852c:	71fb      	strb	r3, [r7, #7]
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b07      	cmp	r3, #7
 8008532:	d81e      	bhi.n	8008572 <SSD1306_UpdateScreen+0x4e>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	3b50      	subs	r3, #80	; 0x50
 8008538:	b2db      	uxtb	r3, r3
 800853a:	461a      	mov	r2, r3
 800853c:	2100      	movs	r1, #0
 800853e:	2078      	movs	r0, #120	; 0x78
 8008540:	f000 fb60 	bl	8008c04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8008544:	2200      	movs	r2, #0
 8008546:	2100      	movs	r1, #0
 8008548:	2078      	movs	r0, #120	; 0x78
 800854a:	f000 fb5b 	bl	8008c04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800854e:	2210      	movs	r2, #16
 8008550:	2100      	movs	r1, #0
 8008552:	2078      	movs	r0, #120	; 0x78
 8008554:	f000 fb56 	bl	8008c04 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	01db      	lsls	r3, r3, #7
 800855c:	4a07      	ldr	r2, [pc, #28]	; (800857c <SSD1306_UpdateScreen+0x58>)
 800855e:	441a      	add	r2, r3
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	2140      	movs	r1, #64	; 0x40
 8008564:	2078      	movs	r0, #120	; 0x78
 8008566:	f000 fb07 	bl	8008b78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	3301      	adds	r3, #1
 800856e:	71fb      	strb	r3, [r7, #7]
 8008570:	e7dd      	b.n	800852e <SSD1306_UpdateScreen+0xa>
	}
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2000032c 	.word	0x2000032c

08008580 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <SSD1306_Fill+0x14>
 8008590:	2300      	movs	r3, #0
 8008592:	e000      	b.n	8008596 <SSD1306_Fill+0x16>
 8008594:	23ff      	movs	r3, #255	; 0xff
 8008596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800859a:	4619      	mov	r1, r3
 800859c:	4803      	ldr	r0, [pc, #12]	; (80085ac <SSD1306_Fill+0x2c>)
 800859e:	f000 ff01 	bl	80093a4 <memset>
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	2000032c 	.word	0x2000032c

080085b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	80fb      	strh	r3, [r7, #6]
 80085ba:	460b      	mov	r3, r1
 80085bc:	80bb      	strh	r3, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	70fb      	strb	r3, [r7, #3]
	if (
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	2b7f      	cmp	r3, #127	; 0x7f
 80085c6:	d848      	bhi.n	800865a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80085c8:	88bb      	ldrh	r3, [r7, #4]
 80085ca:	2b3f      	cmp	r3, #63	; 0x3f
 80085cc:	d845      	bhi.n	800865a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80085ce:	4b25      	ldr	r3, [pc, #148]	; (8008664 <SSD1306_DrawPixel+0xb4>)
 80085d0:	791b      	ldrb	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bf0c      	ite	eq
 80085dc:	2301      	moveq	r3, #1
 80085de:	2300      	movne	r3, #0
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d11a      	bne.n	8008620 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	88bb      	ldrh	r3, [r7, #4]
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	b298      	uxth	r0, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	01db      	lsls	r3, r3, #7
 80085f6:	4413      	add	r3, r2
 80085f8:	4a1b      	ldr	r2, [pc, #108]	; (8008668 <SSD1306_DrawPixel+0xb8>)
 80085fa:	5cd3      	ldrb	r3, [r2, r3]
 80085fc:	b25a      	sxtb	r2, r3
 80085fe:	88bb      	ldrh	r3, [r7, #4]
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	2101      	movs	r1, #1
 8008606:	fa01 f303 	lsl.w	r3, r1, r3
 800860a:	b25b      	sxtb	r3, r3
 800860c:	4313      	orrs	r3, r2
 800860e:	b259      	sxtb	r1, r3
 8008610:	88fa      	ldrh	r2, [r7, #6]
 8008612:	4603      	mov	r3, r0
 8008614:	01db      	lsls	r3, r3, #7
 8008616:	4413      	add	r3, r2
 8008618:	b2c9      	uxtb	r1, r1
 800861a:	4a13      	ldr	r2, [pc, #76]	; (8008668 <SSD1306_DrawPixel+0xb8>)
 800861c:	54d1      	strb	r1, [r2, r3]
 800861e:	e01d      	b.n	800865c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	88bb      	ldrh	r3, [r7, #4]
 8008624:	08db      	lsrs	r3, r3, #3
 8008626:	b298      	uxth	r0, r3
 8008628:	4603      	mov	r3, r0
 800862a:	01db      	lsls	r3, r3, #7
 800862c:	4413      	add	r3, r2
 800862e:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <SSD1306_DrawPixel+0xb8>)
 8008630:	5cd3      	ldrb	r3, [r2, r3]
 8008632:	b25a      	sxtb	r2, r3
 8008634:	88bb      	ldrh	r3, [r7, #4]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2101      	movs	r1, #1
 800863c:	fa01 f303 	lsl.w	r3, r1, r3
 8008640:	b25b      	sxtb	r3, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	b25b      	sxtb	r3, r3
 8008646:	4013      	ands	r3, r2
 8008648:	b259      	sxtb	r1, r3
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	4603      	mov	r3, r0
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	4413      	add	r3, r2
 8008652:	b2c9      	uxtb	r1, r1
 8008654:	4a04      	ldr	r2, [pc, #16]	; (8008668 <SSD1306_DrawPixel+0xb8>)
 8008656:	54d1      	strb	r1, [r2, r3]
 8008658:	e000      	b.n	800865c <SSD1306_DrawPixel+0xac>
		return;
 800865a:	bf00      	nop
	}
}
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	bc80      	pop	{r7}
 8008662:	4770      	bx	lr
 8008664:	2000072c 	.word	0x2000072c
 8008668:	2000032c 	.word	0x2000032c

0800866c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	460a      	mov	r2, r1
 8008676:	80fb      	strh	r3, [r7, #6]
 8008678:	4613      	mov	r3, r2
 800867a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800867c:	4a05      	ldr	r2, [pc, #20]	; (8008694 <SSD1306_GotoXY+0x28>)
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8008682:	4a04      	ldr	r2, [pc, #16]	; (8008694 <SSD1306_GotoXY+0x28>)
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	8053      	strh	r3, [r2, #2]
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	2000072c 	.word	0x2000072c

08008698 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80086a8:	4b3a      	ldr	r3, [pc, #232]	; (8008794 <SSD1306_Putc+0xfc>)
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	4413      	add	r3, r2
	if (
 80086b4:	2b7f      	cmp	r3, #127	; 0x7f
 80086b6:	dc07      	bgt.n	80086c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80086b8:	4b36      	ldr	r3, [pc, #216]	; (8008794 <SSD1306_Putc+0xfc>)
 80086ba:	885b      	ldrh	r3, [r3, #2]
 80086bc:	461a      	mov	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80086c4:	2b3f      	cmp	r3, #63	; 0x3f
 80086c6:	dd01      	ble.n	80086cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e05e      	b.n	800878a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	461a      	mov	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	4293      	cmp	r3, r2
 80086da:	d24c      	bcs.n	8008776 <SSD1306_Putc+0xde>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	3b20      	subs	r3, #32
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	7849      	ldrb	r1, [r1, #1]
 80086e8:	fb01 f303 	mul.w	r3, r1, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	440b      	add	r3, r1
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80086fa:	2300      	movs	r3, #0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4293      	cmp	r3, r2
 8008708:	d231      	bcs.n	800876e <SSD1306_Putc+0xd6>
			if ((b << j) & 0x8000) {
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d010      	beq.n	800873c <SSD1306_Putc+0xa4>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <SSD1306_Putc+0xfc>)
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	b29b      	uxth	r3, r3
 8008722:	4413      	add	r3, r2
 8008724:	b298      	uxth	r0, r3
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <SSD1306_Putc+0xfc>)
 8008728:	885a      	ldrh	r2, [r3, #2]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	b29b      	uxth	r3, r3
 800872e:	4413      	add	r3, r2
 8008730:	b29b      	uxth	r3, r3
 8008732:	79ba      	ldrb	r2, [r7, #6]
 8008734:	4619      	mov	r1, r3
 8008736:	f7ff ff3b 	bl	80085b0 <SSD1306_DrawPixel>
 800873a:	e014      	b.n	8008766 <SSD1306_Putc+0xce>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800873c:	4b15      	ldr	r3, [pc, #84]	; (8008794 <SSD1306_Putc+0xfc>)
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	b29b      	uxth	r3, r3
 8008744:	4413      	add	r3, r2
 8008746:	b298      	uxth	r0, r3
 8008748:	4b12      	ldr	r3, [pc, #72]	; (8008794 <SSD1306_Putc+0xfc>)
 800874a:	885a      	ldrh	r2, [r3, #2]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	b29b      	uxth	r3, r3
 8008750:	4413      	add	r3, r2
 8008752:	b299      	uxth	r1, r3
 8008754:	79bb      	ldrb	r3, [r7, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bf0c      	ite	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	2300      	movne	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	f7ff ff25 	bl	80085b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	3301      	adds	r3, #1
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	e7c7      	b.n	80086fe <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3301      	adds	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e7ac      	b.n	80086d0 <SSD1306_Putc+0x38>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8008776:	4b07      	ldr	r3, [pc, #28]	; (8008794 <SSD1306_Putc+0xfc>)
 8008778:	881a      	ldrh	r2, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	4413      	add	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	4b03      	ldr	r3, [pc, #12]	; (8008794 <SSD1306_Putc+0xfc>)
 8008786:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8008788:	79fb      	ldrb	r3, [r7, #7]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000072c 	.word	0x2000072c

08008798 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4613      	mov	r3, r2
 80087a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d018      	beq.n	80087e0 <SSD1306_Puts+0x48>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	79fa      	ldrb	r2, [r7, #7]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff ff6e 	bl	8008698 <SSD1306_Putc>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <SSD1306_Puts+0x40>
			/* Return error */
			return *str;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	e005      	b.n	80087e4 <SSD1306_Puts+0x4c>
		}
		
		/* Increase string pointer */
		str++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80087de:	e7e2      	b.n	80087a6 <SSD1306_Puts+0xe>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	781b      	ldrb	r3, [r3, #0]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4623      	mov	r3, r4
 80087fc:	80fb      	strh	r3, [r7, #6]
 80087fe:	4603      	mov	r3, r0
 8008800:	80bb      	strh	r3, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	807b      	strh	r3, [r7, #2]
 8008806:	4613      	mov	r3, r2
 8008808:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	2b7f      	cmp	r3, #127	; 0x7f
 800880e:	d901      	bls.n	8008814 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8008810:	237f      	movs	r3, #127	; 0x7f
 8008812:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8008814:	887b      	ldrh	r3, [r7, #2]
 8008816:	2b7f      	cmp	r3, #127	; 0x7f
 8008818:	d901      	bls.n	800881e <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800881a:	237f      	movs	r3, #127	; 0x7f
 800881c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800881e:	88bb      	ldrh	r3, [r7, #4]
 8008820:	2b3f      	cmp	r3, #63	; 0x3f
 8008822:	d901      	bls.n	8008828 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8008824:	233f      	movs	r3, #63	; 0x3f
 8008826:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8008828:	883b      	ldrh	r3, [r7, #0]
 800882a:	2b3f      	cmp	r3, #63	; 0x3f
 800882c:	d901      	bls.n	8008832 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800882e:	233f      	movs	r3, #63	; 0x3f
 8008830:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	887b      	ldrh	r3, [r7, #2]
 8008836:	429a      	cmp	r2, r3
 8008838:	d205      	bcs.n	8008846 <SSD1306_DrawLine+0x5a>
 800883a:	887a      	ldrh	r2, [r7, #2]
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	b29b      	uxth	r3, r3
 8008842:	b21b      	sxth	r3, r3
 8008844:	e004      	b.n	8008850 <SSD1306_DrawLine+0x64>
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	b29b      	uxth	r3, r3
 800884e:	b21b      	sxth	r3, r3
 8008850:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8008852:	88ba      	ldrh	r2, [r7, #4]
 8008854:	883b      	ldrh	r3, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d205      	bcs.n	8008866 <SSD1306_DrawLine+0x7a>
 800885a:	883a      	ldrh	r2, [r7, #0]
 800885c:	88bb      	ldrh	r3, [r7, #4]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	b29b      	uxth	r3, r3
 8008862:	b21b      	sxth	r3, r3
 8008864:	e004      	b.n	8008870 <SSD1306_DrawLine+0x84>
 8008866:	88ba      	ldrh	r2, [r7, #4]
 8008868:	883b      	ldrh	r3, [r7, #0]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	b29b      	uxth	r3, r3
 800886e:	b21b      	sxth	r3, r3
 8008870:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	887b      	ldrh	r3, [r7, #2]
 8008876:	429a      	cmp	r2, r3
 8008878:	d201      	bcs.n	800887e <SSD1306_DrawLine+0x92>
 800887a:	2301      	movs	r3, #1
 800887c:	e001      	b.n	8008882 <SSD1306_DrawLine+0x96>
 800887e:	f04f 33ff 	mov.w	r3, #4294967295
 8008882:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8008884:	88ba      	ldrh	r2, [r7, #4]
 8008886:	883b      	ldrh	r3, [r7, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d201      	bcs.n	8008890 <SSD1306_DrawLine+0xa4>
 800888c:	2301      	movs	r3, #1
 800888e:	e001      	b.n	8008894 <SSD1306_DrawLine+0xa8>
 8008890:	f04f 33ff 	mov.w	r3, #4294967295
 8008894:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8008896:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800889a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	dd06      	ble.n	80088b0 <SSD1306_DrawLine+0xc4>
 80088a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088a6:	0fda      	lsrs	r2, r3, #31
 80088a8:	4413      	add	r3, r2
 80088aa:	105b      	asrs	r3, r3, #1
 80088ac:	b21b      	sxth	r3, r3
 80088ae:	e006      	b.n	80088be <SSD1306_DrawLine+0xd2>
 80088b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80088b4:	0fda      	lsrs	r2, r3, #31
 80088b6:	4413      	add	r3, r2
 80088b8:	105b      	asrs	r3, r3, #1
 80088ba:	425b      	negs	r3, r3
 80088bc:	b21b      	sxth	r3, r3
 80088be:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80088c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d128      	bne.n	800891a <SSD1306_DrawLine+0x12e>
		if (y1 < y0) {
 80088c8:	883a      	ldrh	r2, [r7, #0]
 80088ca:	88bb      	ldrh	r3, [r7, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d205      	bcs.n	80088dc <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80088d0:	883b      	ldrh	r3, [r7, #0]
 80088d2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80088d4:	88bb      	ldrh	r3, [r7, #4]
 80088d6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80088d8:	893b      	ldrh	r3, [r7, #8]
 80088da:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80088dc:	887a      	ldrh	r2, [r7, #2]
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d205      	bcs.n	80088f0 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80088e4:	887b      	ldrh	r3, [r7, #2]
 80088e6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80088ec:	893b      	ldrh	r3, [r7, #8]
 80088ee:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80088f0:	88bb      	ldrh	r3, [r7, #4]
 80088f2:	82bb      	strh	r3, [r7, #20]
 80088f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80088f8:	883b      	ldrh	r3, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	dc6b      	bgt.n	80089d6 <SSD1306_DrawLine+0x1ea>
			SSD1306_DrawPixel(x0, i, c);
 80088fe:	8ab9      	ldrh	r1, [r7, #20]
 8008900:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fe52 	bl	80085b0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800890c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008910:	b29b      	uxth	r3, r3
 8008912:	3301      	adds	r3, #1
 8008914:	b29b      	uxth	r3, r3
 8008916:	82bb      	strh	r3, [r7, #20]
 8008918:	e7ec      	b.n	80088f4 <SSD1306_DrawLine+0x108>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 800891a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d128      	bne.n	8008974 <SSD1306_DrawLine+0x188>
		if (y1 < y0) {
 8008922:	883a      	ldrh	r2, [r7, #0]
 8008924:	88bb      	ldrh	r3, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d205      	bcs.n	8008936 <SSD1306_DrawLine+0x14a>
			tmp = y1;
 800892a:	883b      	ldrh	r3, [r7, #0]
 800892c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800892e:	88bb      	ldrh	r3, [r7, #4]
 8008930:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8008932:	893b      	ldrh	r3, [r7, #8]
 8008934:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8008936:	887a      	ldrh	r2, [r7, #2]
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	429a      	cmp	r2, r3
 800893c:	d205      	bcs.n	800894a <SSD1306_DrawLine+0x15e>
			tmp = x1;
 800893e:	887b      	ldrh	r3, [r7, #2]
 8008940:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8008942:	88fb      	ldrh	r3, [r7, #6]
 8008944:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8008946:	893b      	ldrh	r3, [r7, #8]
 8008948:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	82bb      	strh	r3, [r7, #20]
 800894e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008952:	887b      	ldrh	r3, [r7, #2]
 8008954:	429a      	cmp	r2, r3
 8008956:	dc40      	bgt.n	80089da <SSD1306_DrawLine+0x1ee>
			SSD1306_DrawPixel(i, y0, c);
 8008958:	8abb      	ldrh	r3, [r7, #20]
 800895a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800895e:	88b9      	ldrh	r1, [r7, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fe25 	bl	80085b0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8008966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800896a:	b29b      	uxth	r3, r3
 800896c:	3301      	adds	r3, #1
 800896e:	b29b      	uxth	r3, r3
 8008970:	82bb      	strh	r3, [r7, #20]
 8008972:	e7ec      	b.n	800894e <SSD1306_DrawLine+0x162>
		/* Return from function */
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8008974:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008978:	88b9      	ldrh	r1, [r7, #4]
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fe17 	bl	80085b0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	887b      	ldrh	r3, [r7, #2]
 8008986:	429a      	cmp	r2, r3
 8008988:	d103      	bne.n	8008992 <SSD1306_DrawLine+0x1a6>
 800898a:	88ba      	ldrh	r2, [r7, #4]
 800898c:	883b      	ldrh	r3, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d025      	beq.n	80089de <SSD1306_DrawLine+0x1f2>
			break;
		}
		e2 = err; 
 8008992:	8afb      	ldrh	r3, [r7, #22]
 8008994:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8008996:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800899a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800899e:	425b      	negs	r3, r3
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dd08      	ble.n	80089b6 <SSD1306_DrawLine+0x1ca>
			err -= dy;
 80089a4:	8afa      	ldrh	r2, [r7, #22]
 80089a6:	8a3b      	ldrh	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80089ae:	89fa      	ldrh	r2, [r7, #14]
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	4413      	add	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80089b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80089ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	dad8      	bge.n	8008974 <SSD1306_DrawLine+0x188>
			err += dx;
 80089c2:	8afa      	ldrh	r2, [r7, #22]
 80089c4:	8a7b      	ldrh	r3, [r7, #18]
 80089c6:	4413      	add	r3, r2
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80089cc:	89ba      	ldrh	r2, [r7, #12]
 80089ce:	88bb      	ldrh	r3, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80089d4:	e7ce      	b.n	8008974 <SSD1306_DrawLine+0x188>
		return;
 80089d6:	bf00      	nop
 80089d8:	e002      	b.n	80089e0 <SSD1306_DrawLine+0x1f4>
		return;
 80089da:	bf00      	nop
 80089dc:	e000      	b.n	80089e0 <SSD1306_DrawLine+0x1f4>
			break;
 80089de:	bf00      	nop
		} 
	}
}
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}

080089e6 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80089e6:	b590      	push	{r4, r7, lr}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af02      	add	r7, sp, #8
 80089ec:	4604      	mov	r4, r0
 80089ee:	4608      	mov	r0, r1
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	4623      	mov	r3, r4
 80089f6:	80fb      	strh	r3, [r7, #6]
 80089f8:	4603      	mov	r3, r0
 80089fa:	80bb      	strh	r3, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	807b      	strh	r3, [r7, #2]
 8008a00:	4613      	mov	r3, r2
 8008a02:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b7f      	cmp	r3, #127	; 0x7f
 8008a08:	d853      	bhi.n	8008ab2 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8008a0a:	88bb      	ldrh	r3, [r7, #4]
 8008a0c:	2b3f      	cmp	r3, #63	; 0x3f
 8008a0e:	d850      	bhi.n	8008ab2 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8008a10:	88fa      	ldrh	r2, [r7, #6]
 8008a12:	887b      	ldrh	r3, [r7, #2]
 8008a14:	4413      	add	r3, r2
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	dd03      	ble.n	8008a22 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008a20:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8008a22:	88ba      	ldrh	r2, [r7, #4]
 8008a24:	883b      	ldrh	r3, [r7, #0]
 8008a26:	4413      	add	r3, r2
 8008a28:	2b3f      	cmp	r3, #63	; 0x3f
 8008a2a:	dd03      	ble.n	8008a34 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8008a2c:	88bb      	ldrh	r3, [r7, #4]
 8008a2e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008a32:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8008a34:	88fa      	ldrh	r2, [r7, #6]
 8008a36:	887b      	ldrh	r3, [r7, #2]
 8008a38:	4413      	add	r3, r2
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	88bc      	ldrh	r4, [r7, #4]
 8008a3e:	88b9      	ldrh	r1, [r7, #4]
 8008a40:	88f8      	ldrh	r0, [r7, #6]
 8008a42:	7e3b      	ldrb	r3, [r7, #24]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4623      	mov	r3, r4
 8008a48:	f7ff fed0 	bl	80087ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8008a4c:	88ba      	ldrh	r2, [r7, #4]
 8008a4e:	883b      	ldrh	r3, [r7, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	b299      	uxth	r1, r3
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	887b      	ldrh	r3, [r7, #2]
 8008a58:	4413      	add	r3, r2
 8008a5a:	b29c      	uxth	r4, r3
 8008a5c:	88ba      	ldrh	r2, [r7, #4]
 8008a5e:	883b      	ldrh	r3, [r7, #0]
 8008a60:	4413      	add	r3, r2
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	88f8      	ldrh	r0, [r7, #6]
 8008a66:	7e3b      	ldrb	r3, [r7, #24]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	f7ff febd 	bl	80087ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8008a72:	88ba      	ldrh	r2, [r7, #4]
 8008a74:	883b      	ldrh	r3, [r7, #0]
 8008a76:	4413      	add	r3, r2
 8008a78:	b29c      	uxth	r4, r3
 8008a7a:	88fa      	ldrh	r2, [r7, #6]
 8008a7c:	88b9      	ldrh	r1, [r7, #4]
 8008a7e:	88f8      	ldrh	r0, [r7, #6]
 8008a80:	7e3b      	ldrb	r3, [r7, #24]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4623      	mov	r3, r4
 8008a86:	f7ff feb1 	bl	80087ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8008a8a:	88fa      	ldrh	r2, [r7, #6]
 8008a8c:	887b      	ldrh	r3, [r7, #2]
 8008a8e:	4413      	add	r3, r2
 8008a90:	b298      	uxth	r0, r3
 8008a92:	88fa      	ldrh	r2, [r7, #6]
 8008a94:	887b      	ldrh	r3, [r7, #2]
 8008a96:	4413      	add	r3, r2
 8008a98:	b29c      	uxth	r4, r3
 8008a9a:	88ba      	ldrh	r2, [r7, #4]
 8008a9c:	883b      	ldrh	r3, [r7, #0]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	88b9      	ldrh	r1, [r7, #4]
 8008aa4:	7e3b      	ldrb	r3, [r7, #24]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	4622      	mov	r2, r4
 8008aac:	f7ff fe9e 	bl	80087ec <SSD1306_DrawLine>
 8008ab0:	e000      	b.n	8008ab4 <SSD1306_DrawRectangle+0xce>
		return;
 8008ab2:	bf00      	nop
}
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd90      	pop	{r4, r7, pc}

08008aba <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8008aba:	b590      	push	{r4, r7, lr}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af02      	add	r7, sp, #8
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4623      	mov	r3, r4
 8008aca:	80fb      	strh	r3, [r7, #6]
 8008acc:	4603      	mov	r3, r0
 8008ace:	80bb      	strh	r3, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	2b7f      	cmp	r3, #127	; 0x7f
 8008adc:	d834      	bhi.n	8008b48 <SSD1306_DrawFilledRectangle+0x8e>
		x >= SSD1306_WIDTH ||
 8008ade:	88bb      	ldrh	r3, [r7, #4]
 8008ae0:	2b3f      	cmp	r3, #63	; 0x3f
 8008ae2:	d831      	bhi.n	8008b48 <SSD1306_DrawFilledRectangle+0x8e>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8008ae4:	88fa      	ldrh	r2, [r7, #6]
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	4413      	add	r3, r2
 8008aea:	2b7f      	cmp	r3, #127	; 0x7f
 8008aec:	dd03      	ble.n	8008af6 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008af4:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8008af6:	88ba      	ldrh	r2, [r7, #4]
 8008af8:	883b      	ldrh	r3, [r7, #0]
 8008afa:	4413      	add	r3, r2
 8008afc:	2b3f      	cmp	r3, #63	; 0x3f
 8008afe:	dd03      	ble.n	8008b08 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8008b00:	88bb      	ldrh	r3, [r7, #4]
 8008b02:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008b06:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	883b      	ldrh	r3, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	dc1a      	bgt.n	8008b4a <SSD1306_DrawFilledRectangle+0x90>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	88bb      	ldrh	r3, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	b299      	uxth	r1, r3
 8008b1e:	88fa      	ldrh	r2, [r7, #6]
 8008b20:	887b      	ldrh	r3, [r7, #2]
 8008b22:	4413      	add	r3, r2
 8008b24:	b29c      	uxth	r4, r3
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	88bb      	ldrh	r3, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	88f8      	ldrh	r0, [r7, #6]
 8008b32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	f7ff fe56 	bl	80087ec <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	3301      	adds	r3, #1
 8008b44:	73fb      	strb	r3, [r7, #15]
 8008b46:	e7e1      	b.n	8008b0c <SSD1306_DrawFilledRectangle+0x52>
		return;
 8008b48:	bf00      	nop
	}
}
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd90      	pop	{r4, r7, pc}

08008b50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8008b56:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <ssd1306_I2C_Init+0x24>)
 8008b58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <ssd1306_I2C_Init+0x18>
		p--;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008b66:	e7f8      	b.n	8008b5a <ssd1306_I2C_Init+0xa>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	0003d090 	.word	0x0003d090

08008b78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b0c7      	sub	sp, #284	; 0x11c
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	4639      	mov	r1, r7
 8008b84:	600a      	str	r2, [r1, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	1dfb      	adds	r3, r7, #7
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	1dbb      	adds	r3, r7, #6
 8008b90:	4602      	mov	r2, r0
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	1d3b      	adds	r3, r7, #4
 8008b96:	460a      	mov	r2, r1
 8008b98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8008b9a:	f107 030c 	add.w	r3, r7, #12
 8008b9e:	1dba      	adds	r2, r7, #6
 8008ba0:	7812      	ldrb	r2, [r2, #0]
 8008ba2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008baa:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8008bae:	1d3b      	adds	r3, r7, #4
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	da11      	bge.n	8008bda <ssd1306_I2C_WriteMulti+0x62>
dt[i+1] = data[i];
 8008bb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008bba:	463a      	mov	r2, r7
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	441a      	add	r2, r3
 8008bc0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	7811      	ldrb	r1, [r2, #0]
 8008bc8:	f107 020c 	add.w	r2, r7, #12
 8008bcc:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8008bce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008bd8:	e7e7      	b.n	8008baa <ssd1306_I2C_WriteMulti+0x32>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8008bda:	1dfb      	adds	r3, r7, #7
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b299      	uxth	r1, r3
 8008be0:	1d3b      	adds	r3, r7, #4
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f107 020c 	add.w	r2, r7, #12
 8008bec:	200a      	movs	r0, #10
 8008bee:	9000      	str	r0, [sp, #0]
 8008bf0:	4803      	ldr	r0, [pc, #12]	; (8008c00 <ssd1306_I2C_WriteMulti+0x88>)
 8008bf2:	f7f9 f9fd 	bl	8001ff0 <HAL_I2C_Master_Transmit>
}
 8008bf6:	bf00      	nop
 8008bf8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd90      	pop	{r4, r7, pc}
 8008c00:	2000089c 	.word	0x2000089c

08008c04 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	71fb      	strb	r3, [r7, #7]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	71bb      	strb	r3, [r7, #6]
 8008c12:	4613      	mov	r3, r2
 8008c14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8008c16:	79bb      	ldrb	r3, [r7, #6]
 8008c18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8008c1a:	797b      	ldrb	r3, [r7, #5]
 8008c1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	b299      	uxth	r1, r3
 8008c22:	f107 020c 	add.w	r2, r7, #12
 8008c26:	230a      	movs	r3, #10
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	4803      	ldr	r0, [pc, #12]	; (8008c3c <ssd1306_I2C_Write+0x38>)
 8008c2e:	f7f9 f9df 	bl	8001ff0 <HAL_I2C_Master_Transmit>
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000089c 	.word	0x2000089c

08008c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c46:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	6193      	str	r3, [r2, #24]
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4a0e      	ldr	r2, [pc, #56]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c68:	61d3      	str	r3, [r2, #28]
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <HAL_MspInit+0x5c>)
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	4a04      	ldr	r2, [pc, #16]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	40010000 	.word	0x40010000

08008ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cac:	f107 0310 	add.w	r3, r7, #16
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <HAL_I2C_MspInit+0x70>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d123      	bne.n	8008d0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008cca:	f043 0308 	orr.w	r3, r3, #8
 8008cce:	6193      	str	r3, [r2, #24]
 8008cd0:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008cdc:	23c0      	movs	r3, #192	; 0xc0
 8008cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ce0:	2312      	movs	r3, #18
 8008ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ce8:	f107 0310 	add.w	r3, r7, #16
 8008cec:	4619      	mov	r1, r3
 8008cee:	480b      	ldr	r0, [pc, #44]	; (8008d1c <HAL_I2C_MspInit+0x78>)
 8008cf0:	f7f8 feae 	bl	8001a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008cf4:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cfe:	61d3      	str	r3, [r2, #28]
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <HAL_I2C_MspInit+0x74>)
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d08:	60bb      	str	r3, [r7, #8]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d0c:	bf00      	nop
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40005400 	.word	0x40005400
 8008d18:	40021000 	.word	0x40021000
 8008d1c:	40010c00 	.word	0x40010c00

08008d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d28:	f107 0310 	add.w	r3, r7, #16
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	609a      	str	r2, [r3, #8]
 8008d34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a16      	ldr	r2, [pc, #88]	; (8008d94 <HAL_SPI_MspInit+0x74>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d124      	bne.n	8008d8a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008d40:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	4a14      	ldr	r2, [pc, #80]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d4a:	61d3      	str	r3, [r2, #28]
 8008d4c:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	4a0e      	ldr	r2, [pc, #56]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d5e:	f043 0308 	orr.w	r3, r3, #8
 8008d62:	6193      	str	r3, [r2, #24]
 8008d64:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <HAL_SPI_MspInit+0x78>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	60bb      	str	r3, [r7, #8]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8008d70:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d76:	2302      	movs	r3, #2
 8008d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d7e:	f107 0310 	add.w	r3, r7, #16
 8008d82:	4619      	mov	r1, r3
 8008d84:	4805      	ldr	r0, [pc, #20]	; (8008d9c <HAL_SPI_MspInit+0x7c>)
 8008d86:	f7f8 fe63 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008d8a:	bf00      	nop
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40003800 	.word	0x40003800
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	40010c00 	.word	0x40010c00

08008da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1a      	ldr	r2, [pc, #104]	; (8008e18 <HAL_TIM_Base_MspInit+0x78>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d114      	bne.n	8008ddc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008db2:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008dbc:	6193      	str	r3, [r2, #24]
 8008dbe:	4b17      	ldr	r3, [pc, #92]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	2019      	movs	r0, #25
 8008dd0:	f7f8 fc19 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008dd4:	2019      	movs	r0, #25
 8008dd6:	f7f8 fc32 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008dda:	e018      	b.n	8008e0e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <HAL_TIM_Base_MspInit+0x80>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d113      	bne.n	8008e0e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008de6:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008dec:	f043 0304 	orr.w	r3, r3, #4
 8008df0:	61d3      	str	r3, [r2, #28]
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_TIM_Base_MspInit+0x7c>)
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	60bb      	str	r3, [r7, #8]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2100      	movs	r1, #0
 8008e02:	201e      	movs	r0, #30
 8008e04:	f7f8 fbff 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008e08:	201e      	movs	r0, #30
 8008e0a:	f7f8 fc18 	bl	800163e <HAL_NVIC_EnableIRQ>
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	40000800 	.word	0x40000800

08008e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <HAL_TIM_MspPostInit+0x5c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d118      	bne.n	8008e76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <HAL_TIM_MspPostInit+0x60>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	4a0e      	ldr	r2, [pc, #56]	; (8008e84 <HAL_TIM_MspPostInit+0x60>)
 8008e4a:	f043 0304 	orr.w	r3, r3, #4
 8008e4e:	6193      	str	r3, [r2, #24]
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <HAL_TIM_MspPostInit+0x60>)
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e62:	2302      	movs	r3, #2
 8008e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e66:	2302      	movs	r3, #2
 8008e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e6a:	f107 0310 	add.w	r3, r7, #16
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4805      	ldr	r0, [pc, #20]	; (8008e88 <HAL_TIM_MspPostInit+0x64>)
 8008e72:	f7f8 fded 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008e76:	bf00      	nop
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40021000 	.word	0x40021000
 8008e88:	40010800 	.word	0x40010800

08008e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e94:	f107 0310 	add.w	r3, r7, #16
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	609a      	str	r2, [r3, #8]
 8008ea0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a3b      	ldr	r2, [pc, #236]	; (8008f94 <HAL_UART_MspInit+0x108>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d16f      	bne.n	8008f8c <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008eac:	4b3a      	ldr	r3, [pc, #232]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	4a39      	ldr	r2, [pc, #228]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eb6:	61d3      	str	r3, [r2, #28]
 8008eb8:	4b37      	ldr	r3, [pc, #220]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ec4:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	4a33      	ldr	r2, [pc, #204]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008eca:	f043 0304 	orr.w	r3, r3, #4
 8008ece:	6193      	str	r3, [r2, #24]
 8008ed0:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <HAL_UART_MspInit+0x10c>)
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008edc:	2304      	movs	r3, #4
 8008ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ee0:	2312      	movs	r3, #18
 8008ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee8:	f107 0310 	add.w	r3, r7, #16
 8008eec:	4619      	mov	r1, r3
 8008eee:	482b      	ldr	r0, [pc, #172]	; (8008f9c <HAL_UART_MspInit+0x110>)
 8008ef0:	f7f8 fdae 	bl	8001a50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008ef4:	4b2a      	ldr	r3, [pc, #168]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008ef6:	4a2b      	ldr	r2, [pc, #172]	; (8008fa4 <HAL_UART_MspInit+0x118>)
 8008ef8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008efa:	4b29      	ldr	r3, [pc, #164]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008efc:	2210      	movs	r2, #16
 8008efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f00:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f06:	4b26      	ldr	r3, [pc, #152]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f0c:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008f18:	4b21      	ldr	r3, [pc, #132]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008f1e:	4b20      	ldr	r3, [pc, #128]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008f24:	481e      	ldr	r0, [pc, #120]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f26:	f7f8 fba5 	bl	8001674 <HAL_DMA_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8008f30:	f7fe ffd6 	bl	8007ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f38:	631a      	str	r2, [r3, #48]	; 0x30
 8008f3a:	4a19      	ldr	r2, [pc, #100]	; (8008fa0 <HAL_UART_MspInit+0x114>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f42:	4a1a      	ldr	r2, [pc, #104]	; (8008fac <HAL_UART_MspInit+0x120>)
 8008f44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f46:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f4c:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f54:	2280      	movs	r2, #128	; 0x80
 8008f56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f58:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008f64:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008f70:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f72:	f7f8 fb7f 	bl	8001674 <HAL_DMA_Init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8008f7c:	f7fe ffb0 	bl	8007ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a09      	ldr	r2, [pc, #36]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f84:	635a      	str	r2, [r3, #52]	; 0x34
 8008f86:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <HAL_UART_MspInit+0x11c>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008f8c:	bf00      	nop
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	40004400 	.word	0x40004400
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40010800 	.word	0x40010800
 8008fa0:	200008f0 	.word	0x200008f0
 8008fa4:	40020080 	.word	0x40020080
 8008fa8:	200007c0 	.word	0x200007c0
 8008fac:	4002006c 	.word	0x4002006c

08008fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fc0:	e7fe      	b.n	8008fc0 <HardFault_Handler+0x4>

08008fc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fc6:	e7fe      	b.n	8008fc6 <MemManage_Handler+0x4>

08008fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fcc:	e7fe      	b.n	8008fcc <BusFault_Handler+0x4>

08008fce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fd2:	e7fe      	b.n	8008fd2 <UsageFault_Handler+0x4>

08008fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ff0:	bf00      	nop
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr

08008ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timer1++;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <SysTick_Handler+0x18>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3301      	adds	r3, #1
 8009002:	4a03      	ldr	r2, [pc, #12]	; (8009010 <SysTick_Handler+0x18>)
 8009004:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009006:	f7f8 f9e7 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800900a:	bf00      	nop
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000328 	.word	0x20000328

08009014 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009018:	4802      	ldr	r0, [pc, #8]	; (8009024 <DMA1_Channel6_IRQHandler+0x10>)
 800901a:	f7f8 fbe5 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	200007c0 	.word	0x200007c0

08009028 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800902c:	4802      	ldr	r0, [pc, #8]	; (8009038 <DMA1_Channel7_IRQHandler+0x10>)
 800902e:	f7f8 fbdb 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200008f0 	.word	0x200008f0

0800903c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009040:	4802      	ldr	r0, [pc, #8]	; (800904c <TIM1_UP_IRQHandler+0x10>)
 8009042:	f7fb fb4a 	bl	80046da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000934 	.word	0x20000934

08009050 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009054:	4802      	ldr	r0, [pc, #8]	; (8009060 <TIM4_IRQHandler+0x10>)
 8009056:	f7fb fb40 	bl	80046da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000085c 	.word	0x2000085c

08009064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
	return 1;
 8009068:	2301      	movs	r3, #1
}
 800906a:	4618      	mov	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr

08009072 <_kill>:

int _kill(int pid, int sig)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800907c:	f000 f93c 	bl	80092f8 <__errno>
 8009080:	4603      	mov	r3, r0
 8009082:	2216      	movs	r2, #22
 8009084:	601a      	str	r2, [r3, #0]
	return -1;
 8009086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <_exit>:

void _exit (int status)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800909a:	f04f 31ff 	mov.w	r1, #4294967295
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ffe7 	bl	8009072 <_kill>
	while (1) {}		/* Make sure we hang here */
 80090a4:	e7fe      	b.n	80090a4 <_exit+0x12>

080090a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	60f8      	str	r0, [r7, #12]
 80090ae:	60b9      	str	r1, [r7, #8]
 80090b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e00a      	b.n	80090ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80090b8:	f3af 8000 	nop.w
 80090bc:	4601      	mov	r1, r0
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	60ba      	str	r2, [r7, #8]
 80090c4:	b2ca      	uxtb	r2, r1
 80090c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3301      	adds	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	dbf0      	blt.n	80090b8 <_read+0x12>
	}

return len;
 80090d6:	687b      	ldr	r3, [r7, #4]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e009      	b.n	8009106 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	60ba      	str	r2, [r7, #8]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	3301      	adds	r3, #1
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	429a      	cmp	r2, r3
 800910c:	dbf1      	blt.n	80090f2 <_write+0x12>
	}
	return len;
 800910e:	687b      	ldr	r3, [r7, #4]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <_close>:

int _close(int file)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	return -1;
 8009120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr

0800912e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800913e:	605a      	str	r2, [r3, #4]
	return 0;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <_isatty>:

int _isatty(int file)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	return 1;
 8009154:	2301      	movs	r3, #1
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
	return 0;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <_sbrk+0x50>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d102      	bne.n	800918e <_sbrk+0x16>
		heap_end = &end;
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <_sbrk+0x50>)
 800918a:	4a10      	ldr	r2, [pc, #64]	; (80091cc <_sbrk+0x54>)
 800918c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <_sbrk+0x50>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <_sbrk+0x50>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4413      	add	r3, r2
 800919c:	466a      	mov	r2, sp
 800919e:	4293      	cmp	r3, r2
 80091a0:	d907      	bls.n	80091b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80091a2:	f000 f8a9 	bl	80092f8 <__errno>
 80091a6:	4603      	mov	r3, r0
 80091a8:	220c      	movs	r2, #12
 80091aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80091ac:	f04f 33ff 	mov.w	r3, #4294967295
 80091b0:	e006      	b.n	80091c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <_sbrk+0x50>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	4a03      	ldr	r2, [pc, #12]	; (80091c8 <_sbrk+0x50>)
 80091bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000734 	.word	0x20000734
 80091cc:	200009c8 	.word	0x200009c8

080091d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <SystemInit+0x5c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a14      	ldr	r2, [pc, #80]	; (800922c <SystemInit+0x5c>)
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80091e0:	4b12      	ldr	r3, [pc, #72]	; (800922c <SystemInit+0x5c>)
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	4911      	ldr	r1, [pc, #68]	; (800922c <SystemInit+0x5c>)
 80091e6:	4b12      	ldr	r3, [pc, #72]	; (8009230 <SystemInit+0x60>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80091ec:	4b0f      	ldr	r3, [pc, #60]	; (800922c <SystemInit+0x5c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a0e      	ldr	r2, [pc, #56]	; (800922c <SystemInit+0x5c>)
 80091f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80091f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <SystemInit+0x5c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a0a      	ldr	r2, [pc, #40]	; (800922c <SystemInit+0x5c>)
 8009202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009206:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009208:	4b08      	ldr	r3, [pc, #32]	; (800922c <SystemInit+0x5c>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4a07      	ldr	r2, [pc, #28]	; (800922c <SystemInit+0x5c>)
 800920e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009212:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <SystemInit+0x5c>)
 8009216:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800921a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <SystemInit+0x64>)
 800921e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009222:	609a      	str	r2, [r3, #8]
#endif 
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr
 800922c:	40021000 	.word	0x40021000
 8009230:	f8ff0000 	.word	0xf8ff0000
 8009234:	e000ed00 	.word	0xe000ed00

08009238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800923a:	e003      	b.n	8009244 <LoopCopyDataInit>

0800923c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800923e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009242:	3104      	adds	r1, #4

08009244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009244:	480a      	ldr	r0, [pc, #40]	; (8009270 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009246:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800924a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800924c:	d3f6      	bcc.n	800923c <CopyDataInit>
  ldr r2, =_sbss
 800924e:	4a0a      	ldr	r2, [pc, #40]	; (8009278 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009250:	e002      	b.n	8009258 <LoopFillZerobss>

08009252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009252:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009254:	f842 3b04 	str.w	r3, [r2], #4

08009258 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800925a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800925c:	d3f9      	bcc.n	8009252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800925e:	f7ff ffb7 	bl	80091d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009262:	f000 f84f 	bl	8009304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009266:	f7fe fb8d 	bl	8007984 <main>
  bx lr
 800926a:	4770      	bx	lr
  ldr r3, =_sidata
 800926c:	0800da94 	.word	0x0800da94
  ldr r0, =_sdata
 8009270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009274:	200002c8 	.word	0x200002c8
  ldr r2, =_sbss
 8009278:	200002c8 	.word	0x200002c8
  ldr r3, = _ebss
 800927c:	200009c4 	.word	0x200009c4

08009280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009280:	e7fe      	b.n	8009280 <ADC1_2_IRQHandler>

08009282 <_ZdlPvj>:
 8009282:	f000 b814 	b.w	80092ae <_ZdlPv>

08009286 <_Znwj>:
 8009286:	2801      	cmp	r0, #1
 8009288:	bf38      	it	cc
 800928a:	2001      	movcc	r0, #1
 800928c:	b510      	push	{r4, lr}
 800928e:	4604      	mov	r4, r0
 8009290:	4620      	mov	r0, r4
 8009292:	f000 f85b 	bl	800934c <malloc>
 8009296:	b930      	cbnz	r0, 80092a6 <_Znwj+0x20>
 8009298:	f000 f81e 	bl	80092d8 <_ZSt15get_new_handlerv>
 800929c:	b908      	cbnz	r0, 80092a2 <_Znwj+0x1c>
 800929e:	f000 f823 	bl	80092e8 <abort>
 80092a2:	4780      	blx	r0
 80092a4:	e7f4      	b.n	8009290 <_Znwj+0xa>
 80092a6:	bd10      	pop	{r4, pc}

080092a8 <__cxa_pure_virtual>:
 80092a8:	b508      	push	{r3, lr}
 80092aa:	f000 f80f 	bl	80092cc <_ZSt9terminatev>

080092ae <_ZdlPv>:
 80092ae:	f000 b855 	b.w	800935c <free>

080092b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80092b2:	b508      	push	{r3, lr}
 80092b4:	4780      	blx	r0
 80092b6:	f000 f817 	bl	80092e8 <abort>
	...

080092bc <_ZSt13get_terminatev>:
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <_ZSt13get_terminatev+0xc>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	f3bf 8f5b 	dmb	ish
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	200000f4 	.word	0x200000f4

080092cc <_ZSt9terminatev>:
 80092cc:	b508      	push	{r3, lr}
 80092ce:	f7ff fff5 	bl	80092bc <_ZSt13get_terminatev>
 80092d2:	f7ff ffee 	bl	80092b2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080092d8 <_ZSt15get_new_handlerv>:
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <_ZSt15get_new_handlerv+0xc>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	f3bf 8f5b 	dmb	ish
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000738 	.word	0x20000738

080092e8 <abort>:
 80092e8:	2006      	movs	r0, #6
 80092ea:	b508      	push	{r3, lr}
 80092ec:	f000 fda0 	bl	8009e30 <raise>
 80092f0:	2001      	movs	r0, #1
 80092f2:	f7ff fece 	bl	8009092 <_exit>
	...

080092f8 <__errno>:
 80092f8:	4b01      	ldr	r3, [pc, #4]	; (8009300 <__errno+0x8>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000f8 	.word	0x200000f8

08009304 <__libc_init_array>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	2600      	movs	r6, #0
 8009308:	4d0c      	ldr	r5, [pc, #48]	; (800933c <__libc_init_array+0x38>)
 800930a:	4c0d      	ldr	r4, [pc, #52]	; (8009340 <__libc_init_array+0x3c>)
 800930c:	1b64      	subs	r4, r4, r5
 800930e:	10a4      	asrs	r4, r4, #2
 8009310:	42a6      	cmp	r6, r4
 8009312:	d109      	bne.n	8009328 <__libc_init_array+0x24>
 8009314:	f002 feca 	bl	800c0ac <_init>
 8009318:	2600      	movs	r6, #0
 800931a:	4d0a      	ldr	r5, [pc, #40]	; (8009344 <__libc_init_array+0x40>)
 800931c:	4c0a      	ldr	r4, [pc, #40]	; (8009348 <__libc_init_array+0x44>)
 800931e:	1b64      	subs	r4, r4, r5
 8009320:	10a4      	asrs	r4, r4, #2
 8009322:	42a6      	cmp	r6, r4
 8009324:	d105      	bne.n	8009332 <__libc_init_array+0x2e>
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	f855 3b04 	ldr.w	r3, [r5], #4
 800932c:	4798      	blx	r3
 800932e:	3601      	adds	r6, #1
 8009330:	e7ee      	b.n	8009310 <__libc_init_array+0xc>
 8009332:	f855 3b04 	ldr.w	r3, [r5], #4
 8009336:	4798      	blx	r3
 8009338:	3601      	adds	r6, #1
 800933a:	e7f2      	b.n	8009322 <__libc_init_array+0x1e>
 800933c:	0800da8c 	.word	0x0800da8c
 8009340:	0800da8c 	.word	0x0800da8c
 8009344:	0800da8c 	.word	0x0800da8c
 8009348:	0800da90 	.word	0x0800da90

0800934c <malloc>:
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <malloc+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f000 b87b 	b.w	800944c <_malloc_r>
 8009356:	bf00      	nop
 8009358:	200000f8 	.word	0x200000f8

0800935c <free>:
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <free+0xc>)
 800935e:	4601      	mov	r1, r0
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	f000 b827 	b.w	80093b4 <_free_r>
 8009366:	bf00      	nop
 8009368:	200000f8 	.word	0x200000f8

0800936c <memcmp>:
 800936c:	b530      	push	{r4, r5, lr}
 800936e:	2400      	movs	r4, #0
 8009370:	3901      	subs	r1, #1
 8009372:	42a2      	cmp	r2, r4
 8009374:	d101      	bne.n	800937a <memcmp+0xe>
 8009376:	2000      	movs	r0, #0
 8009378:	e005      	b.n	8009386 <memcmp+0x1a>
 800937a:	5d03      	ldrb	r3, [r0, r4]
 800937c:	3401      	adds	r4, #1
 800937e:	5d0d      	ldrb	r5, [r1, r4]
 8009380:	42ab      	cmp	r3, r5
 8009382:	d0f6      	beq.n	8009372 <memcmp+0x6>
 8009384:	1b58      	subs	r0, r3, r5
 8009386:	bd30      	pop	{r4, r5, pc}

08009388 <memcpy>:
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009390:	d100      	bne.n	8009394 <memcpy+0xc>
 8009392:	4770      	bx	lr
 8009394:	b510      	push	{r4, lr}
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	4291      	cmp	r1, r2
 800939c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093a0:	d1f9      	bne.n	8009396 <memcpy+0xe>
 80093a2:	bd10      	pop	{r4, pc}

080093a4 <memset>:
 80093a4:	4603      	mov	r3, r0
 80093a6:	4402      	add	r2, r0
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d100      	bne.n	80093ae <memset+0xa>
 80093ac:	4770      	bx	lr
 80093ae:	f803 1b01 	strb.w	r1, [r3], #1
 80093b2:	e7f9      	b.n	80093a8 <memset+0x4>

080093b4 <_free_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4605      	mov	r5, r0
 80093b8:	2900      	cmp	r1, #0
 80093ba:	d043      	beq.n	8009444 <_free_r+0x90>
 80093bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c0:	1f0c      	subs	r4, r1, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	18e4      	addlt	r4, r4, r3
 80093c8:	f001 fbfe 	bl	800abc8 <__malloc_lock>
 80093cc:	4a1e      	ldr	r2, [pc, #120]	; (8009448 <_free_r+0x94>)
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	4610      	mov	r0, r2
 80093d2:	b933      	cbnz	r3, 80093e2 <_free_r+0x2e>
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	6014      	str	r4, [r2, #0]
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093de:	f001 bbf9 	b.w	800abd4 <__malloc_unlock>
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	d90a      	bls.n	80093fc <_free_r+0x48>
 80093e6:	6821      	ldr	r1, [r4, #0]
 80093e8:	1862      	adds	r2, r4, r1
 80093ea:	4293      	cmp	r3, r2
 80093ec:	bf01      	itttt	eq
 80093ee:	681a      	ldreq	r2, [r3, #0]
 80093f0:	685b      	ldreq	r3, [r3, #4]
 80093f2:	1852      	addeq	r2, r2, r1
 80093f4:	6022      	streq	r2, [r4, #0]
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6004      	str	r4, [r0, #0]
 80093fa:	e7ed      	b.n	80093d8 <_free_r+0x24>
 80093fc:	461a      	mov	r2, r3
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	b10b      	cbz	r3, 8009406 <_free_r+0x52>
 8009402:	42a3      	cmp	r3, r4
 8009404:	d9fa      	bls.n	80093fc <_free_r+0x48>
 8009406:	6811      	ldr	r1, [r2, #0]
 8009408:	1850      	adds	r0, r2, r1
 800940a:	42a0      	cmp	r0, r4
 800940c:	d10b      	bne.n	8009426 <_free_r+0x72>
 800940e:	6820      	ldr	r0, [r4, #0]
 8009410:	4401      	add	r1, r0
 8009412:	1850      	adds	r0, r2, r1
 8009414:	4283      	cmp	r3, r0
 8009416:	6011      	str	r1, [r2, #0]
 8009418:	d1de      	bne.n	80093d8 <_free_r+0x24>
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4401      	add	r1, r0
 8009420:	6011      	str	r1, [r2, #0]
 8009422:	6053      	str	r3, [r2, #4]
 8009424:	e7d8      	b.n	80093d8 <_free_r+0x24>
 8009426:	d902      	bls.n	800942e <_free_r+0x7a>
 8009428:	230c      	movs	r3, #12
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	e7d4      	b.n	80093d8 <_free_r+0x24>
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	1821      	adds	r1, r4, r0
 8009432:	428b      	cmp	r3, r1
 8009434:	bf01      	itttt	eq
 8009436:	6819      	ldreq	r1, [r3, #0]
 8009438:	685b      	ldreq	r3, [r3, #4]
 800943a:	1809      	addeq	r1, r1, r0
 800943c:	6021      	streq	r1, [r4, #0]
 800943e:	6063      	str	r3, [r4, #4]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7c9      	b.n	80093d8 <_free_r+0x24>
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	2000073c 	.word	0x2000073c

0800944c <_malloc_r>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	1ccd      	adds	r5, r1, #3
 8009450:	f025 0503 	bic.w	r5, r5, #3
 8009454:	3508      	adds	r5, #8
 8009456:	2d0c      	cmp	r5, #12
 8009458:	bf38      	it	cc
 800945a:	250c      	movcc	r5, #12
 800945c:	2d00      	cmp	r5, #0
 800945e:	4606      	mov	r6, r0
 8009460:	db01      	blt.n	8009466 <_malloc_r+0x1a>
 8009462:	42a9      	cmp	r1, r5
 8009464:	d903      	bls.n	800946e <_malloc_r+0x22>
 8009466:	230c      	movs	r3, #12
 8009468:	6033      	str	r3, [r6, #0]
 800946a:	2000      	movs	r0, #0
 800946c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946e:	f001 fbab 	bl	800abc8 <__malloc_lock>
 8009472:	4921      	ldr	r1, [pc, #132]	; (80094f8 <_malloc_r+0xac>)
 8009474:	680a      	ldr	r2, [r1, #0]
 8009476:	4614      	mov	r4, r2
 8009478:	b99c      	cbnz	r4, 80094a2 <_malloc_r+0x56>
 800947a:	4f20      	ldr	r7, [pc, #128]	; (80094fc <_malloc_r+0xb0>)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	b923      	cbnz	r3, 800948a <_malloc_r+0x3e>
 8009480:	4621      	mov	r1, r4
 8009482:	4630      	mov	r0, r6
 8009484:	f000 fc9c 	bl	8009dc0 <_sbrk_r>
 8009488:	6038      	str	r0, [r7, #0]
 800948a:	4629      	mov	r1, r5
 800948c:	4630      	mov	r0, r6
 800948e:	f000 fc97 	bl	8009dc0 <_sbrk_r>
 8009492:	1c43      	adds	r3, r0, #1
 8009494:	d123      	bne.n	80094de <_malloc_r+0x92>
 8009496:	230c      	movs	r3, #12
 8009498:	4630      	mov	r0, r6
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f001 fb9a 	bl	800abd4 <__malloc_unlock>
 80094a0:	e7e3      	b.n	800946a <_malloc_r+0x1e>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	1b5b      	subs	r3, r3, r5
 80094a6:	d417      	bmi.n	80094d8 <_malloc_r+0x8c>
 80094a8:	2b0b      	cmp	r3, #11
 80094aa:	d903      	bls.n	80094b4 <_malloc_r+0x68>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	441c      	add	r4, r3
 80094b0:	6025      	str	r5, [r4, #0]
 80094b2:	e004      	b.n	80094be <_malloc_r+0x72>
 80094b4:	6863      	ldr	r3, [r4, #4]
 80094b6:	42a2      	cmp	r2, r4
 80094b8:	bf0c      	ite	eq
 80094ba:	600b      	streq	r3, [r1, #0]
 80094bc:	6053      	strne	r3, [r2, #4]
 80094be:	4630      	mov	r0, r6
 80094c0:	f001 fb88 	bl	800abd4 <__malloc_unlock>
 80094c4:	f104 000b 	add.w	r0, r4, #11
 80094c8:	1d23      	adds	r3, r4, #4
 80094ca:	f020 0007 	bic.w	r0, r0, #7
 80094ce:	1ac2      	subs	r2, r0, r3
 80094d0:	d0cc      	beq.n	800946c <_malloc_r+0x20>
 80094d2:	1a1b      	subs	r3, r3, r0
 80094d4:	50a3      	str	r3, [r4, r2]
 80094d6:	e7c9      	b.n	800946c <_malloc_r+0x20>
 80094d8:	4622      	mov	r2, r4
 80094da:	6864      	ldr	r4, [r4, #4]
 80094dc:	e7cc      	b.n	8009478 <_malloc_r+0x2c>
 80094de:	1cc4      	adds	r4, r0, #3
 80094e0:	f024 0403 	bic.w	r4, r4, #3
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	d0e3      	beq.n	80094b0 <_malloc_r+0x64>
 80094e8:	1a21      	subs	r1, r4, r0
 80094ea:	4630      	mov	r0, r6
 80094ec:	f000 fc68 	bl	8009dc0 <_sbrk_r>
 80094f0:	3001      	adds	r0, #1
 80094f2:	d1dd      	bne.n	80094b0 <_malloc_r+0x64>
 80094f4:	e7cf      	b.n	8009496 <_malloc_r+0x4a>
 80094f6:	bf00      	nop
 80094f8:	2000073c 	.word	0x2000073c
 80094fc:	20000740 	.word	0x20000740

08009500 <__cvt>:
 8009500:	2b00      	cmp	r3, #0
 8009502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009506:	461f      	mov	r7, r3
 8009508:	bfbb      	ittet	lt
 800950a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800950e:	461f      	movlt	r7, r3
 8009510:	2300      	movge	r3, #0
 8009512:	232d      	movlt	r3, #45	; 0x2d
 8009514:	b088      	sub	sp, #32
 8009516:	4614      	mov	r4, r2
 8009518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800951a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800951c:	7013      	strb	r3, [r2, #0]
 800951e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009520:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009524:	f023 0820 	bic.w	r8, r3, #32
 8009528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800952c:	d005      	beq.n	800953a <__cvt+0x3a>
 800952e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009532:	d100      	bne.n	8009536 <__cvt+0x36>
 8009534:	3501      	adds	r5, #1
 8009536:	2302      	movs	r3, #2
 8009538:	e000      	b.n	800953c <__cvt+0x3c>
 800953a:	2303      	movs	r3, #3
 800953c:	aa07      	add	r2, sp, #28
 800953e:	9204      	str	r2, [sp, #16]
 8009540:	aa06      	add	r2, sp, #24
 8009542:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009546:	e9cd 3500 	strd	r3, r5, [sp]
 800954a:	4622      	mov	r2, r4
 800954c:	463b      	mov	r3, r7
 800954e:	f000 fd3b 	bl	8009fc8 <_dtoa_r>
 8009552:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009556:	4606      	mov	r6, r0
 8009558:	d102      	bne.n	8009560 <__cvt+0x60>
 800955a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800955c:	07db      	lsls	r3, r3, #31
 800955e:	d522      	bpl.n	80095a6 <__cvt+0xa6>
 8009560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009564:	eb06 0905 	add.w	r9, r6, r5
 8009568:	d110      	bne.n	800958c <__cvt+0x8c>
 800956a:	7833      	ldrb	r3, [r6, #0]
 800956c:	2b30      	cmp	r3, #48	; 0x30
 800956e:	d10a      	bne.n	8009586 <__cvt+0x86>
 8009570:	2200      	movs	r2, #0
 8009572:	2300      	movs	r3, #0
 8009574:	4620      	mov	r0, r4
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 fa16 	bl	80009a8 <__aeabi_dcmpeq>
 800957c:	b918      	cbnz	r0, 8009586 <__cvt+0x86>
 800957e:	f1c5 0501 	rsb	r5, r5, #1
 8009582:	f8ca 5000 	str.w	r5, [sl]
 8009586:	f8da 3000 	ldr.w	r3, [sl]
 800958a:	4499      	add	r9, r3
 800958c:	2200      	movs	r2, #0
 800958e:	2300      	movs	r3, #0
 8009590:	4620      	mov	r0, r4
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8009598:	b108      	cbz	r0, 800959e <__cvt+0x9e>
 800959a:	f8cd 901c 	str.w	r9, [sp, #28]
 800959e:	2230      	movs	r2, #48	; 0x30
 80095a0:	9b07      	ldr	r3, [sp, #28]
 80095a2:	454b      	cmp	r3, r9
 80095a4:	d307      	bcc.n	80095b6 <__cvt+0xb6>
 80095a6:	4630      	mov	r0, r6
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095ac:	1b9b      	subs	r3, r3, r6
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	b008      	add	sp, #32
 80095b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b6:	1c59      	adds	r1, r3, #1
 80095b8:	9107      	str	r1, [sp, #28]
 80095ba:	701a      	strb	r2, [r3, #0]
 80095bc:	e7f0      	b.n	80095a0 <__cvt+0xa0>

080095be <__exponent>:
 80095be:	4603      	mov	r3, r0
 80095c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c2:	2900      	cmp	r1, #0
 80095c4:	f803 2b02 	strb.w	r2, [r3], #2
 80095c8:	bfb6      	itet	lt
 80095ca:	222d      	movlt	r2, #45	; 0x2d
 80095cc:	222b      	movge	r2, #43	; 0x2b
 80095ce:	4249      	neglt	r1, r1
 80095d0:	2909      	cmp	r1, #9
 80095d2:	7042      	strb	r2, [r0, #1]
 80095d4:	dd2b      	ble.n	800962e <__exponent+0x70>
 80095d6:	f10d 0407 	add.w	r4, sp, #7
 80095da:	46a4      	mov	ip, r4
 80095dc:	270a      	movs	r7, #10
 80095de:	fb91 f6f7 	sdiv	r6, r1, r7
 80095e2:	460a      	mov	r2, r1
 80095e4:	46a6      	mov	lr, r4
 80095e6:	fb07 1516 	mls	r5, r7, r6, r1
 80095ea:	2a63      	cmp	r2, #99	; 0x63
 80095ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80095f0:	4631      	mov	r1, r6
 80095f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80095f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095fa:	dcf0      	bgt.n	80095de <__exponent+0x20>
 80095fc:	3130      	adds	r1, #48	; 0x30
 80095fe:	f1ae 0502 	sub.w	r5, lr, #2
 8009602:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009606:	4629      	mov	r1, r5
 8009608:	1c44      	adds	r4, r0, #1
 800960a:	4561      	cmp	r1, ip
 800960c:	d30a      	bcc.n	8009624 <__exponent+0x66>
 800960e:	f10d 0209 	add.w	r2, sp, #9
 8009612:	eba2 020e 	sub.w	r2, r2, lr
 8009616:	4565      	cmp	r5, ip
 8009618:	bf88      	it	hi
 800961a:	2200      	movhi	r2, #0
 800961c:	4413      	add	r3, r2
 800961e:	1a18      	subs	r0, r3, r0
 8009620:	b003      	add	sp, #12
 8009622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009624:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009628:	f804 2f01 	strb.w	r2, [r4, #1]!
 800962c:	e7ed      	b.n	800960a <__exponent+0x4c>
 800962e:	2330      	movs	r3, #48	; 0x30
 8009630:	3130      	adds	r1, #48	; 0x30
 8009632:	7083      	strb	r3, [r0, #2]
 8009634:	70c1      	strb	r1, [r0, #3]
 8009636:	1d03      	adds	r3, r0, #4
 8009638:	e7f1      	b.n	800961e <__exponent+0x60>
	...

0800963c <_printf_float>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	b091      	sub	sp, #68	; 0x44
 8009642:	460c      	mov	r4, r1
 8009644:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009648:	4616      	mov	r6, r2
 800964a:	461f      	mov	r7, r3
 800964c:	4605      	mov	r5, r0
 800964e:	f001 faa9 	bl	800aba4 <_localeconv_r>
 8009652:	6803      	ldr	r3, [r0, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	9309      	str	r3, [sp, #36]	; 0x24
 8009658:	f7f6 fd7a 	bl	8000150 <strlen>
 800965c:	2300      	movs	r3, #0
 800965e:	930e      	str	r3, [sp, #56]	; 0x38
 8009660:	f8d8 3000 	ldr.w	r3, [r8]
 8009664:	900a      	str	r0, [sp, #40]	; 0x28
 8009666:	3307      	adds	r3, #7
 8009668:	f023 0307 	bic.w	r3, r3, #7
 800966c:	f103 0208 	add.w	r2, r3, #8
 8009670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009674:	f8d4 b000 	ldr.w	fp, [r4]
 8009678:	f8c8 2000 	str.w	r2, [r8]
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009684:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009688:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800968c:	930b      	str	r3, [sp, #44]	; 0x2c
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	4640      	mov	r0, r8
 8009694:	4b9c      	ldr	r3, [pc, #624]	; (8009908 <_printf_float+0x2cc>)
 8009696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009698:	f7f7 f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800969c:	bb70      	cbnz	r0, 80096fc <_printf_float+0xc0>
 800969e:	f04f 32ff 	mov.w	r2, #4294967295
 80096a2:	4640      	mov	r0, r8
 80096a4:	4b98      	ldr	r3, [pc, #608]	; (8009908 <_printf_float+0x2cc>)
 80096a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096a8:	f7f7 f992 	bl	80009d0 <__aeabi_dcmple>
 80096ac:	bb30      	cbnz	r0, 80096fc <_printf_float+0xc0>
 80096ae:	2200      	movs	r2, #0
 80096b0:	2300      	movs	r3, #0
 80096b2:	4640      	mov	r0, r8
 80096b4:	4651      	mov	r1, sl
 80096b6:	f7f7 f981 	bl	80009bc <__aeabi_dcmplt>
 80096ba:	b110      	cbz	r0, 80096c2 <_printf_float+0x86>
 80096bc:	232d      	movs	r3, #45	; 0x2d
 80096be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c2:	4b92      	ldr	r3, [pc, #584]	; (800990c <_printf_float+0x2d0>)
 80096c4:	4892      	ldr	r0, [pc, #584]	; (8009910 <_printf_float+0x2d4>)
 80096c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096ca:	bf94      	ite	ls
 80096cc:	4698      	movls	r8, r3
 80096ce:	4680      	movhi	r8, r0
 80096d0:	2303      	movs	r3, #3
 80096d2:	f04f 0a00 	mov.w	sl, #0
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	f02b 0304 	bic.w	r3, fp, #4
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	4633      	mov	r3, r6
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	9700      	str	r7, [sp, #0]
 80096e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80096e8:	f000 f9d4 	bl	8009a94 <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	f040 8090 	bne.w	8009812 <_printf_float+0x1d6>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	b011      	add	sp, #68	; 0x44
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	4642      	mov	r2, r8
 80096fe:	4653      	mov	r3, sl
 8009700:	4640      	mov	r0, r8
 8009702:	4651      	mov	r1, sl
 8009704:	f7f7 f982 	bl	8000a0c <__aeabi_dcmpun>
 8009708:	b148      	cbz	r0, 800971e <_printf_float+0xe2>
 800970a:	f1ba 0f00 	cmp.w	sl, #0
 800970e:	bfb8      	it	lt
 8009710:	232d      	movlt	r3, #45	; 0x2d
 8009712:	4880      	ldr	r0, [pc, #512]	; (8009914 <_printf_float+0x2d8>)
 8009714:	bfb8      	it	lt
 8009716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800971a:	4b7f      	ldr	r3, [pc, #508]	; (8009918 <_printf_float+0x2dc>)
 800971c:	e7d3      	b.n	80096c6 <_printf_float+0x8a>
 800971e:	6863      	ldr	r3, [r4, #4]
 8009720:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	d142      	bne.n	80097ae <_printf_float+0x172>
 8009728:	2306      	movs	r3, #6
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	9206      	str	r2, [sp, #24]
 8009730:	aa0e      	add	r2, sp, #56	; 0x38
 8009732:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009736:	aa0d      	add	r2, sp, #52	; 0x34
 8009738:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800973c:	9203      	str	r2, [sp, #12]
 800973e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009742:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	6863      	ldr	r3, [r4, #4]
 800974a:	4642      	mov	r2, r8
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4628      	mov	r0, r5
 8009750:	4653      	mov	r3, sl
 8009752:	910b      	str	r1, [sp, #44]	; 0x2c
 8009754:	f7ff fed4 	bl	8009500 <__cvt>
 8009758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800975a:	4680      	mov	r8, r0
 800975c:	2947      	cmp	r1, #71	; 0x47
 800975e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009760:	d108      	bne.n	8009774 <_printf_float+0x138>
 8009762:	1cc8      	adds	r0, r1, #3
 8009764:	db02      	blt.n	800976c <_printf_float+0x130>
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	4299      	cmp	r1, r3
 800976a:	dd40      	ble.n	80097ee <_printf_float+0x1b2>
 800976c:	f1a9 0902 	sub.w	r9, r9, #2
 8009770:	fa5f f989 	uxtb.w	r9, r9
 8009774:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009778:	d81f      	bhi.n	80097ba <_printf_float+0x17e>
 800977a:	464a      	mov	r2, r9
 800977c:	3901      	subs	r1, #1
 800977e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009782:	910d      	str	r1, [sp, #52]	; 0x34
 8009784:	f7ff ff1b 	bl	80095be <__exponent>
 8009788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800978a:	4682      	mov	sl, r0
 800978c:	1813      	adds	r3, r2, r0
 800978e:	2a01      	cmp	r2, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	dc02      	bgt.n	800979a <_printf_float+0x15e>
 8009794:	6822      	ldr	r2, [r4, #0]
 8009796:	07d2      	lsls	r2, r2, #31
 8009798:	d501      	bpl.n	800979e <_printf_float+0x162>
 800979a:	3301      	adds	r3, #1
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d09b      	beq.n	80096de <_printf_float+0xa2>
 80097a6:	232d      	movs	r3, #45	; 0x2d
 80097a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ac:	e797      	b.n	80096de <_printf_float+0xa2>
 80097ae:	2947      	cmp	r1, #71	; 0x47
 80097b0:	d1bc      	bne.n	800972c <_printf_float+0xf0>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1ba      	bne.n	800972c <_printf_float+0xf0>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7b7      	b.n	800972a <_printf_float+0xee>
 80097ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097be:	d118      	bne.n	80097f2 <_printf_float+0x1b6>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	dd0b      	ble.n	80097de <_printf_float+0x1a2>
 80097c6:	6121      	str	r1, [r4, #16]
 80097c8:	b913      	cbnz	r3, 80097d0 <_printf_float+0x194>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	07d0      	lsls	r0, r2, #31
 80097ce:	d502      	bpl.n	80097d6 <_printf_float+0x19a>
 80097d0:	3301      	adds	r3, #1
 80097d2:	440b      	add	r3, r1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	f04f 0a00 	mov.w	sl, #0
 80097da:	65a1      	str	r1, [r4, #88]	; 0x58
 80097dc:	e7df      	b.n	800979e <_printf_float+0x162>
 80097de:	b913      	cbnz	r3, 80097e6 <_printf_float+0x1aa>
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	07d2      	lsls	r2, r2, #31
 80097e4:	d501      	bpl.n	80097ea <_printf_float+0x1ae>
 80097e6:	3302      	adds	r3, #2
 80097e8:	e7f4      	b.n	80097d4 <_printf_float+0x198>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e7f2      	b.n	80097d4 <_printf_float+0x198>
 80097ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f4:	4299      	cmp	r1, r3
 80097f6:	db05      	blt.n	8009804 <_printf_float+0x1c8>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	6121      	str	r1, [r4, #16]
 80097fc:	07d8      	lsls	r0, r3, #31
 80097fe:	d5ea      	bpl.n	80097d6 <_printf_float+0x19a>
 8009800:	1c4b      	adds	r3, r1, #1
 8009802:	e7e7      	b.n	80097d4 <_printf_float+0x198>
 8009804:	2900      	cmp	r1, #0
 8009806:	bfcc      	ite	gt
 8009808:	2201      	movgt	r2, #1
 800980a:	f1c1 0202 	rsble	r2, r1, #2
 800980e:	4413      	add	r3, r2
 8009810:	e7e0      	b.n	80097d4 <_printf_float+0x198>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	055a      	lsls	r2, r3, #21
 8009816:	d407      	bmi.n	8009828 <_printf_float+0x1ec>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	4642      	mov	r2, r8
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	d12b      	bne.n	800987e <_printf_float+0x242>
 8009826:	e764      	b.n	80096f2 <_printf_float+0xb6>
 8009828:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800982c:	f240 80dd 	bls.w	80099ea <_printf_float+0x3ae>
 8009830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	f7f7 f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800983c:	2800      	cmp	r0, #0
 800983e:	d033      	beq.n	80098a8 <_printf_float+0x26c>
 8009840:	2301      	movs	r3, #1
 8009842:	4631      	mov	r1, r6
 8009844:	4628      	mov	r0, r5
 8009846:	4a35      	ldr	r2, [pc, #212]	; (800991c <_printf_float+0x2e0>)
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	f43f af51 	beq.w	80096f2 <_printf_float+0xb6>
 8009850:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009854:	429a      	cmp	r2, r3
 8009856:	db02      	blt.n	800985e <_printf_float+0x222>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07d8      	lsls	r0, r3, #31
 800985c:	d50f      	bpl.n	800987e <_printf_float+0x242>
 800985e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f af42 	beq.w	80096f2 <_printf_float+0xb6>
 800986e:	f04f 0800 	mov.w	r8, #0
 8009872:	f104 091a 	add.w	r9, r4, #26
 8009876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009878:	3b01      	subs	r3, #1
 800987a:	4543      	cmp	r3, r8
 800987c:	dc09      	bgt.n	8009892 <_printf_float+0x256>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	079b      	lsls	r3, r3, #30
 8009882:	f100 8102 	bmi.w	8009a8a <_printf_float+0x44e>
 8009886:	68e0      	ldr	r0, [r4, #12]
 8009888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800988a:	4298      	cmp	r0, r3
 800988c:	bfb8      	it	lt
 800988e:	4618      	movlt	r0, r3
 8009890:	e731      	b.n	80096f6 <_printf_float+0xba>
 8009892:	2301      	movs	r3, #1
 8009894:	464a      	mov	r2, r9
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f af28 	beq.w	80096f2 <_printf_float+0xb6>
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	e7e6      	b.n	8009876 <_printf_float+0x23a>
 80098a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dc38      	bgt.n	8009920 <_printf_float+0x2e4>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	4a19      	ldr	r2, [pc, #100]	; (800991c <_printf_float+0x2e0>)
 80098b6:	47b8      	blx	r7
 80098b8:	3001      	adds	r0, #1
 80098ba:	f43f af1a 	beq.w	80096f2 <_printf_float+0xb6>
 80098be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098c2:	4313      	orrs	r3, r2
 80098c4:	d102      	bne.n	80098cc <_printf_float+0x290>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	07d9      	lsls	r1, r3, #31
 80098ca:	d5d8      	bpl.n	800987e <_printf_float+0x242>
 80098cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f af0b 	beq.w	80096f2 <_printf_float+0xb6>
 80098dc:	f04f 0900 	mov.w	r9, #0
 80098e0:	f104 0a1a 	add.w	sl, r4, #26
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	425b      	negs	r3, r3
 80098e8:	454b      	cmp	r3, r9
 80098ea:	dc01      	bgt.n	80098f0 <_printf_float+0x2b4>
 80098ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ee:	e794      	b.n	800981a <_printf_float+0x1de>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4652      	mov	r2, sl
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f aef9 	beq.w	80096f2 <_printf_float+0xb6>
 8009900:	f109 0901 	add.w	r9, r9, #1
 8009904:	e7ee      	b.n	80098e4 <_printf_float+0x2a8>
 8009906:	bf00      	nop
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	0800d6a4 	.word	0x0800d6a4
 8009910:	0800d6a8 	.word	0x0800d6a8
 8009914:	0800d6b0 	.word	0x0800d6b0
 8009918:	0800d6ac 	.word	0x0800d6ac
 800991c:	0800d6b4 	.word	0x0800d6b4
 8009920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009924:	429a      	cmp	r2, r3
 8009926:	bfa8      	it	ge
 8009928:	461a      	movge	r2, r3
 800992a:	2a00      	cmp	r2, #0
 800992c:	4691      	mov	r9, r2
 800992e:	dc37      	bgt.n	80099a0 <_printf_float+0x364>
 8009930:	f04f 0b00 	mov.w	fp, #0
 8009934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009938:	f104 021a 	add.w	r2, r4, #26
 800993c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009940:	ebaa 0309 	sub.w	r3, sl, r9
 8009944:	455b      	cmp	r3, fp
 8009946:	dc33      	bgt.n	80099b0 <_printf_float+0x374>
 8009948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800994c:	429a      	cmp	r2, r3
 800994e:	db3b      	blt.n	80099c8 <_printf_float+0x38c>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	07da      	lsls	r2, r3, #31
 8009954:	d438      	bmi.n	80099c8 <_printf_float+0x38c>
 8009956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009958:	990d      	ldr	r1, [sp, #52]	; 0x34
 800995a:	eba2 030a 	sub.w	r3, r2, sl
 800995e:	eba2 0901 	sub.w	r9, r2, r1
 8009962:	4599      	cmp	r9, r3
 8009964:	bfa8      	it	ge
 8009966:	4699      	movge	r9, r3
 8009968:	f1b9 0f00 	cmp.w	r9, #0
 800996c:	dc34      	bgt.n	80099d8 <_printf_float+0x39c>
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009976:	f104 0a1a 	add.w	sl, r4, #26
 800997a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800997e:	1a9b      	subs	r3, r3, r2
 8009980:	eba3 0309 	sub.w	r3, r3, r9
 8009984:	4543      	cmp	r3, r8
 8009986:	f77f af7a 	ble.w	800987e <_printf_float+0x242>
 800998a:	2301      	movs	r3, #1
 800998c:	4652      	mov	r2, sl
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	f43f aeac 	beq.w	80096f2 <_printf_float+0xb6>
 800999a:	f108 0801 	add.w	r8, r8, #1
 800999e:	e7ec      	b.n	800997a <_printf_float+0x33e>
 80099a0:	4613      	mov	r3, r2
 80099a2:	4631      	mov	r1, r6
 80099a4:	4642      	mov	r2, r8
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	d1c0      	bne.n	8009930 <_printf_float+0x2f4>
 80099ae:	e6a0      	b.n	80096f2 <_printf_float+0xb6>
 80099b0:	2301      	movs	r3, #1
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	f43f ae99 	beq.w	80096f2 <_printf_float+0xb6>
 80099c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099c2:	f10b 0b01 	add.w	fp, fp, #1
 80099c6:	e7b9      	b.n	800993c <_printf_float+0x300>
 80099c8:	4631      	mov	r1, r6
 80099ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1bf      	bne.n	8009956 <_printf_float+0x31a>
 80099d6:	e68c      	b.n	80096f2 <_printf_float+0xb6>
 80099d8:	464b      	mov	r3, r9
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	eb08 020a 	add.w	r2, r8, sl
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1c2      	bne.n	800996e <_printf_float+0x332>
 80099e8:	e683      	b.n	80096f2 <_printf_float+0xb6>
 80099ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	dc01      	bgt.n	80099f4 <_printf_float+0x3b8>
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d537      	bpl.n	8009a64 <_printf_float+0x428>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4642      	mov	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae77 	beq.w	80096f2 <_printf_float+0xb6>
 8009a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae6f 	beq.w	80096f2 <_printf_float+0xb6>
 8009a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f7f6 ffc4 	bl	80009a8 <__aeabi_dcmpeq>
 8009a20:	b9d8      	cbnz	r0, 8009a5a <_printf_float+0x41e>
 8009a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a24:	f108 0201 	add.w	r2, r8, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10e      	bne.n	8009a52 <_printf_float+0x416>
 8009a34:	e65d      	b.n	80096f2 <_printf_float+0xb6>
 8009a36:	2301      	movs	r3, #1
 8009a38:	464a      	mov	r2, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae56 	beq.w	80096f2 <_printf_float+0xb6>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4543      	cmp	r3, r8
 8009a50:	dcf1      	bgt.n	8009a36 <_printf_float+0x3fa>
 8009a52:	4653      	mov	r3, sl
 8009a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a58:	e6e0      	b.n	800981c <_printf_float+0x1e0>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 091a 	add.w	r9, r4, #26
 8009a62:	e7f2      	b.n	8009a4a <_printf_float+0x40e>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4642      	mov	r2, r8
 8009a68:	e7df      	b.n	8009a2a <_printf_float+0x3ee>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae3c 	beq.w	80096f2 <_printf_float+0xb6>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	4543      	cmp	r3, r8
 8009a86:	dcf0      	bgt.n	8009a6a <_printf_float+0x42e>
 8009a88:	e6fd      	b.n	8009886 <_printf_float+0x24a>
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f4      	b.n	8009a7e <_printf_float+0x442>

08009a94 <_printf_common>:
 8009a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	4616      	mov	r6, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	688a      	ldr	r2, [r1, #8]
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bfb8      	it	lt
 8009aa6:	4613      	movlt	r3, r2
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aae:	460c      	mov	r4, r1
 8009ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ab4:	b10a      	cbz	r2, 8009aba <_printf_common+0x26>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	6833      	ldrmi	r3, [r6, #0]
 8009ac2:	3302      	addmi	r3, #2
 8009ac4:	6033      	strmi	r3, [r6, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	f015 0506 	ands.w	r5, r5, #6
 8009acc:	d106      	bne.n	8009adc <_printf_common+0x48>
 8009ace:	f104 0a19 	add.w	sl, r4, #25
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dc28      	bgt.n	8009b2e <_printf_common+0x9a>
 8009adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae0:	1e13      	subs	r3, r2, #0
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	0692      	lsls	r2, r2, #26
 8009aea:	d42d      	bmi.n	8009b48 <_printf_common+0xb4>
 8009aec:	4649      	mov	r1, r9
 8009aee:	4638      	mov	r0, r7
 8009af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d020      	beq.n	8009b3c <_printf_common+0xa8>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	68e5      	ldr	r5, [r4, #12]
 8009afe:	f003 0306 	and.w	r3, r3, #6
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	bf18      	it	ne
 8009b06:	2500      	movne	r5, #0
 8009b08:	6832      	ldr	r2, [r6, #0]
 8009b0a:	f04f 0600 	mov.w	r6, #0
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	bf08      	it	eq
 8009b12:	1aad      	subeq	r5, r5, r2
 8009b14:	6922      	ldr	r2, [r4, #16]
 8009b16:	bf08      	it	eq
 8009b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	bfc4      	itt	gt
 8009b20:	1a9b      	subgt	r3, r3, r2
 8009b22:	18ed      	addgt	r5, r5, r3
 8009b24:	341a      	adds	r4, #26
 8009b26:	42b5      	cmp	r5, r6
 8009b28:	d11a      	bne.n	8009b60 <_printf_common+0xcc>
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e008      	b.n	8009b40 <_printf_common+0xac>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4652      	mov	r2, sl
 8009b32:	4649      	mov	r1, r9
 8009b34:	4638      	mov	r0, r7
 8009b36:	47c0      	blx	r8
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d103      	bne.n	8009b44 <_printf_common+0xb0>
 8009b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b44:	3501      	adds	r5, #1
 8009b46:	e7c4      	b.n	8009ad2 <_printf_common+0x3e>
 8009b48:	2030      	movs	r0, #48	; 0x30
 8009b4a:	18e1      	adds	r1, r4, r3
 8009b4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b56:	4422      	add	r2, r4
 8009b58:	3302      	adds	r3, #2
 8009b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b5e:	e7c5      	b.n	8009aec <_printf_common+0x58>
 8009b60:	2301      	movs	r3, #1
 8009b62:	4622      	mov	r2, r4
 8009b64:	4649      	mov	r1, r9
 8009b66:	4638      	mov	r0, r7
 8009b68:	47c0      	blx	r8
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	d0e6      	beq.n	8009b3c <_printf_common+0xa8>
 8009b6e:	3601      	adds	r6, #1
 8009b70:	e7d9      	b.n	8009b26 <_printf_common+0x92>
	...

08009b74 <_printf_i>:
 8009b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b78:	460c      	mov	r4, r1
 8009b7a:	7e27      	ldrb	r7, [r4, #24]
 8009b7c:	4691      	mov	r9, r2
 8009b7e:	2f78      	cmp	r7, #120	; 0x78
 8009b80:	4680      	mov	r8, r0
 8009b82:	469a      	mov	sl, r3
 8009b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b8a:	d807      	bhi.n	8009b9c <_printf_i+0x28>
 8009b8c:	2f62      	cmp	r7, #98	; 0x62
 8009b8e:	d80a      	bhi.n	8009ba6 <_printf_i+0x32>
 8009b90:	2f00      	cmp	r7, #0
 8009b92:	f000 80d9 	beq.w	8009d48 <_printf_i+0x1d4>
 8009b96:	2f58      	cmp	r7, #88	; 0x58
 8009b98:	f000 80a4 	beq.w	8009ce4 <_printf_i+0x170>
 8009b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba4:	e03a      	b.n	8009c1c <_printf_i+0xa8>
 8009ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009baa:	2b15      	cmp	r3, #21
 8009bac:	d8f6      	bhi.n	8009b9c <_printf_i+0x28>
 8009bae:	a001      	add	r0, pc, #4	; (adr r0, 8009bb4 <_printf_i+0x40>)
 8009bb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009bb4:	08009c0d 	.word	0x08009c0d
 8009bb8:	08009c21 	.word	0x08009c21
 8009bbc:	08009b9d 	.word	0x08009b9d
 8009bc0:	08009b9d 	.word	0x08009b9d
 8009bc4:	08009b9d 	.word	0x08009b9d
 8009bc8:	08009b9d 	.word	0x08009b9d
 8009bcc:	08009c21 	.word	0x08009c21
 8009bd0:	08009b9d 	.word	0x08009b9d
 8009bd4:	08009b9d 	.word	0x08009b9d
 8009bd8:	08009b9d 	.word	0x08009b9d
 8009bdc:	08009b9d 	.word	0x08009b9d
 8009be0:	08009d2f 	.word	0x08009d2f
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009d11 	.word	0x08009d11
 8009bec:	08009b9d 	.word	0x08009b9d
 8009bf0:	08009b9d 	.word	0x08009b9d
 8009bf4:	08009d51 	.word	0x08009d51
 8009bf8:	08009b9d 	.word	0x08009b9d
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009b9d 	.word	0x08009b9d
 8009c04:	08009b9d 	.word	0x08009b9d
 8009c08:	08009d19 	.word	0x08009d19
 8009c0c:	680b      	ldr	r3, [r1, #0]
 8009c0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c12:	1d1a      	adds	r2, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	600a      	str	r2, [r1, #0]
 8009c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e0a4      	b.n	8009d6a <_printf_i+0x1f6>
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	6808      	ldr	r0, [r1, #0]
 8009c24:	062e      	lsls	r6, r5, #24
 8009c26:	f100 0304 	add.w	r3, r0, #4
 8009c2a:	d50a      	bpl.n	8009c42 <_printf_i+0xce>
 8009c2c:	6805      	ldr	r5, [r0, #0]
 8009c2e:	600b      	str	r3, [r1, #0]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	da03      	bge.n	8009c3c <_printf_i+0xc8>
 8009c34:	232d      	movs	r3, #45	; 0x2d
 8009c36:	426d      	negs	r5, r5
 8009c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3c:	230a      	movs	r3, #10
 8009c3e:	485e      	ldr	r0, [pc, #376]	; (8009db8 <_printf_i+0x244>)
 8009c40:	e019      	b.n	8009c76 <_printf_i+0x102>
 8009c42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c46:	6805      	ldr	r5, [r0, #0]
 8009c48:	600b      	str	r3, [r1, #0]
 8009c4a:	bf18      	it	ne
 8009c4c:	b22d      	sxthne	r5, r5
 8009c4e:	e7ef      	b.n	8009c30 <_printf_i+0xbc>
 8009c50:	680b      	ldr	r3, [r1, #0]
 8009c52:	6825      	ldr	r5, [r4, #0]
 8009c54:	1d18      	adds	r0, r3, #4
 8009c56:	6008      	str	r0, [r1, #0]
 8009c58:	0628      	lsls	r0, r5, #24
 8009c5a:	d501      	bpl.n	8009c60 <_printf_i+0xec>
 8009c5c:	681d      	ldr	r5, [r3, #0]
 8009c5e:	e002      	b.n	8009c66 <_printf_i+0xf2>
 8009c60:	0669      	lsls	r1, r5, #25
 8009c62:	d5fb      	bpl.n	8009c5c <_printf_i+0xe8>
 8009c64:	881d      	ldrh	r5, [r3, #0]
 8009c66:	2f6f      	cmp	r7, #111	; 0x6f
 8009c68:	bf0c      	ite	eq
 8009c6a:	2308      	moveq	r3, #8
 8009c6c:	230a      	movne	r3, #10
 8009c6e:	4852      	ldr	r0, [pc, #328]	; (8009db8 <_printf_i+0x244>)
 8009c70:	2100      	movs	r1, #0
 8009c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c76:	6866      	ldr	r6, [r4, #4]
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	bfa8      	it	ge
 8009c7c:	6821      	ldrge	r1, [r4, #0]
 8009c7e:	60a6      	str	r6, [r4, #8]
 8009c80:	bfa4      	itt	ge
 8009c82:	f021 0104 	bicge.w	r1, r1, #4
 8009c86:	6021      	strge	r1, [r4, #0]
 8009c88:	b90d      	cbnz	r5, 8009c8e <_printf_i+0x11a>
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	d04d      	beq.n	8009d2a <_printf_i+0x1b6>
 8009c8e:	4616      	mov	r6, r2
 8009c90:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c94:	fb03 5711 	mls	r7, r3, r1, r5
 8009c98:	5dc7      	ldrb	r7, [r0, r7]
 8009c9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c9e:	462f      	mov	r7, r5
 8009ca0:	42bb      	cmp	r3, r7
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	d9f4      	bls.n	8009c90 <_printf_i+0x11c>
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	d10b      	bne.n	8009cc2 <_printf_i+0x14e>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	07df      	lsls	r7, r3, #31
 8009cae:	d508      	bpl.n	8009cc2 <_printf_i+0x14e>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	6861      	ldr	r1, [r4, #4]
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	bfde      	ittt	le
 8009cb8:	2330      	movle	r3, #48	; 0x30
 8009cba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cc2:	1b92      	subs	r2, r2, r6
 8009cc4:	6122      	str	r2, [r4, #16]
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f8cd a000 	str.w	sl, [sp]
 8009cd0:	aa03      	add	r2, sp, #12
 8009cd2:	f7ff fedf 	bl	8009a94 <_printf_common>
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d14c      	bne.n	8009d74 <_printf_i+0x200>
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	b004      	add	sp, #16
 8009ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce4:	4834      	ldr	r0, [pc, #208]	; (8009db8 <_printf_i+0x244>)
 8009ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cea:	680e      	ldr	r6, [r1, #0]
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cf2:	061f      	lsls	r7, r3, #24
 8009cf4:	600e      	str	r6, [r1, #0]
 8009cf6:	d514      	bpl.n	8009d22 <_printf_i+0x1ae>
 8009cf8:	07d9      	lsls	r1, r3, #31
 8009cfa:	bf44      	itt	mi
 8009cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8009d00:	6023      	strmi	r3, [r4, #0]
 8009d02:	b91d      	cbnz	r5, 8009d0c <_printf_i+0x198>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	f023 0320 	bic.w	r3, r3, #32
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	e7af      	b.n	8009c70 <_printf_i+0xfc>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	f043 0320 	orr.w	r3, r3, #32
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	2378      	movs	r3, #120	; 0x78
 8009d1a:	4828      	ldr	r0, [pc, #160]	; (8009dbc <_printf_i+0x248>)
 8009d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d20:	e7e3      	b.n	8009cea <_printf_i+0x176>
 8009d22:	065e      	lsls	r6, r3, #25
 8009d24:	bf48      	it	mi
 8009d26:	b2ad      	uxthmi	r5, r5
 8009d28:	e7e6      	b.n	8009cf8 <_printf_i+0x184>
 8009d2a:	4616      	mov	r6, r2
 8009d2c:	e7bb      	b.n	8009ca6 <_printf_i+0x132>
 8009d2e:	680b      	ldr	r3, [r1, #0]
 8009d30:	6826      	ldr	r6, [r4, #0]
 8009d32:	1d1d      	adds	r5, r3, #4
 8009d34:	6960      	ldr	r0, [r4, #20]
 8009d36:	600d      	str	r5, [r1, #0]
 8009d38:	0635      	lsls	r5, r6, #24
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	d501      	bpl.n	8009d42 <_printf_i+0x1ce>
 8009d3e:	6018      	str	r0, [r3, #0]
 8009d40:	e002      	b.n	8009d48 <_printf_i+0x1d4>
 8009d42:	0671      	lsls	r1, r6, #25
 8009d44:	d5fb      	bpl.n	8009d3e <_printf_i+0x1ca>
 8009d46:	8018      	strh	r0, [r3, #0]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	e7ba      	b.n	8009cc6 <_printf_i+0x152>
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	1d1a      	adds	r2, r3, #4
 8009d54:	600a      	str	r2, [r1, #0]
 8009d56:	681e      	ldr	r6, [r3, #0]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	6862      	ldr	r2, [r4, #4]
 8009d5e:	f000 ff25 	bl	800abac <memchr>
 8009d62:	b108      	cbz	r0, 8009d68 <_printf_i+0x1f4>
 8009d64:	1b80      	subs	r0, r0, r6
 8009d66:	6060      	str	r0, [r4, #4]
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d72:	e7a8      	b.n	8009cc6 <_printf_i+0x152>
 8009d74:	4632      	mov	r2, r6
 8009d76:	4649      	mov	r1, r9
 8009d78:	4640      	mov	r0, r8
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	47d0      	blx	sl
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d0ab      	beq.n	8009cda <_printf_i+0x166>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	079b      	lsls	r3, r3, #30
 8009d86:	d413      	bmi.n	8009db0 <_printf_i+0x23c>
 8009d88:	68e0      	ldr	r0, [r4, #12]
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	bfb8      	it	lt
 8009d90:	4618      	movlt	r0, r3
 8009d92:	e7a4      	b.n	8009cde <_printf_i+0x16a>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4632      	mov	r2, r6
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	47d0      	blx	sl
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d09b      	beq.n	8009cda <_printf_i+0x166>
 8009da2:	3501      	adds	r5, #1
 8009da4:	68e3      	ldr	r3, [r4, #12]
 8009da6:	9903      	ldr	r1, [sp, #12]
 8009da8:	1a5b      	subs	r3, r3, r1
 8009daa:	42ab      	cmp	r3, r5
 8009dac:	dcf2      	bgt.n	8009d94 <_printf_i+0x220>
 8009dae:	e7eb      	b.n	8009d88 <_printf_i+0x214>
 8009db0:	2500      	movs	r5, #0
 8009db2:	f104 0619 	add.w	r6, r4, #25
 8009db6:	e7f5      	b.n	8009da4 <_printf_i+0x230>
 8009db8:	0800d6b6 	.word	0x0800d6b6
 8009dbc:	0800d6c7 	.word	0x0800d6c7

08009dc0 <_sbrk_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4d05      	ldr	r5, [pc, #20]	; (8009ddc <_sbrk_r+0x1c>)
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7ff f9d4 	bl	8009178 <_sbrk>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_sbrk_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_sbrk_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	200009b4 	.word	0x200009b4

08009de0 <_raise_r>:
 8009de0:	291f      	cmp	r1, #31
 8009de2:	b538      	push	{r3, r4, r5, lr}
 8009de4:	4604      	mov	r4, r0
 8009de6:	460d      	mov	r5, r1
 8009de8:	d904      	bls.n	8009df4 <_raise_r+0x14>
 8009dea:	2316      	movs	r3, #22
 8009dec:	6003      	str	r3, [r0, #0]
 8009dee:	f04f 30ff 	mov.w	r0, #4294967295
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009df6:	b112      	cbz	r2, 8009dfe <_raise_r+0x1e>
 8009df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dfc:	b94b      	cbnz	r3, 8009e12 <_raise_r+0x32>
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 f830 	bl	8009e64 <_getpid_r>
 8009e04:	462a      	mov	r2, r5
 8009e06:	4601      	mov	r1, r0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e0e:	f000 b817 	b.w	8009e40 <_kill_r>
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d00a      	beq.n	8009e2c <_raise_r+0x4c>
 8009e16:	1c59      	adds	r1, r3, #1
 8009e18:	d103      	bne.n	8009e22 <_raise_r+0x42>
 8009e1a:	2316      	movs	r3, #22
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e7e7      	b.n	8009df2 <_raise_r+0x12>
 8009e22:	2400      	movs	r4, #0
 8009e24:	4628      	mov	r0, r5
 8009e26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e2a:	4798      	blx	r3
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7e0      	b.n	8009df2 <_raise_r+0x12>

08009e30 <raise>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <raise+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f7ff bfd3 	b.w	8009de0 <_raise_r>
 8009e3a:	bf00      	nop
 8009e3c:	200000f8 	.word	0x200000f8

08009e40 <_kill_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	2300      	movs	r3, #0
 8009e44:	4d06      	ldr	r5, [pc, #24]	; (8009e60 <_kill_r+0x20>)
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	f7ff f910 	bl	8009072 <_kill>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d102      	bne.n	8009e5c <_kill_r+0x1c>
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	b103      	cbz	r3, 8009e5c <_kill_r+0x1c>
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	200009b4 	.word	0x200009b4

08009e64 <_getpid_r>:
 8009e64:	f7ff b8fe 	b.w	8009064 <_getpid>

08009e68 <siprintf>:
 8009e68:	b40e      	push	{r1, r2, r3}
 8009e6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e6e:	b500      	push	{lr}
 8009e70:	b09c      	sub	sp, #112	; 0x70
 8009e72:	ab1d      	add	r3, sp, #116	; 0x74
 8009e74:	9002      	str	r0, [sp, #8]
 8009e76:	9006      	str	r0, [sp, #24]
 8009e78:	9107      	str	r1, [sp, #28]
 8009e7a:	9104      	str	r1, [sp, #16]
 8009e7c:	4808      	ldr	r0, [pc, #32]	; (8009ea0 <siprintf+0x38>)
 8009e7e:	4909      	ldr	r1, [pc, #36]	; (8009ea4 <siprintf+0x3c>)
 8009e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e84:	9105      	str	r1, [sp, #20]
 8009e86:	6800      	ldr	r0, [r0, #0]
 8009e88:	a902      	add	r1, sp, #8
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	f001 fa94 	bl	800b3b8 <_svfiprintf_r>
 8009e90:	2200      	movs	r2, #0
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	b01c      	add	sp, #112	; 0x70
 8009e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e9c:	b003      	add	sp, #12
 8009e9e:	4770      	bx	lr
 8009ea0:	200000f8 	.word	0x200000f8
 8009ea4:	ffff0208 	.word	0xffff0208

08009ea8 <quorem>:
 8009ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	6903      	ldr	r3, [r0, #16]
 8009eae:	690c      	ldr	r4, [r1, #16]
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	f2c0 8083 	blt.w	8009fbe <quorem+0x116>
 8009eb8:	3c01      	subs	r4, #1
 8009eba:	f100 0514 	add.w	r5, r0, #20
 8009ebe:	f101 0814 	add.w	r8, r1, #20
 8009ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ee0:	d332      	bcc.n	8009f48 <quorem+0xa0>
 8009ee2:	f04f 0e00 	mov.w	lr, #0
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	46ac      	mov	ip, r5
 8009eea:	46f2      	mov	sl, lr
 8009eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ef0:	b293      	uxth	r3, r2
 8009ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ef6:	0c12      	lsrs	r2, r2, #16
 8009ef8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009efc:	fb06 e202 	mla	r2, r6, r2, lr
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	ebaa 0303 	sub.w	r3, sl, r3
 8009f06:	f8dc a000 	ldr.w	sl, [ip]
 8009f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f0e:	fa1f fa8a 	uxth.w	sl, sl
 8009f12:	4453      	add	r3, sl
 8009f14:	fa1f fa82 	uxth.w	sl, r2
 8009f18:	f8dc 2000 	ldr.w	r2, [ip]
 8009f1c:	4581      	cmp	r9, r0
 8009f1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f30:	f84c 3b04 	str.w	r3, [ip], #4
 8009f34:	d2da      	bcs.n	8009eec <quorem+0x44>
 8009f36:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f3a:	b92b      	cbnz	r3, 8009f48 <quorem+0xa0>
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	3b04      	subs	r3, #4
 8009f40:	429d      	cmp	r5, r3
 8009f42:	461a      	mov	r2, r3
 8009f44:	d32f      	bcc.n	8009fa6 <quorem+0xfe>
 8009f46:	613c      	str	r4, [r7, #16]
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f001 f8c3 	bl	800b0d4 <__mcmp>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	db25      	blt.n	8009f9e <quorem+0xf6>
 8009f52:	4628      	mov	r0, r5
 8009f54:	f04f 0c00 	mov.w	ip, #0
 8009f58:	3601      	adds	r6, #1
 8009f5a:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f5e:	f8d0 e000 	ldr.w	lr, [r0]
 8009f62:	b28b      	uxth	r3, r1
 8009f64:	ebac 0303 	sub.w	r3, ip, r3
 8009f68:	fa1f f28e 	uxth.w	r2, lr
 8009f6c:	4413      	add	r3, r2
 8009f6e:	0c0a      	lsrs	r2, r1, #16
 8009f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f7e:	45c1      	cmp	r9, r8
 8009f80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f84:	f840 3b04 	str.w	r3, [r0], #4
 8009f88:	d2e7      	bcs.n	8009f5a <quorem+0xb2>
 8009f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f92:	b922      	cbnz	r2, 8009f9e <quorem+0xf6>
 8009f94:	3b04      	subs	r3, #4
 8009f96:	429d      	cmp	r5, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	d30a      	bcc.n	8009fb2 <quorem+0x10a>
 8009f9c:	613c      	str	r4, [r7, #16]
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	b003      	add	sp, #12
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	6812      	ldr	r2, [r2, #0]
 8009fa8:	3b04      	subs	r3, #4
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	d1cb      	bne.n	8009f46 <quorem+0x9e>
 8009fae:	3c01      	subs	r4, #1
 8009fb0:	e7c6      	b.n	8009f40 <quorem+0x98>
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	d1f0      	bne.n	8009f9c <quorem+0xf4>
 8009fba:	3c01      	subs	r4, #1
 8009fbc:	e7eb      	b.n	8009f96 <quorem+0xee>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e7ee      	b.n	8009fa0 <quorem+0xf8>
 8009fc2:	0000      	movs	r0, r0
 8009fc4:	0000      	movs	r0, r0
	...

08009fc8 <_dtoa_r>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	4616      	mov	r6, r2
 8009fce:	461f      	mov	r7, r3
 8009fd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fd2:	b099      	sub	sp, #100	; 0x64
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009fde:	b974      	cbnz	r4, 8009ffe <_dtoa_r+0x36>
 8009fe0:	2010      	movs	r0, #16
 8009fe2:	f7ff f9b3 	bl	800934c <malloc>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	6268      	str	r0, [r5, #36]	; 0x24
 8009fea:	b920      	cbnz	r0, 8009ff6 <_dtoa_r+0x2e>
 8009fec:	21ea      	movs	r1, #234	; 0xea
 8009fee:	4bae      	ldr	r3, [pc, #696]	; (800a2a8 <_dtoa_r+0x2e0>)
 8009ff0:	48ae      	ldr	r0, [pc, #696]	; (800a2ac <_dtoa_r+0x2e4>)
 8009ff2:	f001 fae1 	bl	800b5b8 <__assert_func>
 8009ff6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ffa:	6004      	str	r4, [r0, #0]
 8009ffc:	60c4      	str	r4, [r0, #12]
 8009ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a000:	6819      	ldr	r1, [r3, #0]
 800a002:	b151      	cbz	r1, 800a01a <_dtoa_r+0x52>
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	2301      	movs	r3, #1
 800a008:	4093      	lsls	r3, r2
 800a00a:	604a      	str	r2, [r1, #4]
 800a00c:	608b      	str	r3, [r1, #8]
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 fe26 	bl	800ac60 <_Bfree>
 800a014:	2200      	movs	r2, #0
 800a016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	1e3b      	subs	r3, r7, #0
 800a01c:	bfaf      	iteee	ge
 800a01e:	2300      	movge	r3, #0
 800a020:	2201      	movlt	r2, #1
 800a022:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a026:	9305      	strlt	r3, [sp, #20]
 800a028:	bfa8      	it	ge
 800a02a:	f8c8 3000 	strge.w	r3, [r8]
 800a02e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a032:	4b9f      	ldr	r3, [pc, #636]	; (800a2b0 <_dtoa_r+0x2e8>)
 800a034:	bfb8      	it	lt
 800a036:	f8c8 2000 	strlt.w	r2, [r8]
 800a03a:	ea33 0309 	bics.w	r3, r3, r9
 800a03e:	d119      	bne.n	800a074 <_dtoa_r+0xac>
 800a040:	f242 730f 	movw	r3, #9999	; 0x270f
 800a044:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04c:	4333      	orrs	r3, r6
 800a04e:	f000 8580 	beq.w	800ab52 <_dtoa_r+0xb8a>
 800a052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a054:	b953      	cbnz	r3, 800a06c <_dtoa_r+0xa4>
 800a056:	4b97      	ldr	r3, [pc, #604]	; (800a2b4 <_dtoa_r+0x2ec>)
 800a058:	e022      	b.n	800a0a0 <_dtoa_r+0xd8>
 800a05a:	4b97      	ldr	r3, [pc, #604]	; (800a2b8 <_dtoa_r+0x2f0>)
 800a05c:	9308      	str	r3, [sp, #32]
 800a05e:	3308      	adds	r3, #8
 800a060:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a062:	6013      	str	r3, [r2, #0]
 800a064:	9808      	ldr	r0, [sp, #32]
 800a066:	b019      	add	sp, #100	; 0x64
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	4b91      	ldr	r3, [pc, #580]	; (800a2b4 <_dtoa_r+0x2ec>)
 800a06e:	9308      	str	r3, [sp, #32]
 800a070:	3303      	adds	r3, #3
 800a072:	e7f5      	b.n	800a060 <_dtoa_r+0x98>
 800a074:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a078:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a07c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a080:	2200      	movs	r2, #0
 800a082:	2300      	movs	r3, #0
 800a084:	f7f6 fc90 	bl	80009a8 <__aeabi_dcmpeq>
 800a088:	4680      	mov	r8, r0
 800a08a:	b158      	cbz	r0, 800a0a4 <_dtoa_r+0xdc>
 800a08c:	2301      	movs	r3, #1
 800a08e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8559 	beq.w	800ab4c <_dtoa_r+0xb84>
 800a09a:	4888      	ldr	r0, [pc, #544]	; (800a2bc <_dtoa_r+0x2f4>)
 800a09c:	6018      	str	r0, [r3, #0]
 800a09e:	1e43      	subs	r3, r0, #1
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	e7df      	b.n	800a064 <_dtoa_r+0x9c>
 800a0a4:	ab16      	add	r3, sp, #88	; 0x58
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	ab17      	add	r3, sp, #92	; 0x5c
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0b2:	f001 f8bb 	bl	800b22c <__d2b>
 800a0b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0ba:	4682      	mov	sl, r0
 800a0bc:	2c00      	cmp	r4, #0
 800a0be:	d07e      	beq.n	800a1be <_dtoa_r+0x1f6>
 800a0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a0d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4b78      	ldr	r3, [pc, #480]	; (800a2c0 <_dtoa_r+0x2f8>)
 800a0de:	f7f6 f843 	bl	8000168 <__aeabi_dsub>
 800a0e2:	a36b      	add	r3, pc, #428	; (adr r3, 800a290 <_dtoa_r+0x2c8>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f7f6 f9f6 	bl	80004d8 <__aeabi_dmul>
 800a0ec:	a36a      	add	r3, pc, #424	; (adr r3, 800a298 <_dtoa_r+0x2d0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f83b 	bl	800016c <__adddf3>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	460f      	mov	r7, r1
 800a0fc:	f7f6 f982 	bl	8000404 <__aeabi_i2d>
 800a100:	a367      	add	r3, pc, #412	; (adr r3, 800a2a0 <_dtoa_r+0x2d8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f9e7 	bl	80004d8 <__aeabi_dmul>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 f82b 	bl	800016c <__adddf3>
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	f7f6 fc8d 	bl	8000a38 <__aeabi_d2iz>
 800a11e:	2200      	movs	r2, #0
 800a120:	4681      	mov	r9, r0
 800a122:	2300      	movs	r3, #0
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fc48 	bl	80009bc <__aeabi_dcmplt>
 800a12c:	b148      	cbz	r0, 800a142 <_dtoa_r+0x17a>
 800a12e:	4648      	mov	r0, r9
 800a130:	f7f6 f968 	bl	8000404 <__aeabi_i2d>
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	f7f6 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800a13c:	b908      	cbnz	r0, 800a142 <_dtoa_r+0x17a>
 800a13e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a142:	f1b9 0f16 	cmp.w	r9, #22
 800a146:	d857      	bhi.n	800a1f8 <_dtoa_r+0x230>
 800a148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a14c:	4b5d      	ldr	r3, [pc, #372]	; (800a2c4 <_dtoa_r+0x2fc>)
 800a14e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 fc31 	bl	80009bc <__aeabi_dcmplt>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d04e      	beq.n	800a1fc <_dtoa_r+0x234>
 800a15e:	2300      	movs	r3, #0
 800a160:	f109 39ff 	add.w	r9, r9, #4294967295
 800a164:	930f      	str	r3, [sp, #60]	; 0x3c
 800a166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a168:	1b1c      	subs	r4, r3, r4
 800a16a:	1e63      	subs	r3, r4, #1
 800a16c:	9309      	str	r3, [sp, #36]	; 0x24
 800a16e:	bf49      	itett	mi
 800a170:	f1c4 0301 	rsbmi	r3, r4, #1
 800a174:	2300      	movpl	r3, #0
 800a176:	9306      	strmi	r3, [sp, #24]
 800a178:	2300      	movmi	r3, #0
 800a17a:	bf54      	ite	pl
 800a17c:	9306      	strpl	r3, [sp, #24]
 800a17e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a180:	f1b9 0f00 	cmp.w	r9, #0
 800a184:	db3c      	blt.n	800a200 <_dtoa_r+0x238>
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a18c:	444b      	add	r3, r9
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	2300      	movs	r3, #0
 800a192:	930a      	str	r3, [sp, #40]	; 0x28
 800a194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a196:	2b09      	cmp	r3, #9
 800a198:	d86c      	bhi.n	800a274 <_dtoa_r+0x2ac>
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	bfc4      	itt	gt
 800a19e:	3b04      	subgt	r3, #4
 800a1a0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a1a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1a4:	bfc8      	it	gt
 800a1a6:	2400      	movgt	r4, #0
 800a1a8:	f1a3 0302 	sub.w	r3, r3, #2
 800a1ac:	bfd8      	it	le
 800a1ae:	2401      	movle	r4, #1
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	f200 808b 	bhi.w	800a2cc <_dtoa_r+0x304>
 800a1b6:	e8df f003 	tbb	[pc, r3]
 800a1ba:	4f2d      	.short	0x4f2d
 800a1bc:	5b4d      	.short	0x5b4d
 800a1be:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a1c2:	441c      	add	r4, r3
 800a1c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	bfc3      	ittte	gt
 800a1cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1d0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a1d4:	fa09 f303 	lslgt.w	r3, r9, r3
 800a1d8:	f1c3 0320 	rsble	r3, r3, #32
 800a1dc:	bfc6      	itte	gt
 800a1de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1e2:	4318      	orrgt	r0, r3
 800a1e4:	fa06 f003 	lslle.w	r0, r6, r3
 800a1e8:	f7f6 f8fc 	bl	80003e4 <__aeabi_ui2d>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1f2:	3c01      	subs	r4, #1
 800a1f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1f6:	e770      	b.n	800a0da <_dtoa_r+0x112>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e7b3      	b.n	800a164 <_dtoa_r+0x19c>
 800a1fc:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1fe:	e7b2      	b.n	800a166 <_dtoa_r+0x19e>
 800a200:	9b06      	ldr	r3, [sp, #24]
 800a202:	eba3 0309 	sub.w	r3, r3, r9
 800a206:	9306      	str	r3, [sp, #24]
 800a208:	f1c9 0300 	rsb	r3, r9, #0
 800a20c:	930a      	str	r3, [sp, #40]	; 0x28
 800a20e:	2300      	movs	r3, #0
 800a210:	930e      	str	r3, [sp, #56]	; 0x38
 800a212:	e7bf      	b.n	800a194 <_dtoa_r+0x1cc>
 800a214:	2300      	movs	r3, #0
 800a216:	930b      	str	r3, [sp, #44]	; 0x2c
 800a218:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dc59      	bgt.n	800a2d2 <_dtoa_r+0x30a>
 800a21e:	f04f 0b01 	mov.w	fp, #1
 800a222:	465b      	mov	r3, fp
 800a224:	f8cd b008 	str.w	fp, [sp, #8]
 800a228:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a22c:	2200      	movs	r2, #0
 800a22e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a230:	6042      	str	r2, [r0, #4]
 800a232:	2204      	movs	r2, #4
 800a234:	f102 0614 	add.w	r6, r2, #20
 800a238:	429e      	cmp	r6, r3
 800a23a:	6841      	ldr	r1, [r0, #4]
 800a23c:	d94f      	bls.n	800a2de <_dtoa_r+0x316>
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 fcce 	bl	800abe0 <_Balloc>
 800a244:	9008      	str	r0, [sp, #32]
 800a246:	2800      	cmp	r0, #0
 800a248:	d14d      	bne.n	800a2e6 <_dtoa_r+0x31e>
 800a24a:	4602      	mov	r2, r0
 800a24c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a250:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <_dtoa_r+0x300>)
 800a252:	e6cd      	b.n	8009ff0 <_dtoa_r+0x28>
 800a254:	2301      	movs	r3, #1
 800a256:	e7de      	b.n	800a216 <_dtoa_r+0x24e>
 800a258:	2300      	movs	r3, #0
 800a25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a25e:	eb09 0b03 	add.w	fp, r9, r3
 800a262:	f10b 0301 	add.w	r3, fp, #1
 800a266:	2b01      	cmp	r3, #1
 800a268:	9302      	str	r3, [sp, #8]
 800a26a:	bfb8      	it	lt
 800a26c:	2301      	movlt	r3, #1
 800a26e:	e7dd      	b.n	800a22c <_dtoa_r+0x264>
 800a270:	2301      	movs	r3, #1
 800a272:	e7f2      	b.n	800a25a <_dtoa_r+0x292>
 800a274:	2401      	movs	r4, #1
 800a276:	2300      	movs	r3, #0
 800a278:	940b      	str	r4, [sp, #44]	; 0x2c
 800a27a:	9322      	str	r3, [sp, #136]	; 0x88
 800a27c:	f04f 3bff 	mov.w	fp, #4294967295
 800a280:	2200      	movs	r2, #0
 800a282:	2312      	movs	r3, #18
 800a284:	f8cd b008 	str.w	fp, [sp, #8]
 800a288:	9223      	str	r2, [sp, #140]	; 0x8c
 800a28a:	e7cf      	b.n	800a22c <_dtoa_r+0x264>
 800a28c:	f3af 8000 	nop.w
 800a290:	636f4361 	.word	0x636f4361
 800a294:	3fd287a7 	.word	0x3fd287a7
 800a298:	8b60c8b3 	.word	0x8b60c8b3
 800a29c:	3fc68a28 	.word	0x3fc68a28
 800a2a0:	509f79fb 	.word	0x509f79fb
 800a2a4:	3fd34413 	.word	0x3fd34413
 800a2a8:	0800d6e5 	.word	0x0800d6e5
 800a2ac:	0800d6fc 	.word	0x0800d6fc
 800a2b0:	7ff00000 	.word	0x7ff00000
 800a2b4:	0800d6e1 	.word	0x0800d6e1
 800a2b8:	0800d6d8 	.word	0x0800d6d8
 800a2bc:	0800d6b5 	.word	0x0800d6b5
 800a2c0:	3ff80000 	.word	0x3ff80000
 800a2c4:	0800d7f8 	.word	0x0800d7f8
 800a2c8:	0800d75b 	.word	0x0800d75b
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2d0:	e7d4      	b.n	800a27c <_dtoa_r+0x2b4>
 800a2d2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a2d6:	465b      	mov	r3, fp
 800a2d8:	f8cd b008 	str.w	fp, [sp, #8]
 800a2dc:	e7a6      	b.n	800a22c <_dtoa_r+0x264>
 800a2de:	3101      	adds	r1, #1
 800a2e0:	6041      	str	r1, [r0, #4]
 800a2e2:	0052      	lsls	r2, r2, #1
 800a2e4:	e7a6      	b.n	800a234 <_dtoa_r+0x26c>
 800a2e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2e8:	9a08      	ldr	r2, [sp, #32]
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	2b0e      	cmp	r3, #14
 800a2f0:	f200 80a8 	bhi.w	800a444 <_dtoa_r+0x47c>
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	f000 80a5 	beq.w	800a444 <_dtoa_r+0x47c>
 800a2fa:	f1b9 0f00 	cmp.w	r9, #0
 800a2fe:	dd34      	ble.n	800a36a <_dtoa_r+0x3a2>
 800a300:	4a9a      	ldr	r2, [pc, #616]	; (800a56c <_dtoa_r+0x5a4>)
 800a302:	f009 030f 	and.w	r3, r9, #15
 800a306:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a30a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a30e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a312:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a316:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a31a:	d016      	beq.n	800a34a <_dtoa_r+0x382>
 800a31c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a320:	4b93      	ldr	r3, [pc, #588]	; (800a570 <_dtoa_r+0x5a8>)
 800a322:	2703      	movs	r7, #3
 800a324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a328:	f7f6 fa00 	bl	800072c <__aeabi_ddiv>
 800a32c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a330:	f004 040f 	and.w	r4, r4, #15
 800a334:	4e8e      	ldr	r6, [pc, #568]	; (800a570 <_dtoa_r+0x5a8>)
 800a336:	b954      	cbnz	r4, 800a34e <_dtoa_r+0x386>
 800a338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a340:	f7f6 f9f4 	bl	800072c <__aeabi_ddiv>
 800a344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a348:	e029      	b.n	800a39e <_dtoa_r+0x3d6>
 800a34a:	2702      	movs	r7, #2
 800a34c:	e7f2      	b.n	800a334 <_dtoa_r+0x36c>
 800a34e:	07e1      	lsls	r1, r4, #31
 800a350:	d508      	bpl.n	800a364 <_dtoa_r+0x39c>
 800a352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a356:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a35a:	f7f6 f8bd 	bl	80004d8 <__aeabi_dmul>
 800a35e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a362:	3701      	adds	r7, #1
 800a364:	1064      	asrs	r4, r4, #1
 800a366:	3608      	adds	r6, #8
 800a368:	e7e5      	b.n	800a336 <_dtoa_r+0x36e>
 800a36a:	f000 80a5 	beq.w	800a4b8 <_dtoa_r+0x4f0>
 800a36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a372:	f1c9 0400 	rsb	r4, r9, #0
 800a376:	4b7d      	ldr	r3, [pc, #500]	; (800a56c <_dtoa_r+0x5a4>)
 800a378:	f004 020f 	and.w	r2, r4, #15
 800a37c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f6 f8a8 	bl	80004d8 <__aeabi_dmul>
 800a388:	2702      	movs	r7, #2
 800a38a:	2300      	movs	r3, #0
 800a38c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a390:	4e77      	ldr	r6, [pc, #476]	; (800a570 <_dtoa_r+0x5a8>)
 800a392:	1124      	asrs	r4, r4, #4
 800a394:	2c00      	cmp	r4, #0
 800a396:	f040 8084 	bne.w	800a4a2 <_dtoa_r+0x4da>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1d2      	bne.n	800a344 <_dtoa_r+0x37c>
 800a39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 808b 	beq.w	800a4bc <_dtoa_r+0x4f4>
 800a3a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a3aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a3ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4b6f      	ldr	r3, [pc, #444]	; (800a574 <_dtoa_r+0x5ac>)
 800a3b6:	f7f6 fb01 	bl	80009bc <__aeabi_dcmplt>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d07e      	beq.n	800a4bc <_dtoa_r+0x4f4>
 800a3be:	9b02      	ldr	r3, [sp, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d07b      	beq.n	800a4bc <_dtoa_r+0x4f4>
 800a3c4:	f1bb 0f00 	cmp.w	fp, #0
 800a3c8:	dd38      	ble.n	800a43c <_dtoa_r+0x474>
 800a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4b69      	ldr	r3, [pc, #420]	; (800a578 <_dtoa_r+0x5b0>)
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	465c      	mov	r4, fp
 800a3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3dc:	f109 38ff 	add.w	r8, r9, #4294967295
 800a3e0:	3701      	adds	r7, #1
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	f7f6 f80e 	bl	8000404 <__aeabi_i2d>
 800a3e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ec:	f7f6 f874 	bl	80004d8 <__aeabi_dmul>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4b62      	ldr	r3, [pc, #392]	; (800a57c <_dtoa_r+0x5b4>)
 800a3f4:	f7f5 feba 	bl	800016c <__adddf3>
 800a3f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a400:	9611      	str	r6, [sp, #68]	; 0x44
 800a402:	2c00      	cmp	r4, #0
 800a404:	d15d      	bne.n	800a4c2 <_dtoa_r+0x4fa>
 800a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a40a:	2200      	movs	r2, #0
 800a40c:	4b5c      	ldr	r3, [pc, #368]	; (800a580 <_dtoa_r+0x5b8>)
 800a40e:	f7f5 feab 	bl	8000168 <__aeabi_dsub>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a41a:	4633      	mov	r3, r6
 800a41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a41e:	f7f6 faeb 	bl	80009f8 <__aeabi_dcmpgt>
 800a422:	2800      	cmp	r0, #0
 800a424:	f040 829e 	bne.w	800a964 <_dtoa_r+0x99c>
 800a428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a42c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a42e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a432:	f7f6 fac3 	bl	80009bc <__aeabi_dcmplt>
 800a436:	2800      	cmp	r0, #0
 800a438:	f040 8292 	bne.w	800a960 <_dtoa_r+0x998>
 800a43c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a440:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a446:	2b00      	cmp	r3, #0
 800a448:	f2c0 8153 	blt.w	800a6f2 <_dtoa_r+0x72a>
 800a44c:	f1b9 0f0e 	cmp.w	r9, #14
 800a450:	f300 814f 	bgt.w	800a6f2 <_dtoa_r+0x72a>
 800a454:	4b45      	ldr	r3, [pc, #276]	; (800a56c <_dtoa_r+0x5a4>)
 800a456:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a45a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a45e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a464:	2b00      	cmp	r3, #0
 800a466:	f280 80db 	bge.w	800a620 <_dtoa_r+0x658>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f300 80d7 	bgt.w	800a620 <_dtoa_r+0x658>
 800a472:	f040 8274 	bne.w	800a95e <_dtoa_r+0x996>
 800a476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a47a:	2200      	movs	r2, #0
 800a47c:	4b40      	ldr	r3, [pc, #256]	; (800a580 <_dtoa_r+0x5b8>)
 800a47e:	f7f6 f82b 	bl	80004d8 <__aeabi_dmul>
 800a482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a486:	f7f6 faad 	bl	80009e4 <__aeabi_dcmpge>
 800a48a:	9c02      	ldr	r4, [sp, #8]
 800a48c:	4626      	mov	r6, r4
 800a48e:	2800      	cmp	r0, #0
 800a490:	f040 824a 	bne.w	800a928 <_dtoa_r+0x960>
 800a494:	2331      	movs	r3, #49	; 0x31
 800a496:	9f08      	ldr	r7, [sp, #32]
 800a498:	f109 0901 	add.w	r9, r9, #1
 800a49c:	f807 3b01 	strb.w	r3, [r7], #1
 800a4a0:	e246      	b.n	800a930 <_dtoa_r+0x968>
 800a4a2:	07e2      	lsls	r2, r4, #31
 800a4a4:	d505      	bpl.n	800a4b2 <_dtoa_r+0x4ea>
 800a4a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4aa:	f7f6 f815 	bl	80004d8 <__aeabi_dmul>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	3701      	adds	r7, #1
 800a4b2:	1064      	asrs	r4, r4, #1
 800a4b4:	3608      	adds	r6, #8
 800a4b6:	e76d      	b.n	800a394 <_dtoa_r+0x3cc>
 800a4b8:	2702      	movs	r7, #2
 800a4ba:	e770      	b.n	800a39e <_dtoa_r+0x3d6>
 800a4bc:	46c8      	mov	r8, r9
 800a4be:	9c02      	ldr	r4, [sp, #8]
 800a4c0:	e78f      	b.n	800a3e2 <_dtoa_r+0x41a>
 800a4c2:	9908      	ldr	r1, [sp, #32]
 800a4c4:	4b29      	ldr	r3, [pc, #164]	; (800a56c <_dtoa_r+0x5a4>)
 800a4c6:	4421      	add	r1, r4
 800a4c8:	9112      	str	r1, [sp, #72]	; 0x48
 800a4ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a4d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	d055      	beq.n	800a588 <_dtoa_r+0x5c0>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	4929      	ldr	r1, [pc, #164]	; (800a584 <_dtoa_r+0x5bc>)
 800a4e0:	f7f6 f924 	bl	800072c <__aeabi_ddiv>
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	f7f5 fe3e 	bl	8000168 <__aeabi_dsub>
 800a4ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4f0:	9f08      	ldr	r7, [sp, #32]
 800a4f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f6:	f7f6 fa9f 	bl	8000a38 <__aeabi_d2iz>
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	f7f5 ff82 	bl	8000404 <__aeabi_i2d>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a508:	f7f5 fe2e 	bl	8000168 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	3430      	adds	r4, #48	; 0x30
 800a512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a51a:	f807 4b01 	strb.w	r4, [r7], #1
 800a51e:	f7f6 fa4d 	bl	80009bc <__aeabi_dcmplt>
 800a522:	2800      	cmp	r0, #0
 800a524:	d174      	bne.n	800a610 <_dtoa_r+0x648>
 800a526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a52a:	2000      	movs	r0, #0
 800a52c:	4911      	ldr	r1, [pc, #68]	; (800a574 <_dtoa_r+0x5ac>)
 800a52e:	f7f5 fe1b 	bl	8000168 <__aeabi_dsub>
 800a532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a536:	f7f6 fa41 	bl	80009bc <__aeabi_dcmplt>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f040 80b6 	bne.w	800a6ac <_dtoa_r+0x6e4>
 800a540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a542:	429f      	cmp	r7, r3
 800a544:	f43f af7a 	beq.w	800a43c <_dtoa_r+0x474>
 800a548:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a54c:	2200      	movs	r2, #0
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <_dtoa_r+0x5b0>)
 800a550:	f7f5 ffc2 	bl	80004d8 <__aeabi_dmul>
 800a554:	2200      	movs	r2, #0
 800a556:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a55a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <_dtoa_r+0x5b0>)
 800a560:	f7f5 ffba 	bl	80004d8 <__aeabi_dmul>
 800a564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a568:	e7c3      	b.n	800a4f2 <_dtoa_r+0x52a>
 800a56a:	bf00      	nop
 800a56c:	0800d7f8 	.word	0x0800d7f8
 800a570:	0800d7d0 	.word	0x0800d7d0
 800a574:	3ff00000 	.word	0x3ff00000
 800a578:	40240000 	.word	0x40240000
 800a57c:	401c0000 	.word	0x401c0000
 800a580:	40140000 	.word	0x40140000
 800a584:	3fe00000 	.word	0x3fe00000
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 ffa4 	bl	80004d8 <__aeabi_dmul>
 800a590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a592:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a596:	9c08      	ldr	r4, [sp, #32]
 800a598:	9314      	str	r3, [sp, #80]	; 0x50
 800a59a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59e:	f7f6 fa4b 	bl	8000a38 <__aeabi_d2iz>
 800a5a2:	9015      	str	r0, [sp, #84]	; 0x54
 800a5a4:	f7f5 ff2e 	bl	8000404 <__aeabi_i2d>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b0:	f7f5 fdda 	bl	8000168 <__aeabi_dsub>
 800a5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	3330      	adds	r3, #48	; 0x30
 800a5ba:	f804 3b01 	strb.w	r3, [r4], #1
 800a5be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	f04f 0200 	mov.w	r2, #0
 800a5c8:	d124      	bne.n	800a614 <_dtoa_r+0x64c>
 800a5ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5ce:	4bb3      	ldr	r3, [pc, #716]	; (800a89c <_dtoa_r+0x8d4>)
 800a5d0:	f7f5 fdcc 	bl	800016c <__adddf3>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f6 fa0c 	bl	80009f8 <__aeabi_dcmpgt>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d162      	bne.n	800a6aa <_dtoa_r+0x6e2>
 800a5e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	49ac      	ldr	r1, [pc, #688]	; (800a89c <_dtoa_r+0x8d4>)
 800a5ec:	f7f5 fdbc 	bl	8000168 <__aeabi_dsub>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f6 f9e0 	bl	80009bc <__aeabi_dcmplt>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f43f af1d 	beq.w	800a43c <_dtoa_r+0x474>
 800a602:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a604:	1e7b      	subs	r3, r7, #1
 800a606:	9314      	str	r3, [sp, #80]	; 0x50
 800a608:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a60c:	2b30      	cmp	r3, #48	; 0x30
 800a60e:	d0f8      	beq.n	800a602 <_dtoa_r+0x63a>
 800a610:	46c1      	mov	r9, r8
 800a612:	e03a      	b.n	800a68a <_dtoa_r+0x6c2>
 800a614:	4ba2      	ldr	r3, [pc, #648]	; (800a8a0 <_dtoa_r+0x8d8>)
 800a616:	f7f5 ff5f 	bl	80004d8 <__aeabi_dmul>
 800a61a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a61e:	e7bc      	b.n	800a59a <_dtoa_r+0x5d2>
 800a620:	9f08      	ldr	r7, [sp, #32]
 800a622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a62a:	f7f6 f87f 	bl	800072c <__aeabi_ddiv>
 800a62e:	f7f6 fa03 	bl	8000a38 <__aeabi_d2iz>
 800a632:	4604      	mov	r4, r0
 800a634:	f7f5 fee6 	bl	8000404 <__aeabi_i2d>
 800a638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a63c:	f7f5 ff4c 	bl	80004d8 <__aeabi_dmul>
 800a640:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a644:	460b      	mov	r3, r1
 800a646:	4602      	mov	r2, r0
 800a648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a64c:	f7f5 fd8c 	bl	8000168 <__aeabi_dsub>
 800a650:	f807 6b01 	strb.w	r6, [r7], #1
 800a654:	9e08      	ldr	r6, [sp, #32]
 800a656:	9b02      	ldr	r3, [sp, #8]
 800a658:	1bbe      	subs	r6, r7, r6
 800a65a:	42b3      	cmp	r3, r6
 800a65c:	d13a      	bne.n	800a6d4 <_dtoa_r+0x70c>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	f7f5 fd83 	bl	800016c <__adddf3>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a66e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a672:	f7f6 f9c1 	bl	80009f8 <__aeabi_dcmpgt>
 800a676:	bb58      	cbnz	r0, 800a6d0 <_dtoa_r+0x708>
 800a678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a680:	f7f6 f992 	bl	80009a8 <__aeabi_dcmpeq>
 800a684:	b108      	cbz	r0, 800a68a <_dtoa_r+0x6c2>
 800a686:	07e1      	lsls	r1, r4, #31
 800a688:	d422      	bmi.n	800a6d0 <_dtoa_r+0x708>
 800a68a:	4628      	mov	r0, r5
 800a68c:	4651      	mov	r1, sl
 800a68e:	f000 fae7 	bl	800ac60 <_Bfree>
 800a692:	2300      	movs	r3, #0
 800a694:	703b      	strb	r3, [r7, #0]
 800a696:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a698:	f109 0001 	add.w	r0, r9, #1
 800a69c:	6018      	str	r0, [r3, #0]
 800a69e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f43f acdf 	beq.w	800a064 <_dtoa_r+0x9c>
 800a6a6:	601f      	str	r7, [r3, #0]
 800a6a8:	e4dc      	b.n	800a064 <_dtoa_r+0x9c>
 800a6aa:	4627      	mov	r7, r4
 800a6ac:	463b      	mov	r3, r7
 800a6ae:	461f      	mov	r7, r3
 800a6b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b4:	2a39      	cmp	r2, #57	; 0x39
 800a6b6:	d107      	bne.n	800a6c8 <_dtoa_r+0x700>
 800a6b8:	9a08      	ldr	r2, [sp, #32]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d1f7      	bne.n	800a6ae <_dtoa_r+0x6e6>
 800a6be:	2230      	movs	r2, #48	; 0x30
 800a6c0:	9908      	ldr	r1, [sp, #32]
 800a6c2:	f108 0801 	add.w	r8, r8, #1
 800a6c6:	700a      	strb	r2, [r1, #0]
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	e79f      	b.n	800a610 <_dtoa_r+0x648>
 800a6d0:	46c8      	mov	r8, r9
 800a6d2:	e7eb      	b.n	800a6ac <_dtoa_r+0x6e4>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4b72      	ldr	r3, [pc, #456]	; (800a8a0 <_dtoa_r+0x8d8>)
 800a6d8:	f7f5 fefe 	bl	80004d8 <__aeabi_dmul>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f7f6 f95e 	bl	80009a8 <__aeabi_dcmpeq>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d098      	beq.n	800a622 <_dtoa_r+0x65a>
 800a6f0:	e7cb      	b.n	800a68a <_dtoa_r+0x6c2>
 800a6f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	f000 80cd 	beq.w	800a894 <_dtoa_r+0x8cc>
 800a6fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6fc:	2a01      	cmp	r2, #1
 800a6fe:	f300 80af 	bgt.w	800a860 <_dtoa_r+0x898>
 800a702:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 80a7 	beq.w	800a858 <_dtoa_r+0x890>
 800a70a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a70e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a710:	9f06      	ldr	r7, [sp, #24]
 800a712:	9a06      	ldr	r2, [sp, #24]
 800a714:	2101      	movs	r1, #1
 800a716:	441a      	add	r2, r3
 800a718:	9206      	str	r2, [sp, #24]
 800a71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a71c:	4628      	mov	r0, r5
 800a71e:	441a      	add	r2, r3
 800a720:	9209      	str	r2, [sp, #36]	; 0x24
 800a722:	f000 fb57 	bl	800add4 <__i2b>
 800a726:	4606      	mov	r6, r0
 800a728:	2f00      	cmp	r7, #0
 800a72a:	dd0c      	ble.n	800a746 <_dtoa_r+0x77e>
 800a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd09      	ble.n	800a746 <_dtoa_r+0x77e>
 800a732:	42bb      	cmp	r3, r7
 800a734:	bfa8      	it	ge
 800a736:	463b      	movge	r3, r7
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	1aff      	subs	r7, r7, r3
 800a73c:	1ad2      	subs	r2, r2, r3
 800a73e:	9206      	str	r2, [sp, #24]
 800a740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a748:	b1f3      	cbz	r3, 800a788 <_dtoa_r+0x7c0>
 800a74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80a9 	beq.w	800a8a4 <_dtoa_r+0x8dc>
 800a752:	2c00      	cmp	r4, #0
 800a754:	dd10      	ble.n	800a778 <_dtoa_r+0x7b0>
 800a756:	4631      	mov	r1, r6
 800a758:	4622      	mov	r2, r4
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 fbf4 	bl	800af48 <__pow5mult>
 800a760:	4652      	mov	r2, sl
 800a762:	4601      	mov	r1, r0
 800a764:	4606      	mov	r6, r0
 800a766:	4628      	mov	r0, r5
 800a768:	f000 fb4a 	bl	800ae00 <__multiply>
 800a76c:	4680      	mov	r8, r0
 800a76e:	4651      	mov	r1, sl
 800a770:	4628      	mov	r0, r5
 800a772:	f000 fa75 	bl	800ac60 <_Bfree>
 800a776:	46c2      	mov	sl, r8
 800a778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77a:	1b1a      	subs	r2, r3, r4
 800a77c:	d004      	beq.n	800a788 <_dtoa_r+0x7c0>
 800a77e:	4651      	mov	r1, sl
 800a780:	4628      	mov	r0, r5
 800a782:	f000 fbe1 	bl	800af48 <__pow5mult>
 800a786:	4682      	mov	sl, r0
 800a788:	2101      	movs	r1, #1
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 fb22 	bl	800add4 <__i2b>
 800a790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a792:	4604      	mov	r4, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	f340 8087 	ble.w	800a8a8 <_dtoa_r+0x8e0>
 800a79a:	461a      	mov	r2, r3
 800a79c:	4601      	mov	r1, r0
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 fbd2 	bl	800af48 <__pow5mult>
 800a7a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	f340 8080 	ble.w	800a8ae <_dtoa_r+0x8e6>
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	6923      	ldr	r3, [r4, #16]
 800a7b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7b8:	6918      	ldr	r0, [r3, #16]
 800a7ba:	f000 fabd 	bl	800ad38 <__hi0bits>
 800a7be:	f1c0 0020 	rsb	r0, r0, #32
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	4418      	add	r0, r3
 800a7c6:	f010 001f 	ands.w	r0, r0, #31
 800a7ca:	f000 8092 	beq.w	800a8f2 <_dtoa_r+0x92a>
 800a7ce:	f1c0 0320 	rsb	r3, r0, #32
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	f340 808a 	ble.w	800a8ec <_dtoa_r+0x924>
 800a7d8:	f1c0 001c 	rsb	r0, r0, #28
 800a7dc:	9b06      	ldr	r3, [sp, #24]
 800a7de:	4407      	add	r7, r0
 800a7e0:	4403      	add	r3, r0
 800a7e2:	9306      	str	r3, [sp, #24]
 800a7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e6:	4403      	add	r3, r0
 800a7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd05      	ble.n	800a7fc <_dtoa_r+0x834>
 800a7f0:	4651      	mov	r1, sl
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 fc01 	bl	800affc <__lshift>
 800a7fa:	4682      	mov	sl, r0
 800a7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd05      	ble.n	800a80e <_dtoa_r+0x846>
 800a802:	4621      	mov	r1, r4
 800a804:	461a      	mov	r2, r3
 800a806:	4628      	mov	r0, r5
 800a808:	f000 fbf8 	bl	800affc <__lshift>
 800a80c:	4604      	mov	r4, r0
 800a80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d070      	beq.n	800a8f6 <_dtoa_r+0x92e>
 800a814:	4621      	mov	r1, r4
 800a816:	4650      	mov	r0, sl
 800a818:	f000 fc5c 	bl	800b0d4 <__mcmp>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	da6a      	bge.n	800a8f6 <_dtoa_r+0x92e>
 800a820:	2300      	movs	r3, #0
 800a822:	4651      	mov	r1, sl
 800a824:	220a      	movs	r2, #10
 800a826:	4628      	mov	r0, r5
 800a828:	f000 fa3c 	bl	800aca4 <__multadd>
 800a82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a82e:	4682      	mov	sl, r0
 800a830:	f109 39ff 	add.w	r9, r9, #4294967295
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8193 	beq.w	800ab60 <_dtoa_r+0xb98>
 800a83a:	4631      	mov	r1, r6
 800a83c:	2300      	movs	r3, #0
 800a83e:	220a      	movs	r2, #10
 800a840:	4628      	mov	r0, r5
 800a842:	f000 fa2f 	bl	800aca4 <__multadd>
 800a846:	f1bb 0f00 	cmp.w	fp, #0
 800a84a:	4606      	mov	r6, r0
 800a84c:	f300 8093 	bgt.w	800a976 <_dtoa_r+0x9ae>
 800a850:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a852:	2b02      	cmp	r3, #2
 800a854:	dc57      	bgt.n	800a906 <_dtoa_r+0x93e>
 800a856:	e08e      	b.n	800a976 <_dtoa_r+0x9ae>
 800a858:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a85a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a85e:	e756      	b.n	800a70e <_dtoa_r+0x746>
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	1e5c      	subs	r4, r3, #1
 800a864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a866:	42a3      	cmp	r3, r4
 800a868:	bfb7      	itett	lt
 800a86a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a86c:	1b1c      	subge	r4, r3, r4
 800a86e:	1ae2      	sublt	r2, r4, r3
 800a870:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a872:	bfbe      	ittt	lt
 800a874:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a876:	189b      	addlt	r3, r3, r2
 800a878:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	bfb8      	it	lt
 800a87e:	2400      	movlt	r4, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	bfbb      	ittet	lt
 800a884:	9b06      	ldrlt	r3, [sp, #24]
 800a886:	9a02      	ldrlt	r2, [sp, #8]
 800a888:	9f06      	ldrge	r7, [sp, #24]
 800a88a:	1a9f      	sublt	r7, r3, r2
 800a88c:	bfac      	ite	ge
 800a88e:	9b02      	ldrge	r3, [sp, #8]
 800a890:	2300      	movlt	r3, #0
 800a892:	e73e      	b.n	800a712 <_dtoa_r+0x74a>
 800a894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a896:	9f06      	ldr	r7, [sp, #24]
 800a898:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a89a:	e745      	b.n	800a728 <_dtoa_r+0x760>
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	40240000 	.word	0x40240000
 800a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a6:	e76a      	b.n	800a77e <_dtoa_r+0x7b6>
 800a8a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	dc19      	bgt.n	800a8e2 <_dtoa_r+0x91a>
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	b9bb      	cbnz	r3, 800a8e2 <_dtoa_r+0x91a>
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b8:	b99b      	cbnz	r3, 800a8e2 <_dtoa_r+0x91a>
 800a8ba:	9b05      	ldr	r3, [sp, #20]
 800a8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c0:	0d1b      	lsrs	r3, r3, #20
 800a8c2:	051b      	lsls	r3, r3, #20
 800a8c4:	b183      	cbz	r3, 800a8e8 <_dtoa_r+0x920>
 800a8c6:	f04f 0801 	mov.w	r8, #1
 800a8ca:	9b06      	ldr	r3, [sp, #24]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	9306      	str	r3, [sp, #24]
 800a8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f47f af6a 	bne.w	800a7b2 <_dtoa_r+0x7ea>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e76f      	b.n	800a7c2 <_dtoa_r+0x7fa>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	e7f6      	b.n	800a8d6 <_dtoa_r+0x90e>
 800a8e8:	4698      	mov	r8, r3
 800a8ea:	e7f4      	b.n	800a8d6 <_dtoa_r+0x90e>
 800a8ec:	f43f af7d 	beq.w	800a7ea <_dtoa_r+0x822>
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	301c      	adds	r0, #28
 800a8f4:	e772      	b.n	800a7dc <_dtoa_r+0x814>
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc36      	bgt.n	800a96a <_dtoa_r+0x9a2>
 800a8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	dd33      	ble.n	800a96a <_dtoa_r+0x9a2>
 800a902:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a906:	f1bb 0f00 	cmp.w	fp, #0
 800a90a:	d10d      	bne.n	800a928 <_dtoa_r+0x960>
 800a90c:	4621      	mov	r1, r4
 800a90e:	465b      	mov	r3, fp
 800a910:	2205      	movs	r2, #5
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f9c6 	bl	800aca4 <__multadd>
 800a918:	4601      	mov	r1, r0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4650      	mov	r0, sl
 800a91e:	f000 fbd9 	bl	800b0d4 <__mcmp>
 800a922:	2800      	cmp	r0, #0
 800a924:	f73f adb6 	bgt.w	800a494 <_dtoa_r+0x4cc>
 800a928:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a92a:	9f08      	ldr	r7, [sp, #32]
 800a92c:	ea6f 0903 	mvn.w	r9, r3
 800a930:	f04f 0800 	mov.w	r8, #0
 800a934:	4621      	mov	r1, r4
 800a936:	4628      	mov	r0, r5
 800a938:	f000 f992 	bl	800ac60 <_Bfree>
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	f43f aea4 	beq.w	800a68a <_dtoa_r+0x6c2>
 800a942:	f1b8 0f00 	cmp.w	r8, #0
 800a946:	d005      	beq.n	800a954 <_dtoa_r+0x98c>
 800a948:	45b0      	cmp	r8, r6
 800a94a:	d003      	beq.n	800a954 <_dtoa_r+0x98c>
 800a94c:	4641      	mov	r1, r8
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f986 	bl	800ac60 <_Bfree>
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	f000 f982 	bl	800ac60 <_Bfree>
 800a95c:	e695      	b.n	800a68a <_dtoa_r+0x6c2>
 800a95e:	2400      	movs	r4, #0
 800a960:	4626      	mov	r6, r4
 800a962:	e7e1      	b.n	800a928 <_dtoa_r+0x960>
 800a964:	46c1      	mov	r9, r8
 800a966:	4626      	mov	r6, r4
 800a968:	e594      	b.n	800a494 <_dtoa_r+0x4cc>
 800a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80fc 	beq.w	800ab6e <_dtoa_r+0xba6>
 800a976:	2f00      	cmp	r7, #0
 800a978:	dd05      	ble.n	800a986 <_dtoa_r+0x9be>
 800a97a:	4631      	mov	r1, r6
 800a97c:	463a      	mov	r2, r7
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 fb3c 	bl	800affc <__lshift>
 800a984:	4606      	mov	r6, r0
 800a986:	f1b8 0f00 	cmp.w	r8, #0
 800a98a:	d05c      	beq.n	800aa46 <_dtoa_r+0xa7e>
 800a98c:	4628      	mov	r0, r5
 800a98e:	6871      	ldr	r1, [r6, #4]
 800a990:	f000 f926 	bl	800abe0 <_Balloc>
 800a994:	4607      	mov	r7, r0
 800a996:	b928      	cbnz	r0, 800a9a4 <_dtoa_r+0x9dc>
 800a998:	4602      	mov	r2, r0
 800a99a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a99e:	4b7e      	ldr	r3, [pc, #504]	; (800ab98 <_dtoa_r+0xbd0>)
 800a9a0:	f7ff bb26 	b.w	8009ff0 <_dtoa_r+0x28>
 800a9a4:	6932      	ldr	r2, [r6, #16]
 800a9a6:	f106 010c 	add.w	r1, r6, #12
 800a9aa:	3202      	adds	r2, #2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	300c      	adds	r0, #12
 800a9b0:	f7fe fcea 	bl	8009388 <memcpy>
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 fb1f 	bl	800affc <__lshift>
 800a9be:	46b0      	mov	r8, r6
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	9302      	str	r3, [sp, #8]
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	445b      	add	r3, fp
 800a9cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9e0:	f7ff fa62 	bl	8009ea8 <quorem>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4641      	mov	r1, r8
 800a9e8:	3330      	adds	r3, #48	; 0x30
 800a9ea:	9004      	str	r0, [sp, #16]
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9f0:	f000 fb70 	bl	800b0d4 <__mcmp>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	9006      	str	r0, [sp, #24]
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f000 fb86 	bl	800b10c <__mdiff>
 800aa00:	68c2      	ldr	r2, [r0, #12]
 800aa02:	4607      	mov	r7, r0
 800aa04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa06:	bb02      	cbnz	r2, 800aa4a <_dtoa_r+0xa82>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f000 fb62 	bl	800b0d4 <__mcmp>
 800aa10:	4602      	mov	r2, r0
 800aa12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa14:	4639      	mov	r1, r7
 800aa16:	4628      	mov	r0, r5
 800aa18:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aa1c:	f000 f920 	bl	800ac60 <_Bfree>
 800aa20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa24:	9f02      	ldr	r7, [sp, #8]
 800aa26:	ea43 0102 	orr.w	r1, r3, r2
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa30:	d10d      	bne.n	800aa4e <_dtoa_r+0xa86>
 800aa32:	2b39      	cmp	r3, #57	; 0x39
 800aa34:	d027      	beq.n	800aa86 <_dtoa_r+0xabe>
 800aa36:	9a06      	ldr	r2, [sp, #24]
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	dd01      	ble.n	800aa40 <_dtoa_r+0xa78>
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	3331      	adds	r3, #49	; 0x31
 800aa40:	f88b 3000 	strb.w	r3, [fp]
 800aa44:	e776      	b.n	800a934 <_dtoa_r+0x96c>
 800aa46:	4630      	mov	r0, r6
 800aa48:	e7b9      	b.n	800a9be <_dtoa_r+0x9f6>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	e7e2      	b.n	800aa14 <_dtoa_r+0xa4c>
 800aa4e:	9906      	ldr	r1, [sp, #24]
 800aa50:	2900      	cmp	r1, #0
 800aa52:	db04      	blt.n	800aa5e <_dtoa_r+0xa96>
 800aa54:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aa56:	4301      	orrs	r1, r0
 800aa58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa5a:	4301      	orrs	r1, r0
 800aa5c:	d120      	bne.n	800aaa0 <_dtoa_r+0xad8>
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	ddee      	ble.n	800aa40 <_dtoa_r+0xa78>
 800aa62:	4651      	mov	r1, sl
 800aa64:	2201      	movs	r2, #1
 800aa66:	4628      	mov	r0, r5
 800aa68:	9302      	str	r3, [sp, #8]
 800aa6a:	f000 fac7 	bl	800affc <__lshift>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4682      	mov	sl, r0
 800aa72:	f000 fb2f 	bl	800b0d4 <__mcmp>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	dc02      	bgt.n	800aa82 <_dtoa_r+0xaba>
 800aa7c:	d1e0      	bne.n	800aa40 <_dtoa_r+0xa78>
 800aa7e:	07da      	lsls	r2, r3, #31
 800aa80:	d5de      	bpl.n	800aa40 <_dtoa_r+0xa78>
 800aa82:	2b39      	cmp	r3, #57	; 0x39
 800aa84:	d1da      	bne.n	800aa3c <_dtoa_r+0xa74>
 800aa86:	2339      	movs	r3, #57	; 0x39
 800aa88:	f88b 3000 	strb.w	r3, [fp]
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	461f      	mov	r7, r3
 800aa90:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	2a39      	cmp	r2, #57	; 0x39
 800aa98:	d050      	beq.n	800ab3c <_dtoa_r+0xb74>
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	e749      	b.n	800a934 <_dtoa_r+0x96c>
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	dd03      	ble.n	800aaac <_dtoa_r+0xae4>
 800aaa4:	2b39      	cmp	r3, #57	; 0x39
 800aaa6:	d0ee      	beq.n	800aa86 <_dtoa_r+0xabe>
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	e7c9      	b.n	800aa40 <_dtoa_r+0xa78>
 800aaac:	9a02      	ldr	r2, [sp, #8]
 800aaae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aab0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aab4:	428a      	cmp	r2, r1
 800aab6:	d02a      	beq.n	800ab0e <_dtoa_r+0xb46>
 800aab8:	4651      	mov	r1, sl
 800aaba:	2300      	movs	r3, #0
 800aabc:	220a      	movs	r2, #10
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f8f0 	bl	800aca4 <__multadd>
 800aac4:	45b0      	cmp	r8, r6
 800aac6:	4682      	mov	sl, r0
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	f04f 020a 	mov.w	r2, #10
 800aad0:	4641      	mov	r1, r8
 800aad2:	4628      	mov	r0, r5
 800aad4:	d107      	bne.n	800aae6 <_dtoa_r+0xb1e>
 800aad6:	f000 f8e5 	bl	800aca4 <__multadd>
 800aada:	4680      	mov	r8, r0
 800aadc:	4606      	mov	r6, r0
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	3301      	adds	r3, #1
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	e777      	b.n	800a9d6 <_dtoa_r+0xa0e>
 800aae6:	f000 f8dd 	bl	800aca4 <__multadd>
 800aaea:	4631      	mov	r1, r6
 800aaec:	4680      	mov	r8, r0
 800aaee:	2300      	movs	r3, #0
 800aaf0:	220a      	movs	r2, #10
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f8d6 	bl	800aca4 <__multadd>
 800aaf8:	4606      	mov	r6, r0
 800aafa:	e7f0      	b.n	800aade <_dtoa_r+0xb16>
 800aafc:	f1bb 0f00 	cmp.w	fp, #0
 800ab00:	bfcc      	ite	gt
 800ab02:	465f      	movgt	r7, fp
 800ab04:	2701      	movle	r7, #1
 800ab06:	f04f 0800 	mov.w	r8, #0
 800ab0a:	9a08      	ldr	r2, [sp, #32]
 800ab0c:	4417      	add	r7, r2
 800ab0e:	4651      	mov	r1, sl
 800ab10:	2201      	movs	r2, #1
 800ab12:	4628      	mov	r0, r5
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	f000 fa71 	bl	800affc <__lshift>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	f000 fad9 	bl	800b0d4 <__mcmp>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	dcb2      	bgt.n	800aa8c <_dtoa_r+0xac4>
 800ab26:	d102      	bne.n	800ab2e <_dtoa_r+0xb66>
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	07db      	lsls	r3, r3, #31
 800ab2c:	d4ae      	bmi.n	800aa8c <_dtoa_r+0xac4>
 800ab2e:	463b      	mov	r3, r7
 800ab30:	461f      	mov	r7, r3
 800ab32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab36:	2a30      	cmp	r2, #48	; 0x30
 800ab38:	d0fa      	beq.n	800ab30 <_dtoa_r+0xb68>
 800ab3a:	e6fb      	b.n	800a934 <_dtoa_r+0x96c>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d1a5      	bne.n	800aa8e <_dtoa_r+0xac6>
 800ab42:	2331      	movs	r3, #49	; 0x31
 800ab44:	f109 0901 	add.w	r9, r9, #1
 800ab48:	7013      	strb	r3, [r2, #0]
 800ab4a:	e6f3      	b.n	800a934 <_dtoa_r+0x96c>
 800ab4c:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <_dtoa_r+0xbd4>)
 800ab4e:	f7ff baa7 	b.w	800a0a0 <_dtoa_r+0xd8>
 800ab52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f47f aa80 	bne.w	800a05a <_dtoa_r+0x92>
 800ab5a:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <_dtoa_r+0xbd8>)
 800ab5c:	f7ff baa0 	b.w	800a0a0 <_dtoa_r+0xd8>
 800ab60:	f1bb 0f00 	cmp.w	fp, #0
 800ab64:	dc03      	bgt.n	800ab6e <_dtoa_r+0xba6>
 800ab66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	f73f aecc 	bgt.w	800a906 <_dtoa_r+0x93e>
 800ab6e:	9f08      	ldr	r7, [sp, #32]
 800ab70:	4621      	mov	r1, r4
 800ab72:	4650      	mov	r0, sl
 800ab74:	f7ff f998 	bl	8009ea8 <quorem>
 800ab78:	9a08      	ldr	r2, [sp, #32]
 800ab7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab7e:	f807 3b01 	strb.w	r3, [r7], #1
 800ab82:	1aba      	subs	r2, r7, r2
 800ab84:	4593      	cmp	fp, r2
 800ab86:	ddb9      	ble.n	800aafc <_dtoa_r+0xb34>
 800ab88:	4651      	mov	r1, sl
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 f888 	bl	800aca4 <__multadd>
 800ab94:	4682      	mov	sl, r0
 800ab96:	e7eb      	b.n	800ab70 <_dtoa_r+0xba8>
 800ab98:	0800d75b 	.word	0x0800d75b
 800ab9c:	0800d6b4 	.word	0x0800d6b4
 800aba0:	0800d6d8 	.word	0x0800d6d8

0800aba4 <_localeconv_r>:
 800aba4:	4800      	ldr	r0, [pc, #0]	; (800aba8 <_localeconv_r+0x4>)
 800aba6:	4770      	bx	lr
 800aba8:	2000024c 	.word	0x2000024c

0800abac <memchr>:
 800abac:	4603      	mov	r3, r0
 800abae:	b510      	push	{r4, lr}
 800abb0:	b2c9      	uxtb	r1, r1
 800abb2:	4402      	add	r2, r0
 800abb4:	4293      	cmp	r3, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	d101      	bne.n	800abbe <memchr+0x12>
 800abba:	2000      	movs	r0, #0
 800abbc:	e003      	b.n	800abc6 <memchr+0x1a>
 800abbe:	7804      	ldrb	r4, [r0, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	428c      	cmp	r4, r1
 800abc4:	d1f6      	bne.n	800abb4 <memchr+0x8>
 800abc6:	bd10      	pop	{r4, pc}

0800abc8 <__malloc_lock>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__malloc_lock+0x8>)
 800abca:	f000 bd26 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	200009bc 	.word	0x200009bc

0800abd4 <__malloc_unlock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__malloc_unlock+0x8>)
 800abd6:	f000 bd21 	b.w	800b61c <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	200009bc 	.word	0x200009bc

0800abe0 <_Balloc>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abe4:	4604      	mov	r4, r0
 800abe6:	460d      	mov	r5, r1
 800abe8:	b976      	cbnz	r6, 800ac08 <_Balloc+0x28>
 800abea:	2010      	movs	r0, #16
 800abec:	f7fe fbae 	bl	800934c <malloc>
 800abf0:	4602      	mov	r2, r0
 800abf2:	6260      	str	r0, [r4, #36]	; 0x24
 800abf4:	b920      	cbnz	r0, 800ac00 <_Balloc+0x20>
 800abf6:	2166      	movs	r1, #102	; 0x66
 800abf8:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <_Balloc+0x78>)
 800abfa:	4818      	ldr	r0, [pc, #96]	; (800ac5c <_Balloc+0x7c>)
 800abfc:	f000 fcdc 	bl	800b5b8 <__assert_func>
 800ac00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac04:	6006      	str	r6, [r0, #0]
 800ac06:	60c6      	str	r6, [r0, #12]
 800ac08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac0a:	68f3      	ldr	r3, [r6, #12]
 800ac0c:	b183      	cbz	r3, 800ac30 <_Balloc+0x50>
 800ac0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac16:	b9b8      	cbnz	r0, 800ac48 <_Balloc+0x68>
 800ac18:	2101      	movs	r1, #1
 800ac1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac1e:	1d72      	adds	r2, r6, #5
 800ac20:	4620      	mov	r0, r4
 800ac22:	0092      	lsls	r2, r2, #2
 800ac24:	f000 fb5e 	bl	800b2e4 <_calloc_r>
 800ac28:	b160      	cbz	r0, 800ac44 <_Balloc+0x64>
 800ac2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac2e:	e00e      	b.n	800ac4e <_Balloc+0x6e>
 800ac30:	2221      	movs	r2, #33	; 0x21
 800ac32:	2104      	movs	r1, #4
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fb55 	bl	800b2e4 <_calloc_r>
 800ac3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3c:	60f0      	str	r0, [r6, #12]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e4      	bne.n	800ac0e <_Balloc+0x2e>
 800ac44:	2000      	movs	r0, #0
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	6802      	ldr	r2, [r0, #0]
 800ac4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac54:	e7f7      	b.n	800ac46 <_Balloc+0x66>
 800ac56:	bf00      	nop
 800ac58:	0800d6e5 	.word	0x0800d6e5
 800ac5c:	0800d76c 	.word	0x0800d76c

0800ac60 <_Bfree>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac64:	4605      	mov	r5, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	b976      	cbnz	r6, 800ac88 <_Bfree+0x28>
 800ac6a:	2010      	movs	r0, #16
 800ac6c:	f7fe fb6e 	bl	800934c <malloc>
 800ac70:	4602      	mov	r2, r0
 800ac72:	6268      	str	r0, [r5, #36]	; 0x24
 800ac74:	b920      	cbnz	r0, 800ac80 <_Bfree+0x20>
 800ac76:	218a      	movs	r1, #138	; 0x8a
 800ac78:	4b08      	ldr	r3, [pc, #32]	; (800ac9c <_Bfree+0x3c>)
 800ac7a:	4809      	ldr	r0, [pc, #36]	; (800aca0 <_Bfree+0x40>)
 800ac7c:	f000 fc9c 	bl	800b5b8 <__assert_func>
 800ac80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac84:	6006      	str	r6, [r0, #0]
 800ac86:	60c6      	str	r6, [r0, #12]
 800ac88:	b13c      	cbz	r4, 800ac9a <_Bfree+0x3a>
 800ac8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac8c:	6862      	ldr	r2, [r4, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac94:	6021      	str	r1, [r4, #0]
 800ac96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	0800d6e5 	.word	0x0800d6e5
 800aca0:	0800d76c 	.word	0x0800d76c

0800aca4 <__multadd>:
 800aca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca8:	4698      	mov	r8, r3
 800acaa:	460c      	mov	r4, r1
 800acac:	2300      	movs	r3, #0
 800acae:	690e      	ldr	r6, [r1, #16]
 800acb0:	4607      	mov	r7, r0
 800acb2:	f101 0014 	add.w	r0, r1, #20
 800acb6:	6805      	ldr	r5, [r0, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	b2a9      	uxth	r1, r5
 800acbc:	fb02 8101 	mla	r1, r2, r1, r8
 800acc0:	0c2d      	lsrs	r5, r5, #16
 800acc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800acc6:	fb02 c505 	mla	r5, r2, r5, ip
 800acca:	b289      	uxth	r1, r1
 800accc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800acd0:	429e      	cmp	r6, r3
 800acd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800acd6:	f840 1b04 	str.w	r1, [r0], #4
 800acda:	dcec      	bgt.n	800acb6 <__multadd+0x12>
 800acdc:	f1b8 0f00 	cmp.w	r8, #0
 800ace0:	d022      	beq.n	800ad28 <__multadd+0x84>
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	42b3      	cmp	r3, r6
 800ace6:	dc19      	bgt.n	800ad1c <__multadd+0x78>
 800ace8:	6861      	ldr	r1, [r4, #4]
 800acea:	4638      	mov	r0, r7
 800acec:	3101      	adds	r1, #1
 800acee:	f7ff ff77 	bl	800abe0 <_Balloc>
 800acf2:	4605      	mov	r5, r0
 800acf4:	b928      	cbnz	r0, 800ad02 <__multadd+0x5e>
 800acf6:	4602      	mov	r2, r0
 800acf8:	21b5      	movs	r1, #181	; 0xb5
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <__multadd+0x8c>)
 800acfc:	480d      	ldr	r0, [pc, #52]	; (800ad34 <__multadd+0x90>)
 800acfe:	f000 fc5b 	bl	800b5b8 <__assert_func>
 800ad02:	6922      	ldr	r2, [r4, #16]
 800ad04:	f104 010c 	add.w	r1, r4, #12
 800ad08:	3202      	adds	r2, #2
 800ad0a:	0092      	lsls	r2, r2, #2
 800ad0c:	300c      	adds	r0, #12
 800ad0e:	f7fe fb3b 	bl	8009388 <memcpy>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff ffa3 	bl	800ac60 <_Bfree>
 800ad1a:	462c      	mov	r4, r5
 800ad1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad20:	3601      	adds	r6, #1
 800ad22:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad26:	6126      	str	r6, [r4, #16]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2e:	bf00      	nop
 800ad30:	0800d75b 	.word	0x0800d75b
 800ad34:	0800d76c 	.word	0x0800d76c

0800ad38 <__hi0bits>:
 800ad38:	0c02      	lsrs	r2, r0, #16
 800ad3a:	0412      	lsls	r2, r2, #16
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	b9ca      	cbnz	r2, 800ad74 <__hi0bits+0x3c>
 800ad40:	0403      	lsls	r3, r0, #16
 800ad42:	2010      	movs	r0, #16
 800ad44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad48:	bf04      	itt	eq
 800ad4a:	021b      	lsleq	r3, r3, #8
 800ad4c:	3008      	addeq	r0, #8
 800ad4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad52:	bf04      	itt	eq
 800ad54:	011b      	lsleq	r3, r3, #4
 800ad56:	3004      	addeq	r0, #4
 800ad58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad5c:	bf04      	itt	eq
 800ad5e:	009b      	lsleq	r3, r3, #2
 800ad60:	3002      	addeq	r0, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	db05      	blt.n	800ad72 <__hi0bits+0x3a>
 800ad66:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad6a:	f100 0001 	add.w	r0, r0, #1
 800ad6e:	bf08      	it	eq
 800ad70:	2020      	moveq	r0, #32
 800ad72:	4770      	bx	lr
 800ad74:	2000      	movs	r0, #0
 800ad76:	e7e5      	b.n	800ad44 <__hi0bits+0xc>

0800ad78 <__lo0bits>:
 800ad78:	6803      	ldr	r3, [r0, #0]
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	f013 0007 	ands.w	r0, r3, #7
 800ad80:	d00b      	beq.n	800ad9a <__lo0bits+0x22>
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d422      	bmi.n	800adcc <__lo0bits+0x54>
 800ad86:	0798      	lsls	r0, r3, #30
 800ad88:	bf49      	itett	mi
 800ad8a:	085b      	lsrmi	r3, r3, #1
 800ad8c:	089b      	lsrpl	r3, r3, #2
 800ad8e:	2001      	movmi	r0, #1
 800ad90:	6013      	strmi	r3, [r2, #0]
 800ad92:	bf5c      	itt	pl
 800ad94:	2002      	movpl	r0, #2
 800ad96:	6013      	strpl	r3, [r2, #0]
 800ad98:	4770      	bx	lr
 800ad9a:	b299      	uxth	r1, r3
 800ad9c:	b909      	cbnz	r1, 800ada2 <__lo0bits+0x2a>
 800ad9e:	2010      	movs	r0, #16
 800ada0:	0c1b      	lsrs	r3, r3, #16
 800ada2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ada6:	bf04      	itt	eq
 800ada8:	0a1b      	lsreq	r3, r3, #8
 800adaa:	3008      	addeq	r0, #8
 800adac:	0719      	lsls	r1, r3, #28
 800adae:	bf04      	itt	eq
 800adb0:	091b      	lsreq	r3, r3, #4
 800adb2:	3004      	addeq	r0, #4
 800adb4:	0799      	lsls	r1, r3, #30
 800adb6:	bf04      	itt	eq
 800adb8:	089b      	lsreq	r3, r3, #2
 800adba:	3002      	addeq	r0, #2
 800adbc:	07d9      	lsls	r1, r3, #31
 800adbe:	d403      	bmi.n	800adc8 <__lo0bits+0x50>
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	f100 0001 	add.w	r0, r0, #1
 800adc6:	d003      	beq.n	800add0 <__lo0bits+0x58>
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	4770      	bx	lr
 800adcc:	2000      	movs	r0, #0
 800adce:	4770      	bx	lr
 800add0:	2020      	movs	r0, #32
 800add2:	4770      	bx	lr

0800add4 <__i2b>:
 800add4:	b510      	push	{r4, lr}
 800add6:	460c      	mov	r4, r1
 800add8:	2101      	movs	r1, #1
 800adda:	f7ff ff01 	bl	800abe0 <_Balloc>
 800adde:	4602      	mov	r2, r0
 800ade0:	b928      	cbnz	r0, 800adee <__i2b+0x1a>
 800ade2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <__i2b+0x24>)
 800ade8:	4804      	ldr	r0, [pc, #16]	; (800adfc <__i2b+0x28>)
 800adea:	f000 fbe5 	bl	800b5b8 <__assert_func>
 800adee:	2301      	movs	r3, #1
 800adf0:	6144      	str	r4, [r0, #20]
 800adf2:	6103      	str	r3, [r0, #16]
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	bf00      	nop
 800adf8:	0800d75b 	.word	0x0800d75b
 800adfc:	0800d76c 	.word	0x0800d76c

0800ae00 <__multiply>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4614      	mov	r4, r2
 800ae06:	690a      	ldr	r2, [r1, #16]
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	bfbe      	ittt	lt
 800ae10:	460b      	movlt	r3, r1
 800ae12:	4625      	movlt	r5, r4
 800ae14:	461c      	movlt	r4, r3
 800ae16:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ae1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae1e:	68ab      	ldr	r3, [r5, #8]
 800ae20:	6869      	ldr	r1, [r5, #4]
 800ae22:	eb0a 0709 	add.w	r7, sl, r9
 800ae26:	42bb      	cmp	r3, r7
 800ae28:	b085      	sub	sp, #20
 800ae2a:	bfb8      	it	lt
 800ae2c:	3101      	addlt	r1, #1
 800ae2e:	f7ff fed7 	bl	800abe0 <_Balloc>
 800ae32:	b930      	cbnz	r0, 800ae42 <__multiply+0x42>
 800ae34:	4602      	mov	r2, r0
 800ae36:	f240 115d 	movw	r1, #349	; 0x15d
 800ae3a:	4b41      	ldr	r3, [pc, #260]	; (800af40 <__multiply+0x140>)
 800ae3c:	4841      	ldr	r0, [pc, #260]	; (800af44 <__multiply+0x144>)
 800ae3e:	f000 fbbb 	bl	800b5b8 <__assert_func>
 800ae42:	f100 0614 	add.w	r6, r0, #20
 800ae46:	4633      	mov	r3, r6
 800ae48:	2200      	movs	r2, #0
 800ae4a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae4e:	4543      	cmp	r3, r8
 800ae50:	d31e      	bcc.n	800ae90 <__multiply+0x90>
 800ae52:	f105 0c14 	add.w	ip, r5, #20
 800ae56:	f104 0314 	add.w	r3, r4, #20
 800ae5a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae5e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae62:	9202      	str	r2, [sp, #8]
 800ae64:	ebac 0205 	sub.w	r2, ip, r5
 800ae68:	3a15      	subs	r2, #21
 800ae6a:	f022 0203 	bic.w	r2, r2, #3
 800ae6e:	3204      	adds	r2, #4
 800ae70:	f105 0115 	add.w	r1, r5, #21
 800ae74:	458c      	cmp	ip, r1
 800ae76:	bf38      	it	cc
 800ae78:	2204      	movcc	r2, #4
 800ae7a:	9201      	str	r2, [sp, #4]
 800ae7c:	9a02      	ldr	r2, [sp, #8]
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d808      	bhi.n	800ae96 <__multiply+0x96>
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	dc55      	bgt.n	800af34 <__multiply+0x134>
 800ae88:	6107      	str	r7, [r0, #16]
 800ae8a:	b005      	add	sp, #20
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	f843 2b04 	str.w	r2, [r3], #4
 800ae94:	e7db      	b.n	800ae4e <__multiply+0x4e>
 800ae96:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae9a:	f1ba 0f00 	cmp.w	sl, #0
 800ae9e:	d020      	beq.n	800aee2 <__multiply+0xe2>
 800aea0:	46b1      	mov	r9, r6
 800aea2:	2200      	movs	r2, #0
 800aea4:	f105 0e14 	add.w	lr, r5, #20
 800aea8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aeac:	f8d9 b000 	ldr.w	fp, [r9]
 800aeb0:	b2a1      	uxth	r1, r4
 800aeb2:	fa1f fb8b 	uxth.w	fp, fp
 800aeb6:	fb0a b101 	mla	r1, sl, r1, fp
 800aeba:	4411      	add	r1, r2
 800aebc:	f8d9 2000 	ldr.w	r2, [r9]
 800aec0:	0c24      	lsrs	r4, r4, #16
 800aec2:	0c12      	lsrs	r2, r2, #16
 800aec4:	fb0a 2404 	mla	r4, sl, r4, r2
 800aec8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aecc:	b289      	uxth	r1, r1
 800aece:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aed2:	45f4      	cmp	ip, lr
 800aed4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aed8:	f849 1b04 	str.w	r1, [r9], #4
 800aedc:	d8e4      	bhi.n	800aea8 <__multiply+0xa8>
 800aede:	9901      	ldr	r1, [sp, #4]
 800aee0:	5072      	str	r2, [r6, r1]
 800aee2:	9a03      	ldr	r2, [sp, #12]
 800aee4:	3304      	adds	r3, #4
 800aee6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeea:	f1b9 0f00 	cmp.w	r9, #0
 800aeee:	d01f      	beq.n	800af30 <__multiply+0x130>
 800aef0:	46b6      	mov	lr, r6
 800aef2:	f04f 0a00 	mov.w	sl, #0
 800aef6:	6834      	ldr	r4, [r6, #0]
 800aef8:	f105 0114 	add.w	r1, r5, #20
 800aefc:	880a      	ldrh	r2, [r1, #0]
 800aefe:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af02:	b2a4      	uxth	r4, r4
 800af04:	fb09 b202 	mla	r2, r9, r2, fp
 800af08:	4492      	add	sl, r2
 800af0a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800af0e:	f84e 4b04 	str.w	r4, [lr], #4
 800af12:	f851 4b04 	ldr.w	r4, [r1], #4
 800af16:	f8be 2000 	ldrh.w	r2, [lr]
 800af1a:	0c24      	lsrs	r4, r4, #16
 800af1c:	fb09 2404 	mla	r4, r9, r4, r2
 800af20:	458c      	cmp	ip, r1
 800af22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800af26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af2a:	d8e7      	bhi.n	800aefc <__multiply+0xfc>
 800af2c:	9a01      	ldr	r2, [sp, #4]
 800af2e:	50b4      	str	r4, [r6, r2]
 800af30:	3604      	adds	r6, #4
 800af32:	e7a3      	b.n	800ae7c <__multiply+0x7c>
 800af34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1a5      	bne.n	800ae88 <__multiply+0x88>
 800af3c:	3f01      	subs	r7, #1
 800af3e:	e7a1      	b.n	800ae84 <__multiply+0x84>
 800af40:	0800d75b 	.word	0x0800d75b
 800af44:	0800d76c 	.word	0x0800d76c

0800af48 <__pow5mult>:
 800af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4c:	4615      	mov	r5, r2
 800af4e:	f012 0203 	ands.w	r2, r2, #3
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	d007      	beq.n	800af68 <__pow5mult+0x20>
 800af58:	4c25      	ldr	r4, [pc, #148]	; (800aff0 <__pow5mult+0xa8>)
 800af5a:	3a01      	subs	r2, #1
 800af5c:	2300      	movs	r3, #0
 800af5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af62:	f7ff fe9f 	bl	800aca4 <__multadd>
 800af66:	4607      	mov	r7, r0
 800af68:	10ad      	asrs	r5, r5, #2
 800af6a:	d03d      	beq.n	800afe8 <__pow5mult+0xa0>
 800af6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af6e:	b97c      	cbnz	r4, 800af90 <__pow5mult+0x48>
 800af70:	2010      	movs	r0, #16
 800af72:	f7fe f9eb 	bl	800934c <malloc>
 800af76:	4602      	mov	r2, r0
 800af78:	6270      	str	r0, [r6, #36]	; 0x24
 800af7a:	b928      	cbnz	r0, 800af88 <__pow5mult+0x40>
 800af7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af80:	4b1c      	ldr	r3, [pc, #112]	; (800aff4 <__pow5mult+0xac>)
 800af82:	481d      	ldr	r0, [pc, #116]	; (800aff8 <__pow5mult+0xb0>)
 800af84:	f000 fb18 	bl	800b5b8 <__assert_func>
 800af88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af8c:	6004      	str	r4, [r0, #0]
 800af8e:	60c4      	str	r4, [r0, #12]
 800af90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af98:	b94c      	cbnz	r4, 800afae <__pow5mult+0x66>
 800af9a:	f240 2171 	movw	r1, #625	; 0x271
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ff18 	bl	800add4 <__i2b>
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	f8c8 0008 	str.w	r0, [r8, #8]
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	07eb      	lsls	r3, r5, #31
 800afb4:	d50a      	bpl.n	800afcc <__pow5mult+0x84>
 800afb6:	4639      	mov	r1, r7
 800afb8:	4622      	mov	r2, r4
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ff20 	bl	800ae00 <__multiply>
 800afc0:	4680      	mov	r8, r0
 800afc2:	4639      	mov	r1, r7
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7ff fe4b 	bl	800ac60 <_Bfree>
 800afca:	4647      	mov	r7, r8
 800afcc:	106d      	asrs	r5, r5, #1
 800afce:	d00b      	beq.n	800afe8 <__pow5mult+0xa0>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	b938      	cbnz	r0, 800afe4 <__pow5mult+0x9c>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4621      	mov	r1, r4
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff ff11 	bl	800ae00 <__multiply>
 800afde:	6020      	str	r0, [r4, #0]
 800afe0:	f8c0 9000 	str.w	r9, [r0]
 800afe4:	4604      	mov	r4, r0
 800afe6:	e7e4      	b.n	800afb2 <__pow5mult+0x6a>
 800afe8:	4638      	mov	r0, r7
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	bf00      	nop
 800aff0:	0800d8c0 	.word	0x0800d8c0
 800aff4:	0800d6e5 	.word	0x0800d6e5
 800aff8:	0800d76c 	.word	0x0800d76c

0800affc <__lshift>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	4607      	mov	r7, r0
 800b004:	4691      	mov	r9, r2
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	6849      	ldr	r1, [r1, #4]
 800b00a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b014:	f108 0601 	add.w	r6, r8, #1
 800b018:	42b3      	cmp	r3, r6
 800b01a:	db0b      	blt.n	800b034 <__lshift+0x38>
 800b01c:	4638      	mov	r0, r7
 800b01e:	f7ff fddf 	bl	800abe0 <_Balloc>
 800b022:	4605      	mov	r5, r0
 800b024:	b948      	cbnz	r0, 800b03a <__lshift+0x3e>
 800b026:	4602      	mov	r2, r0
 800b028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b02c:	4b27      	ldr	r3, [pc, #156]	; (800b0cc <__lshift+0xd0>)
 800b02e:	4828      	ldr	r0, [pc, #160]	; (800b0d0 <__lshift+0xd4>)
 800b030:	f000 fac2 	bl	800b5b8 <__assert_func>
 800b034:	3101      	adds	r1, #1
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	e7ee      	b.n	800b018 <__lshift+0x1c>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f100 0114 	add.w	r1, r0, #20
 800b040:	f100 0210 	add.w	r2, r0, #16
 800b044:	4618      	mov	r0, r3
 800b046:	4553      	cmp	r3, sl
 800b048:	db33      	blt.n	800b0b2 <__lshift+0xb6>
 800b04a:	6920      	ldr	r0, [r4, #16]
 800b04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b050:	f104 0314 	add.w	r3, r4, #20
 800b054:	f019 091f 	ands.w	r9, r9, #31
 800b058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b060:	d02b      	beq.n	800b0ba <__lshift+0xbe>
 800b062:	468a      	mov	sl, r1
 800b064:	2200      	movs	r2, #0
 800b066:	f1c9 0e20 	rsb	lr, r9, #32
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	fa00 f009 	lsl.w	r0, r0, r9
 800b070:	4302      	orrs	r2, r0
 800b072:	f84a 2b04 	str.w	r2, [sl], #4
 800b076:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07a:	459c      	cmp	ip, r3
 800b07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b080:	d8f3      	bhi.n	800b06a <__lshift+0x6e>
 800b082:	ebac 0304 	sub.w	r3, ip, r4
 800b086:	3b15      	subs	r3, #21
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	3304      	adds	r3, #4
 800b08e:	f104 0015 	add.w	r0, r4, #21
 800b092:	4584      	cmp	ip, r0
 800b094:	bf38      	it	cc
 800b096:	2304      	movcc	r3, #4
 800b098:	50ca      	str	r2, [r1, r3]
 800b09a:	b10a      	cbz	r2, 800b0a0 <__lshift+0xa4>
 800b09c:	f108 0602 	add.w	r6, r8, #2
 800b0a0:	3e01      	subs	r6, #1
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	612e      	str	r6, [r5, #16]
 800b0a8:	f7ff fdda 	bl	800ac60 <_Bfree>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	e7c5      	b.n	800b046 <__lshift+0x4a>
 800b0ba:	3904      	subs	r1, #4
 800b0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c0:	459c      	cmp	ip, r3
 800b0c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0c6:	d8f9      	bhi.n	800b0bc <__lshift+0xc0>
 800b0c8:	e7ea      	b.n	800b0a0 <__lshift+0xa4>
 800b0ca:	bf00      	nop
 800b0cc:	0800d75b 	.word	0x0800d75b
 800b0d0:	0800d76c 	.word	0x0800d76c

0800b0d4 <__mcmp>:
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	690a      	ldr	r2, [r1, #16]
 800b0d8:	6900      	ldr	r0, [r0, #16]
 800b0da:	b530      	push	{r4, r5, lr}
 800b0dc:	1a80      	subs	r0, r0, r2
 800b0de:	d10d      	bne.n	800b0fc <__mcmp+0x28>
 800b0e0:	3314      	adds	r3, #20
 800b0e2:	3114      	adds	r1, #20
 800b0e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0f4:	4295      	cmp	r5, r2
 800b0f6:	d002      	beq.n	800b0fe <__mcmp+0x2a>
 800b0f8:	d304      	bcc.n	800b104 <__mcmp+0x30>
 800b0fa:	2001      	movs	r0, #1
 800b0fc:	bd30      	pop	{r4, r5, pc}
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	d3f4      	bcc.n	800b0ec <__mcmp+0x18>
 800b102:	e7fb      	b.n	800b0fc <__mcmp+0x28>
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	e7f8      	b.n	800b0fc <__mcmp+0x28>
	...

0800b10c <__mdiff>:
 800b10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b110:	460c      	mov	r4, r1
 800b112:	4606      	mov	r6, r0
 800b114:	4611      	mov	r1, r2
 800b116:	4620      	mov	r0, r4
 800b118:	4692      	mov	sl, r2
 800b11a:	f7ff ffdb 	bl	800b0d4 <__mcmp>
 800b11e:	1e05      	subs	r5, r0, #0
 800b120:	d111      	bne.n	800b146 <__mdiff+0x3a>
 800b122:	4629      	mov	r1, r5
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff fd5b 	bl	800abe0 <_Balloc>
 800b12a:	4602      	mov	r2, r0
 800b12c:	b928      	cbnz	r0, 800b13a <__mdiff+0x2e>
 800b12e:	f240 2132 	movw	r1, #562	; 0x232
 800b132:	4b3c      	ldr	r3, [pc, #240]	; (800b224 <__mdiff+0x118>)
 800b134:	483c      	ldr	r0, [pc, #240]	; (800b228 <__mdiff+0x11c>)
 800b136:	f000 fa3f 	bl	800b5b8 <__assert_func>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b140:	4610      	mov	r0, r2
 800b142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	bfa4      	itt	ge
 800b148:	4653      	movge	r3, sl
 800b14a:	46a2      	movge	sl, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b152:	bfa6      	itte	ge
 800b154:	461c      	movge	r4, r3
 800b156:	2500      	movge	r5, #0
 800b158:	2501      	movlt	r5, #1
 800b15a:	f7ff fd41 	bl	800abe0 <_Balloc>
 800b15e:	4602      	mov	r2, r0
 800b160:	b918      	cbnz	r0, 800b16a <__mdiff+0x5e>
 800b162:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b166:	4b2f      	ldr	r3, [pc, #188]	; (800b224 <__mdiff+0x118>)
 800b168:	e7e4      	b.n	800b134 <__mdiff+0x28>
 800b16a:	f100 0814 	add.w	r8, r0, #20
 800b16e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b172:	60c5      	str	r5, [r0, #12]
 800b174:	f04f 0c00 	mov.w	ip, #0
 800b178:	f10a 0514 	add.w	r5, sl, #20
 800b17c:	f10a 0010 	add.w	r0, sl, #16
 800b180:	46c2      	mov	sl, r8
 800b182:	6926      	ldr	r6, [r4, #16]
 800b184:	f104 0914 	add.w	r9, r4, #20
 800b188:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b18c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b190:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b194:	f859 3b04 	ldr.w	r3, [r9], #4
 800b198:	fa1f f18b 	uxth.w	r1, fp
 800b19c:	4461      	add	r1, ip
 800b19e:	fa1f fc83 	uxth.w	ip, r3
 800b1a2:	0c1b      	lsrs	r3, r3, #16
 800b1a4:	eba1 010c 	sub.w	r1, r1, ip
 800b1a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1b0:	b289      	uxth	r1, r1
 800b1b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b1b6:	454e      	cmp	r6, r9
 800b1b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b1bc:	f84a 3b04 	str.w	r3, [sl], #4
 800b1c0:	d8e6      	bhi.n	800b190 <__mdiff+0x84>
 800b1c2:	1b33      	subs	r3, r6, r4
 800b1c4:	3b15      	subs	r3, #21
 800b1c6:	f023 0303 	bic.w	r3, r3, #3
 800b1ca:	3415      	adds	r4, #21
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	42a6      	cmp	r6, r4
 800b1d0:	bf38      	it	cc
 800b1d2:	2304      	movcc	r3, #4
 800b1d4:	441d      	add	r5, r3
 800b1d6:	4443      	add	r3, r8
 800b1d8:	461e      	mov	r6, r3
 800b1da:	462c      	mov	r4, r5
 800b1dc:	4574      	cmp	r4, lr
 800b1de:	d30e      	bcc.n	800b1fe <__mdiff+0xf2>
 800b1e0:	f10e 0103 	add.w	r1, lr, #3
 800b1e4:	1b49      	subs	r1, r1, r5
 800b1e6:	f021 0103 	bic.w	r1, r1, #3
 800b1ea:	3d03      	subs	r5, #3
 800b1ec:	45ae      	cmp	lr, r5
 800b1ee:	bf38      	it	cc
 800b1f0:	2100      	movcc	r1, #0
 800b1f2:	4419      	add	r1, r3
 800b1f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1f8:	b18b      	cbz	r3, 800b21e <__mdiff+0x112>
 800b1fa:	6117      	str	r7, [r2, #16]
 800b1fc:	e7a0      	b.n	800b140 <__mdiff+0x34>
 800b1fe:	f854 8b04 	ldr.w	r8, [r4], #4
 800b202:	fa1f f188 	uxth.w	r1, r8
 800b206:	4461      	add	r1, ip
 800b208:	1408      	asrs	r0, r1, #16
 800b20a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b20e:	b289      	uxth	r1, r1
 800b210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b218:	f846 1b04 	str.w	r1, [r6], #4
 800b21c:	e7de      	b.n	800b1dc <__mdiff+0xd0>
 800b21e:	3f01      	subs	r7, #1
 800b220:	e7e8      	b.n	800b1f4 <__mdiff+0xe8>
 800b222:	bf00      	nop
 800b224:	0800d75b 	.word	0x0800d75b
 800b228:	0800d76c 	.word	0x0800d76c

0800b22c <__d2b>:
 800b22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b230:	2101      	movs	r1, #1
 800b232:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b236:	4690      	mov	r8, r2
 800b238:	461d      	mov	r5, r3
 800b23a:	f7ff fcd1 	bl	800abe0 <_Balloc>
 800b23e:	4604      	mov	r4, r0
 800b240:	b930      	cbnz	r0, 800b250 <__d2b+0x24>
 800b242:	4602      	mov	r2, r0
 800b244:	f240 310a 	movw	r1, #778	; 0x30a
 800b248:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <__d2b+0xb0>)
 800b24a:	4825      	ldr	r0, [pc, #148]	; (800b2e0 <__d2b+0xb4>)
 800b24c:	f000 f9b4 	bl	800b5b8 <__assert_func>
 800b250:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b254:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b258:	bb2d      	cbnz	r5, 800b2a6 <__d2b+0x7a>
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f1b8 0300 	subs.w	r3, r8, #0
 800b260:	d026      	beq.n	800b2b0 <__d2b+0x84>
 800b262:	4668      	mov	r0, sp
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	f7ff fd87 	bl	800ad78 <__lo0bits>
 800b26a:	9900      	ldr	r1, [sp, #0]
 800b26c:	b1f0      	cbz	r0, 800b2ac <__d2b+0x80>
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	f1c0 0320 	rsb	r3, r0, #32
 800b274:	fa02 f303 	lsl.w	r3, r2, r3
 800b278:	430b      	orrs	r3, r1
 800b27a:	40c2      	lsrs	r2, r0
 800b27c:	6163      	str	r3, [r4, #20]
 800b27e:	9201      	str	r2, [sp, #4]
 800b280:	9b01      	ldr	r3, [sp, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bf14      	ite	ne
 800b286:	2102      	movne	r1, #2
 800b288:	2101      	moveq	r1, #1
 800b28a:	61a3      	str	r3, [r4, #24]
 800b28c:	6121      	str	r1, [r4, #16]
 800b28e:	b1c5      	cbz	r5, 800b2c2 <__d2b+0x96>
 800b290:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b294:	4405      	add	r5, r0
 800b296:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b29a:	603d      	str	r5, [r7, #0]
 800b29c:	6030      	str	r0, [r6, #0]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	b002      	add	sp, #8
 800b2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2aa:	e7d6      	b.n	800b25a <__d2b+0x2e>
 800b2ac:	6161      	str	r1, [r4, #20]
 800b2ae:	e7e7      	b.n	800b280 <__d2b+0x54>
 800b2b0:	a801      	add	r0, sp, #4
 800b2b2:	f7ff fd61 	bl	800ad78 <__lo0bits>
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	6121      	str	r1, [r4, #16]
 800b2bc:	6163      	str	r3, [r4, #20]
 800b2be:	3020      	adds	r0, #32
 800b2c0:	e7e5      	b.n	800b28e <__d2b+0x62>
 800b2c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b2c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2ca:	6038      	str	r0, [r7, #0]
 800b2cc:	6918      	ldr	r0, [r3, #16]
 800b2ce:	f7ff fd33 	bl	800ad38 <__hi0bits>
 800b2d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b2d6:	6031      	str	r1, [r6, #0]
 800b2d8:	e7e1      	b.n	800b29e <__d2b+0x72>
 800b2da:	bf00      	nop
 800b2dc:	0800d75b 	.word	0x0800d75b
 800b2e0:	0800d76c 	.word	0x0800d76c

0800b2e4 <_calloc_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	fb02 f501 	mul.w	r5, r2, r1
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f7fe f8ae 	bl	800944c <_malloc_r>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	b118      	cbz	r0, 800b2fc <_calloc_r+0x18>
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	f7fe f854 	bl	80093a4 <memset>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}

0800b300 <__ssputs_r>:
 800b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b304:	688e      	ldr	r6, [r1, #8]
 800b306:	4682      	mov	sl, r0
 800b308:	429e      	cmp	r6, r3
 800b30a:	460c      	mov	r4, r1
 800b30c:	4690      	mov	r8, r2
 800b30e:	461f      	mov	r7, r3
 800b310:	d838      	bhi.n	800b384 <__ssputs_r+0x84>
 800b312:	898a      	ldrh	r2, [r1, #12]
 800b314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b318:	d032      	beq.n	800b380 <__ssputs_r+0x80>
 800b31a:	6825      	ldr	r5, [r4, #0]
 800b31c:	6909      	ldr	r1, [r1, #16]
 800b31e:	3301      	adds	r3, #1
 800b320:	eba5 0901 	sub.w	r9, r5, r1
 800b324:	6965      	ldr	r5, [r4, #20]
 800b326:	444b      	add	r3, r9
 800b328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b32c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b330:	106d      	asrs	r5, r5, #1
 800b332:	429d      	cmp	r5, r3
 800b334:	bf38      	it	cc
 800b336:	461d      	movcc	r5, r3
 800b338:	0553      	lsls	r3, r2, #21
 800b33a:	d531      	bpl.n	800b3a0 <__ssputs_r+0xa0>
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7fe f885 	bl	800944c <_malloc_r>
 800b342:	4606      	mov	r6, r0
 800b344:	b950      	cbnz	r0, 800b35c <__ssputs_r+0x5c>
 800b346:	230c      	movs	r3, #12
 800b348:	f04f 30ff 	mov.w	r0, #4294967295
 800b34c:	f8ca 3000 	str.w	r3, [sl]
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35c:	464a      	mov	r2, r9
 800b35e:	6921      	ldr	r1, [r4, #16]
 800b360:	f7fe f812 	bl	8009388 <memcpy>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	6126      	str	r6, [r4, #16]
 800b372:	444e      	add	r6, r9
 800b374:	6026      	str	r6, [r4, #0]
 800b376:	463e      	mov	r6, r7
 800b378:	6165      	str	r5, [r4, #20]
 800b37a:	eba5 0509 	sub.w	r5, r5, r9
 800b37e:	60a5      	str	r5, [r4, #8]
 800b380:	42be      	cmp	r6, r7
 800b382:	d900      	bls.n	800b386 <__ssputs_r+0x86>
 800b384:	463e      	mov	r6, r7
 800b386:	4632      	mov	r2, r6
 800b388:	4641      	mov	r1, r8
 800b38a:	6820      	ldr	r0, [r4, #0]
 800b38c:	f000 f959 	bl	800b642 <memmove>
 800b390:	68a3      	ldr	r3, [r4, #8]
 800b392:	6822      	ldr	r2, [r4, #0]
 800b394:	1b9b      	subs	r3, r3, r6
 800b396:	4432      	add	r2, r6
 800b398:	2000      	movs	r0, #0
 800b39a:	60a3      	str	r3, [r4, #8]
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	e7db      	b.n	800b358 <__ssputs_r+0x58>
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	f000 f968 	bl	800b676 <_realloc_r>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1e1      	bne.n	800b370 <__ssputs_r+0x70>
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	6921      	ldr	r1, [r4, #16]
 800b3b0:	f7fe f800 	bl	80093b4 <_free_r>
 800b3b4:	e7c7      	b.n	800b346 <__ssputs_r+0x46>
	...

0800b3b8 <_svfiprintf_r>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4698      	mov	r8, r3
 800b3be:	898b      	ldrh	r3, [r1, #12]
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	061b      	lsls	r3, r3, #24
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	b09d      	sub	sp, #116	; 0x74
 800b3ca:	d50e      	bpl.n	800b3ea <_svfiprintf_r+0x32>
 800b3cc:	690b      	ldr	r3, [r1, #16]
 800b3ce:	b963      	cbnz	r3, 800b3ea <_svfiprintf_r+0x32>
 800b3d0:	2140      	movs	r1, #64	; 0x40
 800b3d2:	f7fe f83b 	bl	800944c <_malloc_r>
 800b3d6:	6028      	str	r0, [r5, #0]
 800b3d8:	6128      	str	r0, [r5, #16]
 800b3da:	b920      	cbnz	r0, 800b3e6 <_svfiprintf_r+0x2e>
 800b3dc:	230c      	movs	r3, #12
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	e0d1      	b.n	800b58a <_svfiprintf_r+0x1d2>
 800b3e6:	2340      	movs	r3, #64	; 0x40
 800b3e8:	616b      	str	r3, [r5, #20]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ee:	2320      	movs	r3, #32
 800b3f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3f4:	2330      	movs	r3, #48	; 0x30
 800b3f6:	f04f 0901 	mov.w	r9, #1
 800b3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5a4 <_svfiprintf_r+0x1ec>
 800b402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b406:	4623      	mov	r3, r4
 800b408:	469a      	mov	sl, r3
 800b40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40e:	b10a      	cbz	r2, 800b414 <_svfiprintf_r+0x5c>
 800b410:	2a25      	cmp	r2, #37	; 0x25
 800b412:	d1f9      	bne.n	800b408 <_svfiprintf_r+0x50>
 800b414:	ebba 0b04 	subs.w	fp, sl, r4
 800b418:	d00b      	beq.n	800b432 <_svfiprintf_r+0x7a>
 800b41a:	465b      	mov	r3, fp
 800b41c:	4622      	mov	r2, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ff6d 	bl	800b300 <__ssputs_r>
 800b426:	3001      	adds	r0, #1
 800b428:	f000 80aa 	beq.w	800b580 <_svfiprintf_r+0x1c8>
 800b42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b42e:	445a      	add	r2, fp
 800b430:	9209      	str	r2, [sp, #36]	; 0x24
 800b432:	f89a 3000 	ldrb.w	r3, [sl]
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 80a2 	beq.w	800b580 <_svfiprintf_r+0x1c8>
 800b43c:	2300      	movs	r3, #0
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295
 800b442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b446:	f10a 0a01 	add.w	sl, sl, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	9307      	str	r3, [sp, #28]
 800b44e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b452:	931a      	str	r3, [sp, #104]	; 0x68
 800b454:	4654      	mov	r4, sl
 800b456:	2205      	movs	r2, #5
 800b458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45c:	4851      	ldr	r0, [pc, #324]	; (800b5a4 <_svfiprintf_r+0x1ec>)
 800b45e:	f7ff fba5 	bl	800abac <memchr>
 800b462:	9a04      	ldr	r2, [sp, #16]
 800b464:	b9d8      	cbnz	r0, 800b49e <_svfiprintf_r+0xe6>
 800b466:	06d0      	lsls	r0, r2, #27
 800b468:	bf44      	itt	mi
 800b46a:	2320      	movmi	r3, #32
 800b46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b470:	0711      	lsls	r1, r2, #28
 800b472:	bf44      	itt	mi
 800b474:	232b      	movmi	r3, #43	; 0x2b
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b47a:	f89a 3000 	ldrb.w	r3, [sl]
 800b47e:	2b2a      	cmp	r3, #42	; 0x2a
 800b480:	d015      	beq.n	800b4ae <_svfiprintf_r+0xf6>
 800b482:	4654      	mov	r4, sl
 800b484:	2000      	movs	r0, #0
 800b486:	f04f 0c0a 	mov.w	ip, #10
 800b48a:	9a07      	ldr	r2, [sp, #28]
 800b48c:	4621      	mov	r1, r4
 800b48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b492:	3b30      	subs	r3, #48	; 0x30
 800b494:	2b09      	cmp	r3, #9
 800b496:	d94e      	bls.n	800b536 <_svfiprintf_r+0x17e>
 800b498:	b1b0      	cbz	r0, 800b4c8 <_svfiprintf_r+0x110>
 800b49a:	9207      	str	r2, [sp, #28]
 800b49c:	e014      	b.n	800b4c8 <_svfiprintf_r+0x110>
 800b49e:	eba0 0308 	sub.w	r3, r0, r8
 800b4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	46a2      	mov	sl, r4
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	e7d2      	b.n	800b454 <_svfiprintf_r+0x9c>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	1d19      	adds	r1, r3, #4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	9103      	str	r1, [sp, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bfbb      	ittet	lt
 800b4ba:	425b      	neglt	r3, r3
 800b4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c0:	9307      	strge	r3, [sp, #28]
 800b4c2:	9307      	strlt	r3, [sp, #28]
 800b4c4:	bfb8      	it	lt
 800b4c6:	9204      	strlt	r2, [sp, #16]
 800b4c8:	7823      	ldrb	r3, [r4, #0]
 800b4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b4cc:	d10c      	bne.n	800b4e8 <_svfiprintf_r+0x130>
 800b4ce:	7863      	ldrb	r3, [r4, #1]
 800b4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d2:	d135      	bne.n	800b540 <_svfiprintf_r+0x188>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	3402      	adds	r4, #2
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	9203      	str	r2, [sp, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bfb8      	it	lt
 800b4e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4e6:	9305      	str	r3, [sp, #20]
 800b4e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5b4 <_svfiprintf_r+0x1fc>
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	7821      	ldrb	r1, [r4, #0]
 800b4f2:	f7ff fb5b 	bl	800abac <memchr>
 800b4f6:	b140      	cbz	r0, 800b50a <_svfiprintf_r+0x152>
 800b4f8:	2340      	movs	r3, #64	; 0x40
 800b4fa:	eba0 000a 	sub.w	r0, r0, sl
 800b4fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b502:	9b04      	ldr	r3, [sp, #16]
 800b504:	3401      	adds	r4, #1
 800b506:	4303      	orrs	r3, r0
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50e:	2206      	movs	r2, #6
 800b510:	4825      	ldr	r0, [pc, #148]	; (800b5a8 <_svfiprintf_r+0x1f0>)
 800b512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b516:	f7ff fb49 	bl	800abac <memchr>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d038      	beq.n	800b590 <_svfiprintf_r+0x1d8>
 800b51e:	4b23      	ldr	r3, [pc, #140]	; (800b5ac <_svfiprintf_r+0x1f4>)
 800b520:	bb1b      	cbnz	r3, 800b56a <_svfiprintf_r+0x1b2>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	3307      	adds	r3, #7
 800b526:	f023 0307 	bic.w	r3, r3, #7
 800b52a:	3308      	adds	r3, #8
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b530:	4433      	add	r3, r6
 800b532:	9309      	str	r3, [sp, #36]	; 0x24
 800b534:	e767      	b.n	800b406 <_svfiprintf_r+0x4e>
 800b536:	460c      	mov	r4, r1
 800b538:	2001      	movs	r0, #1
 800b53a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b53e:	e7a5      	b.n	800b48c <_svfiprintf_r+0xd4>
 800b540:	2300      	movs	r3, #0
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4619      	mov	r1, r3
 800b548:	3401      	adds	r4, #1
 800b54a:	9305      	str	r3, [sp, #20]
 800b54c:	4620      	mov	r0, r4
 800b54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b552:	3a30      	subs	r2, #48	; 0x30
 800b554:	2a09      	cmp	r2, #9
 800b556:	d903      	bls.n	800b560 <_svfiprintf_r+0x1a8>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0c5      	beq.n	800b4e8 <_svfiprintf_r+0x130>
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	e7c3      	b.n	800b4e8 <_svfiprintf_r+0x130>
 800b560:	4604      	mov	r4, r0
 800b562:	2301      	movs	r3, #1
 800b564:	fb0c 2101 	mla	r1, ip, r1, r2
 800b568:	e7f0      	b.n	800b54c <_svfiprintf_r+0x194>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4638      	mov	r0, r7
 800b572:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <_svfiprintf_r+0x1f8>)
 800b574:	a904      	add	r1, sp, #16
 800b576:	f7fe f861 	bl	800963c <_printf_float>
 800b57a:	1c42      	adds	r2, r0, #1
 800b57c:	4606      	mov	r6, r0
 800b57e:	d1d6      	bne.n	800b52e <_svfiprintf_r+0x176>
 800b580:	89ab      	ldrh	r3, [r5, #12]
 800b582:	065b      	lsls	r3, r3, #25
 800b584:	f53f af2c 	bmi.w	800b3e0 <_svfiprintf_r+0x28>
 800b588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b58a:	b01d      	add	sp, #116	; 0x74
 800b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b590:	ab03      	add	r3, sp, #12
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	462a      	mov	r2, r5
 800b596:	4638      	mov	r0, r7
 800b598:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <_svfiprintf_r+0x1f8>)
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	f7fe faea 	bl	8009b74 <_printf_i>
 800b5a0:	e7eb      	b.n	800b57a <_svfiprintf_r+0x1c2>
 800b5a2:	bf00      	nop
 800b5a4:	0800d8cc 	.word	0x0800d8cc
 800b5a8:	0800d8d6 	.word	0x0800d8d6
 800b5ac:	0800963d 	.word	0x0800963d
 800b5b0:	0800b301 	.word	0x0800b301
 800b5b4:	0800d8d2 	.word	0x0800d8d2

0800b5b8 <__assert_func>:
 800b5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ba:	4614      	mov	r4, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <__assert_func+0x2c>)
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68d8      	ldr	r0, [r3, #12]
 800b5c6:	b14c      	cbz	r4, 800b5dc <__assert_func+0x24>
 800b5c8:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <__assert_func+0x30>)
 800b5ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5ce:	9100      	str	r1, [sp, #0]
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4906      	ldr	r1, [pc, #24]	; (800b5ec <__assert_func+0x34>)
 800b5d4:	f000 f80e 	bl	800b5f4 <fiprintf>
 800b5d8:	f7fd fe86 	bl	80092e8 <abort>
 800b5dc:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <__assert_func+0x38>)
 800b5de:	461c      	mov	r4, r3
 800b5e0:	e7f3      	b.n	800b5ca <__assert_func+0x12>
 800b5e2:	bf00      	nop
 800b5e4:	200000f8 	.word	0x200000f8
 800b5e8:	0800d8dd 	.word	0x0800d8dd
 800b5ec:	0800d8ea 	.word	0x0800d8ea
 800b5f0:	0800d918 	.word	0x0800d918

0800b5f4 <fiprintf>:
 800b5f4:	b40e      	push	{r1, r2, r3}
 800b5f6:	b503      	push	{r0, r1, lr}
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	4805      	ldr	r0, [pc, #20]	; (800b614 <fiprintf+0x20>)
 800b5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b602:	6800      	ldr	r0, [r0, #0]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	f000 f883 	bl	800b710 <_vfiprintf_r>
 800b60a:	b002      	add	sp, #8
 800b60c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b610:	b003      	add	sp, #12
 800b612:	4770      	bx	lr
 800b614:	200000f8 	.word	0x200000f8

0800b618 <__retarget_lock_init_recursive>:
 800b618:	4770      	bx	lr

0800b61a <__retarget_lock_acquire_recursive>:
 800b61a:	4770      	bx	lr

0800b61c <__retarget_lock_release_recursive>:
 800b61c:	4770      	bx	lr

0800b61e <__ascii_mbtowc>:
 800b61e:	b082      	sub	sp, #8
 800b620:	b901      	cbnz	r1, 800b624 <__ascii_mbtowc+0x6>
 800b622:	a901      	add	r1, sp, #4
 800b624:	b142      	cbz	r2, 800b638 <__ascii_mbtowc+0x1a>
 800b626:	b14b      	cbz	r3, 800b63c <__ascii_mbtowc+0x1e>
 800b628:	7813      	ldrb	r3, [r2, #0]
 800b62a:	600b      	str	r3, [r1, #0]
 800b62c:	7812      	ldrb	r2, [r2, #0]
 800b62e:	1e10      	subs	r0, r2, #0
 800b630:	bf18      	it	ne
 800b632:	2001      	movne	r0, #1
 800b634:	b002      	add	sp, #8
 800b636:	4770      	bx	lr
 800b638:	4610      	mov	r0, r2
 800b63a:	e7fb      	b.n	800b634 <__ascii_mbtowc+0x16>
 800b63c:	f06f 0001 	mvn.w	r0, #1
 800b640:	e7f8      	b.n	800b634 <__ascii_mbtowc+0x16>

0800b642 <memmove>:
 800b642:	4288      	cmp	r0, r1
 800b644:	b510      	push	{r4, lr}
 800b646:	eb01 0402 	add.w	r4, r1, r2
 800b64a:	d902      	bls.n	800b652 <memmove+0x10>
 800b64c:	4284      	cmp	r4, r0
 800b64e:	4623      	mov	r3, r4
 800b650:	d807      	bhi.n	800b662 <memmove+0x20>
 800b652:	1e43      	subs	r3, r0, #1
 800b654:	42a1      	cmp	r1, r4
 800b656:	d008      	beq.n	800b66a <memmove+0x28>
 800b658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b660:	e7f8      	b.n	800b654 <memmove+0x12>
 800b662:	4601      	mov	r1, r0
 800b664:	4402      	add	r2, r0
 800b666:	428a      	cmp	r2, r1
 800b668:	d100      	bne.n	800b66c <memmove+0x2a>
 800b66a:	bd10      	pop	{r4, pc}
 800b66c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b670:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b674:	e7f7      	b.n	800b666 <memmove+0x24>

0800b676 <_realloc_r>:
 800b676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b678:	4607      	mov	r7, r0
 800b67a:	4614      	mov	r4, r2
 800b67c:	460e      	mov	r6, r1
 800b67e:	b921      	cbnz	r1, 800b68a <_realloc_r+0x14>
 800b680:	4611      	mov	r1, r2
 800b682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b686:	f7fd bee1 	b.w	800944c <_malloc_r>
 800b68a:	b922      	cbnz	r2, 800b696 <_realloc_r+0x20>
 800b68c:	f7fd fe92 	bl	80093b4 <_free_r>
 800b690:	4625      	mov	r5, r4
 800b692:	4628      	mov	r0, r5
 800b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b696:	f000 fc55 	bl	800bf44 <_malloc_usable_size_r>
 800b69a:	42a0      	cmp	r0, r4
 800b69c:	d20f      	bcs.n	800b6be <_realloc_r+0x48>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7fd fed3 	bl	800944c <_malloc_r>
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d0f2      	beq.n	800b692 <_realloc_r+0x1c>
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	f7fd fe6a 	bl	8009388 <memcpy>
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	f7fd fe7c 	bl	80093b4 <_free_r>
 800b6bc:	e7e9      	b.n	800b692 <_realloc_r+0x1c>
 800b6be:	4635      	mov	r5, r6
 800b6c0:	e7e7      	b.n	800b692 <_realloc_r+0x1c>

0800b6c2 <__sfputc_r>:
 800b6c2:	6893      	ldr	r3, [r2, #8]
 800b6c4:	b410      	push	{r4}
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	6093      	str	r3, [r2, #8]
 800b6cc:	da07      	bge.n	800b6de <__sfputc_r+0x1c>
 800b6ce:	6994      	ldr	r4, [r2, #24]
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	db01      	blt.n	800b6d8 <__sfputc_r+0x16>
 800b6d4:	290a      	cmp	r1, #10
 800b6d6:	d102      	bne.n	800b6de <__sfputc_r+0x1c>
 800b6d8:	bc10      	pop	{r4}
 800b6da:	f000 b949 	b.w	800b970 <__swbuf_r>
 800b6de:	6813      	ldr	r3, [r2, #0]
 800b6e0:	1c58      	adds	r0, r3, #1
 800b6e2:	6010      	str	r0, [r2, #0]
 800b6e4:	7019      	strb	r1, [r3, #0]
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	bc10      	pop	{r4}
 800b6ea:	4770      	bx	lr

0800b6ec <__sfputs_r>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	4614      	mov	r4, r2
 800b6f4:	18d5      	adds	r5, r2, r3
 800b6f6:	42ac      	cmp	r4, r5
 800b6f8:	d101      	bne.n	800b6fe <__sfputs_r+0x12>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e007      	b.n	800b70e <__sfputs_r+0x22>
 800b6fe:	463a      	mov	r2, r7
 800b700:	4630      	mov	r0, r6
 800b702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b706:	f7ff ffdc 	bl	800b6c2 <__sfputc_r>
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	d1f3      	bne.n	800b6f6 <__sfputs_r+0xa>
 800b70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b710 <_vfiprintf_r>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	460d      	mov	r5, r1
 800b716:	4614      	mov	r4, r2
 800b718:	4698      	mov	r8, r3
 800b71a:	4606      	mov	r6, r0
 800b71c:	b09d      	sub	sp, #116	; 0x74
 800b71e:	b118      	cbz	r0, 800b728 <_vfiprintf_r+0x18>
 800b720:	6983      	ldr	r3, [r0, #24]
 800b722:	b90b      	cbnz	r3, 800b728 <_vfiprintf_r+0x18>
 800b724:	f000 fb0c 	bl	800bd40 <__sinit>
 800b728:	4b89      	ldr	r3, [pc, #548]	; (800b950 <_vfiprintf_r+0x240>)
 800b72a:	429d      	cmp	r5, r3
 800b72c:	d11b      	bne.n	800b766 <_vfiprintf_r+0x56>
 800b72e:	6875      	ldr	r5, [r6, #4]
 800b730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	d405      	bmi.n	800b742 <_vfiprintf_r+0x32>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	059a      	lsls	r2, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_vfiprintf_r+0x32>
 800b73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b73e:	f7ff ff6c 	bl	800b61a <__retarget_lock_acquire_recursive>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	071b      	lsls	r3, r3, #28
 800b746:	d501      	bpl.n	800b74c <_vfiprintf_r+0x3c>
 800b748:	692b      	ldr	r3, [r5, #16]
 800b74a:	b9eb      	cbnz	r3, 800b788 <_vfiprintf_r+0x78>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f96e 	bl	800ba30 <__swsetup_r>
 800b754:	b1c0      	cbz	r0, 800b788 <_vfiprintf_r+0x78>
 800b756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b758:	07dc      	lsls	r4, r3, #31
 800b75a:	d50e      	bpl.n	800b77a <_vfiprintf_r+0x6a>
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	b01d      	add	sp, #116	; 0x74
 800b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b766:	4b7b      	ldr	r3, [pc, #492]	; (800b954 <_vfiprintf_r+0x244>)
 800b768:	429d      	cmp	r5, r3
 800b76a:	d101      	bne.n	800b770 <_vfiprintf_r+0x60>
 800b76c:	68b5      	ldr	r5, [r6, #8]
 800b76e:	e7df      	b.n	800b730 <_vfiprintf_r+0x20>
 800b770:	4b79      	ldr	r3, [pc, #484]	; (800b958 <_vfiprintf_r+0x248>)
 800b772:	429d      	cmp	r5, r3
 800b774:	bf08      	it	eq
 800b776:	68f5      	ldreq	r5, [r6, #12]
 800b778:	e7da      	b.n	800b730 <_vfiprintf_r+0x20>
 800b77a:	89ab      	ldrh	r3, [r5, #12]
 800b77c:	0598      	lsls	r0, r3, #22
 800b77e:	d4ed      	bmi.n	800b75c <_vfiprintf_r+0x4c>
 800b780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b782:	f7ff ff4b 	bl	800b61c <__retarget_lock_release_recursive>
 800b786:	e7e9      	b.n	800b75c <_vfiprintf_r+0x4c>
 800b788:	2300      	movs	r3, #0
 800b78a:	9309      	str	r3, [sp, #36]	; 0x24
 800b78c:	2320      	movs	r3, #32
 800b78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b792:	2330      	movs	r3, #48	; 0x30
 800b794:	f04f 0901 	mov.w	r9, #1
 800b798:	f8cd 800c 	str.w	r8, [sp, #12]
 800b79c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b95c <_vfiprintf_r+0x24c>
 800b7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	469a      	mov	sl, r3
 800b7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ac:	b10a      	cbz	r2, 800b7b2 <_vfiprintf_r+0xa2>
 800b7ae:	2a25      	cmp	r2, #37	; 0x25
 800b7b0:	d1f9      	bne.n	800b7a6 <_vfiprintf_r+0x96>
 800b7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b6:	d00b      	beq.n	800b7d0 <_vfiprintf_r+0xc0>
 800b7b8:	465b      	mov	r3, fp
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff ff94 	bl	800b6ec <__sfputs_r>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	f000 80aa 	beq.w	800b91e <_vfiprintf_r+0x20e>
 800b7ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7cc:	445a      	add	r2, fp
 800b7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80a2 	beq.w	800b91e <_vfiprintf_r+0x20e>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e4:	f10a 0a01 	add.w	sl, sl, #1
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	9307      	str	r3, [sp, #28]
 800b7ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f0:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f2:	4654      	mov	r4, sl
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fa:	4858      	ldr	r0, [pc, #352]	; (800b95c <_vfiprintf_r+0x24c>)
 800b7fc:	f7ff f9d6 	bl	800abac <memchr>
 800b800:	9a04      	ldr	r2, [sp, #16]
 800b802:	b9d8      	cbnz	r0, 800b83c <_vfiprintf_r+0x12c>
 800b804:	06d1      	lsls	r1, r2, #27
 800b806:	bf44      	itt	mi
 800b808:	2320      	movmi	r3, #32
 800b80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b80e:	0713      	lsls	r3, r2, #28
 800b810:	bf44      	itt	mi
 800b812:	232b      	movmi	r3, #43	; 0x2b
 800b814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b818:	f89a 3000 	ldrb.w	r3, [sl]
 800b81c:	2b2a      	cmp	r3, #42	; 0x2a
 800b81e:	d015      	beq.n	800b84c <_vfiprintf_r+0x13c>
 800b820:	4654      	mov	r4, sl
 800b822:	2000      	movs	r0, #0
 800b824:	f04f 0c0a 	mov.w	ip, #10
 800b828:	9a07      	ldr	r2, [sp, #28]
 800b82a:	4621      	mov	r1, r4
 800b82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b830:	3b30      	subs	r3, #48	; 0x30
 800b832:	2b09      	cmp	r3, #9
 800b834:	d94e      	bls.n	800b8d4 <_vfiprintf_r+0x1c4>
 800b836:	b1b0      	cbz	r0, 800b866 <_vfiprintf_r+0x156>
 800b838:	9207      	str	r2, [sp, #28]
 800b83a:	e014      	b.n	800b866 <_vfiprintf_r+0x156>
 800b83c:	eba0 0308 	sub.w	r3, r0, r8
 800b840:	fa09 f303 	lsl.w	r3, r9, r3
 800b844:	4313      	orrs	r3, r2
 800b846:	46a2      	mov	sl, r4
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	e7d2      	b.n	800b7f2 <_vfiprintf_r+0xe2>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1d19      	adds	r1, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	9103      	str	r1, [sp, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfbb      	ittet	lt
 800b858:	425b      	neglt	r3, r3
 800b85a:	f042 0202 	orrlt.w	r2, r2, #2
 800b85e:	9307      	strge	r3, [sp, #28]
 800b860:	9307      	strlt	r3, [sp, #28]
 800b862:	bfb8      	it	lt
 800b864:	9204      	strlt	r2, [sp, #16]
 800b866:	7823      	ldrb	r3, [r4, #0]
 800b868:	2b2e      	cmp	r3, #46	; 0x2e
 800b86a:	d10c      	bne.n	800b886 <_vfiprintf_r+0x176>
 800b86c:	7863      	ldrb	r3, [r4, #1]
 800b86e:	2b2a      	cmp	r3, #42	; 0x2a
 800b870:	d135      	bne.n	800b8de <_vfiprintf_r+0x1ce>
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	3402      	adds	r4, #2
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	9203      	str	r2, [sp, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfb8      	it	lt
 800b880:	f04f 33ff 	movlt.w	r3, #4294967295
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b96c <_vfiprintf_r+0x25c>
 800b88a:	2203      	movs	r2, #3
 800b88c:	4650      	mov	r0, sl
 800b88e:	7821      	ldrb	r1, [r4, #0]
 800b890:	f7ff f98c 	bl	800abac <memchr>
 800b894:	b140      	cbz	r0, 800b8a8 <_vfiprintf_r+0x198>
 800b896:	2340      	movs	r3, #64	; 0x40
 800b898:	eba0 000a 	sub.w	r0, r0, sl
 800b89c:	fa03 f000 	lsl.w	r0, r3, r0
 800b8a0:	9b04      	ldr	r3, [sp, #16]
 800b8a2:	3401      	adds	r4, #1
 800b8a4:	4303      	orrs	r3, r0
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	2206      	movs	r2, #6
 800b8ae:	482c      	ldr	r0, [pc, #176]	; (800b960 <_vfiprintf_r+0x250>)
 800b8b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b4:	f7ff f97a 	bl	800abac <memchr>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d03f      	beq.n	800b93c <_vfiprintf_r+0x22c>
 800b8bc:	4b29      	ldr	r3, [pc, #164]	; (800b964 <_vfiprintf_r+0x254>)
 800b8be:	bb1b      	cbnz	r3, 800b908 <_vfiprintf_r+0x1f8>
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	3307      	adds	r3, #7
 800b8c4:	f023 0307 	bic.w	r3, r3, #7
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ce:	443b      	add	r3, r7
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d2:	e767      	b.n	800b7a4 <_vfiprintf_r+0x94>
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8dc:	e7a5      	b.n	800b82a <_vfiprintf_r+0x11a>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f0:	3a30      	subs	r2, #48	; 0x30
 800b8f2:	2a09      	cmp	r2, #9
 800b8f4:	d903      	bls.n	800b8fe <_vfiprintf_r+0x1ee>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0c5      	beq.n	800b886 <_vfiprintf_r+0x176>
 800b8fa:	9105      	str	r1, [sp, #20]
 800b8fc:	e7c3      	b.n	800b886 <_vfiprintf_r+0x176>
 800b8fe:	4604      	mov	r4, r0
 800b900:	2301      	movs	r3, #1
 800b902:	fb0c 2101 	mla	r1, ip, r1, r2
 800b906:	e7f0      	b.n	800b8ea <_vfiprintf_r+0x1da>
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	4b15      	ldr	r3, [pc, #84]	; (800b968 <_vfiprintf_r+0x258>)
 800b912:	a904      	add	r1, sp, #16
 800b914:	f7fd fe92 	bl	800963c <_printf_float>
 800b918:	4607      	mov	r7, r0
 800b91a:	1c78      	adds	r0, r7, #1
 800b91c:	d1d6      	bne.n	800b8cc <_vfiprintf_r+0x1bc>
 800b91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b920:	07d9      	lsls	r1, r3, #31
 800b922:	d405      	bmi.n	800b930 <_vfiprintf_r+0x220>
 800b924:	89ab      	ldrh	r3, [r5, #12]
 800b926:	059a      	lsls	r2, r3, #22
 800b928:	d402      	bmi.n	800b930 <_vfiprintf_r+0x220>
 800b92a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92c:	f7ff fe76 	bl	800b61c <__retarget_lock_release_recursive>
 800b930:	89ab      	ldrh	r3, [r5, #12]
 800b932:	065b      	lsls	r3, r3, #25
 800b934:	f53f af12 	bmi.w	800b75c <_vfiprintf_r+0x4c>
 800b938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93a:	e711      	b.n	800b760 <_vfiprintf_r+0x50>
 800b93c:	ab03      	add	r3, sp, #12
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	462a      	mov	r2, r5
 800b942:	4630      	mov	r0, r6
 800b944:	4b08      	ldr	r3, [pc, #32]	; (800b968 <_vfiprintf_r+0x258>)
 800b946:	a904      	add	r1, sp, #16
 800b948:	f7fe f914 	bl	8009b74 <_printf_i>
 800b94c:	e7e4      	b.n	800b918 <_vfiprintf_r+0x208>
 800b94e:	bf00      	nop
 800b950:	0800da44 	.word	0x0800da44
 800b954:	0800da64 	.word	0x0800da64
 800b958:	0800da24 	.word	0x0800da24
 800b95c:	0800d8cc 	.word	0x0800d8cc
 800b960:	0800d8d6 	.word	0x0800d8d6
 800b964:	0800963d 	.word	0x0800963d
 800b968:	0800b6ed 	.word	0x0800b6ed
 800b96c:	0800d8d2 	.word	0x0800d8d2

0800b970 <__swbuf_r>:
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b972:	460e      	mov	r6, r1
 800b974:	4614      	mov	r4, r2
 800b976:	4605      	mov	r5, r0
 800b978:	b118      	cbz	r0, 800b982 <__swbuf_r+0x12>
 800b97a:	6983      	ldr	r3, [r0, #24]
 800b97c:	b90b      	cbnz	r3, 800b982 <__swbuf_r+0x12>
 800b97e:	f000 f9df 	bl	800bd40 <__sinit>
 800b982:	4b21      	ldr	r3, [pc, #132]	; (800ba08 <__swbuf_r+0x98>)
 800b984:	429c      	cmp	r4, r3
 800b986:	d12b      	bne.n	800b9e0 <__swbuf_r+0x70>
 800b988:	686c      	ldr	r4, [r5, #4]
 800b98a:	69a3      	ldr	r3, [r4, #24]
 800b98c:	60a3      	str	r3, [r4, #8]
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	071a      	lsls	r2, r3, #28
 800b992:	d52f      	bpl.n	800b9f4 <__swbuf_r+0x84>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	b36b      	cbz	r3, 800b9f4 <__swbuf_r+0x84>
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	6820      	ldr	r0, [r4, #0]
 800b99c:	b2f6      	uxtb	r6, r6
 800b99e:	1ac0      	subs	r0, r0, r3
 800b9a0:	6963      	ldr	r3, [r4, #20]
 800b9a2:	4637      	mov	r7, r6
 800b9a4:	4283      	cmp	r3, r0
 800b9a6:	dc04      	bgt.n	800b9b2 <__swbuf_r+0x42>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f000 f934 	bl	800bc18 <_fflush_r>
 800b9b0:	bb30      	cbnz	r0, 800ba00 <__swbuf_r+0x90>
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	6022      	str	r2, [r4, #0]
 800b9c0:	701e      	strb	r6, [r3, #0]
 800b9c2:	6963      	ldr	r3, [r4, #20]
 800b9c4:	4283      	cmp	r3, r0
 800b9c6:	d004      	beq.n	800b9d2 <__swbuf_r+0x62>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	07db      	lsls	r3, r3, #31
 800b9cc:	d506      	bpl.n	800b9dc <__swbuf_r+0x6c>
 800b9ce:	2e0a      	cmp	r6, #10
 800b9d0:	d104      	bne.n	800b9dc <__swbuf_r+0x6c>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f000 f91f 	bl	800bc18 <_fflush_r>
 800b9da:	b988      	cbnz	r0, 800ba00 <__swbuf_r+0x90>
 800b9dc:	4638      	mov	r0, r7
 800b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <__swbuf_r+0x9c>)
 800b9e2:	429c      	cmp	r4, r3
 800b9e4:	d101      	bne.n	800b9ea <__swbuf_r+0x7a>
 800b9e6:	68ac      	ldr	r4, [r5, #8]
 800b9e8:	e7cf      	b.n	800b98a <__swbuf_r+0x1a>
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <__swbuf_r+0xa0>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	bf08      	it	eq
 800b9f0:	68ec      	ldreq	r4, [r5, #12]
 800b9f2:	e7ca      	b.n	800b98a <__swbuf_r+0x1a>
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f81a 	bl	800ba30 <__swsetup_r>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d0cb      	beq.n	800b998 <__swbuf_r+0x28>
 800ba00:	f04f 37ff 	mov.w	r7, #4294967295
 800ba04:	e7ea      	b.n	800b9dc <__swbuf_r+0x6c>
 800ba06:	bf00      	nop
 800ba08:	0800da44 	.word	0x0800da44
 800ba0c:	0800da64 	.word	0x0800da64
 800ba10:	0800da24 	.word	0x0800da24

0800ba14 <__ascii_wctomb>:
 800ba14:	4603      	mov	r3, r0
 800ba16:	4608      	mov	r0, r1
 800ba18:	b141      	cbz	r1, 800ba2c <__ascii_wctomb+0x18>
 800ba1a:	2aff      	cmp	r2, #255	; 0xff
 800ba1c:	d904      	bls.n	800ba28 <__ascii_wctomb+0x14>
 800ba1e:	228a      	movs	r2, #138	; 0x8a
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	4770      	bx	lr
 800ba28:	2001      	movs	r0, #1
 800ba2a:	700a      	strb	r2, [r1, #0]
 800ba2c:	4770      	bx	lr
	...

0800ba30 <__swsetup_r>:
 800ba30:	4b32      	ldr	r3, [pc, #200]	; (800bafc <__swsetup_r+0xcc>)
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	4606      	mov	r6, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	b125      	cbz	r5, 800ba46 <__swsetup_r+0x16>
 800ba3c:	69ab      	ldr	r3, [r5, #24]
 800ba3e:	b913      	cbnz	r3, 800ba46 <__swsetup_r+0x16>
 800ba40:	4628      	mov	r0, r5
 800ba42:	f000 f97d 	bl	800bd40 <__sinit>
 800ba46:	4b2e      	ldr	r3, [pc, #184]	; (800bb00 <__swsetup_r+0xd0>)
 800ba48:	429c      	cmp	r4, r3
 800ba4a:	d10f      	bne.n	800ba6c <__swsetup_r+0x3c>
 800ba4c:	686c      	ldr	r4, [r5, #4]
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba54:	0719      	lsls	r1, r3, #28
 800ba56:	d42c      	bmi.n	800bab2 <__swsetup_r+0x82>
 800ba58:	06dd      	lsls	r5, r3, #27
 800ba5a:	d411      	bmi.n	800ba80 <__swsetup_r+0x50>
 800ba5c:	2309      	movs	r3, #9
 800ba5e:	6033      	str	r3, [r6, #0]
 800ba60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	e03e      	b.n	800baea <__swsetup_r+0xba>
 800ba6c:	4b25      	ldr	r3, [pc, #148]	; (800bb04 <__swsetup_r+0xd4>)
 800ba6e:	429c      	cmp	r4, r3
 800ba70:	d101      	bne.n	800ba76 <__swsetup_r+0x46>
 800ba72:	68ac      	ldr	r4, [r5, #8]
 800ba74:	e7eb      	b.n	800ba4e <__swsetup_r+0x1e>
 800ba76:	4b24      	ldr	r3, [pc, #144]	; (800bb08 <__swsetup_r+0xd8>)
 800ba78:	429c      	cmp	r4, r3
 800ba7a:	bf08      	it	eq
 800ba7c:	68ec      	ldreq	r4, [r5, #12]
 800ba7e:	e7e6      	b.n	800ba4e <__swsetup_r+0x1e>
 800ba80:	0758      	lsls	r0, r3, #29
 800ba82:	d512      	bpl.n	800baaa <__swsetup_r+0x7a>
 800ba84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba86:	b141      	cbz	r1, 800ba9a <__swsetup_r+0x6a>
 800ba88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	d002      	beq.n	800ba96 <__swsetup_r+0x66>
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7fd fc8f 	bl	80093b4 <_free_r>
 800ba96:	2300      	movs	r3, #0
 800ba98:	6363      	str	r3, [r4, #52]	; 0x34
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baa0:	81a3      	strh	r3, [r4, #12]
 800baa2:	2300      	movs	r3, #0
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	6923      	ldr	r3, [r4, #16]
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	f043 0308 	orr.w	r3, r3, #8
 800bab0:	81a3      	strh	r3, [r4, #12]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	b94b      	cbnz	r3, 800baca <__swsetup_r+0x9a>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800babc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bac0:	d003      	beq.n	800baca <__swsetup_r+0x9a>
 800bac2:	4621      	mov	r1, r4
 800bac4:	4630      	mov	r0, r6
 800bac6:	f000 f9fd 	bl	800bec4 <__smakebuf_r>
 800baca:	89a0      	ldrh	r0, [r4, #12]
 800bacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bad0:	f010 0301 	ands.w	r3, r0, #1
 800bad4:	d00a      	beq.n	800baec <__swsetup_r+0xbc>
 800bad6:	2300      	movs	r3, #0
 800bad8:	60a3      	str	r3, [r4, #8]
 800bada:	6963      	ldr	r3, [r4, #20]
 800badc:	425b      	negs	r3, r3
 800bade:	61a3      	str	r3, [r4, #24]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	b943      	cbnz	r3, 800baf6 <__swsetup_r+0xc6>
 800bae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bae8:	d1ba      	bne.n	800ba60 <__swsetup_r+0x30>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	0781      	lsls	r1, r0, #30
 800baee:	bf58      	it	pl
 800baf0:	6963      	ldrpl	r3, [r4, #20]
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	e7f4      	b.n	800bae0 <__swsetup_r+0xb0>
 800baf6:	2000      	movs	r0, #0
 800baf8:	e7f7      	b.n	800baea <__swsetup_r+0xba>
 800bafa:	bf00      	nop
 800bafc:	200000f8 	.word	0x200000f8
 800bb00:	0800da44 	.word	0x0800da44
 800bb04:	0800da64 	.word	0x0800da64
 800bb08:	0800da24 	.word	0x0800da24

0800bb0c <__sflush_r>:
 800bb0c:	898a      	ldrh	r2, [r1, #12]
 800bb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb12:	4605      	mov	r5, r0
 800bb14:	0710      	lsls	r0, r2, #28
 800bb16:	460c      	mov	r4, r1
 800bb18:	d458      	bmi.n	800bbcc <__sflush_r+0xc0>
 800bb1a:	684b      	ldr	r3, [r1, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc05      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc02      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d0f9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb38:	682f      	ldr	r7, [r5, #0]
 800bb3a:	602b      	str	r3, [r5, #0]
 800bb3c:	d032      	beq.n	800bba4 <__sflush_r+0x98>
 800bb3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	075a      	lsls	r2, r3, #29
 800bb44:	d505      	bpl.n	800bb52 <__sflush_r+0x46>
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	1ac0      	subs	r0, r0, r3
 800bb4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb4c:	b10b      	cbz	r3, 800bb52 <__sflush_r+0x46>
 800bb4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb50:	1ac0      	subs	r0, r0, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	4602      	mov	r2, r0
 800bb56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb58:	4628      	mov	r0, r5
 800bb5a:	6a21      	ldr	r1, [r4, #32]
 800bb5c:	47b0      	blx	r6
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	d106      	bne.n	800bb72 <__sflush_r+0x66>
 800bb64:	6829      	ldr	r1, [r5, #0]
 800bb66:	291d      	cmp	r1, #29
 800bb68:	d82c      	bhi.n	800bbc4 <__sflush_r+0xb8>
 800bb6a:	4a2a      	ldr	r2, [pc, #168]	; (800bc14 <__sflush_r+0x108>)
 800bb6c:	40ca      	lsrs	r2, r1
 800bb6e:	07d6      	lsls	r6, r2, #31
 800bb70:	d528      	bpl.n	800bbc4 <__sflush_r+0xb8>
 800bb72:	2200      	movs	r2, #0
 800bb74:	6062      	str	r2, [r4, #4]
 800bb76:	6922      	ldr	r2, [r4, #16]
 800bb78:	04d9      	lsls	r1, r3, #19
 800bb7a:	6022      	str	r2, [r4, #0]
 800bb7c:	d504      	bpl.n	800bb88 <__sflush_r+0x7c>
 800bb7e:	1c42      	adds	r2, r0, #1
 800bb80:	d101      	bne.n	800bb86 <__sflush_r+0x7a>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b903      	cbnz	r3, 800bb88 <__sflush_r+0x7c>
 800bb86:	6560      	str	r0, [r4, #84]	; 0x54
 800bb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb8a:	602f      	str	r7, [r5, #0]
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	d0ca      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb94:	4299      	cmp	r1, r3
 800bb96:	d002      	beq.n	800bb9e <__sflush_r+0x92>
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7fd fc0b 	bl	80093b4 <_free_r>
 800bb9e:	2000      	movs	r0, #0
 800bba0:	6360      	str	r0, [r4, #52]	; 0x34
 800bba2:	e7c1      	b.n	800bb28 <__sflush_r+0x1c>
 800bba4:	6a21      	ldr	r1, [r4, #32]
 800bba6:	2301      	movs	r3, #1
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b0      	blx	r6
 800bbac:	1c41      	adds	r1, r0, #1
 800bbae:	d1c7      	bne.n	800bb40 <__sflush_r+0x34>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0c4      	beq.n	800bb40 <__sflush_r+0x34>
 800bbb6:	2b1d      	cmp	r3, #29
 800bbb8:	d001      	beq.n	800bbbe <__sflush_r+0xb2>
 800bbba:	2b16      	cmp	r3, #22
 800bbbc:	d101      	bne.n	800bbc2 <__sflush_r+0xb6>
 800bbbe:	602f      	str	r7, [r5, #0]
 800bbc0:	e7b1      	b.n	800bb26 <__sflush_r+0x1a>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7ad      	b.n	800bb28 <__sflush_r+0x1c>
 800bbcc:	690f      	ldr	r7, [r1, #16]
 800bbce:	2f00      	cmp	r7, #0
 800bbd0:	d0a9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bbd2:	0793      	lsls	r3, r2, #30
 800bbd4:	bf18      	it	ne
 800bbd6:	2300      	movne	r3, #0
 800bbd8:	680e      	ldr	r6, [r1, #0]
 800bbda:	bf08      	it	eq
 800bbdc:	694b      	ldreq	r3, [r1, #20]
 800bbde:	eba6 0807 	sub.w	r8, r6, r7
 800bbe2:	600f      	str	r7, [r1, #0]
 800bbe4:	608b      	str	r3, [r1, #8]
 800bbe6:	f1b8 0f00 	cmp.w	r8, #0
 800bbea:	dd9c      	ble.n	800bb26 <__sflush_r+0x1a>
 800bbec:	4643      	mov	r3, r8
 800bbee:	463a      	mov	r2, r7
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	6a21      	ldr	r1, [r4, #32]
 800bbf4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbf6:	47b0      	blx	r6
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dc06      	bgt.n	800bc0a <__sflush_r+0xfe>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bc02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	e78e      	b.n	800bb28 <__sflush_r+0x1c>
 800bc0a:	4407      	add	r7, r0
 800bc0c:	eba8 0800 	sub.w	r8, r8, r0
 800bc10:	e7e9      	b.n	800bbe6 <__sflush_r+0xda>
 800bc12:	bf00      	nop
 800bc14:	20400001 	.word	0x20400001

0800bc18 <_fflush_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b913      	cbnz	r3, 800bc28 <_fflush_r+0x10>
 800bc22:	2500      	movs	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	b118      	cbz	r0, 800bc32 <_fflush_r+0x1a>
 800bc2a:	6983      	ldr	r3, [r0, #24]
 800bc2c:	b90b      	cbnz	r3, 800bc32 <_fflush_r+0x1a>
 800bc2e:	f000 f887 	bl	800bd40 <__sinit>
 800bc32:	4b14      	ldr	r3, [pc, #80]	; (800bc84 <_fflush_r+0x6c>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	d11b      	bne.n	800bc70 <_fflush_r+0x58>
 800bc38:	686c      	ldr	r4, [r5, #4]
 800bc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0ef      	beq.n	800bc22 <_fflush_r+0xa>
 800bc42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc44:	07d0      	lsls	r0, r2, #31
 800bc46:	d404      	bmi.n	800bc52 <_fflush_r+0x3a>
 800bc48:	0599      	lsls	r1, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_fflush_r+0x3a>
 800bc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc4e:	f7ff fce4 	bl	800b61a <__retarget_lock_acquire_recursive>
 800bc52:	4628      	mov	r0, r5
 800bc54:	4621      	mov	r1, r4
 800bc56:	f7ff ff59 	bl	800bb0c <__sflush_r>
 800bc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	07da      	lsls	r2, r3, #31
 800bc60:	d4e0      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	059b      	lsls	r3, r3, #22
 800bc66:	d4dd      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc6a:	f7ff fcd7 	bl	800b61c <__retarget_lock_release_recursive>
 800bc6e:	e7d9      	b.n	800bc24 <_fflush_r+0xc>
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <_fflush_r+0x70>)
 800bc72:	429c      	cmp	r4, r3
 800bc74:	d101      	bne.n	800bc7a <_fflush_r+0x62>
 800bc76:	68ac      	ldr	r4, [r5, #8]
 800bc78:	e7df      	b.n	800bc3a <_fflush_r+0x22>
 800bc7a:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <_fflush_r+0x74>)
 800bc7c:	429c      	cmp	r4, r3
 800bc7e:	bf08      	it	eq
 800bc80:	68ec      	ldreq	r4, [r5, #12]
 800bc82:	e7da      	b.n	800bc3a <_fflush_r+0x22>
 800bc84:	0800da44 	.word	0x0800da44
 800bc88:	0800da64 	.word	0x0800da64
 800bc8c:	0800da24 	.word	0x0800da24

0800bc90 <std>:
 800bc90:	2300      	movs	r3, #0
 800bc92:	b510      	push	{r4, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	e9c0 3300 	strd	r3, r3, [r0]
 800bc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc9e:	6083      	str	r3, [r0, #8]
 800bca0:	8181      	strh	r1, [r0, #12]
 800bca2:	6643      	str	r3, [r0, #100]	; 0x64
 800bca4:	81c2      	strh	r2, [r0, #14]
 800bca6:	6183      	str	r3, [r0, #24]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	2208      	movs	r2, #8
 800bcac:	305c      	adds	r0, #92	; 0x5c
 800bcae:	f7fd fb79 	bl	80093a4 <memset>
 800bcb2:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <std+0x38>)
 800bcb4:	6224      	str	r4, [r4, #32]
 800bcb6:	6263      	str	r3, [r4, #36]	; 0x24
 800bcb8:	4b04      	ldr	r3, [pc, #16]	; (800bccc <std+0x3c>)
 800bcba:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <std+0x40>)
 800bcbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcc0:	4b04      	ldr	r3, [pc, #16]	; (800bcd4 <std+0x44>)
 800bcc2:	6323      	str	r3, [r4, #48]	; 0x30
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	bf00      	nop
 800bcc8:	0800bf55 	.word	0x0800bf55
 800bccc:	0800bf77 	.word	0x0800bf77
 800bcd0:	0800bfaf 	.word	0x0800bfaf
 800bcd4:	0800bfd3 	.word	0x0800bfd3

0800bcd8 <_cleanup_r>:
 800bcd8:	4901      	ldr	r1, [pc, #4]	; (800bce0 <_cleanup_r+0x8>)
 800bcda:	f000 b8af 	b.w	800be3c <_fwalk_reent>
 800bcde:	bf00      	nop
 800bce0:	0800bc19 	.word	0x0800bc19

0800bce4 <__sfmoreglue>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	2568      	movs	r5, #104	; 0x68
 800bce8:	1e4a      	subs	r2, r1, #1
 800bcea:	4355      	muls	r5, r2
 800bcec:	460e      	mov	r6, r1
 800bcee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcf2:	f7fd fbab 	bl	800944c <_malloc_r>
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	b140      	cbz	r0, 800bd0c <__sfmoreglue+0x28>
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	e9c0 1600 	strd	r1, r6, [r0]
 800bd00:	300c      	adds	r0, #12
 800bd02:	60a0      	str	r0, [r4, #8]
 800bd04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd08:	f7fd fb4c 	bl	80093a4 <memset>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}

0800bd10 <__sfp_lock_acquire>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__sfp_lock_acquire+0x8>)
 800bd12:	f7ff bc82 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	200009c0 	.word	0x200009c0

0800bd1c <__sfp_lock_release>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__sfp_lock_release+0x8>)
 800bd1e:	f7ff bc7d 	b.w	800b61c <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	200009c0 	.word	0x200009c0

0800bd28 <__sinit_lock_acquire>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sinit_lock_acquire+0x8>)
 800bd2a:	f7ff bc76 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800bd2e:	bf00      	nop
 800bd30:	200009bb 	.word	0x200009bb

0800bd34 <__sinit_lock_release>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sinit_lock_release+0x8>)
 800bd36:	f7ff bc71 	b.w	800b61c <__retarget_lock_release_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	200009bb 	.word	0x200009bb

0800bd40 <__sinit>:
 800bd40:	b510      	push	{r4, lr}
 800bd42:	4604      	mov	r4, r0
 800bd44:	f7ff fff0 	bl	800bd28 <__sinit_lock_acquire>
 800bd48:	69a3      	ldr	r3, [r4, #24]
 800bd4a:	b11b      	cbz	r3, 800bd54 <__sinit+0x14>
 800bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd50:	f7ff bff0 	b.w	800bd34 <__sinit_lock_release>
 800bd54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd58:	6523      	str	r3, [r4, #80]	; 0x50
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <__sinit+0x68>)
 800bd5c:	4a13      	ldr	r2, [pc, #76]	; (800bdac <__sinit+0x6c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	bf08      	it	eq
 800bd66:	2301      	moveq	r3, #1
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bf08      	it	eq
 800bd6c:	61a3      	streq	r3, [r4, #24]
 800bd6e:	f000 f81f 	bl	800bdb0 <__sfp>
 800bd72:	6060      	str	r0, [r4, #4]
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 f81b 	bl	800bdb0 <__sfp>
 800bd7a:	60a0      	str	r0, [r4, #8]
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 f817 	bl	800bdb0 <__sfp>
 800bd82:	2200      	movs	r2, #0
 800bd84:	2104      	movs	r1, #4
 800bd86:	60e0      	str	r0, [r4, #12]
 800bd88:	6860      	ldr	r0, [r4, #4]
 800bd8a:	f7ff ff81 	bl	800bc90 <std>
 800bd8e:	2201      	movs	r2, #1
 800bd90:	2109      	movs	r1, #9
 800bd92:	68a0      	ldr	r0, [r4, #8]
 800bd94:	f7ff ff7c 	bl	800bc90 <std>
 800bd98:	2202      	movs	r2, #2
 800bd9a:	2112      	movs	r1, #18
 800bd9c:	68e0      	ldr	r0, [r4, #12]
 800bd9e:	f7ff ff77 	bl	800bc90 <std>
 800bda2:	2301      	movs	r3, #1
 800bda4:	61a3      	str	r3, [r4, #24]
 800bda6:	e7d1      	b.n	800bd4c <__sinit+0xc>
 800bda8:	0800d6a0 	.word	0x0800d6a0
 800bdac:	0800bcd9 	.word	0x0800bcd9

0800bdb0 <__sfp>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	f7ff ffac 	bl	800bd10 <__sfp_lock_acquire>
 800bdb8:	4b1e      	ldr	r3, [pc, #120]	; (800be34 <__sfp+0x84>)
 800bdba:	681e      	ldr	r6, [r3, #0]
 800bdbc:	69b3      	ldr	r3, [r6, #24]
 800bdbe:	b913      	cbnz	r3, 800bdc6 <__sfp+0x16>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff ffbd 	bl	800bd40 <__sinit>
 800bdc6:	3648      	adds	r6, #72	; 0x48
 800bdc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	d503      	bpl.n	800bdd8 <__sfp+0x28>
 800bdd0:	6833      	ldr	r3, [r6, #0]
 800bdd2:	b30b      	cbz	r3, 800be18 <__sfp+0x68>
 800bdd4:	6836      	ldr	r6, [r6, #0]
 800bdd6:	e7f7      	b.n	800bdc8 <__sfp+0x18>
 800bdd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bddc:	b9d5      	cbnz	r5, 800be14 <__sfp+0x64>
 800bdde:	4b16      	ldr	r3, [pc, #88]	; (800be38 <__sfp+0x88>)
 800bde0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bde4:	60e3      	str	r3, [r4, #12]
 800bde6:	6665      	str	r5, [r4, #100]	; 0x64
 800bde8:	f7ff fc16 	bl	800b618 <__retarget_lock_init_recursive>
 800bdec:	f7ff ff96 	bl	800bd1c <__sfp_lock_release>
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdfc:	6025      	str	r5, [r4, #0]
 800bdfe:	61a5      	str	r5, [r4, #24]
 800be00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be04:	f7fd face 	bl	80093a4 <memset>
 800be08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be10:	4620      	mov	r0, r4
 800be12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be14:	3468      	adds	r4, #104	; 0x68
 800be16:	e7d9      	b.n	800bdcc <__sfp+0x1c>
 800be18:	2104      	movs	r1, #4
 800be1a:	4638      	mov	r0, r7
 800be1c:	f7ff ff62 	bl	800bce4 <__sfmoreglue>
 800be20:	4604      	mov	r4, r0
 800be22:	6030      	str	r0, [r6, #0]
 800be24:	2800      	cmp	r0, #0
 800be26:	d1d5      	bne.n	800bdd4 <__sfp+0x24>
 800be28:	f7ff ff78 	bl	800bd1c <__sfp_lock_release>
 800be2c:	230c      	movs	r3, #12
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	e7ee      	b.n	800be10 <__sfp+0x60>
 800be32:	bf00      	nop
 800be34:	0800d6a0 	.word	0x0800d6a0
 800be38:	ffff0001 	.word	0xffff0001

0800be3c <_fwalk_reent>:
 800be3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be40:	4606      	mov	r6, r0
 800be42:	4688      	mov	r8, r1
 800be44:	2700      	movs	r7, #0
 800be46:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be4e:	f1b9 0901 	subs.w	r9, r9, #1
 800be52:	d505      	bpl.n	800be60 <_fwalk_reent+0x24>
 800be54:	6824      	ldr	r4, [r4, #0]
 800be56:	2c00      	cmp	r4, #0
 800be58:	d1f7      	bne.n	800be4a <_fwalk_reent+0xe>
 800be5a:	4638      	mov	r0, r7
 800be5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be60:	89ab      	ldrh	r3, [r5, #12]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d907      	bls.n	800be76 <_fwalk_reent+0x3a>
 800be66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be6a:	3301      	adds	r3, #1
 800be6c:	d003      	beq.n	800be76 <_fwalk_reent+0x3a>
 800be6e:	4629      	mov	r1, r5
 800be70:	4630      	mov	r0, r6
 800be72:	47c0      	blx	r8
 800be74:	4307      	orrs	r7, r0
 800be76:	3568      	adds	r5, #104	; 0x68
 800be78:	e7e9      	b.n	800be4e <_fwalk_reent+0x12>

0800be7a <__swhatbuf_r>:
 800be7a:	b570      	push	{r4, r5, r6, lr}
 800be7c:	460e      	mov	r6, r1
 800be7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be82:	4614      	mov	r4, r2
 800be84:	2900      	cmp	r1, #0
 800be86:	461d      	mov	r5, r3
 800be88:	b096      	sub	sp, #88	; 0x58
 800be8a:	da07      	bge.n	800be9c <__swhatbuf_r+0x22>
 800be8c:	2300      	movs	r3, #0
 800be8e:	602b      	str	r3, [r5, #0]
 800be90:	89b3      	ldrh	r3, [r6, #12]
 800be92:	061a      	lsls	r2, r3, #24
 800be94:	d410      	bmi.n	800beb8 <__swhatbuf_r+0x3e>
 800be96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be9a:	e00e      	b.n	800beba <__swhatbuf_r+0x40>
 800be9c:	466a      	mov	r2, sp
 800be9e:	f000 f8bf 	bl	800c020 <_fstat_r>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	dbf2      	blt.n	800be8c <__swhatbuf_r+0x12>
 800bea6:	9a01      	ldr	r2, [sp, #4]
 800bea8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800beac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800beb0:	425a      	negs	r2, r3
 800beb2:	415a      	adcs	r2, r3
 800beb4:	602a      	str	r2, [r5, #0]
 800beb6:	e7ee      	b.n	800be96 <__swhatbuf_r+0x1c>
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	2000      	movs	r0, #0
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	b016      	add	sp, #88	; 0x58
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bec4 <__smakebuf_r>:
 800bec4:	898b      	ldrh	r3, [r1, #12]
 800bec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bec8:	079d      	lsls	r5, r3, #30
 800beca:	4606      	mov	r6, r0
 800becc:	460c      	mov	r4, r1
 800bece:	d507      	bpl.n	800bee0 <__smakebuf_r+0x1c>
 800bed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	6123      	str	r3, [r4, #16]
 800bed8:	2301      	movs	r3, #1
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	b002      	add	sp, #8
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	466a      	mov	r2, sp
 800bee2:	ab01      	add	r3, sp, #4
 800bee4:	f7ff ffc9 	bl	800be7a <__swhatbuf_r>
 800bee8:	9900      	ldr	r1, [sp, #0]
 800beea:	4605      	mov	r5, r0
 800beec:	4630      	mov	r0, r6
 800beee:	f7fd faad 	bl	800944c <_malloc_r>
 800bef2:	b948      	cbnz	r0, 800bf08 <__smakebuf_r+0x44>
 800bef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef8:	059a      	lsls	r2, r3, #22
 800befa:	d4ef      	bmi.n	800bedc <__smakebuf_r+0x18>
 800befc:	f023 0303 	bic.w	r3, r3, #3
 800bf00:	f043 0302 	orr.w	r3, r3, #2
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	e7e3      	b.n	800bed0 <__smakebuf_r+0xc>
 800bf08:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <__smakebuf_r+0x7c>)
 800bf0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	6020      	str	r0, [r4, #0]
 800bf10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	9b00      	ldr	r3, [sp, #0]
 800bf18:	6120      	str	r0, [r4, #16]
 800bf1a:	6163      	str	r3, [r4, #20]
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	b15b      	cbz	r3, 800bf38 <__smakebuf_r+0x74>
 800bf20:	4630      	mov	r0, r6
 800bf22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf26:	f000 f88d 	bl	800c044 <_isatty_r>
 800bf2a:	b128      	cbz	r0, 800bf38 <__smakebuf_r+0x74>
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	f023 0303 	bic.w	r3, r3, #3
 800bf32:	f043 0301 	orr.w	r3, r3, #1
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	89a0      	ldrh	r0, [r4, #12]
 800bf3a:	4305      	orrs	r5, r0
 800bf3c:	81a5      	strh	r5, [r4, #12]
 800bf3e:	e7cd      	b.n	800bedc <__smakebuf_r+0x18>
 800bf40:	0800bcd9 	.word	0x0800bcd9

0800bf44 <_malloc_usable_size_r>:
 800bf44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf48:	1f18      	subs	r0, r3, #4
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	bfbc      	itt	lt
 800bf4e:	580b      	ldrlt	r3, [r1, r0]
 800bf50:	18c0      	addlt	r0, r0, r3
 800bf52:	4770      	bx	lr

0800bf54 <__sread>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	460c      	mov	r4, r1
 800bf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5c:	f000 f894 	bl	800c088 <_read_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	bfab      	itete	ge
 800bf64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf66:	89a3      	ldrhlt	r3, [r4, #12]
 800bf68:	181b      	addge	r3, r3, r0
 800bf6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf6e:	bfac      	ite	ge
 800bf70:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf72:	81a3      	strhlt	r3, [r4, #12]
 800bf74:	bd10      	pop	{r4, pc}

0800bf76 <__swrite>:
 800bf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7a:	461f      	mov	r7, r3
 800bf7c:	898b      	ldrh	r3, [r1, #12]
 800bf7e:	4605      	mov	r5, r0
 800bf80:	05db      	lsls	r3, r3, #23
 800bf82:	460c      	mov	r4, r1
 800bf84:	4616      	mov	r6, r2
 800bf86:	d505      	bpl.n	800bf94 <__swrite+0x1e>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	f000 f868 	bl	800c064 <_lseek_r>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	4632      	mov	r2, r6
 800bf98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf9c:	81a3      	strh	r3, [r4, #12]
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	463b      	mov	r3, r7
 800bfa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	f000 b817 	b.w	800bfdc <_write_r>

0800bfae <__sseek>:
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb6:	f000 f855 	bl	800c064 <_lseek_r>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	bf15      	itete	ne
 800bfc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfca:	81a3      	strheq	r3, [r4, #12]
 800bfcc:	bf18      	it	ne
 800bfce:	81a3      	strhne	r3, [r4, #12]
 800bfd0:	bd10      	pop	{r4, pc}

0800bfd2 <__sclose>:
 800bfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd6:	f000 b813 	b.w	800c000 <_close_r>
	...

0800bfdc <_write_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4d05      	ldr	r5, [pc, #20]	; (800bffc <_write_r+0x20>)
 800bfe8:	602a      	str	r2, [r5, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7fd f878 	bl	80090e0 <_write>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_write_r+0x1e>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_write_r+0x1e>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	200009b4 	.word	0x200009b4

0800c000 <_close_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	2300      	movs	r3, #0
 800c004:	4d05      	ldr	r5, [pc, #20]	; (800c01c <_close_r+0x1c>)
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	f7fd f884 	bl	8009118 <_close>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_close_r+0x1a>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_close_r+0x1a>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200009b4 	.word	0x200009b4

0800c020 <_fstat_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	2300      	movs	r3, #0
 800c024:	4d06      	ldr	r5, [pc, #24]	; (800c040 <_fstat_r+0x20>)
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	602b      	str	r3, [r5, #0]
 800c02e:	f7fd f87e 	bl	800912e <_fstat>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d102      	bne.n	800c03c <_fstat_r+0x1c>
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	b103      	cbz	r3, 800c03c <_fstat_r+0x1c>
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	200009b4 	.word	0x200009b4

0800c044 <_isatty_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	2300      	movs	r3, #0
 800c048:	4d05      	ldr	r5, [pc, #20]	; (800c060 <_isatty_r+0x1c>)
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	602b      	str	r3, [r5, #0]
 800c050:	f7fd f87c 	bl	800914c <_isatty>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_isatty_r+0x1a>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_isatty_r+0x1a>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	200009b4 	.word	0x200009b4

0800c064 <_lseek_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	2200      	movs	r2, #0
 800c06e:	4d05      	ldr	r5, [pc, #20]	; (800c084 <_lseek_r+0x20>)
 800c070:	602a      	str	r2, [r5, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	f7fd f874 	bl	8009160 <_lseek>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_lseek_r+0x1e>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_lseek_r+0x1e>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	200009b4 	.word	0x200009b4

0800c088 <_read_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4604      	mov	r4, r0
 800c08c:	4608      	mov	r0, r1
 800c08e:	4611      	mov	r1, r2
 800c090:	2200      	movs	r2, #0
 800c092:	4d05      	ldr	r5, [pc, #20]	; (800c0a8 <_read_r+0x20>)
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7fd f805 	bl	80090a6 <_read>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_read_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_read_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	200009b4 	.word	0x200009b4

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
