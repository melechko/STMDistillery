
OLEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a56c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000193c  0800a680  0800a680  0001a680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfbc  0800bfbc  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfbc  0800bfbc  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfbc  0800bfbc  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfbc  0800bfbc  0001bfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfc0  0800bfc0  0001bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800bfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000024c  0800c210  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800c210  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f738  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ede  00000000  00000000  0003f9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00043890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00044d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7c  00000000  00000000  00046050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b3  00000000  00000000  00060ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c7c2  00000000  00000000  00077d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000678c  00000000  00000000  000f4594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000024c 	.word	0x2000024c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a664 	.word	0x0800a664

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000250 	.word	0x20000250
 800014c:	0800a664 	.word	0x0800a664

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f947 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f006 fd2a 	bl	800759c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f95f 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 f927 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000074 	.word	0x20000074
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	200008b4 	.word	0x200008b4

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	200008b4 	.word	0x200008b4

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000004 	.word	0x20000004

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff2d 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff42 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff35 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e043      	b.n	8000eee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_DMA_Init+0xa8>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_DMA_Init+0xac>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_DMA_Init+0xb0>)
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	bffdfff8 	.word	0xbffdfff8
 8000efc:	cccccccd 	.word	0xcccccccd
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_DMA_Start_IT+0x20>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e04a      	b.n	8000fba <HAL_DMA_Start_IT+0xb6>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d13a      	bne.n	8000fac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f938 	bl	80011d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d008      	beq.n	8000f7a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 020e 	orr.w	r2, r2, #14
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e00f      	b.n	8000f9a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0204 	bic.w	r2, r2, #4
 8000f88:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 020a 	orr.w	r2, r2, #10
 8000f98:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e005      	b.n	8000fb8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d04f      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d04a      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0204 	bic.w	r2, r2, #4
 8001012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d029      	beq.n	8001072 <HAL_DMA_IRQHandler+0xae>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_IRQHandler+0xaa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01a      	beq.n	8001068 <HAL_DMA_IRQHandler+0xa4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d012      	beq.n	8001062 <HAL_DMA_IRQHandler+0x9e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00a      	beq.n	800105c <HAL_DMA_IRQHandler+0x98>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_DMA_IRQHandler+0x92>
 8001050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001054:	e00e      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800105a:	e00b      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001060:	e008      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001066:	e005      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	e002      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	e000      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001072:	2304      	movs	r3, #4
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 8001076:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8094 	beq.w	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800108a:	e08e      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2202      	movs	r2, #2
 8001092:	409a      	lsls	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d056      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d051      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d029      	beq.n	800112a <HAL_DMA_IRQHandler+0x166>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d022      	beq.n	8001126 <HAL_DMA_IRQHandler+0x162>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01a      	beq.n	8001120 <HAL_DMA_IRQHandler+0x15c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d012      	beq.n	800111a <HAL_DMA_IRQHandler+0x156>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x150>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d102      	bne.n	800110e <HAL_DMA_IRQHandler+0x14a>
 8001108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800110c:	e00e      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800110e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001112:	e00b      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	e008      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	e005      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	e002      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001126:	2320      	movs	r3, #32
 8001128:	e000      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800112a:	2302      	movs	r3, #2
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 800112e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d034      	beq.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001148:	e02f      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2208      	movs	r2, #8
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d028      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4798      	blx	r3
    }
  }
  return;
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d108      	bne.n	8001210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120e:	e007      	b.n	8001220 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b08b      	sub	sp, #44	; 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e169      	b.n	8001514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001240:	2201      	movs	r2, #1
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8158 	bne.w	800150e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4a9a      	ldr	r2, [pc, #616]	; (80014cc <HAL_GPIO_Init+0x2a0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d05e      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001268:	4a98      	ldr	r2, [pc, #608]	; (80014cc <HAL_GPIO_Init+0x2a0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d875      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800126e:	4a98      	ldr	r2, [pc, #608]	; (80014d0 <HAL_GPIO_Init+0x2a4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d058      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001274:	4a96      	ldr	r2, [pc, #600]	; (80014d0 <HAL_GPIO_Init+0x2a4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d86f      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800127a:	4a96      	ldr	r2, [pc, #600]	; (80014d4 <HAL_GPIO_Init+0x2a8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d052      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001280:	4a94      	ldr	r2, [pc, #592]	; (80014d4 <HAL_GPIO_Init+0x2a8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d869      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001286:	4a94      	ldr	r2, [pc, #592]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d04c      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 800128c:	4a92      	ldr	r2, [pc, #584]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d863      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001292:	4a92      	ldr	r2, [pc, #584]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d046      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001298:	4a90      	ldr	r2, [pc, #576]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d85d      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d82a      	bhi.n	80012f8 <HAL_GPIO_Init+0xcc>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d859      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <HAL_GPIO_Init+0x80>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001301 	.word	0x08001301
 80012b4:	08001313 	.word	0x08001313
 80012b8:	08001355 	.word	0x08001355
 80012bc:	0800135b 	.word	0x0800135b
 80012c0:	0800135b 	.word	0x0800135b
 80012c4:	0800135b 	.word	0x0800135b
 80012c8:	0800135b 	.word	0x0800135b
 80012cc:	0800135b 	.word	0x0800135b
 80012d0:	0800135b 	.word	0x0800135b
 80012d4:	0800135b 	.word	0x0800135b
 80012d8:	0800135b 	.word	0x0800135b
 80012dc:	0800135b 	.word	0x0800135b
 80012e0:	0800135b 	.word	0x0800135b
 80012e4:	0800135b 	.word	0x0800135b
 80012e8:	0800135b 	.word	0x0800135b
 80012ec:	0800135b 	.word	0x0800135b
 80012f0:	08001309 	.word	0x08001309
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	4a79      	ldr	r2, [pc, #484]	; (80014e0 <HAL_GPIO_Init+0x2b4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fe:	e02c      	b.n	800135a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e029      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	3304      	adds	r3, #4
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e024      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	3308      	adds	r3, #8
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e01f      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e01a      	b.n	800135c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132e:	2304      	movs	r3, #4
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e013      	b.n	800135c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	611a      	str	r2, [r3, #16]
          break;
 8001346:	e009      	b.n	800135c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	615a      	str	r2, [r3, #20]
          break;
 8001352:	e003      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x130>
          break;
 800135a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d801      	bhi.n	8001366 <HAL_GPIO_Init+0x13a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	e001      	b.n	800136a <HAL_GPIO_Init+0x13e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3304      	adds	r3, #4
 800136a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d802      	bhi.n	8001378 <HAL_GPIO_Init+0x14c>
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x152>
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3b08      	subs	r3, #8
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	210f      	movs	r1, #15
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	6a39      	ldr	r1, [r7, #32]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80b1 	beq.w	800150e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_Init+0x2bc>)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a40      	ldr	r2, [pc, #256]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x1ec>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3f      	ldr	r2, [pc, #252]	; (80014f0 <HAL_GPIO_Init+0x2c4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1e8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <HAL_GPIO_Init+0x2c8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1e4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <HAL_GPIO_Init+0x2cc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1e0>
 8001408:	2303      	movs	r3, #3
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 800140c:	2304      	movs	r3, #4
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001418:	2300      	movs	r3, #0
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142a:	492f      	ldr	r1, [pc, #188]	; (80014e8 <HAL_GPIO_Init+0x2bc>)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	492c      	ldr	r1, [pc, #176]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	4928      	ldr	r1, [pc, #160]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 800145c:	4013      	ands	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4922      	ldr	r1, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	491e      	ldr	r1, [pc, #120]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4918      	ldr	r1, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4914      	ldr	r1, [pc, #80]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d021      	beq.n	8001500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e021      	b.n	800150e <HAL_GPIO_Init+0x2e2>
 80014ca:	bf00      	nop
 80014cc:	10320000 	.word	0x10320000
 80014d0:	10310000 	.word	0x10310000
 80014d4:	10220000 	.word	0x10220000
 80014d8:	10210000 	.word	0x10210000
 80014dc:	10120000 	.word	0x10120000
 80014e0:	10110000 	.word	0x10110000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_GPIO_Init+0x304>)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	43db      	mvns	r3, r3
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <HAL_GPIO_Init+0x304>)
 800150a:	4013      	ands	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae8e 	bne.w	8001240 <HAL_GPIO_Init+0x14>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	372c      	adds	r7, #44	; 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e11b      	b.n	80017ae <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f006 f838 	bl	8007600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2224      	movs	r2, #36	; 0x24
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a8:	f001 fde6 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80015ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a81      	ldr	r2, [pc, #516]	; (80017b8 <HAL_I2C_Init+0x254>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d807      	bhi.n	80015c8 <HAL_I2C_Init+0x64>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a80      	ldr	r2, [pc, #512]	; (80017bc <HAL_I2C_Init+0x258>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	bf94      	ite	ls
 80015c0:	2301      	movls	r3, #1
 80015c2:	2300      	movhi	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e006      	b.n	80015d6 <HAL_I2C_Init+0x72>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a7d      	ldr	r2, [pc, #500]	; (80017c0 <HAL_I2C_Init+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf94      	ite	ls
 80015d0:	2301      	movls	r3, #1
 80015d2:	2300      	movhi	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0e7      	b.n	80017ae <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a78      	ldr	r2, [pc, #480]	; (80017c4 <HAL_I2C_Init+0x260>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_I2C_Init+0x254>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d802      	bhi.n	8001618 <HAL_I2C_Init+0xb4>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3301      	adds	r3, #1
 8001616:	e009      	b.n	800162c <HAL_I2C_Init+0xc8>
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_I2C_Init+0x264>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	3301      	adds	r3, #1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800163e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	495c      	ldr	r1, [pc, #368]	; (80017b8 <HAL_I2C_Init+0x254>)
 8001648:	428b      	cmp	r3, r1
 800164a:	d819      	bhi.n	8001680 <HAL_I2C_Init+0x11c>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e59      	subs	r1, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fbb1 f3f3 	udiv	r3, r1, r3
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001660:	400b      	ands	r3, r1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <HAL_I2C_Init+0x118>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1e59      	subs	r1, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fbb1 f3f3 	udiv	r3, r1, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167a:	e051      	b.n	8001720 <HAL_I2C_Init+0x1bc>
 800167c:	2304      	movs	r3, #4
 800167e:	e04f      	b.n	8001720 <HAL_I2C_Init+0x1bc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <HAL_I2C_Init+0x148>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e012      	b.n	80016d2 <HAL_I2C_Init+0x16e>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x176>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e022      	b.n	8001720 <HAL_I2C_Init+0x1bc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_I2C_Init+0x19c>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e58      	subs	r0, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	440b      	add	r3, r1
 80016f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	e00f      	b.n	8001720 <HAL_I2C_Init+0x1bc>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6911      	ldr	r1, [r2, #16]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	430b      	orrs	r3, r1
 8001762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000186a0 	.word	0x000186a0
 80017bc:	001e847f 	.word	0x001e847f
 80017c0:	003d08ff 	.word	0x003d08ff
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	10624dd3 	.word	0x10624dd3

080017cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	817b      	strh	r3, [r7, #10]
 80017dc:	4613      	mov	r3, r2
 80017de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff f9fa 	bl	8000bd8 <HAL_GetTick>
 80017e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	f040 80e0 	bne.w	80019b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2319      	movs	r3, #25
 80017fa:	2201      	movs	r2, #1
 80017fc:	4970      	ldr	r1, [pc, #448]	; (80019c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 ff0a 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	e0d3      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_I2C_Master_Transmit+0x50>
 8001818:	2302      	movs	r3, #2
 800181a:	e0cc      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d007      	beq.n	8001842 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001850:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2221      	movs	r2, #33	; 0x21
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2210      	movs	r2, #16
 800185e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	893a      	ldrh	r2, [r7, #8]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a50      	ldr	r2, [pc, #320]	; (80019c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001884:	8979      	ldrh	r1, [r7, #10]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fcf4 	bl	8002278 <I2C_MasterRequestWrite>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e08d      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018b0:	e066      	b.n	8001980 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 ff84 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d107      	bne.n	80018da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06b      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d11b      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x188>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	d017      	beq.n	8001954 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6a39      	ldr	r1, [r7, #32]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 ff74 	bl	8002846 <I2C_WaitOnBTFFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b04      	cmp	r3, #4
 800196a:	d107      	bne.n	800197c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e01a      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	2b00      	cmp	r3, #0
 8001986:	d194      	bne.n	80018b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	00100002 	.word	0x00100002
 80019c4:	ffff0000 	.word	0xffff0000

080019c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff f8f9 	bl	8000bd8 <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 80d9 	bne.w	8001ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fe09 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0cc      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Mem_Write+0x56>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0c5      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d007      	beq.n	8001a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	88f8      	ldrh	r0, [r7, #6]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fc64 	bl	8002364 <I2C_RequestMemoryWrite>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d052      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e081      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fe8a 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d11b      	bne.n	8001b48 <HAL_I2C_Mem_Write+0x180>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d017      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1aa      	bne.n	8001aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fe76 	bl	8002846 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e016      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000

08001bbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	817b      	strh	r3, [r7, #10]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	813b      	strh	r3, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd6:	f7fe ffff 	bl	8000bd8 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	f040 821e 	bne.w	8002026 <HAL_I2C_Mem_Read+0x46a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2319      	movs	r3, #25
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4982      	ldr	r1, [pc, #520]	; (8001dfc <HAL_I2C_Mem_Read+0x240>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fd0f 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
 8001c02:	e211      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x56>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e20a      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d007      	beq.n	8001c38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2222      	movs	r2, #34	; 0x22
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a62      	ldr	r2, [pc, #392]	; (8001e00 <HAL_I2C_Mem_Read+0x244>)
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c7a:	88f8      	ldrh	r0, [r7, #6]
 8001c7c:	893a      	ldrh	r2, [r7, #8]
 8001c7e:	8979      	ldrh	r1, [r7, #10]
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4603      	mov	r3, r0
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fbf4 	bl	8002478 <I2C_RequestMemoryRead>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c6      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
    }

    if (hi2c->XferSize == 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e19a      	b.n	8002000 <HAL_I2C_Mem_Read+0x444>
    }
    else if (hi2c->XferSize == 1U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11e      	bne.n	8001d10 <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce2:	b672      	cpsid	i
}
 8001ce4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d0c:	b662      	cpsie	i
}
 8001d0e:	e035      	b.n	8001d7c <HAL_I2C_Mem_Read+0x1c0>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11e      	bne.n	8001d56 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d52:	b662      	cpsie	i
}
 8001d54:	e012      	b.n	8001d7c <HAL_I2C_Mem_Read+0x1c0>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d7c:	e140      	b.n	8002000 <HAL_I2C_Mem_Read+0x444>
    {
      if (hi2c->XferSize <= 3U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	f200 80f9 	bhi.w	8001f7a <HAL_I2C_Mem_Read+0x3be>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d123      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fd97 	bl	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e141      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e113      	b.n	8002000 <HAL_I2C_Mem_Read+0x444>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d152      	bne.n	8001e86 <HAL_I2C_Mem_Read+0x2ca>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Mem_Read+0x248>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fc14 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e116      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e4e:	b662      	cpsie	i
}
 8001e50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e84:	e0bc      	b.n	8002000 <HAL_I2C_Mem_Read+0x444>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4968      	ldr	r1, [pc, #416]	; (8002030 <HAL_I2C_Mem_Read+0x474>)
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 fbc1 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Mem_Read+0x2e4>
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0c3      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	2200      	movs	r2, #0
 8001eee:	4950      	ldr	r1, [pc, #320]	; (8002030 <HAL_I2C_Mem_Read+0x474>)
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fb91 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_Mem_Read+0x344>
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e093      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f42:	b662      	cpsie	i
}
 8001f44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f78:	e042      	b.n	8002000 <HAL_I2C_Mem_Read+0x444>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fca2 	bl	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Mem_Read+0x3d2>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e04c      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d118      	bne.n	8002000 <HAL_I2C_Mem_Read+0x444>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f aeba 	bne.w	8001d7e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_I2C_Mem_Read+0x46c>
  }
  else
  {
    return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00010004 	.word	0x00010004

08002034 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	460b      	mov	r3, r1
 8002042:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7fe fdc8 	bl	8000bd8 <HAL_GetTick>
 8002048:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 8105 	bne.w	8002266 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2319      	movs	r3, #25
 8002062:	2201      	movs	r2, #1
 8002064:	4982      	ldr	r1, [pc, #520]	; (8002270 <HAL_I2C_IsDeviceReady+0x23c>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fad6 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	e0f8      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2C_IsDeviceReady+0x50>
 8002080:	2302      	movs	r3, #2
 8002082:	e0f1      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d007      	beq.n	80020aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2224      	movs	r2, #36	; 0x24
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_I2C_IsDeviceReady+0x240>)
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fa94 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0b6      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002108:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800210a:	f7fe fd65 	bl	8000bd8 <HAL_GetTick>
 800210e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800213e:	e025      	b.n	800218c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7fe fd4a 	bl	8000bd8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <HAL_I2C_IsDeviceReady+0x122>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	22a0      	movs	r2, #160	; 0xa0
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2ba0      	cmp	r3, #160	; 0xa0
 8002196:	d005      	beq.n	80021a4 <HAL_I2C_IsDeviceReady+0x170>
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_I2C_IsDeviceReady+0x170>
 800219e:	7dbb      	ldrb	r3, [r7, #22]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0cd      	beq.n	8002140 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d129      	bne.n	800220e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	4921      	ldr	r1, [pc, #132]	; (8002270 <HAL_I2C_IsDeviceReady+0x23c>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa14 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e036      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e02c      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002226:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2319      	movs	r3, #25
 800222e:	2201      	movs	r2, #1
 8002230:	490f      	ldr	r1, [pc, #60]	; (8002270 <HAL_I2C_IsDeviceReady+0x23c>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f9f0 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e012      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3301      	adds	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	f4ff af3e 	bcc.w	80020ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
  }
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000

08002278 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	460b      	mov	r3, r1
 8002286:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d006      	beq.n	80022a2 <I2C_MasterRequestWrite+0x2a>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d003      	beq.n	80022a2 <I2C_MasterRequestWrite+0x2a>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022a0:	d108      	bne.n	80022b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e00b      	b.n	80022cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d107      	bne.n	80022cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f99d 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e035      	b.n	8002354 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f0:	d108      	bne.n	8002304 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022f2:	897b      	ldrh	r3, [r7, #10]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	e01b      	b.n	800233c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002304:	897b      	ldrh	r3, [r7, #10]
 8002306:	11db      	asrs	r3, r3, #7
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0306 	and.w	r3, r3, #6
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f063 030f 	orn	r3, r3, #15
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <I2C_MasterRequestWrite+0xe4>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f9cf 	bl	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e010      	b.n	8002354 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <I2C_MasterRequestWrite+0xe8>)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f9bf 	bl	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	00010008 	.word	0x00010008
 8002360:	00010002 	.word	0x00010002

08002364 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	460b      	mov	r3, r1
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2200      	movs	r2, #0
 8002396:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f93c 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e05f      	b.n	800246a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	492d      	ldr	r1, [pc, #180]	; (8002474 <I2C_RequestMemoryWrite+0x110>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f980 	bl	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e04c      	b.n	800246a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f9ea 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02b      	b.n	800246a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e021      	b.n	8002468 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f9c4 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b04      	cmp	r3, #4
 8002448:	d107      	bne.n	800245a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e005      	b.n	800246a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	00010002 	.word	0x00010002

08002478 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8aa 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e09e      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	494c      	ldr	r1, [pc, #304]	; (8002614 <I2C_RequestMemoryRead+0x19c>)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f8ee 	bl	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e08b      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f958 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06a      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800253c:	893b      	ldrh	r3, [r7, #8]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	e021      	b.n	800258c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b29b      	uxth	r3, r3
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f932 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b04      	cmp	r3, #4
 800256c:	d107      	bne.n	800257e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e044      	b.n	800260c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002582:	893b      	ldrh	r3, [r7, #8]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	6a39      	ldr	r1, [r7, #32]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f917 	bl	80027c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e029      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f81f 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e013      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025e4:	897b      	ldrh	r3, [r7, #10]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <I2C_RequestMemoryRead+0x19c>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f863 	bl	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	e025      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002630:	d021      	beq.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe fad1 	bl	8000bd8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e023      	b.n	80026be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10d      	bne.n	800269c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	e00c      	b.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4013      	ands	r3, r2
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d0b6      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d4:	e051      	b.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e4:	d123      	bne.n	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0204 	orr.w	r2, r3, #4
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e046      	b.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002734:	d021      	beq.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002736:	f7fe fa4f 	bl	8000bd8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e020      	b.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10c      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	e00b      	b.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d18d      	bne.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d0:	e02d      	b.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8ce 	bl	8002974 <I2C_IsAcknowledgeFailed>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e02d      	b.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e8:	d021      	beq.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7fe f9f5 	bl	8000bd8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e007      	b.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d1ca      	bne.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002852:	e02d      	b.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f88d 	bl	8002974 <I2C_IsAcknowledgeFailed>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e02d      	b.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286a:	d021      	beq.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7fe f9b4 	bl	8000bd8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d116      	bne.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d1ca      	bne.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028d4:	e042      	b.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d119      	bne.n	8002918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0210 	mvn.w	r2, #16
 80028ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e029      	b.n	800296c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7fe f95e 	bl	8000bd8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d302      	bcc.n	800292e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e007      	b.n	800296c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d1b5      	bne.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298a:	d11b      	bne.n	80029c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e26c      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8087 	beq.w	8002afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f0:	4b92      	ldr	r3, [pc, #584]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029fc:	4b8f      	ldr	r3, [pc, #572]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d112      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5e>
 8002a08:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d10b      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d06c      	beq.n	8002afc <HAL_RCC_OscConfig+0x12c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d168      	bne.n	8002afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e246      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x76>
 8002a38:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7f      	ldr	r2, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e02e      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b78      	ldr	r3, [pc, #480]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a77      	ldr	r2, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0xbc>
 8002a72:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a71      	ldr	r2, [pc, #452]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6e      	ldr	r2, [pc, #440]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a8c:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6a      	ldr	r2, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe f894 	bl	8000bd8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe f890 	bl	8000bd8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1fa      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xe4>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe f880 	bl	8000bd8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe f87c 	bl	8000bd8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1e6      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x10c>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b16:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x18c>
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x176>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1ba      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4939      	ldr	r1, [pc, #228]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f835 	bl	8000bd8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe f831 	bl	8000bd8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e19b      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4927      	ldr	r1, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe f814 	bl	8000bd8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe f810 	bl	8000bd8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e17a      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03a      	beq.n	8002c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d019      	beq.n	8002c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_RCC_OscConfig+0x274>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fd fff4 	bl	8000bd8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fd fff0 	bl	8000bd8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e15a      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c12:	2001      	movs	r0, #1
 8002c14:	f000 fad8 	bl	80031c8 <RCC_Delay>
 8002c18:	e01c      	b.n	8002c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fd ffda 	bl	8000bd8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c26:	e00f      	b.n	8002c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fd ffd6 	bl	8000bd8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d908      	bls.n	8002c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e140      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	42420000 	.word	0x42420000
 8002c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b9e      	ldr	r3, [pc, #632]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e9      	bne.n	8002c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a6 	beq.w	8002dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a93      	ldr	r2, [pc, #588]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a8a      	ldr	r2, [pc, #552]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fd ff97 	bl	8000bd8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fd ff93 	bl	8000bd8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0fd      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x312>
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x334>
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a75      	ldr	r2, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x356>
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a6c      	ldr	r2, [pc, #432]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b64      	ldr	r3, [pc, #400]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fd ff47 	bl	8000bd8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fd ff43 	bl	8000bd8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ab      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x37e>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7fd ff31 	bl	8000bd8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fd ff2d 	bl	8000bd8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e095      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8081 	beq.w	8002eba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d061      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d146      	bne.n	8002e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fd ff01 	bl	8000bd8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd fefd 	bl	8000bd8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e067      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e00:	d108      	bne.n	8002e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	492d      	ldr	r1, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a19      	ldr	r1, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	430b      	orrs	r3, r1
 8002e26:	4927      	ldr	r1, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fed1 	bl	8000bd8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fd fecd 	bl	8000bd8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e037      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46a>
 8002e58:	e02f      	b.n	8002eba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd feba 	bl	8000bd8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd feb6 	bl	8000bd8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e020      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x498>
 8002e86:	e018      	b.n	8002eba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e013      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42420060 	.word	0x42420060

08002ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d0      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4965      	ldr	r1, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d040      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d115      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e073      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06b      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4936      	ldr	r1, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fd fe0a 	bl	8000bd8 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fd fe06 	bl	8000bd8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e053      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d210      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1cc>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fd68 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
 8003098:	0800bbc0 	.word	0x0800bbc0
 800309c:	20000074 	.word	0x20000074
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030ac:	1d3c      	adds	r4, r7, #4
 80030ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b4:	f240 2301 	movw	r3, #513	; 0x201
 80030b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x46>
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f6:	4413      	add	r3, r2
 80030f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c5b      	lsrs	r3, r3, #17
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003116:	4413      	add	r3, r2
 8003118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800311c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	4a0e      	ldr	r2, [pc, #56]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	fb02 f203 	mul.w	r2, r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e004      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	623b      	str	r3, [r7, #32]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6a3b      	ldr	r3, [r7, #32]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc90      	pop	{r4, r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	0800a680 	.word	0x0800a680
 8003158:	40021000 	.word	0x40021000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	003d0900 	.word	0x003d0900

08003164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <HAL_RCC_GetHCLKFreq+0x10>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000074 	.word	0x20000074

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff2 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	0800bbd0 	.word	0x0800bbd0

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a4:	f7ff ffde 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0adb      	lsrs	r3, r3, #11
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	0800bbd0 	.word	0x0800bbd0

080031c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <RCC_Delay+0x34>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <RCC_Delay+0x38>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0a5b      	lsrs	r3, r3, #9
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e4:	bf00      	nop
  }
  while (Delay --);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	60fa      	str	r2, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <RCC_Delay+0x1c>
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20000074 	.word	0x20000074
 8003200:	10624dd3 	.word	0x10624dd3

08003204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e053      	b.n	80032be <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f004 fa23 	bl	800767c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	ea42 0103 	orr.w	r1, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	0c1a      	lsrs	r2, r3, #16
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 0204 	and.w	r2, r2, #4
 800329c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_Transmit+0x22>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e11e      	b.n	8003526 <HAL_SPI_Transmit+0x260>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f0:	f7fd fc72 	bl	8000bd8 <HAL_GetTick>
 80032f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d002      	beq.n	800330c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330a:	e103      	b.n	8003514 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_Transmit+0x52>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800331c:	e0fa      	b.n	8003514 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d107      	bne.n	8003376 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d007      	beq.n	8003394 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339c:	d14b      	bne.n	8003436 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_Transmit+0xe6>
 80033a6:	8afb      	ldrh	r3, [r7, #22]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d13e      	bne.n	800342a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d0:	e02b      	b.n	800342a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d112      	bne.n	8003406 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
 8003404:	e011      	b.n	800342a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003406:	f7fd fbe7 	bl	8000bd8 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d803      	bhi.n	800341e <HAL_SPI_Transmit+0x158>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Transmit+0x15e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003428:	e074      	b.n	8003514 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1ce      	bne.n	80033d2 <HAL_SPI_Transmit+0x10c>
 8003434:	e04c      	b.n	80034d0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_SPI_Transmit+0x17e>
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d140      	bne.n	80034c6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800346a:	e02c      	b.n	80034c6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d113      	bne.n	80034a2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a0:	e011      	b.n	80034c6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a2:	f7fd fb99 	bl	8000bd8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d803      	bhi.n	80034ba <HAL_SPI_Transmit+0x1f4>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_Transmit+0x1fa>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c4:	e026      	b.n	8003514 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1cd      	bne.n	800346c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fb91 	bl	8003bfc <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e000      	b.n	8003514 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003524:	7ffb      	ldrb	r3, [r7, #31]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b088      	sub	sp, #32
 8003532:	af02      	add	r7, sp, #8
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <HAL_SPI_Receive+0x44>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10e      	bne.n	8003572 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2204      	movs	r2, #4
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8e9 	bl	8003740 <HAL_SPI_TransmitReceive>
 800356e:	4603      	mov	r3, r0
 8003570:	e0e2      	b.n	8003738 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_SPI_Receive+0x52>
 800357c:	2302      	movs	r3, #2
 800357e:	e0db      	b.n	8003738 <HAL_SPI_Receive+0x20a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003588:	f7fd fb26 	bl	8000bd8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800359e:	e0c2      	b.n	8003726 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Receive+0x7e>
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b0:	e0b9      	b.n	8003726 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2204      	movs	r2, #4
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f8:	d107      	bne.n	800360a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d007      	beq.n	8003628 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d162      	bne.n	80036f6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003630:	e02e      	b.n	8003690 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d115      	bne.n	800366c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f103 020c 	add.w	r2, r3, #12
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800366a:	e011      	b.n	8003690 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800366c:	f7fd fab4 	bl	8000bd8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d803      	bhi.n	8003684 <HAL_SPI_Receive+0x156>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003682:	d102      	bne.n	800368a <HAL_SPI_Receive+0x15c>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800368e:	e04a      	b.n	8003726 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1cb      	bne.n	8003632 <HAL_SPI_Receive+0x104>
 800369a:	e031      	b.n	8003700 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d113      	bne.n	80036d2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	b292      	uxth	r2, r2
 80036b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d0:	e011      	b.n	80036f6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d2:	f7fd fa81 	bl	8000bd8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d803      	bhi.n	80036ea <HAL_SPI_Receive+0x1bc>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e8:	d102      	bne.n	80036f0 <HAL_SPI_Receive+0x1c2>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036f4:	e017      	b.n	8003726 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1cd      	bne.n	800369c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	6839      	ldr	r1, [r7, #0]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa27 	bl	8003b58 <SPI_EndRxTransaction>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
 8003722:	e000      	b.n	8003726 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003724:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003736:	7dfb      	ldrb	r3, [r7, #23]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800374e:	2301      	movs	r3, #1
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x26>
 8003762:	2302      	movs	r3, #2
 8003764:	e18a      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x33c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800376e:	f7fd fa33 	bl	8000bd8 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800378c:	2b01      	cmp	r3, #1
 800378e:	d00f      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x70>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003796:	d107      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x68>
 80037a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d003      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ae:	e15b      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_SPI_TransmitReceive+0x82>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_TransmitReceive+0x82>
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037c8:	e14e      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d003      	beq.n	80037de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d007      	beq.n	8003832 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383a:	d178      	bne.n	800392e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_TransmitReceive+0x10a>
 8003844:	8b7b      	ldrh	r3, [r7, #26]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d166      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	1c9a      	adds	r2, r3, #2
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386e:	e053      	b.n	8003918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d11b      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x176>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0x176>
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d113      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d119      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x1b8>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d014      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038f8:	f7fd f96e 	bl	8000bd8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003904:	429a      	cmp	r2, r3
 8003906:	d807      	bhi.n	8003918 <HAL_SPI_TransmitReceive+0x1d8>
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d003      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003916:	e0a7      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1a6      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x130>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1a1      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x130>
 800392c:	e07c      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1fc>
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d16b      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003962:	e057      	b.n	8003a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d11c      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x26c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d017      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x26c>
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d114      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d119      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x2ae>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d014      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ea:	2301      	movs	r3, #1
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039ee:	f7fd f8f3 	bl	8000bd8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d803      	bhi.n	8003a06 <HAL_SPI_TransmitReceive+0x2c6>
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x2cc>
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a12:	e029      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1a2      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x224>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d19d      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f8e5 	bl	8003bfc <SPI_EndRxTxTransaction>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d006      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a44:	e010      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	e000      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a94:	e04c      	b.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9c:	d048      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a9e:	f7fd f89b 	bl	8000bd8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d902      	bls.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d13d      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003acc:	d111      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d004      	beq.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d107      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	d10f      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e00f      	b.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d1a3      	bne.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6c:	d111      	bne.n	8003b92 <SPI_EndRxTransaction+0x3a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d004      	beq.n	8003b82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d107      	bne.n	8003b92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9a:	d117      	bne.n	8003bcc <SPI_EndRxTransaction+0x74>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d112      	bne.n	8003bcc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2101      	movs	r1, #1
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff ff67 	bl	8003a84 <SPI_WaitFlagStateUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01a      	beq.n	8003bf2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e013      	b.n	8003bf4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ff54 	bl	8003a84 <SPI_WaitFlagStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e000      	b.n	8003bf4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ff36 	bl	8003a84 <SPI_WaitFlagStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e000      	b.n	8003c30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e01d      	b.n	8003c86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f003 fd4c 	bl	80076fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 fb6e 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e01d      	b.n	8003d22 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f815 	bl	8003d2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 fb20 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	d841      	bhi.n	8003dd0 <HAL_TIM_OC_Start_IT+0x94>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_TIM_OC_Start_IT+0x18>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003dd1 	.word	0x08003dd1
 8003d5c:	08003dd1 	.word	0x08003dd1
 8003d60:	08003dd1 	.word	0x08003dd1
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003dd1 	.word	0x08003dd1
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003dd1 	.word	0x08003dd1
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003dd1 	.word	0x08003dd1
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003dbf 	.word	0x08003dbf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0202 	orr.w	r2, r2, #2
 8003d96:	60da      	str	r2, [r3, #12]
      break;
 8003d98:	e01b      	b.n	8003dd2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0204 	orr.w	r2, r2, #4
 8003da8:	60da      	str	r2, [r3, #12]
      break;
 8003daa:	e012      	b.n	8003dd2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	60da      	str	r2, [r3, #12]
      break;
 8003dbc:	e009      	b.n	8003dd2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0210 	orr.w	r2, r2, #16
 8003dcc:	60da      	str	r2, [r3, #12]
      break;
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003dd0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fd3c 	bl	8004858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <HAL_TIM_OC_Start_IT+0xec>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d107      	bne.n	8003dfa <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d007      	beq.n	8003e1c <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00

08003e2c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e02d      	b.n	8003e9c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f825 	bl	8003ea4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 fa73 	bl	8004358 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d122      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d11b      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f06f 0202 	mvn.w	r2, #2
 8003ee2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fa12 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8003efe:	e005      	b.n	8003f0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fa05 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa14 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d122      	bne.n	8003f66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d11b      	bne.n	8003f66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0204 	mvn.w	r2, #4
 8003f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f9e8 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8003f52:	e005      	b.n	8003f60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9db 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9ea 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d122      	bne.n	8003fba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11b      	bne.n	8003fba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0208 	mvn.w	r2, #8
 8003f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f9be 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8003fa6:	e005      	b.n	8003fb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f9b1 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9c0 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d122      	bne.n	800400e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d11b      	bne.n	800400e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0210 	mvn.w	r2, #16
 8003fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f994 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
 8003ffa:	e005      	b.n	8004008 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f987 	bl	8004310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f996 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10e      	bne.n	800403a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0201 	mvn.w	r2, #1
 8004032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f002 f87f 	bl	8006138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d10e      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d107      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fcbb 	bl	80049dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d10e      	bne.n	8004092 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d107      	bne.n	8004092 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f95a 	bl	8004346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b20      	cmp	r3, #32
 800409e:	d10e      	bne.n	80040be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0220 	mvn.w	r2, #32
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fc86 	bl	80049ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80040de:	2302      	movs	r3, #2
 80040e0:	e04e      	b.n	8004180 <HAL_TIM_OC_ConfigChannel+0xb8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d839      	bhi.n	800416c <HAL_TIM_OC_ConfigChannel+0xa4>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_TIM_OC_ConfigChannel+0x38>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004135 	.word	0x08004135
 8004104:	0800416d 	.word	0x0800416d
 8004108:	0800416d 	.word	0x0800416d
 800410c:	0800416d 	.word	0x0800416d
 8004110:	08004143 	.word	0x08004143
 8004114:	0800416d 	.word	0x0800416d
 8004118:	0800416d 	.word	0x0800416d
 800411c:	0800416d 	.word	0x0800416d
 8004120:	08004151 	.word	0x08004151
 8004124:	0800416d 	.word	0x0800416d
 8004128:	0800416d 	.word	0x0800416d
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800415f 	.word	0x0800415f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f96e 	bl	800441c <TIM_OC1_SetConfig>
      break;
 8004140:	e015      	b.n	800416e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f9cd 	bl	80044e8 <TIM_OC2_SetConfig>
      break;
 800414e:	e00e      	b.n	800416e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa30 	bl	80045bc <TIM_OC3_SetConfig>
      break;
 800415c:	e007      	b.n	800416e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fa93 	bl	8004690 <TIM_OC4_SetConfig>
      break;
 800416a:	e000      	b.n	800416e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800416c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e0b3      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x180>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d03e      	beq.n	8004258 <HAL_TIM_ConfigClockSource+0xd0>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	f200 8087 	bhi.w	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	f000 8085 	beq.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	d87f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d01a      	beq.n	800422a <HAL_TIM_ConfigClockSource+0xa2>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d87b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f8:	2b60      	cmp	r3, #96	; 0x60
 80041fa:	d050      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x116>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d877      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004200:	2b50      	cmp	r3, #80	; 0x50
 8004202:	d03c      	beq.n	800427e <HAL_TIM_ConfigClockSource+0xf6>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d873      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d058      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x136>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d86f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d064      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d86b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d060      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d867      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d05a      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004228:	e062      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f000 faee 	bl	800481a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800424c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	609a      	str	r2, [r3, #8]
      break;
 8004256:	e04e      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f000 fad7 	bl	800481a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	609a      	str	r2, [r3, #8]
      break;
 800427c:	e03b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 fa4e 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2150      	movs	r1, #80	; 0x50
 8004296:	4618      	mov	r0, r3
 8004298:	f000 faa5 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 800429c:	e02b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 fa6c 	bl	8004788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2160      	movs	r1, #96	; 0x60
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fa95 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e01b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 fa2e 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fa85 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f000 fa7c 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a26      	ldr	r2, [pc, #152]	; (8004414 <TIM_Base_SetConfig+0xbc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x30>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <TIM_Base_SetConfig+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <TIM_Base_SetConfig+0xbc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <TIM_Base_SetConfig+0xc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a07      	ldr	r2, [pc, #28]	; (8004410 <TIM_Base_SetConfig+0xb8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	615a      	str	r2, [r3, #20]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800

0800441c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <TIM_OC1_SetConfig+0xc8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10c      	bne.n	8004492 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0308 	bic.w	r3, r3, #8
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <TIM_OC1_SetConfig+0xc8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d111      	bne.n	80044be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0210 	bic.w	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0320 	bic.w	r3, r3, #32
 8004532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <TIM_OC2_SetConfig+0xd0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10d      	bne.n	8004564 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <TIM_OC2_SetConfig+0xd0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d113      	bne.n	8004594 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800457a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr
 80045b8:	40012c00 	.word	0x40012c00

080045bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_OC3_SetConfig+0xd0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a14      	ldr	r2, [pc, #80]	; (800468c <TIM_OC3_SetConfig+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d113      	bne.n	8004666 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	031b      	lsls	r3, r3, #12
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <TIM_OC4_SetConfig+0x98>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d109      	bne.n	8004704 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00

0800472c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0201 	bic.w	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 030a 	bic.w	r3, r3, #10
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f023 0210 	bic.w	r2, r3, #16
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	031b      	lsls	r3, r3, #12
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 0307 	orr.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800481a:	b480      	push	{r7}
 800481c:	b087      	sub	sp, #28
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	431a      	orrs	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	609a      	str	r2, [r3, #8]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2201      	movs	r2, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e032      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004940:	2302      	movs	r3, #2
 8004942:	e03d      	b.n	80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e047      	b.n	8004a90 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f002 fee7 	bl	80077e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2224      	movs	r2, #36	; 0x24
 8004a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fbc8 	bl	80051c8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004a56:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 8083 	bne.w	8004bc0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Transmit+0x2e>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07b      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x40>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e074      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004aee:	f7fc f873 	bl	8000bd8 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b18:	d122      	bne.n	8004b60 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fad3 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e046      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b46:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3302      	adds	r3, #2
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	e017      	b.n	8004b88 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	e013      	b.n	8004b88 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fab0 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e023      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	60ba      	str	r2, [r7, #8]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1b7      	bne.n	8004b02 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2140      	movs	r1, #64	; 0x40
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa97 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e00a      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b088      	sub	sp, #32
 8004bce:	af02      	add	r7, sp, #8
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	f040 8090 	bne.w	8004d0c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_UART_Receive+0x2e>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e088      	b.n	8004d0e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Receive+0x40>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e081      	b.n	8004d0e <HAL_UART_Receive+0x144>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2222      	movs	r2, #34	; 0x22
 8004c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c20:	f7fb ffda 	bl	8000bd8 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c32:	e05c      	b.n	8004cee <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d12b      	bne.n	8004ca4 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2120      	movs	r1, #32
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa3a 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e053      	b.n	8004d0e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3302      	adds	r3, #2
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	e030      	b.n	8004cee <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	e024      	b.n	8004cee <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2120      	movs	r1, #32
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa0e 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e027      	b.n	8004d0e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	60ba      	str	r2, [r7, #8]
 8004cd2:	b2ca      	uxtb	r2, r1
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e00a      	b.n	8004cee <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d19d      	bne.n	8004c34 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d153      	bne.n	8004dda <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_Transmit_DMA+0x26>
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e04c      	b.n	8004ddc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_UART_Transmit_DMA+0x38>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e045      	b.n	8004ddc <HAL_UART_Transmit_DMA+0xc4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2221      	movs	r2, #33	; 0x21
 8004d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_UART_Transmit_DMA+0xcc>)
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_UART_Transmit_DMA+0xd0>)
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_UART_Transmit_DMA+0xd4>)
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	2200      	movs	r2, #0
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004d98:	f107 0308 	add.w	r3, r7, #8
 8004d9c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3304      	adds	r3, #4
 8004dac:	461a      	mov	r2, r3
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f7fc f8a8 	bl	8000f04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dd4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	08004f4b 	.word	0x08004f4b
 8004de8:	08004f9d 	.word	0x08004f9d
 8004dec:	0800503d 	.word	0x0800503d

08004df0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d166      	bne.n	8004ed8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_UART_Receive_DMA+0x26>
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e05f      	b.n	8004eda <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Receive_DMA+0x38>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e058      	b.n	8004eda <HAL_UART_Receive_DMA+0xea>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2222      	movs	r2, #34	; 0x22
 8004e46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <HAL_UART_Receive_DMA+0xf4>)
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <HAL_UART_Receive_DMA+0xf8>)
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	4a23      	ldr	r2, [pc, #140]	; (8004eec <HAL_UART_Receive_DMA+0xfc>)
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	2200      	movs	r2, #0
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	f7fc f83f 	bl	8000f04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08004fb9 	.word	0x08004fb9
 8004ee8:	08005021 	.word	0x08005021
 8004eec:	0800503d 	.word	0x0800503d

08004ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f8c:	e002      	b.n	8004f94 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ffae 	bl	8004ef0 <HAL_UART_TxCpltCallback>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff ffa9 	bl	8004f02 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11e      	bne.n	8005012 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005008:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ff7e 	bl	8004f14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff79 	bl	8004f26 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b21      	cmp	r3, #33	; 0x21
 800506e:	d108      	bne.n	8005082 <UART_DMAError+0x46>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800507c:	68b8      	ldr	r0, [r7, #8]
 800507e:	f000 f871 	bl	8005164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b22      	cmp	r3, #34	; 0x22
 80050a2:	d108      	bne.n	80050b6 <UART_DMAError+0x7a>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f000 f86c 	bl	800518e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	f043 0210 	orr.w	r2, r3, #16
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c2:	68b8      	ldr	r0, [r7, #8]
 80050c4:	f7ff ff38 	bl	8004f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	e02c      	b.n	800513c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e8:	d028      	beq.n	800513c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
 80050f0:	f7fb fd72 	bl	8000bd8 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d21d      	bcs.n	800513c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800510e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e00f      	b.n	800515c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	429a      	cmp	r2, r3
 8005158:	d0c3      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800517a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005202:	f023 030c 	bic.w	r3, r3, #12
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	430b      	orrs	r3, r1
 800520e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a52      	ldr	r2, [pc, #328]	; (8005374 <UART_SetConfig+0x1ac>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d14e      	bne.n	80052ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fd ffb6 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8005234:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009a      	lsls	r2, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	4a4a      	ldr	r2, [pc, #296]	; (8005378 <UART_SetConfig+0x1b0>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	0119      	lsls	r1, r3, #4
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fbb2 f2f3 	udiv	r2, r2, r3
 800526c:	4b42      	ldr	r3, [pc, #264]	; (8005378 <UART_SetConfig+0x1b0>)
 800526e:	fba3 0302 	umull	r0, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2064      	movs	r0, #100	; 0x64
 8005276:	fb00 f303 	mul.w	r3, r0, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a3d      	ldr	r2, [pc, #244]	; (8005378 <UART_SetConfig+0x1b0>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	4419      	add	r1, r3
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009a      	lsls	r2, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a4:	4b34      	ldr	r3, [pc, #208]	; (8005378 <UART_SetConfig+0x1b0>)
 80052a6:	fba3 0302 	umull	r0, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2064      	movs	r0, #100	; 0x64
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	3332      	adds	r3, #50	; 0x32
 80052b8:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <UART_SetConfig+0x1b0>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	440a      	add	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80052cc:	e04d      	b.n	800536a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7fd ff53 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80052d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009a      	lsls	r2, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	4a23      	ldr	r2, [pc, #140]	; (8005378 <UART_SetConfig+0x1b0>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	0119      	lsls	r1, r3, #4
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	fbb2 f2f3 	udiv	r2, r2, r3
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <UART_SetConfig+0x1b0>)
 800530c:	fba3 0302 	umull	r0, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2064      	movs	r0, #100	; 0x64
 8005314:	fb00 f303 	mul.w	r3, r0, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	3332      	adds	r3, #50	; 0x32
 800531e:	4a16      	ldr	r2, [pc, #88]	; (8005378 <UART_SetConfig+0x1b0>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532a:	4419      	add	r1, r3
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <UART_SetConfig+0x1b0>)
 8005344:	fba3 0302 	umull	r0, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	2064      	movs	r0, #100	; 0x64
 800534c:	fb00 f303 	mul.w	r3, r0, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	3332      	adds	r3, #50	; 0x32
 8005356:	4a08      	ldr	r2, [pc, #32]	; (8005378 <UART_SetConfig+0x1b0>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	f003 020f 	and.w	r2, r3, #15
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	440a      	add	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40013800 	.word	0x40013800
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <_Z5Errorv>:
//extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0

}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <_ZL14I2Cx_WriteDatathh>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af04      	add	r7, sp, #16
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
 8005392:	460b      	mov	r3, r1
 8005394:	717b      	strb	r3, [r7, #5]
 8005396:	4613      	mov	r3, r2
 8005398:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800539e:	797b      	ldrb	r3, [r7, #5]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	88f9      	ldrh	r1, [r7, #6]
 80053a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	2301      	movs	r3, #1
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2301      	movs	r3, #1
 80053b4:	4806      	ldr	r0, [pc, #24]	; (80053d0 <_ZL14I2Cx_WriteDatathh+0x48>)
 80053b6:	f7fc fb07 	bl	80019c8 <HAL_I2C_Mem_Write>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <_ZL14I2Cx_WriteDatathh+0x40>
 80053c4:	f7ff ffda 	bl	800537c <_Z5Errorv>
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	200002a0 	.word	0x200002a0

080053d4 <_ZL13I2Cx_ReadDatath>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af04      	add	r7, sp, #16
 80053da:	4603      	mov	r3, r0
 80053dc:	460a      	mov	r2, r1
 80053de:	80fb      	strh	r3, [r7, #6]
 80053e0:	4613      	mov	r3, r2
 80053e2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80053ec:	797b      	ldrb	r3, [r7, #5]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	88f9      	ldrh	r1, [r7, #6]
 80053f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f6:	9302      	str	r3, [sp, #8]
 80053f8:	2301      	movs	r3, #1
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f107 030e 	add.w	r3, r7, #14
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2301      	movs	r3, #1
 8005404:	4807      	ldr	r0, [pc, #28]	; (8005424 <_ZL13I2Cx_ReadDatath+0x50>)
 8005406:	f7fc fbd9 	bl	8001bbc <HAL_I2C_Mem_Read>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <_ZL13I2Cx_ReadDatath+0x44>
 8005414:	f7ff ffb2 	bl	800537c <_Z5Errorv>
  return value;
 8005418:	7bbb      	ldrb	r3, [r7, #14]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200002a0 	.word	0x200002a0

08005428 <_ZL15I2Cx_ReadData16thPt>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af04      	add	r7, sp, #16
 800542e:	4603      	mov	r3, r0
 8005430:	603a      	str	r2, [r7, #0]
 8005432:	80fb      	strh	r3, [r7, #6]
 8005434:	460b      	mov	r3, r1
 8005436:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 800543c:	797b      	ldrb	r3, [r7, #5]
 800543e:	b29a      	uxth	r2, r3
 8005440:	88f9      	ldrh	r1, [r7, #6]
 8005442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005446:	9302      	str	r3, [sp, #8]
 8005448:	2302      	movs	r3, #2
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2301      	movs	r3, #1
 8005452:	4807      	ldr	r0, [pc, #28]	; (8005470 <_ZL15I2Cx_ReadData16thPt+0x48>)
 8005454:	f7fc fbb2 	bl	8001bbc <HAL_I2C_Mem_Read>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <_ZL15I2Cx_ReadData16thPt+0x3e>
 8005462:	f7ff ff8b 	bl	800537c <_Z5Errorv>
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200002a0 	.word	0x200002a0

08005474 <_Z15BME280_WriteReghh>:
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
  if(status != HAL_OK) Error();
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	460a      	mov	r2, r1
 800547e:	71fb      	strb	r3, [r7, #7]
 8005480:	4613      	mov	r3, r2
 8005482:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8005484:	79ba      	ldrb	r2, [r7, #6]
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	4619      	mov	r1, r3
 800548a:	20ec      	movs	r0, #236	; 0xec
 800548c:	f7ff ff7c 	bl	8005388 <_ZL14I2Cx_WriteDatathh>
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_Z14BME280_ReadRegh>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4619      	mov	r1, r3
 80054a6:	20ec      	movs	r0, #236	; 0xec
 80054a8:	f7ff ff94 	bl	80053d4 <_ZL13I2Cx_ReadDatath>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]
  return res;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <_Z18BME280_ReadReg_U16hPt>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4603      	mov	r3, r0
 80054c2:	6039      	str	r1, [r7, #0]
 80054c4:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4619      	mov	r1, r3
 80054cc:	20ec      	movs	r0, #236	; 0xec
 80054ce:	f7ff ffab 	bl	8005428 <_ZL15I2Cx_ReadData16thPt>
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <_Z18BME280_ReadReg_S16hPs>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	4603      	mov	r3, r0
 80054e2:	6039      	str	r1, [r7, #0]
 80054e4:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	20ec      	movs	r0, #236	; 0xec
 80054ee:	f7ff ff9b 	bl	8005428 <_ZL15I2Cx_ReadData16thPt>
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_Z17BME280_ReadStatusv>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
}
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8005500:	20f3      	movs	r0, #243	; 0xf3
 8005502:	f7ff ffc9 	bl	8005498 <_Z14BME280_ReadRegh>
 8005506:	4603      	mov	r3, r0
 8005508:	f003 0309 	and.w	r3, r3, #9
 800550c:	71fb      	strb	r3, [r7, #7]
  return res;
 800550e:	79fb      	ldrb	r3, [r7, #7]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_Z23BME280_ReadCoefficientsv>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8005518:	b598      	push	{r3, r4, r7, lr}
 800551a:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 800551c:	4936      	ldr	r1, [pc, #216]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 800551e:	2088      	movs	r0, #136	; 0x88
 8005520:	f7ff ffcb 	bl	80054ba <_Z18BME280_ReadReg_U16hPt>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8005524:	4935      	ldr	r1, [pc, #212]	; (80055fc <_Z23BME280_ReadCoefficientsv+0xe4>)
 8005526:	208a      	movs	r0, #138	; 0x8a
 8005528:	f7ff ffd7 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 800552c:	4934      	ldr	r1, [pc, #208]	; (8005600 <_Z23BME280_ReadCoefficientsv+0xe8>)
 800552e:	208c      	movs	r0, #140	; 0x8c
 8005530:	f7ff ffd3 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8005534:	4933      	ldr	r1, [pc, #204]	; (8005604 <_Z23BME280_ReadCoefficientsv+0xec>)
 8005536:	208e      	movs	r0, #142	; 0x8e
 8005538:	f7ff ffbf 	bl	80054ba <_Z18BME280_ReadReg_U16hPt>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 800553c:	4932      	ldr	r1, [pc, #200]	; (8005608 <_Z23BME280_ReadCoefficientsv+0xf0>)
 800553e:	2090      	movs	r0, #144	; 0x90
 8005540:	f7ff ffcb 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005544:	4931      	ldr	r1, [pc, #196]	; (800560c <_Z23BME280_ReadCoefficientsv+0xf4>)
 8005546:	2092      	movs	r0, #146	; 0x92
 8005548:	f7ff ffc7 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 800554c:	4930      	ldr	r1, [pc, #192]	; (8005610 <_Z23BME280_ReadCoefficientsv+0xf8>)
 800554e:	2094      	movs	r0, #148	; 0x94
 8005550:	f7ff ffc3 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005554:	492f      	ldr	r1, [pc, #188]	; (8005614 <_Z23BME280_ReadCoefficientsv+0xfc>)
 8005556:	2096      	movs	r0, #150	; 0x96
 8005558:	f7ff ffbf 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 800555c:	492e      	ldr	r1, [pc, #184]	; (8005618 <_Z23BME280_ReadCoefficientsv+0x100>)
 800555e:	2098      	movs	r0, #152	; 0x98
 8005560:	f7ff ffbb 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005564:	492d      	ldr	r1, [pc, #180]	; (800561c <_Z23BME280_ReadCoefficientsv+0x104>)
 8005566:	209a      	movs	r0, #154	; 0x9a
 8005568:	f7ff ffb7 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800556c:	492c      	ldr	r1, [pc, #176]	; (8005620 <_Z23BME280_ReadCoefficientsv+0x108>)
 800556e:	209c      	movs	r0, #156	; 0x9c
 8005570:	f7ff ffb3 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005574:	492b      	ldr	r1, [pc, #172]	; (8005624 <_Z23BME280_ReadCoefficientsv+0x10c>)
 8005576:	209e      	movs	r0, #158	; 0x9e
 8005578:	f7ff ffaf 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 800557c:	20a1      	movs	r0, #161	; 0xa1
 800557e:	f7ff ff8b 	bl	8005498 <_Z14BME280_ReadRegh>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 8005588:	761a      	strb	r2, [r3, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 800558a:	4927      	ldr	r1, [pc, #156]	; (8005628 <_Z23BME280_ReadCoefficientsv+0x110>)
 800558c:	20e1      	movs	r0, #225	; 0xe1
 800558e:	f7ff ffa4 	bl	80054da <_Z18BME280_ReadReg_S16hPs>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8005592:	20e3      	movs	r0, #227	; 0xe3
 8005594:	f7ff ff80 	bl	8005498 <_Z14BME280_ReadRegh>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 800559e:	771a      	strb	r2, [r3, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80055a0:	20e4      	movs	r0, #228	; 0xe4
 80055a2:	f7ff ff79 	bl	8005498 <_Z14BME280_ReadRegh>
 80055a6:	4603      	mov	r3, r0
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	b21c      	sxth	r4, r3
 80055ac:	20e5      	movs	r0, #229	; 0xe5
 80055ae:	f7ff ff73 	bl	8005498 <_Z14BME280_ReadRegh>
 80055b2:	4603      	mov	r3, r0
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	b21b      	sxth	r3, r3
 80055bc:	4323      	orrs	r3, r4
 80055be:	b21a      	sxth	r2, r3
 80055c0:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 80055c2:	83da      	strh	r2, [r3, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80055c4:	20e6      	movs	r0, #230	; 0xe6
 80055c6:	f7ff ff67 	bl	8005498 <_Z14BME280_ReadRegh>
 80055ca:	4603      	mov	r3, r0
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	b21c      	sxth	r4, r3
 80055d0:	20e5      	movs	r0, #229	; 0xe5
 80055d2:	f7ff ff61 	bl	8005498 <_Z14BME280_ReadRegh>
 80055d6:	4603      	mov	r3, r0
 80055d8:	111b      	asrs	r3, r3, #4
 80055da:	b21b      	sxth	r3, r3
 80055dc:	4323      	orrs	r3, r4
 80055de:	b21a      	sxth	r2, r3
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 80055e2:	841a      	strh	r2, [r3, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80055e4:	20e7      	movs	r0, #231	; 0xe7
 80055e6:	f7ff ff57 	bl	8005498 <_Z14BME280_ReadRegh>
 80055ea:	4603      	mov	r3, r0
 80055ec:	b25a      	sxtb	r2, r3
 80055ee:	4b02      	ldr	r3, [pc, #8]	; (80055f8 <_Z23BME280_ReadCoefficientsv+0xe0>)
 80055f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80055f4:	bf00      	nop
 80055f6:	bd98      	pop	{r3, r4, r7, pc}
 80055f8:	20000268 	.word	0x20000268
 80055fc:	2000026a 	.word	0x2000026a
 8005600:	2000026c 	.word	0x2000026c
 8005604:	2000026e 	.word	0x2000026e
 8005608:	20000270 	.word	0x20000270
 800560c:	20000272 	.word	0x20000272
 8005610:	20000274 	.word	0x20000274
 8005614:	20000276 	.word	0x20000276
 8005618:	20000278 	.word	0x20000278
 800561c:	2000027a 	.word	0x2000027a
 8005620:	2000027c 	.word	0x2000027c
 8005624:	2000027e 	.word	0x2000027e
 8005628:	20000282 	.word	0x20000282

0800562c <_Z17BME280_SetStandbyh>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8005636:	20f5      	movs	r0, #245	; 0xf5
 8005638:	f7ff ff2e 	bl	8005498 <_Z14BME280_ReadRegh>
 800563c:	4603      	mov	r3, r0
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	f023 031f 	bic.w	r3, r3, #31
 800564a:	b2da      	uxtb	r2, r3
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	4313      	orrs	r3, r2
 8005650:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	4619      	mov	r1, r3
 8005656:	20f5      	movs	r0, #245	; 0xf5
 8005658:	f7ff ff0c 	bl	8005474 <_Z15BME280_WriteReghh>
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_Z16BME280_SetFilterh>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 800566e:	20f5      	movs	r0, #245	; 0xf5
 8005670:	f7ff ff12 	bl	8005498 <_Z14BME280_ReadRegh>
 8005674:	4603      	mov	r3, r0
 8005676:	f023 031c 	bic.w	r3, r3, #28
 800567a:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	f003 031c 	and.w	r3, r3, #28
 8005682:	b2da      	uxtb	r2, r3
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	4313      	orrs	r3, r2
 8005688:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	4619      	mov	r1, r3
 800568e:	20f5      	movs	r0, #245	; 0xf5
 8005690:	f7ff fef0 	bl	8005474 <_Z15BME280_WriteReghh>
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_Z28BME280_SetOversamplingTemperh>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80056a6:	20f4      	movs	r0, #244	; 0xf4
 80056a8:	f7ff fef6 	bl	8005498 <_Z14BME280_ReadRegh>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	f023 031f 	bic.w	r3, r3, #31
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4313      	orrs	r3, r2
 80056c0:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	4619      	mov	r1, r3
 80056c6:	20f4      	movs	r0, #244	; 0xf4
 80056c8:	f7ff fed4 	bl	8005474 <_Z15BME280_WriteReghh>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_Z30BME280_SetOversamplingPressureh>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80056de:	20f4      	movs	r0, #244	; 0xf4
 80056e0:	f7ff feda 	bl	8005498 <_Z14BME280_ReadRegh>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f023 031c 	bic.w	r3, r3, #28
 80056ea:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	f003 031c 	and.w	r3, r3, #28
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	4619      	mov	r1, r3
 80056fe:	20f4      	movs	r0, #244	; 0xf4
 8005700:	f7ff feb8 	bl	8005474 <_Z15BME280_WriteReghh>
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <_Z25BME280_SetOversamplingHumh>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8005716:	20f2      	movs	r0, #242	; 0xf2
 8005718:	f7ff febe 	bl	8005498 <_Z14BME280_ReadRegh>
 800571c:	4603      	mov	r3, r0
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	b2da      	uxtb	r2, r3
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	4313      	orrs	r3, r2
 8005730:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	4619      	mov	r1, r3
 8005736:	20f2      	movs	r0, #242	; 0xf2
 8005738:	f7ff fe9c 	bl	8005474 <_Z15BME280_WriteReghh>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800573c:	20f4      	movs	r0, #244	; 0xf4
 800573e:	f7ff feab 	bl	8005498 <_Z14BME280_ReadRegh>
 8005742:	4603      	mov	r3, r0
 8005744:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	4619      	mov	r1, r3
 800574a:	20f4      	movs	r0, #244	; 0xf4
 800574c:	f7ff fe92 	bl	8005474 <_Z15BME280_WriteReghh>
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_Z14BME280_SetModeh>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8005762:	20f4      	movs	r0, #244	; 0xf4
 8005764:	f7ff fe98 	bl	8005498 <_Z14BME280_ReadRegh>
 8005768:	4603      	mov	r3, r0
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	b2da      	uxtb	r2, r3
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	4313      	orrs	r3, r2
 800577c:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	4619      	mov	r1, r3
 8005782:	20f4      	movs	r0, #244	; 0xf4
 8005784:	f7ff fe76 	bl	8005474 <_Z15BME280_WriteReghh>
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <_Z11BME280_Initv>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8005796:	2300      	movs	r3, #0
 8005798:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 800579a:	2300      	movs	r3, #0
 800579c:	603b      	str	r3, [r7, #0]

	value = BME280_ReadReg(BME280_REG_ID);
 800579e:	20d0      	movs	r0, #208	; 0xd0
 80057a0:	f7ff fe7a 	bl	8005498 <_Z14BME280_ReadRegh>
 80057a4:	4603      	mov	r3, r0
 80057a6:	71fb      	strb	r3, [r7, #7]
	if(value !=BME280_ID)
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	2b60      	cmp	r3, #96	; 0x60
 80057ac:	d002      	beq.n	80057b4 <_Z11BME280_Initv+0x24>
	{
		Error();
 80057ae:	f7ff fde5 	bl	800537c <_Z5Errorv>
		return;
 80057b2:	e032      	b.n	800581a <_Z11BME280_Initv+0x8a>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80057b4:	21b6      	movs	r1, #182	; 0xb6
 80057b6:	20e0      	movs	r0, #224	; 0xe0
 80057b8:	f7ff fe5c 	bl	8005474 <_Z15BME280_WriteReghh>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80057bc:	f7ff fe9d 	bl	80054fa <_Z17BME280_ReadStatusv>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d000      	beq.n	80057d6 <_Z11BME280_Initv+0x46>
 80057d4:	e7f2      	b.n	80057bc <_Z11BME280_Initv+0x2c>
	BME280_ReadCoefficients();
 80057d6:	f7ff fe9f 	bl	8005518 <_Z23BME280_ReadCoefficientsv>
	BME280_SetStandby(BME280_STBY_1000);
 80057da:	20a0      	movs	r0, #160	; 0xa0
 80057dc:	f7ff ff26 	bl	800562c <_Z17BME280_SetStandbyh>
	BME280_SetFilter(BME280_FILTER_4);
 80057e0:	2008      	movs	r0, #8
 80057e2:	f7ff ff3f 	bl	8005664 <_Z16BME280_SetFilterh>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80057e6:	2060      	movs	r0, #96	; 0x60
 80057e8:	f7ff ff58 	bl	800569c <_Z28BME280_SetOversamplingTemperh>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 80057ec:	2008      	movs	r0, #8
 80057ee:	f7ff ff71 	bl	80056d4 <_Z30BME280_SetOversamplingPressureh>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7ff ff8a 	bl	800570c <_Z25BME280_SetOversamplingHumh>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80057f8:	20f4      	movs	r0, #244	; 0xf4
 80057fa:	f7ff fe4d 	bl	8005498 <_Z14BME280_ReadRegh>
 80057fe:	4603      	mov	r3, r0
 8005800:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8005802:	20f2      	movs	r0, #242	; 0xf2
 8005804:	f7ff fe48 	bl	8005498 <_Z14BME280_ReadRegh>
 8005808:	4603      	mov	r3, r0
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	461a      	mov	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	603b      	str	r3, [r7, #0]
	BME280_SetMode(BME280_MODE_NORMAL);
 8005814:	2003      	movs	r0, #3
 8005816:	f7ff ff9f 	bl	8005758 <_Z14BME280_SetModeh>
}
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN7CScreenD1Ev>:
#define SCREEN_H_
#include <stdint.h>

class CScreen{
public:
	virtual ~CScreen(){};
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <_ZN7CScreenD1Ev+0x1c>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	0800a6d0 	.word	0x0800a6d0

08005840 <_ZN7CScreenD0Ev>:
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ffe9 	bl	8005820 <_ZN7CScreenD1Ev>
 800584e:	2104      	movs	r1, #4
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 f9c4 	bl	8007bde <_ZdlPvj>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZN7CScreen14DisplayLedTEMPEv>:
#include "Screen.h"
#include "ssd1306.h"
#include "TM1638.h"
#include "ds18b20.h"

void CScreen::DisplayLedTEMP() {
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	if (owdevices) {
 8005868:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <_ZN7CScreen14DisplayLedTEMPEv+0xc4>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d045      	beq.n	80058fc <_ZN7CScreen14DisplayLedTEMPEv+0x9c>
		for (int i = 0; i < 4; i++)
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b03      	cmp	r3, #3
 8005878:	dc11      	bgt.n	800589e <_ZN7CScreen14DisplayLedTEMPEv+0x3e>
			TM1638_Char(i, (ds18_sensors[0].itemp >> (8 * (3 - i))) & 0xff);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	b2d8      	uxtb	r0, r3
 800587e:	4b2a      	ldr	r3, [pc, #168]	; (8005928 <_ZN7CScreen14DisplayLedTEMPEv+0xc8>)
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f1c3 0303 	rsb	r3, r3, #3
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	4619      	mov	r1, r3
 8005892:	f000 fa3b 	bl	8005d0c <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3301      	adds	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e7ea      	b.n	8005874 <_ZN7CScreen14DisplayLedTEMPEv+0x14>
		if (owdevices > 1) {
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <_ZN7CScreen14DisplayLedTEMPEv+0xc4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d918      	bls.n	80058d8 <_ZN7CScreen14DisplayLedTEMPEv+0x78>
			for (int i = 0; i < 4; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	dc35      	bgt.n	800591c <_ZN7CScreen14DisplayLedTEMPEv+0xbc>
				TM1638_Char(i + 4,
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	3304      	adds	r3, #4
 80058b6:	b2d8      	uxtb	r0, r3
						(ds18_sensors[1].itemp >> (8 * (3 - i))) & 0xff);
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <_ZN7CScreen14DisplayLedTEMPEv+0xc8>)
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f1c3 0303 	rsb	r3, r3, #3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
				TM1638_Char(i + 4,
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	f000 fa1e 	bl	8005d0c <_Z11TM1638_Charhh>
			for (int i = 0; i < 4; i++)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3301      	adds	r3, #1
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e7e8      	b.n	80058aa <_ZN7CScreen14DisplayLedTEMPEv+0x4a>
		} else
			for (int i = 0; i < 4; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	dc1c      	bgt.n	800591c <_ZN7CScreen14DisplayLedTEMPEv+0xbc>
				TM1638_Char(i + 4, digitToSegment[0x10]);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	3304      	adds	r3, #4
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fa0c 	bl	8005d0c <_Z11TM1638_Charhh>
			for (int i = 0; i < 4; i++)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e7ef      	b.n	80058dc <_ZN7CScreen14DisplayLedTEMPEv+0x7c>
	} else
		for (int i = 0; i < 4; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b03      	cmp	r3, #3
 8005904:	dc0a      	bgt.n	800591c <_ZN7CScreen14DisplayLedTEMPEv+0xbc>
			TM1638_Char(i, digitToSegment[0x10]);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2240      	movs	r2, #64	; 0x40
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f9fc 	bl	8005d0c <_Z11TM1638_Charhh>
		for (int i = 0; i < 4; i++)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3301      	adds	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	e7f1      	b.n	8005900 <_ZN7CScreen14DisplayLedTEMPEv+0xa0>

}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2000029f 	.word	0x2000029f
 8005928:	200008b8 	.word	0x200008b8

0800592c <_ZN12CStartScreenD1Ev>:
char cPressAnyKeyBlank[]="             ";
#define MENU_SIZE 5
char acMenu[5][7]={{"Start "},{"Setup "},{"Info  "},{"Menu 1"},{"Menu 2"}};
//----------------------------------

CStartScreen::~CStartScreen(){
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	4a05      	ldr	r2, [pc, #20]	; (800594c <_ZN12CStartScreenD1Ev+0x20>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff6f 	bl	8005820 <_ZN7CScreenD1Ev>

};
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	0800a6b4 	.word	0x0800a6b4

08005950 <_ZN12CStartScreenD0Ev>:
CStartScreen::~CStartScreen(){
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
};
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ffe7 	bl	800592c <_ZN12CStartScreenD1Ev>
 800595e:	2108      	movs	r1, #8
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 f93c 	bl	8007bde <_ZdlPvj>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <_ZN7CScreenC1Ev>:
class CScreen{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <_ZN7CScreenC1Ev+0x1c>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	0800a6d0 	.word	0x0800a6d0

08005990 <_ZN11CMenuScreenC1Ev>:
	virtual void Init();
	virtual void Update(uint8_t bNew);
private:
	uint8_t m_count;
};
class CMenuScreen: public CScreen{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff ffe8 	bl	8005970 <_ZN7CScreenC1Ev>
 80059a0:	4a03      	ldr	r2, [pc, #12]	; (80059b0 <_ZN11CMenuScreenC1Ev+0x20>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	0800a698 	.word	0x0800a698

080059b4 <_ZN12CStartScreen10ProcessKeyEt>:
CScreen * CStartScreen::ProcessKey(uint16_t keys){
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	807b      	strh	r3, [r7, #2]
	if(keys&0xff00){
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00e      	beq.n	80059e8 <_ZN12CStartScreen10ProcessKeyEt+0x34>
		return new CMenuScreen();
 80059ca:	2008      	movs	r0, #8
 80059cc:	f002 f909 	bl	8007be2 <_Znwj>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461c      	mov	r4, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	7123      	strb	r3, [r4, #4]
 80059dc:	2300      	movs	r3, #0
 80059de:	7163      	strb	r3, [r4, #5]
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ffd5 	bl	8005990 <_ZN11CMenuScreenC1Ev>
 80059e6:	e000      	b.n	80059ea <_ZN12CStartScreen10ProcessKeyEt+0x36>
	}
  return NULL;
 80059e8:	2400      	movs	r4, #0
 80059ea:	4623      	mov	r3, r4
};
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <_ZN12CStartScreen4InitEv>:
void CStartScreen::Init(){
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
	m_count=0;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	711a      	strb	r2, [r3, #4]
	SSD1306_DrawRectangle(0, 0, 127, 63, SSD1306_COLOR_WHITE);
 8005a02:	2301      	movs	r3, #1
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	233f      	movs	r3, #63	; 0x3f
 8005a08:	227f      	movs	r2, #127	; 0x7f
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f001 fc98 	bl	8007342 <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t>
	SSD1306_DrawFilledRectangle(8, 8, 127-16, 63-16, SSD1306_COLOR_WHITE);
 8005a12:	2301      	movs	r3, #1
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	232f      	movs	r3, #47	; 0x2f
 8005a18:	226f      	movs	r2, #111	; 0x6f
 8005a1a:	2108      	movs	r1, #8
 8005a1c:	2008      	movs	r0, #8
 8005a1e:	f001 fcfa 	bl	8007416 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t>
	SSD1306_GotoXY (16,9);
 8005a22:	2109      	movs	r1, #9
 8005a24:	2010      	movs	r0, #16
 8005a26:	f001 facf 	bl	8006fc8 <_Z14SSD1306_GotoXYtt>
	SSD1306_Puts (cMoonShine, &Font_11x18, SSD1306_COLOR_BLACK);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4912      	ldr	r1, [pc, #72]	; (8005a78 <_ZN12CStartScreen4InitEv+0x84>)
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <_ZN12CStartScreen4InitEv+0x88>)
 8005a30:	f001 fb60 	bl	80070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>
	SSD1306_GotoXY (44,27);
 8005a34:	211b      	movs	r1, #27
 8005a36:	202c      	movs	r0, #44	; 0x2c
 8005a38:	f001 fac6 	bl	8006fc8 <_Z14SSD1306_GotoXYtt>
	SSD1306_Puts (cVersion, &Font_11x18, SSD1306_COLOR_BLACK);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	490e      	ldr	r1, [pc, #56]	; (8005a78 <_ZN12CStartScreen4InitEv+0x84>)
 8005a40:	480f      	ldr	r0, [pc, #60]	; (8005a80 <_ZN12CStartScreen4InitEv+0x8c>)
 8005a42:	f001 fb57 	bl	80070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>
	SSD1306_UpdateScreen();
 8005a46:	f001 fa1b 	bl	8006e80 <_Z20SSD1306_UpdateScreenv>
    for(int i=0;i<8;i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b07      	cmp	r3, #7
 8005a52:	dc0a      	bgt.n	8005a6a <_ZN12CStartScreen4InitEv+0x76>
    	TM1638_Char(i,digitToSegment[0x10]);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2240      	movs	r2, #64	; 0x40
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f955 	bl	8005d0c <_Z11TM1638_Charhh>
    for(int i=0;i<8;i++)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e7f1      	b.n	8005a4e <_ZN12CStartScreen4InitEv+0x5a>
    TM1638_Update();
 8005a6a:	f000 f967 	bl	8005d3c <_Z13TM1638_Updatev>

};
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2000006c 	.word	0x2000006c
 8005a7c:	20000008 	.word	0x20000008
 8005a80:	20000014 	.word	0x20000014

08005a84 <_ZN12CStartScreen6UpdateEh>:
void CStartScreen::Update(uint8_t bNew) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
	m_count++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	791b      	ldrb	r3, [r3, #4]
 8005a94:	3301      	adds	r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	711a      	strb	r2, [r3, #4]
	if (m_count == 32) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d10b      	bne.n	8005abc <_ZN12CStartScreen6UpdateEh+0x38>
		SSD1306_GotoXY(20, 45);
 8005aa4:	212d      	movs	r1, #45	; 0x2d
 8005aa6:	2014      	movs	r0, #20
 8005aa8:	f001 fa8e 	bl	8006fc8 <_Z14SSD1306_GotoXYtt>
		SSD1306_Puts(cPressAnyKey, &Font_7x10, SSD1306_COLOR_BLACK);
 8005aac:	2200      	movs	r2, #0
 8005aae:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <_ZN12CStartScreen6UpdateEh+0x64>)
 8005ab0:	480e      	ldr	r0, [pc, #56]	; (8005aec <_ZN12CStartScreen6UpdateEh+0x68>)
 8005ab2:	f001 fb1f 	bl	80070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>
		SSD1306_UpdateScreen();
 8005ab6:	f001 f9e3 	bl	8006e80 <_Z20SSD1306_UpdateScreenv>
			SSD1306_Puts(cPressAnyKeyBlank, &Font_7x10, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			m_count = 0;
		}
	}
};
 8005aba:	e011      	b.n	8005ae0 <_ZN12CStartScreen6UpdateEh+0x5c>
		if (m_count >= 64) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8005ac2:	d90d      	bls.n	8005ae0 <_ZN12CStartScreen6UpdateEh+0x5c>
			SSD1306_GotoXY(20, 45);
 8005ac4:	212d      	movs	r1, #45	; 0x2d
 8005ac6:	2014      	movs	r0, #20
 8005ac8:	f001 fa7e 	bl	8006fc8 <_Z14SSD1306_GotoXYtt>
			SSD1306_Puts(cPressAnyKeyBlank, &Font_7x10, SSD1306_COLOR_BLACK);
 8005acc:	2200      	movs	r2, #0
 8005ace:	4906      	ldr	r1, [pc, #24]	; (8005ae8 <_ZN12CStartScreen6UpdateEh+0x64>)
 8005ad0:	4807      	ldr	r0, [pc, #28]	; (8005af0 <_ZN12CStartScreen6UpdateEh+0x6c>)
 8005ad2:	f001 fb0f 	bl	80070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>
			SSD1306_UpdateScreen();
 8005ad6:	f001 f9d3 	bl	8006e80 <_Z20SSD1306_UpdateScreenv>
			m_count = 0;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	711a      	strb	r2, [r3, #4]
};
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000064 	.word	0x20000064
 8005aec:	2000001c 	.word	0x2000001c
 8005af0:	2000002c 	.word	0x2000002c

08005af4 <_ZN11CMenuScreenD1Ev>:

CMenuScreen::~CMenuScreen(){
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <_ZN11CMenuScreenD1Ev+0x20>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fe8b 	bl	8005820 <_ZN7CScreenD1Ev>

};
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0800a698 	.word	0x0800a698

08005b18 <_ZN11CMenuScreenD0Ev>:
CMenuScreen::~CMenuScreen(){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
};
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ffe7 	bl	8005af4 <_ZN11CMenuScreenD1Ev>
 8005b26:	2108      	movs	r1, #8
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 f858 	bl	8007bde <_ZdlPvj>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZN11CMenuScreen10ProcessKeyEt>:
CScreen* CMenuScreen::ProcessKey(uint16_t keys) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
	uint8_t b = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]
	if (keys & 0x100) {
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d017      	beq.n	8005b82 <_ZN11CMenuScreen10ProcessKeyEt+0x4a>
		if (m_curr) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	791b      	ldrb	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d013      	beq.n	8005b82 <_ZN11CMenuScreen10ProcessKeyEt+0x4a>
			m_curr--;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	711a      	strb	r2, [r3, #4]
			if (m_curr < m_start)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	791a      	ldrb	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	795b      	ldrb	r3, [r3, #5]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d205      	bcs.n	8005b7e <_ZN11CMenuScreen10ProcessKeyEt+0x46>
				m_start--;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	795b      	ldrb	r3, [r3, #5]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	715a      	strb	r2, [r3, #5]
			b = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
		}

	}
	if (keys & 0x200) {
 8005b82:	887b      	ldrh	r3, [r7, #2]
 8005b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <_ZN11CMenuScreen10ProcessKeyEt+0x86>
		if (m_curr < MENU_SIZE - 1) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d814      	bhi.n	8005bbe <_ZN11CMenuScreen10ProcessKeyEt+0x86>
			m_curr++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	791b      	ldrb	r3, [r3, #4]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	711a      	strb	r2, [r3, #4]
			if (m_curr >= m_start + 3)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	795b      	ldrb	r3, [r3, #5]
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	7912      	ldrb	r2, [r2, #4]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	da05      	bge.n	8005bba <_ZN11CMenuScreen10ProcessKeyEt+0x82>
				m_start++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	795b      	ldrb	r3, [r3, #5]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	715a      	strb	r2, [r3, #5]
			b = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (b) {
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <_ZN11CMenuScreen10ProcessKeyEt+0x92>
		DrawMenu();
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f833 	bl	8005c30 <_ZN11CMenuScreen8DrawMenuEv>
	}
	return NULL;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZN11CMenuScreen4InitEv>:
;
void CMenuScreen::Init(){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	6078      	str	r0, [r7, #4]
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f001 f97d 	bl	8006edc <_Z12SSD1306_Fill15SSD1306_COLOR_t>
	SSD1306_DrawRectangle(0, 0, 127, 63, SSD1306_COLOR_WHITE);
 8005be2:	2301      	movs	r3, #1
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	233f      	movs	r3, #63	; 0x3f
 8005be8:	227f      	movs	r2, #127	; 0x7f
 8005bea:	2100      	movs	r1, #0
 8005bec:	2000      	movs	r0, #0
 8005bee:	f001 fba8 	bl	8007342 <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t>
    m_start=0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	715a      	strb	r2, [r3, #5]
    m_curr=0;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	711a      	strb	r2, [r3, #4]
    DrawMenu();
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f816 	bl	8005c30 <_ZN11CMenuScreen8DrawMenuEv>
};
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <_ZN11CMenuScreen6UpdateEh>:
void CMenuScreen::Update(uint8_t bNew){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
	if(bNew)
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <_ZN11CMenuScreen6UpdateEh+0x1a>
		DisplayLedTEMP();
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fe1d 	bl	8005860 <_ZN7CScreen14DisplayLedTEMPEv>

};
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <_ZN11CMenuScreen8DrawMenuEv>:
void CMenuScreen::DrawMenu(){
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	for(int i=0;i<3;i++){
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	dc2a      	bgt.n	8005c98 <_ZN11CMenuScreen8DrawMenuEv+0x68>
	  SSD1306_GotoXY (2,2+20*i);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	0092      	lsls	r2, r2, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3302      	adds	r3, #2
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4619      	mov	r1, r3
 8005c56:	2002      	movs	r0, #2
 8005c58:	f001 f9b6 	bl	8006fc8 <_Z14SSD1306_GotoXYtt>
	  SSD1306_Puts (acMenu[m_start+i], &Font_11x18,m_start+i==m_curr? SSD1306_COLOR_BLACK:SSD1306_COLOR_WHITE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	441a      	add	r2, r3
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <_ZN11CMenuScreen8DrawMenuEv+0x74>)
 8005c6e:	1898      	adds	r0, r3, r2
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	795b      	ldrb	r3, [r3, #5]
 8005c74:	461a      	mov	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	7912      	ldrb	r2, [r2, #4]
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4907      	ldr	r1, [pc, #28]	; (8005ca8 <_ZN11CMenuScreen8DrawMenuEv+0x78>)
 8005c8c:	f001 fa32 	bl	80070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>
	for(int i=0;i<3;i++){
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e7d1      	b.n	8005c3c <_ZN11CMenuScreen8DrawMenuEv+0xc>
	}
	SSD1306_UpdateScreen();
 8005c98:	f001 f8f2 	bl	8006e80 <_Z20SSD1306_UpdateScreenv>

};
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000003c 	.word	0x2000003c
 8005ca8:	2000006c 	.word	0x2000006c

08005cac <_Z11TM1638_Initv>:
uint8_t  tm1638_keys;
SPI_HandleTypeDef *pSPI=&hspi2;

void TM1638WriteBuff();

void TM1638_Init(){
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
	tm1638_keys=0;
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <_Z11TM1638_Initv+0x4c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
	memset(tm1638_buff,0x00,16);
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4810      	ldr	r0, [pc, #64]	; (8005cfc <_Z11TM1638_Initv+0x50>)
 8005cbc:	f002 f812 	bl	8007ce4 <memset>
	tm1638_command=0x8f;
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <_Z11TM1638_Initv+0x54>)
 8005cc2:	228f      	movs	r2, #143	; 0x8f
 8005cc4:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ccc:	480d      	ldr	r0, [pc, #52]	; (8005d04 <_Z11TM1638_Initv+0x58>)
 8005cce:	f7fb fc31 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <_Z11TM1638_Initv+0x5c>)
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4908      	ldr	r1, [pc, #32]	; (8005d00 <_Z11TM1638_Initv+0x54>)
 8005cde:	f7fd faf2 	bl	80032c6 <HAL_SPI_Transmit>
	CS_H;
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ce8:	4806      	ldr	r0, [pc, #24]	; (8005d04 <_Z11TM1638_Initv+0x58>)
 8005cea:	f7fb fc23 	bl	8001534 <HAL_GPIO_WritePin>
	TM1638WriteBuff();
 8005cee:	f000 f82b 	bl	8005d48 <_Z15TM1638WriteBuffv>
};
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	2000029e 	.word	0x2000029e
 8005cfc:	2000028c 	.word	0x2000028c
 8005d00:	2000029c 	.word	0x2000029c
 8005d04:	40010c00 	.word	0x40010c00
 8005d08:	20000060 	.word	0x20000060

08005d0c <_Z11TM1638_Charhh>:
void TM1638_Led(uint8_t num, uint8_t value){
	if(num>7)
		return;
	tm1638_buff[1+num*2]=value?0x0f:0;
};
void TM1638_Char(uint8_t num, uint8_t value){
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	460a      	mov	r2, r1
 8005d16:	71fb      	strb	r3, [r7, #7]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	71bb      	strb	r3, [r7, #6]
	if(num>7)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	2b07      	cmp	r3, #7
 8005d20:	d805      	bhi.n	8005d2e <_Z11TM1638_Charhh+0x22>
		return;
	tm1638_buff[num*2]=value;
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4904      	ldr	r1, [pc, #16]	; (8005d38 <_Z11TM1638_Charhh+0x2c>)
 8005d28:	79ba      	ldrb	r2, [r7, #6]
 8005d2a:	54ca      	strb	r2, [r1, r3]
 8005d2c:	e000      	b.n	8005d30 <_Z11TM1638_Charhh+0x24>
		return;
 8005d2e:	bf00      	nop
};
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr
 8005d38:	2000028c 	.word	0x2000028c

08005d3c <_Z13TM1638_Updatev>:
void TM1638_Update(){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
	TM1638WriteBuff();
 8005d40:	f000 f802 	bl	8005d48 <_Z15TM1638WriteBuffv>
};
 8005d44:	bf00      	nop
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <_Z15TM1638WriteBuffv>:

void TM1638WriteBuff(){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
	tm1638_command=0x40;
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <_Z15TM1638WriteBuffv+0x74>)
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	701a      	strb	r2, [r3, #0]
	tm1638_addr=0xc0;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <_Z15TM1638WriteBuffv+0x78>)
 8005d54:	22c0      	movs	r2, #192	; 0xc0
 8005d56:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d5e:	4819      	ldr	r0, [pc, #100]	; (8005dc4 <_Z15TM1638WriteBuffv+0x7c>)
 8005d60:	f7fb fbe8 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005d64:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <_Z15TM1638WriteBuffv+0x80>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4913      	ldr	r1, [pc, #76]	; (8005dbc <_Z15TM1638WriteBuffv+0x74>)
 8005d70:	f7fd faa9 	bl	80032c6 <HAL_SPI_Transmit>
	CS_H;
 8005d74:	2201      	movs	r2, #1
 8005d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d7a:	4812      	ldr	r0, [pc, #72]	; (8005dc4 <_Z15TM1638WriteBuffv+0x7c>)
 8005d7c:	f7fb fbda 	bl	8001534 <HAL_GPIO_WritePin>

	CS_L;
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d86:	480f      	ldr	r0, [pc, #60]	; (8005dc4 <_Z15TM1638WriteBuffv+0x7c>)
 8005d88:	f7fb fbd4 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_addr,1,500);
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <_Z15TM1638WriteBuffv+0x80>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d94:	2201      	movs	r2, #1
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <_Z15TM1638WriteBuffv+0x78>)
 8005d98:	f7fd fa95 	bl	80032c6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pSPI,tm1638_buff,16,500);
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <_Z15TM1638WriteBuffv+0x80>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005da4:	2210      	movs	r2, #16
 8005da6:	4909      	ldr	r1, [pc, #36]	; (8005dcc <_Z15TM1638WriteBuffv+0x84>)
 8005da8:	f7fd fa8d 	bl	80032c6 <HAL_SPI_Transmit>

	CS_H;
 8005dac:	2201      	movs	r2, #1
 8005dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db2:	4804      	ldr	r0, [pc, #16]	; (8005dc4 <_Z15TM1638WriteBuffv+0x7c>)
 8005db4:	f7fb fbbe 	bl	8001534 <HAL_GPIO_WritePin>



};
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	2000029c 	.word	0x2000029c
 8005dc0:	2000029d 	.word	0x2000029d
 8005dc4:	40010c00 	.word	0x40010c00
 8005dc8:	20000060 	.word	0x20000060
 8005dcc:	2000028c 	.word	0x2000028c

08005dd0 <_Z14TM1638_ReadKeyv>:
uint16_t TM1638_ReadKey(){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
	uint8_t keys=0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4];
	tm1638_command=0x42;
 8005dda:	4b38      	ldr	r3, [pc, #224]	; (8005ebc <_Z14TM1638_ReadKeyv+0xec>)
 8005ddc:	2242      	movs	r2, #66	; 0x42
 8005dde:	701a      	strb	r2, [r3, #0]
	CS_L;
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005de6:	4836      	ldr	r0, [pc, #216]	; (8005ec0 <_Z14TM1638_ReadKeyv+0xf0>)
 8005de8:	f7fb fba4 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI,&tm1638_command,1,500);
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005df4:	2201      	movs	r2, #1
 8005df6:	4931      	ldr	r1, [pc, #196]	; (8005ebc <_Z14TM1638_ReadKeyv+0xec>)
 8005df8:	f7fd fa65 	bl	80032c6 <HAL_SPI_Transmit>
	pSPI->Instance->CR1 &= ~SPI_CR1_BIDIOE;
 8005dfc:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e0e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive(pSPI,data,4,500);
 8005e10:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	1d39      	adds	r1, r7, #4
 8005e16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	f7fd fb87 	bl	800352e <HAL_SPI_Receive>
	pSPI->Instance->CR1 |= SPI_CR1_BIDIOE;
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <_Z14TM1638_ReadKeyv+0xf4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e32:	601a      	str	r2, [r3, #0]
	CS_H;
 8005e34:	2201      	movs	r2, #1
 8005e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e3a:	4821      	ldr	r0, [pc, #132]	; (8005ec0 <_Z14TM1638_ReadKeyv+0xf0>)
 8005e3c:	f7fb fb7a 	bl	8001534 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	dc12      	bgt.n	8005e70 <_Z14TM1638_ReadKeyv+0xa0>
		keys |= (data[i]&0x11)<<i;
 8005e4a:	1d3a      	adds	r2, r7, #4
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0211 	and.w	r2, r3, #17
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	b25a      	sxtb	r2, r3
 8005e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<4;i++)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	e7e9      	b.n	8005e44 <_Z14TM1638_ReadKeyv+0x74>
	if(keys==tm1638_keys){
 8005e70:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <_Z14TM1638_ReadKeyv+0xf8>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d101      	bne.n	8005e7e <_Z14TM1638_ReadKeyv+0xae>
		return 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e01a      	b.n	8005eb4 <_Z14TM1638_ReadKeyv+0xe4>
	}

		data[0]=(keys^tm1638_keys)&keys;
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <_Z14TM1638_ReadKeyv+0xf8>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	713b      	strb	r3, [r7, #4]
		data[1]=(keys^tm1638_keys)&tm1638_keys;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <_Z14TM1638_ReadKeyv+0xf8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	717b      	strb	r3, [r7, #5]
	    tm1638_keys=keys;
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <_Z14TM1638_ReadKeyv+0xf8>)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	7013      	strb	r3, [r2, #0]
	    return (data[1]<<8)|data[0];
 8005ea4:	797b      	ldrb	r3, [r7, #5]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	793b      	ldrb	r3, [r7, #4]
 8005eac:	b21b      	sxth	r3, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	b29b      	uxth	r3, r3


};
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	2000029c 	.word	0x2000029c
 8005ec0:	40010c00 	.word	0x40010c00
 8005ec4:	20000060 	.word	0x20000060
 8005ec8:	2000029e 	.word	0x2000029e

08005ecc <ds18b20_tconvert>:
uint8_t owdevices = 0;
//uint32_t ow_tickstart=0;
//static uint8_t curr_device=0xff;//devices index

void ds18b20_tconvert(uint8_t LSB, uint8_t MSB,owdevice_t *owdevices_)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	603a      	str	r2, [r7, #0]
 8005ed6:	71fb      	strb	r3, [r7, #7]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	71bb      	strb	r3, [r7, #6]
    //float data;

    uint16_t temperature;

    temperature = LSB | (MSB << 8);
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	b21a      	sxth	r2, r3
 8005ee0:	79bb      	ldrb	r3, [r7, #6]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	b21b      	sxth	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	81fb      	strh	r3, [r7, #14]
    owdevices_->itemp=0;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
	if (temperature & 0x8000) {
 8005ef2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da21      	bge.n	8005f3e <ds18b20_tconvert+0x72>
		temperature = ~temperature + 1;
 8005efa:	89fb      	ldrh	r3, [r7, #14]
 8005efc:	425b      	negs	r3, r3
 8005efe:	81fb      	strh	r3, [r7, #14]
		owdevices_->itemp=digitToSegment[0x10];
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	461a      	mov	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	60da      	str	r2, [r3, #12]
		owdevices_->temp = 0.0 - (temperature / 16.0);
 8005f08:	89fb      	ldrh	r3, [r7, #14]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fa7a 	bl	8000404 <__aeabi_i2d>
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <ds18b20_tconvert+0x12c>)
 8005f16:	f7fa fc09 	bl	800072c <__aeabi_ddiv>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	f7fa f91f 	bl	8000168 <__aeabi_dsub>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	f7fa fda9 	bl	8000a88 <__aeabi_d2f>
 8005f36:	4602      	mov	r2, r0
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	611a      	str	r2, [r3, #16]
 8005f3c:	e01d      	b.n	8005f7a <ds18b20_tconvert+0xae>
       // return data;
	}
	else{
	owdevices_->temp = temperature / 16.0;
 8005f3e:	89fb      	ldrh	r3, [r7, #14]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fa5f 	bl	8000404 <__aeabi_i2d>
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <ds18b20_tconvert+0x12c>)
 8005f4c:	f7fa fbee 	bl	800072c <__aeabi_ddiv>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4610      	mov	r0, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	f7fa fd96 	bl	8000a88 <__aeabi_d2f>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	611a      	str	r2, [r3, #16]
	  if(temperature>1599){
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f68:	d307      	bcc.n	8005f7a <ds18b20_tconvert+0xae>
		owdevices_->itemp=digitToSegment[0x10];
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	60da      	str	r2, [r3, #12]
		temperature-=1600;
 8005f72:	89fb      	ldrh	r3, [r7, #14]
 8005f74:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005f78:	81fb      	strh	r3, [r7, #14]
	  }
	}
	owdevices_->itemp=(owdevices_->itemp<<8)+digitToSegment[temperature / 160];
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	89fa      	ldrh	r2, [r7, #14]
 8005f82:	491e      	ldr	r1, [pc, #120]	; (8005ffc <ds18b20_tconvert+0x130>)
 8005f84:	fba1 1202 	umull	r1, r2, r1, r2
 8005f88:	09d2      	lsrs	r2, r2, #7
 8005f8a:	b292      	uxth	r2, r2
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <ds18b20_tconvert+0x134>)
 8005f90:	5c52      	ldrb	r2, [r2, r1]
 8005f92:	441a      	add	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60da      	str	r2, [r3, #12]
	temperature%=160;
 8005f98:	89fa      	ldrh	r2, [r7, #14]
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <ds18b20_tconvert+0x130>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	09d9      	lsrs	r1, r3, #7
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	015b      	lsls	r3, r3, #5
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	81fb      	strh	r3, [r7, #14]
	owdevices_->itemp=(owdevices_->itemp<<8)+(digitToSegment[temperature >>4]|0x80);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	89fa      	ldrh	r2, [r7, #14]
 8005fb6:	0912      	lsrs	r2, r2, #4
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4a10      	ldr	r2, [pc, #64]	; (8006000 <ds18b20_tconvert+0x134>)
 8005fbe:	5c52      	ldrb	r2, [r2, r1]
 8005fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	60da      	str	r2, [r3, #12]
	temperature&=0xf;
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	81fb      	strh	r3, [r7, #14]
	owdevices_->itemp=(owdevices_->itemp<<8)+digitToSegment[(temperature* 5)>>3];
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	0219      	lsls	r1, r3, #8
 8005fda:	89fa      	ldrh	r2, [r7, #14]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	10db      	asrs	r3, r3, #3
 8005fe4:	4a06      	ldr	r2, [pc, #24]	; (8006000 <ds18b20_tconvert+0x134>)
 8005fe6:	5cd3      	ldrb	r3, [r2, r3]
 8005fe8:	18ca      	adds	r2, r1, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	60da      	str	r2, [r3, #12]

    //return data ;
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40300000 	.word	0x40300000
 8005ffc:	cccccccd 	.word	0xcccccccd
 8006000:	0800a6e4 	.word	0x0800a6e4

08006004 <ds18b20_start_convert>:
uint8_t ds18b20_start_convert()
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	_OW_Reset();
 800600a:	f000 fddf 	bl	8006bcc <_OW_Reset>
    buff[0]=0xcc;
 800600e:	23cc      	movs	r3, #204	; 0xcc
 8006010:	713b      	strb	r3, [r7, #4]
    buff[1]=0x44;
 8006012:	2344      	movs	r3, #68	; 0x44
 8006014:	717b      	strb	r3, [r7, #5]
    buff[0]=_OW_SwapByte(buff[0]);
 8006016:	793b      	ldrb	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fe33 	bl	8006c84 <_OW_SwapByte>
 800601e:	4603      	mov	r3, r0
 8006020:	713b      	strb	r3, [r7, #4]
    buff[1]=_OW_SwapByte(buff[1]);
 8006022:	797b      	ldrb	r3, [r7, #5]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fe2d 	bl	8006c84 <_OW_SwapByte>
 800602a:	4603      	mov	r3, r0
 800602c:	717b      	strb	r3, [r7, #5]
    return 0;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <ds18b20_get_temp>:

void ds18b20_get_temp(uint8_t dev_id)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]

	uint8_t buff[12];
	_OW_Reset();
 8006042:	f000 fdc3 	bl	8006bcc <_OW_Reset>
    buff[0]=0x55;
 8006046:	2355      	movs	r3, #85	; 0x55
 8006048:	723b      	strb	r3, [r7, #8]
    memcpy(&buff[1], ds18_sensors[dev_id].rom_code, 8);
 800604a:	79fa      	ldrb	r2, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <ds18b20_get_temp+0x8c>)
 8006056:	1899      	adds	r1, r3, r2
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	3301      	adds	r3, #1
 800605e:	2208      	movs	r2, #8
 8006060:	4618      	mov	r0, r3
 8006062:	f001 fe31 	bl	8007cc8 <memcpy>
	buff[9]=0xbe;
 8006066:	23be      	movs	r3, #190	; 0xbe
 8006068:	747b      	strb	r3, [r7, #17]
    buff[10]=0xff;
 800606a:	23ff      	movs	r3, #255	; 0xff
 800606c:	74bb      	strb	r3, [r7, #18]
	buff[11]=0xff;
 800606e:	23ff      	movs	r3, #255	; 0xff
 8006070:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<12;i++)
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e012      	b.n	800609e <ds18b20_get_temp+0x66>
	  buff[i]=_OW_SwapByte(buff[i]);
 8006078:	f107 0208 	add.w	r2, r7, #8
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fdfe 	bl	8006c84 <_OW_SwapByte>
 8006088:	4603      	mov	r3, r0
 800608a:	4619      	mov	r1, r3
 800608c:	f107 0208 	add.w	r2, r7, #8
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	4413      	add	r3, r2
 8006094:	460a      	mov	r2, r1
 8006096:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<12;i++)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b0b      	cmp	r3, #11
 80060a2:	dde9      	ble.n	8006078 <ds18b20_get_temp+0x40>
	ds18b20_tconvert(buff[10], buff[11],&ds18_sensors[dev_id]);
 80060a4:	7cb8      	ldrb	r0, [r7, #18]
 80060a6:	7cf9      	ldrb	r1, [r7, #19]
 80060a8:	79fa      	ldrb	r2, [r7, #7]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <ds18b20_get_temp+0x8c>)
 80060b4:	4413      	add	r3, r2
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7ff ff08 	bl	8005ecc <ds18b20_tconvert>

}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200008b8 	.word	0x200008b8

080060c8 <ds18b20_init>:

void ds18b20_init()
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
	owdevices=0;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <ds18b20_init+0x14>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]


	    OW_Search(ds18_sensors);
 80060d2:	4803      	ldr	r0, [pc, #12]	; (80060e0 <ds18b20_init+0x18>)
 80060d4:	f000 fc76 	bl	80069c4 <OW_Search>

};
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	2000029f 	.word	0x2000029f
 80060e0:	200008b8 	.word	0x200008b8

080060e4 <__NVIC_SetPriority>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	6039      	str	r1, [r7, #0]
 80060ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db0a      	blt.n	800610e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	490c      	ldr	r1, [pc, #48]	; (8006130 <__NVIC_SetPriority+0x4c>)
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	0112      	lsls	r2, r2, #4
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	440b      	add	r3, r1
 8006108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800610c:	e00a      	b.n	8006124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	4908      	ldr	r1, [pc, #32]	; (8006134 <__NVIC_SetPriority+0x50>)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	3b04      	subs	r3, #4
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	440b      	add	r3, r1
 8006122:	761a      	strb	r2, [r3, #24]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e100 	.word	0xe000e100
 8006134:	e000ed00 	.word	0xe000ed00

08006138 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  }
  if (htim->Instance==TIM4) //check if the interrupt comes from TIM1
    {
	  GetDeviceData();
    }*/
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
	...

0800614c <_ZN12CStartScreenC1Ev>:
class CStartScreen: public CScreen {
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fc0a 	bl	8005970 <_ZN7CScreenC1Ev>
 800615c:	4a03      	ldr	r2, [pc, #12]	; (800616c <_ZN12CStartScreenC1Ev+0x20>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	0800a6b4 	.word	0x0800a6b4

08006170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006176:	f7fa fcd7 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800617a:	f000 f8bd 	bl	80062f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800617e:	f000 fafb 	bl	8006778 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8006182:	f000 fad3 	bl	800672c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8006186:	f000 f907 	bl	8006398 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 800618a:	f000 f975 	bl	8006478 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 800618e:	f000 fa9f 	bl	80066d0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8006192:	f000 fa3f 	bl	8006614 <_ZL12MX_TIM4_Initv>
  MX_SPI2_Init();
 8006196:	f000 f933 	bl	8006400 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800619a:	f000 fda9 	bl	8006cf0 <_Z12SSD1306_Initv>
  SSD1306_Puts ("v0.1", &Font_11x18, 0);
  //SSD1306_GotoXY (20,45);
 // SSD1306_Puts ("Press any key", &Font_7x10, 0);
  SSD1306_UpdateScreen();*/

  NVIC_SetPriority(TIM4_IRQn, 15);
 800619e:	210f      	movs	r1, #15
 80061a0:	201e      	movs	r0, #30
 80061a2:	f7ff ff9f 	bl	80060e4 <__NVIC_SetPriority>

  gScreen= new CStartScreen();
 80061a6:	2008      	movs	r0, #8
 80061a8:	f001 fd1b 	bl	8007be2 <_Znwj>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461c      	mov	r4, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	7123      	strb	r3, [r4, #4]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff ffc7 	bl	800614c <_ZN12CStartScreenC1Ev>
 80061be:	4b49      	ldr	r3, [pc, #292]	; (80062e4 <main+0x174>)
 80061c0:	601c      	str	r4, [r3, #0]

  BME280_Init();
 80061c2:	f7ff fae5 	bl	8005790 <_Z11BME280_Initv>
  ds18b20_init();
 80061c6:	f7ff ff7f 	bl	80060c8 <ds18b20_init>
 //
  HAL_TIM_Base_Start_IT(&htim1);
 80061ca:	4847      	ldr	r0, [pc, #284]	; (80062e8 <main+0x178>)
 80061cc:	f7fd fd5f 	bl	8003c8e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80061d0:	4846      	ldr	r0, [pc, #280]	; (80062ec <main+0x17c>)
 80061d2:	f7fd fd5c 	bl	8003c8e <HAL_TIM_Base_Start_IT>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80061d6:	2100      	movs	r1, #0
 80061d8:	4843      	ldr	r0, [pc, #268]	; (80062e8 <main+0x178>)
 80061da:	f7fd fdaf 	bl	8003d3c <HAL_TIM_OC_Start_IT>
  //HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
  TM1638_Init();
 80061de:	f7ff fd65 	bl	8005cac <_Z11TM1638_Initv>
  gScreen->Init();
 80061e2:	4b40      	ldr	r3, [pc, #256]	; (80062e4 <main+0x174>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <main+0x174>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
  SSD1306_Puts (str1, &Font_7x10, SSD1306_COLOR_WHITE);*/
//  SSD1306_UpdateScreen();
  uint16_t keys;
  while (1)
  {
		keys = TM1638_ReadKey();
 80061f4:	f7ff fdec 	bl	8005dd0 <_Z14TM1638_ReadKeyv>
 80061f8:	4603      	mov	r3, r0
 80061fa:	80bb      	strh	r3, [r7, #4]
		if (keys) {
 80061fc:	88bb      	ldrh	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d02d      	beq.n	800625e <main+0xee>
			if (gScreen) {
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <main+0x174>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d029      	beq.n	800625e <main+0xee>
				CScreen *pScreen = gScreen->ProcessKey(keys);
 800620a:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <main+0x174>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <main+0x174>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	88b9      	ldrh	r1, [r7, #4]
 800621a:	4610      	mov	r0, r2
 800621c:	4798      	blx	r3
 800621e:	6038      	str	r0, [r7, #0]
				if (pScreen) {
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01b      	beq.n	800625e <main+0xee>
					if (gScreen) {
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <main+0x174>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <main+0xd6>
						delete gScreen;
 800622e:	4b2d      	ldr	r3, [pc, #180]	; (80062e4 <main+0x174>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <main+0xd0>
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	3204      	adds	r2, #4
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	4790      	blx	r2
						gScreen = NULL;
 8006240:	4b28      	ldr	r3, [pc, #160]	; (80062e4 <main+0x174>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
					}
					gScreen = pScreen;
 8006246:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <main+0x174>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6013      	str	r3, [r2, #0]
					gScreen->Init();
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <main+0x174>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <main+0x174>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4610      	mov	r0, r2
 800625c:	4798      	blx	r3
			}

		}


	if (timer1 > 800) {
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <main+0x180>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006266:	bf8c      	ite	hi
 8006268:	2301      	movhi	r3, #1
 800626a:	2300      	movls	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d026      	beq.n	80062c0 <main+0x150>
		if (owdevices) {
 8006272:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <main+0x184>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d010      	beq.n	800629c <main+0x12c>
			for (uint8_t i = 0; i < owdevices; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	71fb      	strb	r3, [r7, #7]
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <main+0x184>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	79fa      	ldrb	r2, [r7, #7]
 8006284:	429a      	cmp	r2, r3
 8006286:	d207      	bcs.n	8006298 <main+0x128>
				ds18b20_get_temp(i);
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fed4 	bl	8006038 <ds18b20_get_temp>
			for (uint8_t i = 0; i < owdevices; i++)
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	3301      	adds	r3, #1
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	e7f2      	b.n	800627e <main+0x10e>
			ds18b20_start_convert();
 8006298:	f7ff feb4 	bl	8006004 <ds18b20_start_convert>
		SSD1306_Puts(str1, &Font_7x10, SSD1306_COLOR_WHITE);
		sprintf(str1, "%.1f%%     ", BME280_ReadHumidity());
		SSD1306_GotoXY(0, 2 * 20 + 10);
		SSD1306_Puts(str1, &Font_7x10, SSD1306_COLOR_WHITE);
		  SSD1306_UpdateScreen();*/
		timer1 = 0;
 800629c:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <main+0x180>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
		if(gScreen)
 80062a2:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <main+0x174>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0a4      	beq.n	80061f4 <main+0x84>
		  gScreen->Update(1);
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <main+0x174>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <main+0x174>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3310      	adds	r3, #16
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2101      	movs	r1, #1
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
 80062be:	e799      	b.n	80061f4 <main+0x84>
	} else {
		if(gScreen)
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <main+0x174>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <main+0x16c>
		  gScreen->Update(0);
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <main+0x174>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <main+0x174>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3310      	adds	r3, #16
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2100      	movs	r1, #0
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
		HAL_Delay(25);
 80062dc:	2019      	movs	r0, #25
 80062de:	f7fa fc85 	bl	8000bec <HAL_Delay>




    /* USER CODE BEGIN 3 */
  }
 80062e2:	e787      	b.n	80061f4 <main+0x84>
 80062e4:	20000498 	.word	0x20000498
 80062e8:	2000034c 	.word	0x2000034c
 80062ec:	2000038c 	.word	0x2000038c
 80062f0:	20000494 	.word	0x20000494
 80062f4:	2000029f 	.word	0x2000029f

080062f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b090      	sub	sp, #64	; 0x40
 80062fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	2228      	movs	r2, #40	; 0x28
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fcec 	bl	8007ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800631a:	2301      	movs	r3, #1
 800631c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800631e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006324:	2300      	movs	r3, #0
 8006326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006328:	2301      	movs	r3, #1
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800632c:	2302      	movs	r3, #2
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006336:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800633c:	f107 0318 	add.w	r3, r7, #24
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc fb45 	bl	80029d0 <HAL_RCC_OscConfig>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8006356:	f000 fa7d 	bl	8006854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800635a:	230f      	movs	r3, #15
 800635c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800635e:	2302      	movs	r3, #2
 8006360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f7fc fdab 	bl	8002ed0 <HAL_RCC_ClockConfig>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800638a:	f000 fa63 	bl	8006854 <Error_Handler>
  }
}
 800638e:	bf00      	nop
 8006390:	3740      	adds	r7, #64	; 0x40
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800639c:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 800639e:	4a16      	ldr	r2, [pc, #88]	; (80063f8 <_ZL12MX_I2C1_Initv+0x60>)
 80063a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <_ZL12MX_I2C1_Initv+0x64>)
 80063a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80063c2:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063d4:	4807      	ldr	r0, [pc, #28]	; (80063f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80063d6:	f7fb f8c5 	bl	8001564 <HAL_I2C_Init>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80063ea:	f000 fa33 	bl	8006854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200002a0 	.word	0x200002a0
 80063f8:	40005400 	.word	0x40005400
 80063fc:	00061a80 	.word	0x00061a80

08006400 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006404:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <_ZL12MX_SPI2_Initv+0x74>)
 8006408:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 800640c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006410:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006418:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 800641c:	2200      	movs	r2, #0
 800641e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006422:	2202      	movs	r2, #2
 8006424:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006428:	2201      	movs	r2, #1
 800642a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 800642e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006432:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006436:	2228      	movs	r2, #40	; 0x28
 8006438:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 800643c:	2280      	movs	r2, #128	; 0x80
 800643e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006442:	2200      	movs	r2, #0
 8006444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006448:	2200      	movs	r2, #0
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800644c:	4b08      	ldr	r3, [pc, #32]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 800644e:	220a      	movs	r2, #10
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006452:	4807      	ldr	r0, [pc, #28]	; (8006470 <_ZL12MX_SPI2_Initv+0x70>)
 8006454:	f7fc fed6 	bl	8003204 <HAL_SPI_Init>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <_ZL12MX_SPI2_Initv+0x6c>
  {
    Error_Handler();
 8006468:	f000 f9f4 	bl	8006854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200002f4 	.word	0x200002f4
 8006474:	40003800 	.word	0x40003800

08006478 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b096      	sub	sp, #88	; 0x58
 800647c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800647e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	609a      	str	r2, [r3, #8]
 800648a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800648c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	60da      	str	r2, [r3, #12]
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	615a      	str	r2, [r3, #20]
 80064a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	2220      	movs	r2, #32
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fc17 	bl	8007ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064b6:	4b55      	ldr	r3, [pc, #340]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064b8:	4a55      	ldr	r2, [pc, #340]	; (8006610 <_ZL12MX_TIM1_Initv+0x198>)
 80064ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80064c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064c4:	4b51      	ldr	r3, [pc, #324]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80064ca:	4b50      	ldr	r3, [pc, #320]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064cc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80064d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d2:	4b4e      	ldr	r3, [pc, #312]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 80064d8:	4b4c      	ldr	r3, [pc, #304]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064da:	2203      	movs	r2, #3
 80064dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064de:	4b4b      	ldr	r3, [pc, #300]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80064e4:	4849      	ldr	r0, [pc, #292]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80064e6:	f7fd fba7 	bl	8003c38 <HAL_TIM_Base_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80064fa:	f000 f9ab 	bl	8006854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006508:	4619      	mov	r1, r3
 800650a:	4840      	ldr	r0, [pc, #256]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 800650c:	f7fd fe3c 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf14      	ite	ne
 8006516:	2301      	movne	r3, #1
 8006518:	2300      	moveq	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8006520:	f000 f998 	bl	8006854 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006524:	4839      	ldr	r0, [pc, #228]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 8006526:	f7fd fbd5 	bl	8003cd4 <HAL_TIM_OC_Init>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800653a:	f000 f98b 	bl	8006854 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800653e:	2108      	movs	r1, #8
 8006540:	4832      	ldr	r0, [pc, #200]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 8006542:	f7fd fc73 	bl	8003e2c <HAL_TIM_OnePulse_Init>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8006556:	f000 f97d 	bl	8006854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800655a:	2300      	movs	r3, #0
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800655e:	2300      	movs	r3, #0
 8006560:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006566:	4619      	mov	r1, r3
 8006568:	4828      	ldr	r0, [pc, #160]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 800656a:	f7fe f999 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <_ZL12MX_TIM1_Initv+0x10a>
  {
    Error_Handler();
 800657e:	f000 f969 	bl	8006854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8006582:	2330      	movs	r3, #48	; 0x30
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25000;
 8006586:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800658c:	2302      	movs	r3, #2
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006590:	2300      	movs	r3, #0
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006594:	2300      	movs	r3, #0
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006598:	2300      	movs	r3, #0
 800659a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	4818      	ldr	r0, [pc, #96]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80065aa:	f7fd fd8d 	bl	80040c8 <HAL_TIM_OC_ConfigChannel>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 80065be:	f000 f949 	bl	8006854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4809      	ldr	r0, [pc, #36]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 80065e6:	f7fe f99f 	bl	8004928 <HAL_TIMEx_ConfigBreakDeadTime>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 80065fa:	f000 f92b 	bl	8006854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80065fe:	4803      	ldr	r0, [pc, #12]	; (800660c <_ZL12MX_TIM1_Initv+0x194>)
 8006600:	f001 f8be 	bl	8007780 <HAL_TIM_MspPostInit>

}
 8006604:	bf00      	nop
 8006606:	3758      	adds	r7, #88	; 0x58
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	2000034c 	.word	0x2000034c
 8006610:	40012c00 	.word	0x40012c00

08006614 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800661a:	f107 0308 	add.w	r3, r7, #8
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	609a      	str	r2, [r3, #8]
 8006626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006628:	463b      	mov	r3, r7
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006632:	4a26      	ldr	r2, [pc, #152]	; (80066cc <_ZL12MX_TIM4_Initv+0xb8>)
 8006634:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006638:	f240 22cf 	movw	r2, #719	; 0x2cf
 800663c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006646:	f242 720f 	movw	r2, #9999	; 0x270f
 800664a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800664c:	4b1e      	ldr	r3, [pc, #120]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 800664e:	2200      	movs	r2, #0
 8006650:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006658:	481b      	ldr	r0, [pc, #108]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 800665a:	f7fd faed 	bl	8003c38 <HAL_TIM_Base_Init>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 800666e:	f000 f8f1 	bl	8006854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006678:	f107 0308 	add.w	r3, r7, #8
 800667c:	4619      	mov	r1, r3
 800667e:	4812      	ldr	r0, [pc, #72]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 8006680:	f7fd fd82 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8006694:	f000 f8de 	bl	8006854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066a0:	463b      	mov	r3, r7
 80066a2:	4619      	mov	r1, r3
 80066a4:	4808      	ldr	r0, [pc, #32]	; (80066c8 <_ZL12MX_TIM4_Initv+0xb4>)
 80066a6:	f7fe f8fb 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bf14      	ite	ne
 80066b0:	2301      	movne	r3, #1
 80066b2:	2300      	moveq	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80066ba:	f000 f8cb 	bl	8006854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000038c 	.word	0x2000038c
 80066cc:	40000800 	.word	0x40000800

080066d0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066d6:	4a14      	ldr	r2, [pc, #80]	; (8006728 <_ZL19MX_USART2_UART_Initv+0x58>)
 80066d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ee:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066f6:	220c      	movs	r2, #12
 80066f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066fa:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006700:	4b08      	ldr	r3, [pc, #32]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006702:	2200      	movs	r2, #0
 8006704:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8006706:	4807      	ldr	r0, [pc, #28]	; (8006724 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006708:	f7fe f971 	bl	80049ee <HAL_HalfDuplex_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf14      	ite	ne
 8006712:	2301      	movne	r3, #1
 8006714:	2300      	moveq	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800671c:	f000 f89a 	bl	8006854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200003cc 	.word	0x200003cc
 8006728:	40004400 	.word	0x40004400

0800672c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <_ZL11MX_DMA_Initv+0x48>)
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <_ZL11MX_DMA_Initv+0x48>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6153      	str	r3, [r2, #20]
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <_ZL11MX_DMA_Initv+0x48>)
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	2010      	movs	r0, #16
 8006750:	f7fa fb47 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8006754:	2010      	movs	r0, #16
 8006756:	f7fa fb60 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	2011      	movs	r0, #17
 8006760:	f7fa fb3f 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8006764:	2011      	movs	r0, #17
 8006766:	f7fa fb58 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000

08006778 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800677e:	f107 0310 	add.w	r3, r7, #16
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800678c:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4a2d      	ldr	r2, [pc, #180]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	6193      	str	r3, [r2, #24]
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067a4:	4b28      	ldr	r3, [pc, #160]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067aa:	f043 0320 	orr.w	r3, r3, #32
 80067ae:	6193      	str	r3, [r2, #24]
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067bc:	4b22      	ldr	r3, [pc, #136]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067c2:	f043 0304 	orr.w	r3, r3, #4
 80067c6:	6193      	str	r3, [r2, #24]
 80067c8:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067d4:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067da:	f043 0308 	orr.w	r3, r3, #8
 80067de:	6193      	str	r3, [r2, #24]
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <_ZL12MX_GPIO_Initv+0xd0>)
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80067ec:	2200      	movs	r2, #0
 80067ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067f2:	4816      	ldr	r0, [pc, #88]	; (800684c <_ZL12MX_GPIO_Initv+0xd4>)
 80067f4:	f7fa fe9e 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80067f8:	2200      	movs	r2, #0
 80067fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067fe:	4814      	ldr	r0, [pc, #80]	; (8006850 <_ZL12MX_GPIO_Initv+0xd8>)
 8006800:	f7fa fe98 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800680a:	2301      	movs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006812:	2302      	movs	r3, #2
 8006814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006816:	f107 0310 	add.w	r3, r7, #16
 800681a:	4619      	mov	r1, r3
 800681c:	480b      	ldr	r0, [pc, #44]	; (800684c <_ZL12MX_GPIO_Initv+0xd4>)
 800681e:	f7fa fd05 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006834:	f107 0310 	add.w	r3, r7, #16
 8006838:	4619      	mov	r1, r3
 800683a:	4805      	ldr	r0, [pc, #20]	; (8006850 <_ZL12MX_GPIO_Initv+0xd8>)
 800683c:	f7fa fcf6 	bl	800122c <HAL_GPIO_Init>

}
 8006840:	bf00      	nop
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000
 800684c:	40011000 	.word	0x40011000
 8006850:	40010c00 	.word	0x40010c00

08006854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <ds18b20_crc8>:
static uint8_t data[16];
static uint8_t data_len;
static uint8_t current_pos;*/


uint8_t ds18b20_crc8(uint8_t *addr, uint8_t len) {
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8006870:	e022      	b.n	80068b8 <ds18b20_crc8+0x58>
		inbyte = *addr++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800687c:	2308      	movs	r3, #8
 800687e:	737b      	strb	r3, [r7, #13]
 8006880:	e017      	b.n	80068b2 <ds18b20_crc8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	4053      	eors	r3, r2
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8006896:	7b3b      	ldrb	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <ds18b20_crc8+0x46>
				crc ^= 0x8C;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80068a2:	43db      	mvns	r3, r3
 80068a4:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80068ac:	7b7b      	ldrb	r3, [r7, #13]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	737b      	strb	r3, [r7, #13]
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e4      	bne.n	8006882 <ds18b20_crc8+0x22>
	while (len--) {
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	70fa      	strb	r2, [r7, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1d7      	bne.n	8006872 <ds18b20_crc8+0x12>
		}
	}
	return crc;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <OW_toBits>:

static void OW_toBits(uint8_t ow_byte, uint8_t *ow_bits) {
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	4603      	mov	r3, r0
 80068d6:	6039      	str	r1, [r7, #0]
 80068d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	e014      	b.n	800690a <OW_toBits+0x3c>
		if (ow_byte & 0x01) {
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <OW_toBits+0x24>
			*ow_bits = OW_1;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e002      	b.n	80068f8 <OW_toBits+0x2a>
		} else {
			*ow_bits = OW_0;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
		}
		ow_bits++;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	603b      	str	r3, [r7, #0]
		ow_byte = ow_byte >> 1;
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	3301      	adds	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b07      	cmp	r3, #7
 800690e:	d9e7      	bls.n	80068e0 <OW_toBits+0x12>
	}
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr

0800691c <OW_toByte>:

static uint8_t OW_toByte(uint8_t *ow_bits) {
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	uint8_t ow_byte, i;
	ow_byte = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 8006928:	2300      	movs	r3, #0
 800692a:	73bb      	strb	r3, [r7, #14]
 800692c:	e010      	b.n	8006950 <OW_toByte+0x34>
		ow_byte = ow_byte >> 1;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
		if (*ow_bits == OW_1) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2bff      	cmp	r3, #255	; 0xff
 800693a:	d103      	bne.n	8006944 <OW_toByte+0x28>
			ow_byte |= 0x80;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006942:	73fb      	strb	r3, [r7, #15]
		}

		ow_bits++;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3301      	adds	r3, #1
 8006948:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	3301      	adds	r3, #1
 800694e:	73bb      	strb	r3, [r7, #14]
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b07      	cmp	r3, #7
 8006954:	d9eb      	bls.n	800692e <OW_toByte+0x12>
	}
	return ow_byte;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
	...

08006964 <OW_SendBits>:





uint8_t OW_SendBits(uint8_t data) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
	uint8_t d=data?0xff:0;
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <OW_SendBits+0x14>
 8006974:	23ff      	movs	r3, #255	; 0xff
 8006976:	e000      	b.n	800697a <OW_SendBits+0x16>
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,&d,1,100);
 800697c:	f107 010f 	add.w	r1, r7, #15
 8006980:	2364      	movs	r3, #100	; 0x64
 8006982:	2201      	movs	r2, #1
 8006984:	4807      	ldr	r0, [pc, #28]	; (80069a4 <OW_SendBits+0x40>)
 8006986:	f7fe f887 	bl	8004a98 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2,&d,1,100);
 800698a:	f107 010f 	add.w	r1, r7, #15
 800698e:	2364      	movs	r3, #100	; 0x64
 8006990:	2201      	movs	r2, #1
 8006992:	4804      	ldr	r0, [pc, #16]	; (80069a4 <OW_SendBits+0x40>)
 8006994:	f7fe f919 	bl	8004bca <HAL_UART_Receive>
    return d;
 8006998:	7bfb      	ldrb	r3, [r7, #15]


}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200003cc 	.word	0x200003cc

080069a8 <OW_ReadBit>:

uint8_t OW_ReadBit(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0


    if(OW_SendBits(1) == 0xff) {
 80069ac:	2001      	movs	r0, #1
 80069ae:	f7ff ffd9 	bl	8006964 <OW_SendBits>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2bff      	cmp	r3, #255	; 0xff
 80069b6:	d101      	bne.n	80069bc <OW_ReadBit+0x14>
        return 1;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <OW_ReadBit+0x16>
    }
    else {
        return 0;
 80069bc:	2300      	movs	r3, #0
    }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <OW_Search>:


uint8_t OW_Search(owdevice_t *owdevices_) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	uint8_t LastDeviceFlag = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	77fb      	strb	r3, [r7, #31]
	uint8_t LastDiscrepancy =0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	77bb      	strb	r3, [r7, #30]
	uint8_t ROM_NO[8];
	while (1) {
		uint8_t search_result = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	777b      	strb	r3, [r7, #29]
		_OW_Reset();
 80069d8:	f000 f8f8 	bl	8006bcc <_OW_Reset>
		_OW_SwapByte(OW_CMD_SEARCH);
 80069dc:	20f0      	movs	r0, #240	; 0xf0
 80069de:	f000 f951 	bl	8006c84 <_OW_SwapByte>
		{
			uint8_t id_bit_number = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	773b      	strb	r3, [r7, #28]
			uint8_t last_zero = 0, rom_byte_number = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	76fb      	strb	r3, [r7, #27]
 80069ea:	2300      	movs	r3, #0
 80069ec:	76bb      	strb	r3, [r7, #26]
			uint8_t id_bit, cmp_id_bit;
			uint8_t rom_byte_mask = 1, search_direction;
 80069ee:	2301      	movs	r3, #1
 80069f0:	767b      	strb	r3, [r7, #25]
			if (!LastDeviceFlag) {
 80069f2:	7ffb      	ldrb	r3, [r7, #31]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 80b6 	bne.w	8006b66 <OW_Search+0x1a2>

				while (hdma_usart2_rx.State == HAL_DMA_STATE_BUSY)
 80069fa:	bf00      	nop
 80069fc:	4b71      	ldr	r3, [pc, #452]	; (8006bc4 <OW_Search+0x200>)
 80069fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d0fa      	beq.n	80069fc <OW_Search+0x38>
					;
				// loop to do the search
				do {
					// read a bit and its complement
					id_bit = OW_ReadBit();
 8006a06:	f7ff ffcf 	bl	80069a8 <OW_ReadBit>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	74fb      	strb	r3, [r7, #19]
					cmp_id_bit = OW_ReadBit();
 8006a0e:	f7ff ffcb 	bl	80069a8 <OW_ReadBit>
 8006a12:	4603      	mov	r3, r0
 8006a14:	74bb      	strb	r3, [r7, #18]

					// check for no devices on 1-wire
					if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8006a16:	7cfb      	ldrb	r3, [r7, #19]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d102      	bne.n	8006a22 <OW_Search+0x5e>
 8006a1c:	7cbb      	ldrb	r3, [r7, #18]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d063      	beq.n	8006aea <OW_Search+0x126>
						break;
					} else {
						// all devices coupled have 0 or 1
						if (id_bit != cmp_id_bit) {
 8006a22:	7cfa      	ldrb	r2, [r7, #19]
 8006a24:	7cbb      	ldrb	r3, [r7, #18]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d002      	beq.n	8006a30 <OW_Search+0x6c>
							search_direction = id_bit; // bit write value for search
 8006a2a:	7cfb      	ldrb	r3, [r7, #19]
 8006a2c:	763b      	strb	r3, [r7, #24]
 8006a2e:	e020      	b.n	8006a72 <OW_Search+0xae>
						} else {
							// if this discrepancy if before the Last Discrepancy
							// on a previous next then pick the same as last time
							if (id_bit_number < LastDiscrepancy) {
 8006a30:	7f3a      	ldrb	r2, [r7, #28]
 8006a32:	7fbb      	ldrb	r3, [r7, #30]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d20f      	bcs.n	8006a58 <OW_Search+0x94>
								search_direction = ((ROM_NO[rom_byte_number]
 8006a38:	7ebb      	ldrb	r3, [r7, #26]
 8006a3a:	f107 0220 	add.w	r2, r7, #32
 8006a3e:	4413      	add	r3, r2
 8006a40:	f813 2c18 	ldrb.w	r2, [r3, #-24]
										& rom_byte_mask) > 0);
 8006a44:	7e7b      	ldrb	r3, [r7, #25]
 8006a46:	4013      	ands	r3, r2
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bf14      	ite	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	2300      	moveq	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
								search_direction = ((ROM_NO[rom_byte_number]
 8006a54:	763b      	strb	r3, [r7, #24]
 8006a56:	e007      	b.n	8006a68 <OW_Search+0xa4>
							} else {
								// if equal to last pick 1, if not then pick 0
								search_direction = (id_bit_number
										== LastDiscrepancy);
 8006a58:	7f3a      	ldrb	r2, [r7, #28]
 8006a5a:	7fbb      	ldrb	r3, [r7, #30]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
								search_direction = (id_bit_number
 8006a66:	763b      	strb	r3, [r7, #24]
							}

							// if 0 was picked then record its position in LastZero
							if (search_direction == 0) {
 8006a68:	7e3b      	ldrb	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <OW_Search+0xae>
								last_zero = id_bit_number;
 8006a6e:	7f3b      	ldrb	r3, [r7, #28]
 8006a70:	76fb      	strb	r3, [r7, #27]
							}
						}

						// set or clear the bit in the ROM byte rom_byte_number
						// with mask rom_byte_mask
						if (search_direction == 1) {
 8006a72:	7e3b      	ldrb	r3, [r7, #24]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10f      	bne.n	8006a98 <OW_Search+0xd4>
							ROM_NO[rom_byte_number] |= rom_byte_mask;
 8006a78:	7ebb      	ldrb	r3, [r7, #26]
 8006a7a:	f107 0220 	add.w	r2, r7, #32
 8006a7e:	4413      	add	r3, r2
 8006a80:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8006a84:	7ebb      	ldrb	r3, [r7, #26]
 8006a86:	7e7a      	ldrb	r2, [r7, #25]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	f107 0120 	add.w	r1, r7, #32
 8006a90:	440b      	add	r3, r1
 8006a92:	f803 2c18 	strb.w	r2, [r3, #-24]
 8006a96:	e013      	b.n	8006ac0 <OW_Search+0xfc>
						} else {
							ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8006a98:	7ebb      	ldrb	r3, [r7, #26]
 8006a9a:	f107 0220 	add.w	r2, r7, #32
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006aa4:	b25a      	sxtb	r2, r3
 8006aa6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b25a      	sxtb	r2, r3
 8006ab2:	7ebb      	ldrb	r3, [r7, #26]
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	f107 0120 	add.w	r1, r7, #32
 8006aba:	440b      	add	r3, r1
 8006abc:	f803 2c18 	strb.w	r2, [r3, #-24]
						}

						// serial number search direction write bit
						//OW_toBits(search_direction, ow_buf);
						OW_SendBits(search_direction);
 8006ac0:	7e3b      	ldrb	r3, [r7, #24]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff4e 	bl	8006964 <OW_SendBits>

						// increment the byte counter id_bit_number
						// and shift the mask rom_byte_mask
						id_bit_number++;
 8006ac8:	7f3b      	ldrb	r3, [r7, #28]
 8006aca:	3301      	adds	r3, #1
 8006acc:	773b      	strb	r3, [r7, #28]
						rom_byte_mask <<= 1;
 8006ace:	7e7b      	ldrb	r3, [r7, #25]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	767b      	strb	r3, [r7, #25]

						// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
						if (rom_byte_mask == 0) {
 8006ad4:	7e7b      	ldrb	r3, [r7, #25]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <OW_Search+0x120>
							//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
							rom_byte_number++;
 8006ada:	7ebb      	ldrb	r3, [r7, #26]
 8006adc:	3301      	adds	r3, #1
 8006ade:	76bb      	strb	r3, [r7, #26]
							rom_byte_mask = 1;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	767b      	strb	r3, [r7, #25]
						}
					}
				} while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 8006ae4:	7ebb      	ldrb	r3, [r7, #26]
 8006ae6:	2b07      	cmp	r3, #7
 8006ae8:	d98d      	bls.n	8006a06 <OW_Search+0x42>

				// if the search was successful then
				if (!(id_bit_number < 65)) {
 8006aea:	7f3b      	ldrb	r3, [r7, #28]
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d931      	bls.n	8006b54 <OW_Search+0x190>
					// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
					LastDiscrepancy = last_zero;
 8006af0:	7efb      	ldrb	r3, [r7, #27]
 8006af2:	77bb      	strb	r3, [r7, #30]

					// check for last device
					if (LastDiscrepancy == 0) {
 8006af4:	7fbb      	ldrb	r3, [r7, #30]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <OW_Search+0x13a>
						LastDeviceFlag = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	77fb      	strb	r3, [r7, #31]
					}

					search_result = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	777b      	strb	r3, [r7, #29]
					owdevices_[owdevices].id = owdevices;
 8006b02:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <OW_Search+0x204>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <OW_Search+0x204>)
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	721a      	strb	r2, [r3, #8]
					for (int i = 0; i < 8; i++)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e015      	b.n	8006b4e <OW_Search+0x18a>
						owdevices_[owdevices].rom_code[i] = ROM_NO[i];
 8006b22:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <OW_Search+0x204>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	441a      	add	r2, r3
 8006b36:	f107 0108 	add.w	r1, r7, #8
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	440b      	add	r3, r1
 8006b3e:	7819      	ldrb	r1, [r3, #0]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	460a      	mov	r2, r1
 8006b46:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 8; i++)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b07      	cmp	r3, #7
 8006b52:	dde6      	ble.n	8006b22 <OW_Search+0x15e>
					//owdevices++;
				}

				// if no device found then reset counters so next 'search' will be like a first
				if (!search_result) {
 8006b54:	7f7b      	ldrb	r3, [r7, #29]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <OW_Search+0x1a2>
					LastDiscrepancy = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	77bb      	strb	r3, [r7, #30]
					LastDeviceFlag = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	77fb      	strb	r3, [r7, #31]
					search_result = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	777b      	strb	r3, [r7, #29]
					//DeviceID = 0;
				}
			}

		}
		if (search_result) {
 8006b66:	7f7b      	ldrb	r3, [r7, #29]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d024      	beq.n	8006bb6 <OW_Search+0x1f2>
			if (ds18b20_crc8(owdevices_[owdevices].rom_code, 7)
 8006b6c:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <OW_Search+0x204>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	2107      	movs	r1, #7
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fe6c 	bl	8006860 <ds18b20_crc8>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4619      	mov	r1, r3
					== owdevices_[owdevices].rom_code[7]) {
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <OW_Search+0x204>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	79db      	ldrb	r3, [r3, #7]
			if (ds18b20_crc8(owdevices_[owdevices].rom_code, 7)
 8006ba2:	4299      	cmp	r1, r3
 8006ba4:	f47f af16 	bne.w	80069d4 <OW_Search+0x10>
				owdevices++;
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <OW_Search+0x204>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <OW_Search+0x204>)
 8006bb2:	701a      	strb	r2, [r3, #0]
	while (1) {
 8006bb4:	e70e      	b.n	80069d4 <OW_Search+0x10>
			}
		} else
			break;
 8006bb6:	bf00      	nop
	}
	return owdevices;
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <OW_Search+0x204>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000450 	.word	0x20000450
 8006bc8:	2000029f 	.word	0x2000029f

08006bcc <_OW_Reset>:
;

void _OW_Reset(void){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
	uint8_t ow_buf[1];
	huart2.Instance = USART2;
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <_OW_Reset+0xac>)
 8006bd4:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <_OW_Reset+0xb0>)
 8006bd6:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <_OW_Reset+0xac>)
 8006bda:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006bde:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <_OW_Reset+0xac>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <_OW_Reset+0xac>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8006bec:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <_OW_Reset+0xac>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <_OW_Reset+0xac>)
 8006bf4:	220c      	movs	r2, #12
 8006bf6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bf8:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <_OW_Reset+0xac>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bfe:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <_OW_Reset+0xac>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	61da      	str	r2, [r3, #28]
    HAL_HalfDuplex_Init(&huart2);
 8006c04:	481c      	ldr	r0, [pc, #112]	; (8006c78 <_OW_Reset+0xac>)
 8006c06:	f7fd fef2 	bl	80049ee <HAL_HalfDuplex_Init>

	ow_buf[0]=0xf0;
 8006c0a:	23f0      	movs	r3, #240	; 0xf0
 8006c0c:	713b      	strb	r3, [r7, #4]

	HAL_UART_Transmit_DMA(&huart2,ow_buf,1);
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	2201      	movs	r2, #1
 8006c12:	4619      	mov	r1, r3
 8006c14:	4818      	ldr	r0, [pc, #96]	; (8006c78 <_OW_Reset+0xac>)
 8006c16:	f7fe f87f 	bl	8004d18 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart2,ow_buf,1);
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4815      	ldr	r0, [pc, #84]	; (8006c78 <_OW_Reset+0xac>)
 8006c22:	f7fe f8e5 	bl	8004df0 <HAL_UART_Receive_DMA>
	while(hdma_usart2_rx.State==HAL_DMA_STATE_BUSY){
 8006c26:	e002      	b.n	8006c2e <_OW_Reset+0x62>
		HAL_Delay(1);
 8006c28:	2001      	movs	r0, #1
 8006c2a:	f7f9 ffdf 	bl	8000bec <HAL_Delay>
	while(hdma_usart2_rx.State==HAL_DMA_STATE_BUSY){
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <_OW_Reset+0xb4>)
 8006c30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d0f7      	beq.n	8006c28 <_OW_Reset+0x5c>
	}
	huart2.Instance = USART2;
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <_OW_Reset+0xac>)
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <_OW_Reset+0xb0>)
 8006c3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <_OW_Reset+0xac>)
 8006c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <_OW_Reset+0xac>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <_OW_Reset+0xac>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <_OW_Reset+0xac>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <_OW_Reset+0xac>)
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <_OW_Reset+0xac>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c64:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <_OW_Reset+0xac>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	61da      	str	r2, [r3, #28]
	HAL_HalfDuplex_Init(&huart2);
 8006c6a:	4803      	ldr	r0, [pc, #12]	; (8006c78 <_OW_Reset+0xac>)
 8006c6c:	f7fd febf 	bl	80049ee <HAL_HalfDuplex_Init>
	//      ow_state&=~OW_STATE_RESET2;
	//      if(ow_buf[0]==0xf0){
};
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	200003cc 	.word	0x200003cc
 8006c7c:	40004400 	.word	0x40004400
 8006c80:	20000450 	.word	0x20000450

08006c84 <_OW_SwapByte>:
uint8_t _OW_SwapByte(uint8_t data){
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[8];
	OW_toBits(data,buff);
 8006c8e:	f107 020c 	add.w	r2, r7, #12
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff fe19 	bl	80068ce <OW_toBits>
	for(int i=0;i<8;i++){
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e014      	b.n	8006ccc <_OW_SwapByte+0x48>
		HAL_UART_Transmit(&huart2,&buff[i],1,100);
 8006ca2:	f107 020c 	add.w	r2, r7, #12
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	18d1      	adds	r1, r2, r3
 8006caa:	2364      	movs	r3, #100	; 0x64
 8006cac:	2201      	movs	r2, #1
 8006cae:	480f      	ldr	r0, [pc, #60]	; (8006cec <_OW_SwapByte+0x68>)
 8006cb0:	f7fd fef2 	bl	8004a98 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2,&buff[i],1,100);
 8006cb4:	f107 020c 	add.w	r2, r7, #12
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	18d1      	adds	r1, r2, r3
 8006cbc:	2364      	movs	r3, #100	; 0x64
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	480a      	ldr	r0, [pc, #40]	; (8006cec <_OW_SwapByte+0x68>)
 8006cc2:	f7fd ff82 	bl	8004bca <HAL_UART_Receive>
	for(int i=0;i<8;i++){
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	dde7      	ble.n	8006ca2 <_OW_SwapByte+0x1e>
	}
	data=OW_toByte(buff);
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fe20 	bl	800691c <OW_toByte>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	71fb      	strb	r3, [r7, #7]
	return data;
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
};
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200003cc 	.word	0x200003cc

08006cf0 <_Z12SSD1306_Initv>:





uint8_t SSD1306_Init(void) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006cf6:	f000 fbd9 	bl	80074ac <_Z16ssd1306_I2C_Initv>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006cfa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006cfe:	2201      	movs	r2, #1
 8006d00:	2178      	movs	r1, #120	; 0x78
 8006d02:	485d      	ldr	r0, [pc, #372]	; (8006e78 <_Z12SSD1306_Initv+0x188>)
 8006d04:	f7fb f996 	bl	8002034 <HAL_I2C_IsDeviceReady>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <_Z12SSD1306_Initv+0x2c>
		/* Return false */
		return 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e0a9      	b.n	8006e70 <_Z12SSD1306_Initv+0x180>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8006d1c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006d20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <_Z12SSD1306_Initv+0x40>
		p--;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d2e:	e7f8      	b.n	8006d22 <_Z12SSD1306_Initv+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006d30:	22ae      	movs	r2, #174	; 0xae
 8006d32:	2100      	movs	r1, #0
 8006d34:	2078      	movs	r0, #120	; 0x78
 8006d36:	f000 fc13 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	2078      	movs	r0, #120	; 0x78
 8006d40:	f000 fc0e 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006d44:	2210      	movs	r2, #16
 8006d46:	2100      	movs	r1, #0
 8006d48:	2078      	movs	r0, #120	; 0x78
 8006d4a:	f000 fc09 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006d4e:	22b0      	movs	r2, #176	; 0xb0
 8006d50:	2100      	movs	r1, #0
 8006d52:	2078      	movs	r0, #120	; 0x78
 8006d54:	f000 fc04 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006d58:	22c8      	movs	r2, #200	; 0xc8
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	2078      	movs	r0, #120	; 0x78
 8006d5e:	f000 fbff 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	2078      	movs	r0, #120	; 0x78
 8006d68:	f000 fbfa 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2078      	movs	r0, #120	; 0x78
 8006d72:	f000 fbf5 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2078      	movs	r0, #120	; 0x78
 8006d7c:	f000 fbf0 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006d80:	2281      	movs	r2, #129	; 0x81
 8006d82:	2100      	movs	r1, #0
 8006d84:	2078      	movs	r0, #120	; 0x78
 8006d86:	f000 fbeb 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xFF);
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2078      	movs	r0, #120	; 0x78
 8006d90:	f000 fbe6 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006d94:	22a1      	movs	r2, #161	; 0xa1
 8006d96:	2100      	movs	r1, #0
 8006d98:	2078      	movs	r0, #120	; 0x78
 8006d9a:	f000 fbe1 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006d9e:	22a6      	movs	r2, #166	; 0xa6
 8006da0:	2100      	movs	r1, #0
 8006da2:	2078      	movs	r0, #120	; 0x78
 8006da4:	f000 fbdc 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006da8:	22a8      	movs	r2, #168	; 0xa8
 8006daa:	2100      	movs	r1, #0
 8006dac:	2078      	movs	r0, #120	; 0x78
 8006dae:	f000 fbd7 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x3F); //
 8006db2:	223f      	movs	r2, #63	; 0x3f
 8006db4:	2100      	movs	r1, #0
 8006db6:	2078      	movs	r0, #120	; 0x78
 8006db8:	f000 fbd2 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006dbc:	22a4      	movs	r2, #164	; 0xa4
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	2078      	movs	r0, #120	; 0x78
 8006dc2:	f000 fbcd 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006dc6:	22d3      	movs	r2, #211	; 0xd3
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2078      	movs	r0, #120	; 0x78
 8006dcc:	f000 fbc8 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	2078      	movs	r0, #120	; 0x78
 8006dd6:	f000 fbc3 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006dda:	22d5      	movs	r2, #213	; 0xd5
 8006ddc:	2100      	movs	r1, #0
 8006dde:	2078      	movs	r0, #120	; 0x78
 8006de0:	f000 fbbe 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006de4:	22f0      	movs	r2, #240	; 0xf0
 8006de6:	2100      	movs	r1, #0
 8006de8:	2078      	movs	r0, #120	; 0x78
 8006dea:	f000 fbb9 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006dee:	22d9      	movs	r2, #217	; 0xd9
 8006df0:	2100      	movs	r1, #0
 8006df2:	2078      	movs	r0, #120	; 0x78
 8006df4:	f000 fbb4 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x22); //
 8006df8:	2222      	movs	r2, #34	; 0x22
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2078      	movs	r0, #120	; 0x78
 8006dfe:	f000 fbaf 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006e02:	22da      	movs	r2, #218	; 0xda
 8006e04:	2100      	movs	r1, #0
 8006e06:	2078      	movs	r0, #120	; 0x78
 8006e08:	f000 fbaa 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x12);
 8006e0c:	2212      	movs	r2, #18
 8006e0e:	2100      	movs	r1, #0
 8006e10:	2078      	movs	r0, #120	; 0x78
 8006e12:	f000 fba5 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006e16:	22db      	movs	r2, #219	; 0xdb
 8006e18:	2100      	movs	r1, #0
 8006e1a:	2078      	movs	r0, #120	; 0x78
 8006e1c:	f000 fba0 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006e20:	2220      	movs	r2, #32
 8006e22:	2100      	movs	r1, #0
 8006e24:	2078      	movs	r0, #120	; 0x78
 8006e26:	f000 fb9b 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006e2a:	228d      	movs	r2, #141	; 0x8d
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	2078      	movs	r0, #120	; 0x78
 8006e30:	f000 fb96 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0x14); //
 8006e34:	2214      	movs	r2, #20
 8006e36:	2100      	movs	r1, #0
 8006e38:	2078      	movs	r0, #120	; 0x78
 8006e3a:	f000 fb91 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006e3e:	22af      	movs	r2, #175	; 0xaf
 8006e40:	2100      	movs	r1, #0
 8006e42:	2078      	movs	r0, #120	; 0x78
 8006e44:	f000 fb8c 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8006e48:	222e      	movs	r2, #46	; 0x2e
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2078      	movs	r0, #120	; 0x78
 8006e4e:	f000 fb87 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006e52:	2000      	movs	r0, #0
 8006e54:	f000 f842 	bl	8006edc <_Z12SSD1306_Fill15SSD1306_COLOR_t>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006e58:	f000 f812 	bl	8006e80 <_Z20SSD1306_UpdateScreenv>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <_Z12SSD1306_Initv+0x18c>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <_Z12SSD1306_Initv+0x18c>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <_Z12SSD1306_Initv+0x18c>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006e6e:	2301      	movs	r3, #1
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200002a0 	.word	0x200002a0
 8006e7c:	2000089c 	.word	0x2000089c

08006e80 <_Z20SSD1306_UpdateScreenv>:

void SSD1306_UpdateScreen(void) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006e86:	2300      	movs	r3, #0
 8006e88:	71fb      	strb	r3, [r7, #7]
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d81e      	bhi.n	8006ece <_Z20SSD1306_UpdateScreenv+0x4e>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	3b50      	subs	r3, #80	; 0x50
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	2100      	movs	r1, #0
 8006e9a:	2078      	movs	r0, #120	; 0x78
 8006e9c:	f000 fb60 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
		SSD1306_WRITECOMMAND(0x00);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	2078      	movs	r0, #120	; 0x78
 8006ea6:	f000 fb5b 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
		SSD1306_WRITECOMMAND(0x10);
 8006eaa:	2210      	movs	r2, #16
 8006eac:	2100      	movs	r1, #0
 8006eae:	2078      	movs	r0, #120	; 0x78
 8006eb0:	f000 fb56 	bl	8007560 <_Z17ssd1306_I2C_Writehhh>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <_Z20SSD1306_UpdateScreenv+0x58>)
 8006eba:	441a      	add	r2, r3
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	2140      	movs	r1, #64	; 0x40
 8006ec0:	2078      	movs	r0, #120	; 0x78
 8006ec2:	f000 fb07 	bl	80074d4 <_Z22ssd1306_I2C_WriteMultihhPht>
	for (m = 0; m < 8; m++) {
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	e7dd      	b.n	8006e8a <_Z20SSD1306_UpdateScreenv+0xa>
	}
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	2000049c 	.word	0x2000049c

08006edc <_Z12SSD1306_Fill15SSD1306_COLOR_t>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <_Z12SSD1306_Fill15SSD1306_COLOR_t+0x14>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <_Z12SSD1306_Fill15SSD1306_COLOR_t+0x16>
 8006ef0:	23ff      	movs	r3, #255	; 0xff
 8006ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4803      	ldr	r0, [pc, #12]	; (8006f08 <_Z12SSD1306_Fill15SSD1306_COLOR_t+0x2c>)
 8006efa:	f000 fef3 	bl	8007ce4 <memset>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2000049c 	.word	0x2000049c

08006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
 8006f16:	460b      	mov	r3, r1
 8006f18:	80bb      	strh	r3, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	70fb      	strb	r3, [r7, #3]
	if (
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b7f      	cmp	r3, #127	; 0x7f
 8006f22:	d848      	bhi.n	8006fb6 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xaa>
		x >= SSD1306_WIDTH ||
 8006f24:	88bb      	ldrh	r3, [r7, #4]
 8006f26:	2b3f      	cmp	r3, #63	; 0x3f
 8006f28:	d845      	bhi.n	8006fb6 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006f2a:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xb4>)
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d11a      	bne.n	8006f7c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	88bb      	ldrh	r3, [r7, #4]
 8006f4a:	08db      	lsrs	r3, r3, #3
 8006f4c:	b298      	uxth	r0, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	01db      	lsls	r3, r3, #7
 8006f52:	4413      	add	r3, r2
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xb8>)
 8006f56:	5cd3      	ldrb	r3, [r2, r3]
 8006f58:	b25a      	sxtb	r2, r3
 8006f5a:	88bb      	ldrh	r3, [r7, #4]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b259      	sxtb	r1, r3
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	4413      	add	r3, r2
 8006f74:	b2c9      	uxtb	r1, r1
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xb8>)
 8006f78:	54d1      	strb	r1, [r2, r3]
 8006f7a:	e01d      	b.n	8006fb8 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	88bb      	ldrh	r3, [r7, #4]
 8006f80:	08db      	lsrs	r3, r3, #3
 8006f82:	b298      	uxth	r0, r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	01db      	lsls	r3, r3, #7
 8006f88:	4413      	add	r3, r2
 8006f8a:	4a0e      	ldr	r2, [pc, #56]	; (8006fc4 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xb8>)
 8006f8c:	5cd3      	ldrb	r3, [r2, r3]
 8006f8e:	b25a      	sxtb	r2, r3
 8006f90:	88bb      	ldrh	r3, [r7, #4]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2101      	movs	r1, #1
 8006f98:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	b259      	sxtb	r1, r3
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	01db      	lsls	r3, r3, #7
 8006fac:	4413      	add	r3, r2
 8006fae:	b2c9      	uxtb	r1, r1
 8006fb0:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xb8>)
 8006fb2:	54d1      	strb	r1, [r2, r3]
 8006fb4:	e000      	b.n	8006fb8 <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t+0xac>
		return;
 8006fb6:	bf00      	nop
	}
}
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr
 8006fc0:	2000089c 	.word	0x2000089c
 8006fc4:	2000049c 	.word	0x2000049c

08006fc8 <_Z14SSD1306_GotoXYtt>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460a      	mov	r2, r1
 8006fd2:	80fb      	strh	r3, [r7, #6]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006fd8:	4a05      	ldr	r2, [pc, #20]	; (8006ff0 <_Z14SSD1306_GotoXYtt+0x28>)
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006fde:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <_Z14SSD1306_GotoXYtt+0x28>)
 8006fe0:	88bb      	ldrh	r3, [r7, #4]
 8006fe2:	8053      	strh	r3, [r2, #2]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	2000089c 	.word	0x2000089c

08006ff4 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
 8007000:	4613      	mov	r3, r2
 8007002:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007004:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	4413      	add	r3, r2
	if (
 8007010:	2b7f      	cmp	r3, #127	; 0x7f
 8007012:	dc07      	bgt.n	8007024 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8007014:	4b36      	ldr	r3, [pc, #216]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 8007016:	885b      	ldrh	r3, [r3, #2]
 8007018:	461a      	mov	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007020:	2b3f      	cmp	r3, #63	; 0x3f
 8007022:	dd01      	ble.n	8007028 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0x34>
	) {
		/* Error */
		return 0;
 8007024:	2300      	movs	r3, #0
 8007026:	e05e      	b.n	80070e6 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	461a      	mov	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4293      	cmp	r3, r2
 8007036:	d24c      	bcs.n	80070d2 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xde>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	3b20      	subs	r3, #32
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	7849      	ldrb	r1, [r1, #1]
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4619      	mov	r1, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	440b      	add	r3, r1
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4293      	cmp	r3, r2
 8007064:	d231      	bcs.n	80070ca <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xd6>
			if ((b << j) & 0x8000) {
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xa4>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 8007078:	881a      	ldrh	r2, [r3, #0]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	b29b      	uxth	r3, r3
 800707e:	4413      	add	r3, r2
 8007080:	b298      	uxth	r0, r3
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 8007084:	885a      	ldrh	r2, [r3, #2]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	b29b      	uxth	r3, r3
 800708a:	4413      	add	r3, r2
 800708c:	b29b      	uxth	r3, r3
 800708e:	79ba      	ldrb	r2, [r7, #6]
 8007090:	4619      	mov	r1, r3
 8007092:	f7ff ff3b 	bl	8006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>
 8007096:	e014      	b.n	80070c2 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xce>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 800709a:	881a      	ldrh	r2, [r3, #0]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	b298      	uxth	r0, r3
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 80070a6:	885a      	ldrh	r2, [r3, #2]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	b299      	uxth	r1, r3
 80070b0:	79bb      	ldrb	r3, [r7, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	f7ff ff25 	bl	8006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>
		for (j = 0; j < Font->FontWidth; j++) {
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	e7c7      	b.n	800705a <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	3301      	adds	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e7ac      	b.n	800702c <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0x38>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4413      	add	r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t+0xfc>)
 80070e2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80070e4:	79fb      	ldrb	r3, [r7, #7]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	2000089c 	.word	0x2000089c

080070f4 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d018      	beq.n	800713c <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t+0x48>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	79fa      	ldrb	r2, [r7, #7]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff ff6e 	bl	8006ff4 <_Z12SSD1306_PutccP9FontDef_t15SSD1306_COLOR_t>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t+0x40>
			/* Return error */
			return *str;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	e005      	b.n	8007140 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t+0x4c>
		}
		
		/* Increase string pointer */
		str++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800713a:	e7e2      	b.n	8007102 <_Z12SSD1306_PutsPcP9FontDef_t15SSD1306_COLOR_t+0xe>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	781b      	ldrb	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	4623      	mov	r3, r4
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4603      	mov	r3, r0
 800715c:	80bb      	strh	r3, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	807b      	strh	r3, [r7, #2]
 8007162:	4613      	mov	r3, r2
 8007164:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	2b7f      	cmp	r3, #127	; 0x7f
 800716a:	d901      	bls.n	8007170 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x28>
		x0 = SSD1306_WIDTH - 1;
 800716c:	237f      	movs	r3, #127	; 0x7f
 800716e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8007170:	887b      	ldrh	r3, [r7, #2]
 8007172:	2b7f      	cmp	r3, #127	; 0x7f
 8007174:	d901      	bls.n	800717a <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x32>
		x1 = SSD1306_WIDTH - 1;
 8007176:	237f      	movs	r3, #127	; 0x7f
 8007178:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800717a:	88bb      	ldrh	r3, [r7, #4]
 800717c:	2b3f      	cmp	r3, #63	; 0x3f
 800717e:	d901      	bls.n	8007184 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8007180:	233f      	movs	r3, #63	; 0x3f
 8007182:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8007184:	883b      	ldrh	r3, [r7, #0]
 8007186:	2b3f      	cmp	r3, #63	; 0x3f
 8007188:	d901      	bls.n	800718e <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800718a:	233f      	movs	r3, #63	; 0x3f
 800718c:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	887b      	ldrh	r3, [r7, #2]
 8007192:	429a      	cmp	r2, r3
 8007194:	d205      	bcs.n	80071a2 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x5a>
 8007196:	887a      	ldrh	r2, [r7, #2]
 8007198:	88fb      	ldrh	r3, [r7, #6]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	b29b      	uxth	r3, r3
 800719e:	b21b      	sxth	r3, r3
 80071a0:	e004      	b.n	80071ac <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x64>
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80071ae:	88ba      	ldrh	r2, [r7, #4]
 80071b0:	883b      	ldrh	r3, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d205      	bcs.n	80071c2 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x7a>
 80071b6:	883a      	ldrh	r2, [r7, #0]
 80071b8:	88bb      	ldrh	r3, [r7, #4]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	b29b      	uxth	r3, r3
 80071be:	b21b      	sxth	r3, r3
 80071c0:	e004      	b.n	80071cc <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x84>
 80071c2:	88ba      	ldrh	r2, [r7, #4]
 80071c4:	883b      	ldrh	r3, [r7, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	887b      	ldrh	r3, [r7, #2]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d201      	bcs.n	80071da <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x92>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e001      	b.n	80071de <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x96>
 80071da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071de:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80071e0:	88ba      	ldrh	r2, [r7, #4]
 80071e2:	883b      	ldrh	r3, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d201      	bcs.n	80071ec <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0xa4>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e001      	b.n	80071f0 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0xa8>
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80071f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80071f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	dd06      	ble.n	800720c <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0xc4>
 80071fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007202:	0fda      	lsrs	r2, r3, #31
 8007204:	4413      	add	r3, r2
 8007206:	105b      	asrs	r3, r3, #1
 8007208:	b21b      	sxth	r3, r3
 800720a:	e006      	b.n	800721a <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0xd2>
 800720c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007210:	0fda      	lsrs	r2, r3, #31
 8007212:	4413      	add	r3, r2
 8007214:	105b      	asrs	r3, r3, #1
 8007216:	425b      	negs	r3, r3
 8007218:	b21b      	sxth	r3, r3
 800721a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800721c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d128      	bne.n	8007276 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x12e>
		if (y1 < y0) {
 8007224:	883a      	ldrh	r2, [r7, #0]
 8007226:	88bb      	ldrh	r3, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d205      	bcs.n	8007238 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0xf0>
			tmp = y1;
 800722c:	883b      	ldrh	r3, [r7, #0]
 800722e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8007230:	88bb      	ldrh	r3, [r7, #4]
 8007232:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	429a      	cmp	r2, r3
 800723e:	d205      	bcs.n	800724c <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x104>
			tmp = x1;
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8007248:	893b      	ldrh	r3, [r7, #8]
 800724a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800724c:	88bb      	ldrh	r3, [r7, #4]
 800724e:	82bb      	strh	r3, [r7, #20]
 8007250:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007254:	883b      	ldrh	r3, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	dc6b      	bgt.n	8007332 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1ea>
			SSD1306_DrawPixel(x0, i, c);
 800725a:	8ab9      	ldrh	r1, [r7, #20]
 800725c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fe52 	bl	8006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>
		for (i = y0; i <= y1; i++) {
 8007268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800726c:	b29b      	uxth	r3, r3
 800726e:	3301      	adds	r3, #1
 8007270:	b29b      	uxth	r3, r3
 8007272:	82bb      	strh	r3, [r7, #20]
 8007274:	e7ec      	b.n	8007250 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x108>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8007276:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d128      	bne.n	80072d0 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x188>
		if (y1 < y0) {
 800727e:	883a      	ldrh	r2, [r7, #0]
 8007280:	88bb      	ldrh	r3, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d205      	bcs.n	8007292 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x14a>
			tmp = y1;
 8007286:	883b      	ldrh	r3, [r7, #0]
 8007288:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800728a:	88bb      	ldrh	r3, [r7, #4]
 800728c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800728e:	893b      	ldrh	r3, [r7, #8]
 8007290:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8007292:	887a      	ldrh	r2, [r7, #2]
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	429a      	cmp	r2, r3
 8007298:	d205      	bcs.n	80072a6 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x15e>
			tmp = x1;
 800729a:	887b      	ldrh	r3, [r7, #2]
 800729c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80072a2:	893b      	ldrh	r3, [r7, #8]
 80072a4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	82bb      	strh	r3, [r7, #20]
 80072aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80072ae:	887b      	ldrh	r3, [r7, #2]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	dc40      	bgt.n	8007336 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1ee>
			SSD1306_DrawPixel(i, y0, c);
 80072b4:	8abb      	ldrh	r3, [r7, #20]
 80072b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80072ba:	88b9      	ldrh	r1, [r7, #4]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fe25 	bl	8006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>
		for (i = x0; i <= x1; i++) {
 80072c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3301      	adds	r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	82bb      	strh	r3, [r7, #20]
 80072ce:	e7ec      	b.n	80072aa <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x162>
		/* Return from function */
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80072d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80072d4:	88b9      	ldrh	r1, [r7, #4]
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fe17 	bl	8006f0c <_Z17SSD1306_DrawPixeltt15SSD1306_COLOR_t>
		if (x0 == x1 && y0 == y1) {
 80072de:	88fa      	ldrh	r2, [r7, #6]
 80072e0:	887b      	ldrh	r3, [r7, #2]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d103      	bne.n	80072ee <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1a6>
 80072e6:	88ba      	ldrh	r2, [r7, #4]
 80072e8:	883b      	ldrh	r3, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d025      	beq.n	800733a <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1f2>
			break;
		}
		e2 = err; 
 80072ee:	8afb      	ldrh	r3, [r7, #22]
 80072f0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80072f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80072f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072fa:	425b      	negs	r3, r3
 80072fc:	429a      	cmp	r2, r3
 80072fe:	dd08      	ble.n	8007312 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1ca>
			err -= dy;
 8007300:	8afa      	ldrh	r2, [r7, #22]
 8007302:	8a3b      	ldrh	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800730a:	89fa      	ldrh	r2, [r7, #14]
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	4413      	add	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8007312:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007316:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	dad8      	bge.n	80072d0 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x188>
			err += dx;
 800731e:	8afa      	ldrh	r2, [r7, #22]
 8007320:	8a7b      	ldrh	r3, [r7, #18]
 8007322:	4413      	add	r3, r2
 8007324:	b29b      	uxth	r3, r3
 8007326:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8007328:	89ba      	ldrh	r2, [r7, #12]
 800732a:	88bb      	ldrh	r3, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8007330:	e7ce      	b.n	80072d0 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x188>
		return;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1f4>
		return;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t+0x1f4>
			break;
 800733a:	bf00      	nop
		} 
	}
}
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd90      	pop	{r4, r7, pc}

08007342 <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8007342:	b590      	push	{r4, r7, lr}
 8007344:	b085      	sub	sp, #20
 8007346:	af02      	add	r7, sp, #8
 8007348:	4604      	mov	r4, r0
 800734a:	4608      	mov	r0, r1
 800734c:	4611      	mov	r1, r2
 800734e:	461a      	mov	r2, r3
 8007350:	4623      	mov	r3, r4
 8007352:	80fb      	strh	r3, [r7, #6]
 8007354:	4603      	mov	r3, r0
 8007356:	80bb      	strh	r3, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	807b      	strh	r3, [r7, #2]
 800735c:	4613      	mov	r3, r2
 800735e:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b7f      	cmp	r3, #127	; 0x7f
 8007364:	d853      	bhi.n	800740e <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t+0xcc>
		x >= SSD1306_WIDTH ||
 8007366:	88bb      	ldrh	r3, [r7, #4]
 8007368:	2b3f      	cmp	r3, #63	; 0x3f
 800736a:	d850      	bhi.n	800740e <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800736c:	88fa      	ldrh	r2, [r7, #6]
 800736e:	887b      	ldrh	r3, [r7, #2]
 8007370:	4413      	add	r3, r2
 8007372:	2b7f      	cmp	r3, #127	; 0x7f
 8007374:	dd03      	ble.n	800737e <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t+0x3c>
		w = SSD1306_WIDTH - x;
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800737c:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800737e:	88ba      	ldrh	r2, [r7, #4]
 8007380:	883b      	ldrh	r3, [r7, #0]
 8007382:	4413      	add	r3, r2
 8007384:	2b3f      	cmp	r3, #63	; 0x3f
 8007386:	dd03      	ble.n	8007390 <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t+0x4e>
		h = SSD1306_HEIGHT - y;
 8007388:	88bb      	ldrh	r3, [r7, #4]
 800738a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800738e:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8007390:	88fa      	ldrh	r2, [r7, #6]
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	4413      	add	r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	88bc      	ldrh	r4, [r7, #4]
 800739a:	88b9      	ldrh	r1, [r7, #4]
 800739c:	88f8      	ldrh	r0, [r7, #6]
 800739e:	7e3b      	ldrb	r3, [r7, #24]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4623      	mov	r3, r4
 80073a4:	f7ff fed0 	bl	8007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80073a8:	88ba      	ldrh	r2, [r7, #4]
 80073aa:	883b      	ldrh	r3, [r7, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	b299      	uxth	r1, r3
 80073b0:	88fa      	ldrh	r2, [r7, #6]
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	4413      	add	r3, r2
 80073b6:	b29c      	uxth	r4, r3
 80073b8:	88ba      	ldrh	r2, [r7, #4]
 80073ba:	883b      	ldrh	r3, [r7, #0]
 80073bc:	4413      	add	r3, r2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	88f8      	ldrh	r0, [r7, #6]
 80073c2:	7e3b      	ldrb	r3, [r7, #24]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	4622      	mov	r2, r4
 80073ca:	f7ff febd 	bl	8007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80073ce:	88ba      	ldrh	r2, [r7, #4]
 80073d0:	883b      	ldrh	r3, [r7, #0]
 80073d2:	4413      	add	r3, r2
 80073d4:	b29c      	uxth	r4, r3
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	88b9      	ldrh	r1, [r7, #4]
 80073da:	88f8      	ldrh	r0, [r7, #6]
 80073dc:	7e3b      	ldrb	r3, [r7, #24]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	4623      	mov	r3, r4
 80073e2:	f7ff feb1 	bl	8007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	887b      	ldrh	r3, [r7, #2]
 80073ea:	4413      	add	r3, r2
 80073ec:	b298      	uxth	r0, r3
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	887b      	ldrh	r3, [r7, #2]
 80073f2:	4413      	add	r3, r2
 80073f4:	b29c      	uxth	r4, r3
 80073f6:	88ba      	ldrh	r2, [r7, #4]
 80073f8:	883b      	ldrh	r3, [r7, #0]
 80073fa:	4413      	add	r3, r2
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	88b9      	ldrh	r1, [r7, #4]
 8007400:	7e3b      	ldrb	r3, [r7, #24]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	4622      	mov	r2, r4
 8007408:	f7ff fe9e 	bl	8007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>
 800740c:	e000      	b.n	8007410 <_Z21SSD1306_DrawRectangletttt15SSD1306_COLOR_t+0xce>
		return;
 800740e:	bf00      	nop
}
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bd90      	pop	{r4, r7, pc}

08007416 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8007416:	b590      	push	{r4, r7, lr}
 8007418:	b087      	sub	sp, #28
 800741a:	af02      	add	r7, sp, #8
 800741c:	4604      	mov	r4, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	80fb      	strh	r3, [r7, #6]
 8007428:	4603      	mov	r3, r0
 800742a:	80bb      	strh	r3, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	807b      	strh	r3, [r7, #2]
 8007430:	4613      	mov	r3, r2
 8007432:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b7f      	cmp	r3, #127	; 0x7f
 8007438:	d834      	bhi.n	80074a4 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x8e>
		x >= SSD1306_WIDTH ||
 800743a:	88bb      	ldrh	r3, [r7, #4]
 800743c:	2b3f      	cmp	r3, #63	; 0x3f
 800743e:	d831      	bhi.n	80074a4 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x8e>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	4413      	add	r3, r2
 8007446:	2b7f      	cmp	r3, #127	; 0x7f
 8007448:	dd03      	ble.n	8007452 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x3c>
		w = SSD1306_WIDTH - x;
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007450:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8007452:	88ba      	ldrh	r2, [r7, #4]
 8007454:	883b      	ldrh	r3, [r7, #0]
 8007456:	4413      	add	r3, r2
 8007458:	2b3f      	cmp	r3, #63	; 0x3f
 800745a:	dd03      	ble.n	8007464 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x4e>
		h = SSD1306_HEIGHT - y;
 800745c:	88bb      	ldrh	r3, [r7, #4]
 800745e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007462:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
 8007468:	7bfa      	ldrb	r2, [r7, #15]
 800746a:	883b      	ldrh	r3, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	dc1a      	bgt.n	80074a6 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x90>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	b29a      	uxth	r2, r3
 8007474:	88bb      	ldrh	r3, [r7, #4]
 8007476:	4413      	add	r3, r2
 8007478:	b299      	uxth	r1, r3
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	887b      	ldrh	r3, [r7, #2]
 800747e:	4413      	add	r3, r2
 8007480:	b29c      	uxth	r4, r3
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	b29a      	uxth	r2, r3
 8007486:	88bb      	ldrh	r3, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	b29a      	uxth	r2, r3
 800748c:	88f8      	ldrh	r0, [r7, #6]
 800748e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	4622      	mov	r2, r4
 8007498:	f7ff fe56 	bl	8007148 <_Z16SSD1306_DrawLinetttt15SSD1306_COLOR_t>
	for (i = 0; i <= h; i++) {
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	3301      	adds	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
 80074a2:	e7e1      	b.n	8007468 <_Z27SSD1306_DrawFilledRectangletttt15SSD1306_COLOR_t+0x52>
		return;
 80074a4:	bf00      	nop
	}
}
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd90      	pop	{r4, r7, pc}

080074ac <_Z16ssd1306_I2C_Initv>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <_Z16ssd1306_I2C_Initv+0x24>)
 80074b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <_Z16ssd1306_I2C_Initv+0x18>
		p--;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3b01      	subs	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80074c2:	e7f8      	b.n	80074b6 <_Z16ssd1306_I2C_Initv+0xa>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	0003d090 	.word	0x0003d090

080074d4 <_Z22ssd1306_I2C_WriteMultihhPht>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b0c7      	sub	sp, #284	; 0x11c
 80074d8:	af02      	add	r7, sp, #8
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	4639      	mov	r1, r7
 80074e0:	600a      	str	r2, [r1, #0]
 80074e2:	4619      	mov	r1, r3
 80074e4:	1dfb      	adds	r3, r7, #7
 80074e6:	4622      	mov	r2, r4
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	1dbb      	adds	r3, r7, #6
 80074ec:	4602      	mov	r2, r0
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	460a      	mov	r2, r1
 80074f4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	1dba      	adds	r2, r7, #6
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007506:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	da11      	bge.n	8007536 <_Z22ssd1306_I2C_WriteMultihhPht+0x62>
dt[i+1] = data[i];
 8007512:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007516:	463a      	mov	r2, r7
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	441a      	add	r2, r3
 800751c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007520:	3301      	adds	r3, #1
 8007522:	7811      	ldrb	r1, [r2, #0]
 8007524:	f107 020c 	add.w	r2, r7, #12
 8007528:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800752a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800752e:	3301      	adds	r3, #1
 8007530:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007534:	e7e7      	b.n	8007506 <_Z22ssd1306_I2C_WriteMultihhPht+0x32>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8007536:	1dfb      	adds	r3, r7, #7
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b299      	uxth	r1, r3
 800753c:	1d3b      	adds	r3, r7, #4
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	f107 020c 	add.w	r2, r7, #12
 8007548:	200a      	movs	r0, #10
 800754a:	9000      	str	r0, [sp, #0]
 800754c:	4803      	ldr	r0, [pc, #12]	; (800755c <_Z22ssd1306_I2C_WriteMultihhPht+0x88>)
 800754e:	f7fa f93d 	bl	80017cc <HAL_I2C_Master_Transmit>
}
 8007552:	bf00      	nop
 8007554:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8007558:	46bd      	mov	sp, r7
 800755a:	bd90      	pop	{r4, r7, pc}
 800755c:	200002a0 	.word	0x200002a0

08007560 <_Z17ssd1306_I2C_Writehhh>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af02      	add	r7, sp, #8
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
 800756a:	460b      	mov	r3, r1
 800756c:	71bb      	strb	r3, [r7, #6]
 800756e:	4613      	mov	r3, r2
 8007570:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8007572:	79bb      	ldrb	r3, [r7, #6]
 8007574:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8007576:	797b      	ldrb	r3, [r7, #5]
 8007578:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	b299      	uxth	r1, r3
 800757e:	f107 020c 	add.w	r2, r7, #12
 8007582:	230a      	movs	r3, #10
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2302      	movs	r3, #2
 8007588:	4803      	ldr	r0, [pc, #12]	; (8007598 <_Z17ssd1306_I2C_Writehhh+0x38>)
 800758a:	f7fa f91f 	bl	80017cc <HAL_I2C_Master_Transmit>
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200002a0 	.word	0x200002a0

0800759c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <HAL_MspInit+0x5c>)
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <HAL_MspInit+0x5c>)
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	6193      	str	r3, [r2, #24]
 80075ae:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <HAL_MspInit+0x5c>)
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <HAL_MspInit+0x5c>)
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4a0e      	ldr	r2, [pc, #56]	; (80075f8 <HAL_MspInit+0x5c>)
 80075c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c4:	61d3      	str	r3, [r2, #28]
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <HAL_MspInit+0x5c>)
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <HAL_MspInit+0x60>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	4a04      	ldr	r2, [pc, #16]	; (80075fc <HAL_MspInit+0x60>)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr
 80075f8:	40021000 	.word	0x40021000
 80075fc:	40010000 	.word	0x40010000

08007600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007608:	f107 0310 	add.w	r3, r7, #16
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a15      	ldr	r2, [pc, #84]	; (8007670 <HAL_I2C_MspInit+0x70>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d123      	bne.n	8007668 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007620:	4b14      	ldr	r3, [pc, #80]	; (8007674 <HAL_I2C_MspInit+0x74>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4a13      	ldr	r2, [pc, #76]	; (8007674 <HAL_I2C_MspInit+0x74>)
 8007626:	f043 0308 	orr.w	r3, r3, #8
 800762a:	6193      	str	r3, [r2, #24]
 800762c:	4b11      	ldr	r3, [pc, #68]	; (8007674 <HAL_I2C_MspInit+0x74>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007638:	23c0      	movs	r3, #192	; 0xc0
 800763a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800763c:	2312      	movs	r3, #18
 800763e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007640:	2303      	movs	r3, #3
 8007642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	4619      	mov	r1, r3
 800764a:	480b      	ldr	r0, [pc, #44]	; (8007678 <HAL_I2C_MspInit+0x78>)
 800764c:	f7f9 fdee 	bl	800122c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_I2C_MspInit+0x74>)
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4a07      	ldr	r2, [pc, #28]	; (8007674 <HAL_I2C_MspInit+0x74>)
 8007656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800765a:	61d3      	str	r3, [r2, #28]
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <HAL_I2C_MspInit+0x74>)
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007668:	bf00      	nop
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40005400 	.word	0x40005400
 8007674:	40021000 	.word	0x40021000
 8007678:	40010c00 	.word	0x40010c00

0800767c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	609a      	str	r2, [r3, #8]
 8007690:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <HAL_SPI_MspInit+0x74>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d124      	bne.n	80076e6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800769c:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 80076a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076a6:	61d3      	str	r3, [r2, #28]
 80076a8:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	4a0e      	ldr	r2, [pc, #56]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 80076ba:	f043 0308 	orr.w	r3, r3, #8
 80076be:	6193      	str	r3, [r2, #24]
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <HAL_SPI_MspInit+0x78>)
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80076cc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80076d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d2:	2302      	movs	r3, #2
 80076d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076d6:	2303      	movs	r3, #3
 80076d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076da:	f107 0310 	add.w	r3, r7, #16
 80076de:	4619      	mov	r1, r3
 80076e0:	4805      	ldr	r0, [pc, #20]	; (80076f8 <HAL_SPI_MspInit+0x7c>)
 80076e2:	f7f9 fda3 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80076e6:	bf00      	nop
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40003800 	.word	0x40003800
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40010c00 	.word	0x40010c00

080076fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <HAL_TIM_Base_MspInit+0x78>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d114      	bne.n	8007738 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	4a19      	ldr	r2, [pc, #100]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 8007714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007718:	6193      	str	r3, [r2, #24]
 800771a:	4b17      	ldr	r3, [pc, #92]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007726:	2200      	movs	r2, #0
 8007728:	2100      	movs	r1, #0
 800772a:	2019      	movs	r0, #25
 800772c:	f7f9 fb59 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007730:	2019      	movs	r0, #25
 8007732:	f7f9 fb72 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007736:	e018      	b.n	800776a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a0f      	ldr	r2, [pc, #60]	; (800777c <HAL_TIM_Base_MspInit+0x80>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d113      	bne.n	800776a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	61d3      	str	r3, [r2, #28]
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_TIM_Base_MspInit+0x7c>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	60bb      	str	r3, [r7, #8]
 8007758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	201e      	movs	r0, #30
 8007760:	f7f9 fb3f 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007764:	201e      	movs	r0, #30
 8007766:	f7f9 fb58 	bl	8000e1a <HAL_NVIC_EnableIRQ>
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40021000 	.word	0x40021000
 800777c:	40000800 	.word	0x40000800

08007780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	609a      	str	r2, [r3, #8]
 8007794:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a10      	ldr	r2, [pc, #64]	; (80077dc <HAL_TIM_MspPostInit+0x5c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d118      	bne.n	80077d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <HAL_TIM_MspPostInit+0x60>)
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	4a0e      	ldr	r2, [pc, #56]	; (80077e0 <HAL_TIM_MspPostInit+0x60>)
 80077a6:	f043 0304 	orr.w	r3, r3, #4
 80077aa:	6193      	str	r3, [r2, #24]
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_TIM_MspPostInit+0x60>)
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80077b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077be:	2302      	movs	r3, #2
 80077c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c2:	2302      	movs	r3, #2
 80077c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	4619      	mov	r1, r3
 80077cc:	4805      	ldr	r0, [pc, #20]	; (80077e4 <HAL_TIM_MspPostInit+0x64>)
 80077ce:	f7f9 fd2d 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80077d2:	bf00      	nop
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40021000 	.word	0x40021000
 80077e4:	40010800 	.word	0x40010800

080077e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a3b      	ldr	r2, [pc, #236]	; (80078f0 <HAL_UART_MspInit+0x108>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d16f      	bne.n	80078e8 <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007808:	4b3a      	ldr	r3, [pc, #232]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	4a39      	ldr	r2, [pc, #228]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 800780e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007812:	61d3      	str	r3, [r2, #28]
 8007814:	4b37      	ldr	r3, [pc, #220]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007820:	4b34      	ldr	r3, [pc, #208]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	4a33      	ldr	r2, [pc, #204]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 8007826:	f043 0304 	orr.w	r3, r3, #4
 800782a:	6193      	str	r3, [r2, #24]
 800782c:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <HAL_UART_MspInit+0x10c>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007838:	2304      	movs	r3, #4
 800783a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800783c:	2312      	movs	r3, #18
 800783e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007840:	2303      	movs	r3, #3
 8007842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007844:	f107 0310 	add.w	r3, r7, #16
 8007848:	4619      	mov	r1, r3
 800784a:	482b      	ldr	r0, [pc, #172]	; (80078f8 <HAL_UART_MspInit+0x110>)
 800784c:	f7f9 fcee 	bl	800122c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8007850:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007852:	4a2b      	ldr	r2, [pc, #172]	; (8007900 <HAL_UART_MspInit+0x118>)
 8007854:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007856:	4b29      	ldr	r3, [pc, #164]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007858:	2210      	movs	r2, #16
 800785a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800785c:	4b27      	ldr	r3, [pc, #156]	; (80078fc <HAL_UART_MspInit+0x114>)
 800785e:	2200      	movs	r2, #0
 8007860:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007862:	4b26      	ldr	r3, [pc, #152]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007864:	2280      	movs	r2, #128	; 0x80
 8007866:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007868:	4b24      	ldr	r3, [pc, #144]	; (80078fc <HAL_UART_MspInit+0x114>)
 800786a:	2200      	movs	r2, #0
 800786c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800786e:	4b23      	ldr	r3, [pc, #140]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007870:	2200      	movs	r2, #0
 8007872:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007874:	4b21      	ldr	r3, [pc, #132]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800787a:	4b20      	ldr	r3, [pc, #128]	; (80078fc <HAL_UART_MspInit+0x114>)
 800787c:	2200      	movs	r2, #0
 800787e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007880:	481e      	ldr	r0, [pc, #120]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007882:	f7f9 fae5 	bl	8000e50 <HAL_DMA_Init>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 800788c:	f7fe ffe2 	bl	8006854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
 8007896:	4a19      	ldr	r2, [pc, #100]	; (80078fc <HAL_UART_MspInit+0x114>)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <HAL_UART_MspInit+0x11c>)
 800789e:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <HAL_UART_MspInit+0x120>)
 80078a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078a2:	4b18      	ldr	r3, [pc, #96]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078a8:	4b16      	ldr	r3, [pc, #88]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078ae:	4b15      	ldr	r3, [pc, #84]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078b4:	4b13      	ldr	r3, [pc, #76]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80078cc:	480d      	ldr	r0, [pc, #52]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078ce:	f7f9 fabf 	bl	8000e50 <HAL_DMA_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80078d8:	f7fe ffbc 	bl	8006854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34
 80078e2:	4a08      	ldr	r2, [pc, #32]	; (8007904 <HAL_UART_MspInit+0x11c>)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80078e8:	bf00      	nop
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40004400 	.word	0x40004400
 80078f4:	40021000 	.word	0x40021000
 80078f8:	40010800 	.word	0x40010800
 80078fc:	2000040c 	.word	0x2000040c
 8007900:	40020080 	.word	0x40020080
 8007904:	20000450 	.word	0x20000450
 8007908:	4002006c 	.word	0x4002006c

0800790c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800791c:	e7fe      	b.n	800791c <HardFault_Handler+0x4>

0800791e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800791e:	b480      	push	{r7}
 8007920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007922:	e7fe      	b.n	8007922 <MemManage_Handler+0x4>

08007924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007928:	e7fe      	b.n	8007928 <BusFault_Handler+0x4>

0800792a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800792a:	b480      	push	{r7}
 800792c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800792e:	e7fe      	b.n	800792e <UsageFault_Handler+0x4>

08007930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007940:	bf00      	nop
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800794c:	bf00      	nop
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr

08007954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timer1++;
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <SysTick_Handler+0x18>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3301      	adds	r3, #1
 800795e:	4a03      	ldr	r2, [pc, #12]	; (800796c <SysTick_Handler+0x18>)
 8007960:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007962:	f7f9 f927 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000494 	.word	0x20000494

08007970 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <DMA1_Channel6_IRQHandler+0x10>)
 8007976:	f7f9 fb25 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000450 	.word	0x20000450

08007984 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007988:	4802      	ldr	r0, [pc, #8]	; (8007994 <DMA1_Channel7_IRQHandler+0x10>)
 800798a:	f7f9 fb1b 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	2000040c 	.word	0x2000040c

08007998 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800799c:	4802      	ldr	r0, [pc, #8]	; (80079a8 <TIM1_UP_IRQHandler+0x10>)
 800799e:	f7fc fa8a 	bl	8003eb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80079a2:	bf00      	nop
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	2000034c 	.word	0x2000034c

080079ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80079b0:	4802      	ldr	r0, [pc, #8]	; (80079bc <TIM4_IRQHandler+0x10>)
 80079b2:	f7fc fa80 	bl	8003eb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80079b6:	bf00      	nop
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	2000038c 	.word	0x2000038c

080079c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
	return 1;
 80079c4:	2301      	movs	r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <_kill>:

int _kill(int pid, int sig)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80079d8:	f000 f93c 	bl	8007c54 <__errno>
 80079dc:	4603      	mov	r3, r0
 80079de:	2216      	movs	r2, #22
 80079e0:	601a      	str	r2, [r3, #0]
	return -1;
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_exit>:

void _exit (int status)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80079f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff ffe7 	bl	80079ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8007a00:	e7fe      	b.n	8007a00 <_exit+0x12>

08007a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	e00a      	b.n	8007a2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007a14:	f3af 8000 	nop.w
 8007a18:	4601      	mov	r1, r0
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	60ba      	str	r2, [r7, #8]
 8007a20:	b2ca      	uxtb	r2, r1
 8007a22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3301      	adds	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	dbf0      	blt.n	8007a14 <_read+0x12>
	}

return len;
 8007a32:	687b      	ldr	r3, [r7, #4]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e009      	b.n	8007a62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	60ba      	str	r2, [r7, #8]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	dbf1      	blt.n	8007a4e <_write+0x12>
	}
	return len;
 8007a6a:	687b      	ldr	r3, [r7, #4]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <_close>:

int _close(int file)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	return -1;
 8007a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <_isatty>:

int _isatty(int file)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	return 1;
 8007ab0:	2301      	movs	r3, #1
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr

08007ad4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007adc:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <_sbrk+0x50>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <_sbrk+0x16>
		heap_end = &end;
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <_sbrk+0x50>)
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <_sbrk+0x54>)
 8007ae8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <_sbrk+0x50>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <_sbrk+0x50>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	466a      	mov	r2, sp
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d907      	bls.n	8007b0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007afe:	f000 f8a9 	bl	8007c54 <__errno>
 8007b02:	4603      	mov	r3, r0
 8007b04:	220c      	movs	r2, #12
 8007b06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b0c:	e006      	b.n	8007b1c <_sbrk+0x48>
	}

	heap_end += incr;
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <_sbrk+0x50>)
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <_sbrk+0x50>)
 8007b18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	200008a4 	.word	0x200008a4
 8007b28:	20000930 	.word	0x20000930

08007b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007b30:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <SystemInit+0x5c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <SystemInit+0x5c>)
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <SystemInit+0x5c>)
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4911      	ldr	r1, [pc, #68]	; (8007b88 <SystemInit+0x5c>)
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <SystemInit+0x60>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007b48:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <SystemInit+0x5c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a0e      	ldr	r2, [pc, #56]	; (8007b88 <SystemInit+0x5c>)
 8007b4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007b58:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <SystemInit+0x5c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <SystemInit+0x5c>)
 8007b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <SystemInit+0x5c>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a07      	ldr	r2, [pc, #28]	; (8007b88 <SystemInit+0x5c>)
 8007b6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007b6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <SystemInit+0x5c>)
 8007b72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007b76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <SystemInit+0x64>)
 8007b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8007b80:	bf00      	nop
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	f8ff0000 	.word	0xf8ff0000
 8007b90:	e000ed00 	.word	0xe000ed00

08007b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007b94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007b96:	e003      	b.n	8007ba0 <LoopCopyDataInit>

08007b98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007b9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007b9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007b9e:	3104      	adds	r1, #4

08007ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007ba0:	480a      	ldr	r0, [pc, #40]	; (8007bcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007ba4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007ba6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007ba8:	d3f6      	bcc.n	8007b98 <CopyDataInit>
  ldr r2, =_sbss
 8007baa:	4a0a      	ldr	r2, [pc, #40]	; (8007bd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007bac:	e002      	b.n	8007bb4 <LoopFillZerobss>

08007bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007bae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007bb0:	f842 3b04 	str.w	r3, [r2], #4

08007bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007bb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007bb8:	d3f9      	bcc.n	8007bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007bba:	f7ff ffb7 	bl	8007b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bbe:	f000 f84f 	bl	8007c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007bc2:	f7fe fad5 	bl	8006170 <main>
  bx lr
 8007bc6:	4770      	bx	lr
  ldr r3, =_sidata
 8007bc8:	0800bfc4 	.word	0x0800bfc4
  ldr r0, =_sdata
 8007bcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007bd0:	2000024c 	.word	0x2000024c
  ldr r2, =_sbss
 8007bd4:	2000024c 	.word	0x2000024c
  ldr r3, = _ebss
 8007bd8:	2000092c 	.word	0x2000092c

08007bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007bdc:	e7fe      	b.n	8007bdc <ADC1_2_IRQHandler>

08007bde <_ZdlPvj>:
 8007bde:	f000 b814 	b.w	8007c0a <_ZdlPv>

08007be2 <_Znwj>:
 8007be2:	2801      	cmp	r0, #1
 8007be4:	bf38      	it	cc
 8007be6:	2001      	movcc	r0, #1
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4604      	mov	r4, r0
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f85b 	bl	8007ca8 <malloc>
 8007bf2:	b930      	cbnz	r0, 8007c02 <_Znwj+0x20>
 8007bf4:	f000 f81e 	bl	8007c34 <_ZSt15get_new_handlerv>
 8007bf8:	b908      	cbnz	r0, 8007bfe <_Znwj+0x1c>
 8007bfa:	f000 f823 	bl	8007c44 <abort>
 8007bfe:	4780      	blx	r0
 8007c00:	e7f4      	b.n	8007bec <_Znwj+0xa>
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <__cxa_pure_virtual>:
 8007c04:	b508      	push	{r3, lr}
 8007c06:	f000 f80f 	bl	8007c28 <_ZSt9terminatev>

08007c0a <_ZdlPv>:
 8007c0a:	f000 b855 	b.w	8007cb8 <free>

08007c0e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007c0e:	b508      	push	{r3, lr}
 8007c10:	4780      	blx	r0
 8007c12:	f000 f817 	bl	8007c44 <abort>
	...

08007c18 <_ZSt13get_terminatev>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <_ZSt13get_terminatev+0xc>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	f3bf 8f5b 	dmb	ish
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000078 	.word	0x20000078

08007c28 <_ZSt9terminatev>:
 8007c28:	b508      	push	{r3, lr}
 8007c2a:	f7ff fff5 	bl	8007c18 <_ZSt13get_terminatev>
 8007c2e:	f7ff ffee 	bl	8007c0e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08007c34 <_ZSt15get_new_handlerv>:
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <_ZSt15get_new_handlerv+0xc>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f3bf 8f5b 	dmb	ish
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	200008a8 	.word	0x200008a8

08007c44 <abort>:
 8007c44:	2006      	movs	r0, #6
 8007c46:	b508      	push	{r3, lr}
 8007c48:	f000 fd92 	bl	8008770 <raise>
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	f7ff fece 	bl	80079ee <_exit>
	...

08007c54 <__errno>:
 8007c54:	4b01      	ldr	r3, [pc, #4]	; (8007c5c <__errno+0x8>)
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	2000007c 	.word	0x2000007c

08007c60 <__libc_init_array>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	2600      	movs	r6, #0
 8007c64:	4d0c      	ldr	r5, [pc, #48]	; (8007c98 <__libc_init_array+0x38>)
 8007c66:	4c0d      	ldr	r4, [pc, #52]	; (8007c9c <__libc_init_array+0x3c>)
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	42a6      	cmp	r6, r4
 8007c6e:	d109      	bne.n	8007c84 <__libc_init_array+0x24>
 8007c70:	f002 fcf8 	bl	800a664 <_init>
 8007c74:	2600      	movs	r6, #0
 8007c76:	4d0a      	ldr	r5, [pc, #40]	; (8007ca0 <__libc_init_array+0x40>)
 8007c78:	4c0a      	ldr	r4, [pc, #40]	; (8007ca4 <__libc_init_array+0x44>)
 8007c7a:	1b64      	subs	r4, r4, r5
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	d105      	bne.n	8007c8e <__libc_init_array+0x2e>
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c88:	4798      	blx	r3
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	e7ee      	b.n	8007c6c <__libc_init_array+0xc>
 8007c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c92:	4798      	blx	r3
 8007c94:	3601      	adds	r6, #1
 8007c96:	e7f2      	b.n	8007c7e <__libc_init_array+0x1e>
 8007c98:	0800bfbc 	.word	0x0800bfbc
 8007c9c:	0800bfbc 	.word	0x0800bfbc
 8007ca0:	0800bfbc 	.word	0x0800bfbc
 8007ca4:	0800bfc0 	.word	0x0800bfc0

08007ca8 <malloc>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <malloc+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f000 b86d 	b.w	8007d8c <_malloc_r>
 8007cb2:	bf00      	nop
 8007cb4:	2000007c 	.word	0x2000007c

08007cb8 <free>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <free+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f000 b819 	b.w	8007cf4 <_free_r>
 8007cc2:	bf00      	nop
 8007cc4:	2000007c 	.word	0x2000007c

08007cc8 <memcpy>:
 8007cc8:	440a      	add	r2, r1
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cd0:	d100      	bne.n	8007cd4 <memcpy+0xc>
 8007cd2:	4770      	bx	lr
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ce0:	d1f9      	bne.n	8007cd6 <memcpy+0xe>
 8007ce2:	bd10      	pop	{r4, pc}

08007ce4 <memset>:
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4402      	add	r2, r0
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d100      	bne.n	8007cee <memset+0xa>
 8007cec:	4770      	bx	lr
 8007cee:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf2:	e7f9      	b.n	8007ce8 <memset+0x4>

08007cf4 <_free_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d043      	beq.n	8007d84 <_free_r+0x90>
 8007cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d00:	1f0c      	subs	r4, r1, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfb8      	it	lt
 8007d06:	18e4      	addlt	r4, r4, r3
 8007d08:	f001 fbde 	bl	80094c8 <__malloc_lock>
 8007d0c:	4a1e      	ldr	r2, [pc, #120]	; (8007d88 <_free_r+0x94>)
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	4610      	mov	r0, r2
 8007d12:	b933      	cbnz	r3, 8007d22 <_free_r+0x2e>
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6014      	str	r4, [r2, #0]
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1e:	f001 bbd9 	b.w	80094d4 <__malloc_unlock>
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d90a      	bls.n	8007d3c <_free_r+0x48>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	1862      	adds	r2, r4, r1
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf01      	itttt	eq
 8007d2e:	681a      	ldreq	r2, [r3, #0]
 8007d30:	685b      	ldreq	r3, [r3, #4]
 8007d32:	1852      	addeq	r2, r2, r1
 8007d34:	6022      	streq	r2, [r4, #0]
 8007d36:	6063      	str	r3, [r4, #4]
 8007d38:	6004      	str	r4, [r0, #0]
 8007d3a:	e7ed      	b.n	8007d18 <_free_r+0x24>
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b10b      	cbz	r3, 8007d46 <_free_r+0x52>
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	d9fa      	bls.n	8007d3c <_free_r+0x48>
 8007d46:	6811      	ldr	r1, [r2, #0]
 8007d48:	1850      	adds	r0, r2, r1
 8007d4a:	42a0      	cmp	r0, r4
 8007d4c:	d10b      	bne.n	8007d66 <_free_r+0x72>
 8007d4e:	6820      	ldr	r0, [r4, #0]
 8007d50:	4401      	add	r1, r0
 8007d52:	1850      	adds	r0, r2, r1
 8007d54:	4283      	cmp	r3, r0
 8007d56:	6011      	str	r1, [r2, #0]
 8007d58:	d1de      	bne.n	8007d18 <_free_r+0x24>
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4401      	add	r1, r0
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	6053      	str	r3, [r2, #4]
 8007d64:	e7d8      	b.n	8007d18 <_free_r+0x24>
 8007d66:	d902      	bls.n	8007d6e <_free_r+0x7a>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	e7d4      	b.n	8007d18 <_free_r+0x24>
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1821      	adds	r1, r4, r0
 8007d72:	428b      	cmp	r3, r1
 8007d74:	bf01      	itttt	eq
 8007d76:	6819      	ldreq	r1, [r3, #0]
 8007d78:	685b      	ldreq	r3, [r3, #4]
 8007d7a:	1809      	addeq	r1, r1, r0
 8007d7c:	6021      	streq	r1, [r4, #0]
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	6054      	str	r4, [r2, #4]
 8007d82:	e7c9      	b.n	8007d18 <_free_r+0x24>
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	200008ac 	.word	0x200008ac

08007d8c <_malloc_r>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	1ccd      	adds	r5, r1, #3
 8007d90:	f025 0503 	bic.w	r5, r5, #3
 8007d94:	3508      	adds	r5, #8
 8007d96:	2d0c      	cmp	r5, #12
 8007d98:	bf38      	it	cc
 8007d9a:	250c      	movcc	r5, #12
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	4606      	mov	r6, r0
 8007da0:	db01      	blt.n	8007da6 <_malloc_r+0x1a>
 8007da2:	42a9      	cmp	r1, r5
 8007da4:	d903      	bls.n	8007dae <_malloc_r+0x22>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	2000      	movs	r0, #0
 8007dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dae:	f001 fb8b 	bl	80094c8 <__malloc_lock>
 8007db2:	4921      	ldr	r1, [pc, #132]	; (8007e38 <_malloc_r+0xac>)
 8007db4:	680a      	ldr	r2, [r1, #0]
 8007db6:	4614      	mov	r4, r2
 8007db8:	b99c      	cbnz	r4, 8007de2 <_malloc_r+0x56>
 8007dba:	4f20      	ldr	r7, [pc, #128]	; (8007e3c <_malloc_r+0xb0>)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	b923      	cbnz	r3, 8007dca <_malloc_r+0x3e>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f000 fc9c 	bl	8008700 <_sbrk_r>
 8007dc8:	6038      	str	r0, [r7, #0]
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 fc97 	bl	8008700 <_sbrk_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d123      	bne.n	8007e1e <_malloc_r+0x92>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	4630      	mov	r0, r6
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	f001 fb7a 	bl	80094d4 <__malloc_unlock>
 8007de0:	e7e3      	b.n	8007daa <_malloc_r+0x1e>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	1b5b      	subs	r3, r3, r5
 8007de6:	d417      	bmi.n	8007e18 <_malloc_r+0x8c>
 8007de8:	2b0b      	cmp	r3, #11
 8007dea:	d903      	bls.n	8007df4 <_malloc_r+0x68>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	441c      	add	r4, r3
 8007df0:	6025      	str	r5, [r4, #0]
 8007df2:	e004      	b.n	8007dfe <_malloc_r+0x72>
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	42a2      	cmp	r2, r4
 8007df8:	bf0c      	ite	eq
 8007dfa:	600b      	streq	r3, [r1, #0]
 8007dfc:	6053      	strne	r3, [r2, #4]
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f001 fb68 	bl	80094d4 <__malloc_unlock>
 8007e04:	f104 000b 	add.w	r0, r4, #11
 8007e08:	1d23      	adds	r3, r4, #4
 8007e0a:	f020 0007 	bic.w	r0, r0, #7
 8007e0e:	1ac2      	subs	r2, r0, r3
 8007e10:	d0cc      	beq.n	8007dac <_malloc_r+0x20>
 8007e12:	1a1b      	subs	r3, r3, r0
 8007e14:	50a3      	str	r3, [r4, r2]
 8007e16:	e7c9      	b.n	8007dac <_malloc_r+0x20>
 8007e18:	4622      	mov	r2, r4
 8007e1a:	6864      	ldr	r4, [r4, #4]
 8007e1c:	e7cc      	b.n	8007db8 <_malloc_r+0x2c>
 8007e1e:	1cc4      	adds	r4, r0, #3
 8007e20:	f024 0403 	bic.w	r4, r4, #3
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d0e3      	beq.n	8007df0 <_malloc_r+0x64>
 8007e28:	1a21      	subs	r1, r4, r0
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f000 fc68 	bl	8008700 <_sbrk_r>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d1dd      	bne.n	8007df0 <_malloc_r+0x64>
 8007e34:	e7cf      	b.n	8007dd6 <_malloc_r+0x4a>
 8007e36:	bf00      	nop
 8007e38:	200008ac 	.word	0x200008ac
 8007e3c:	200008b0 	.word	0x200008b0

08007e40 <__cvt>:
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e46:	461f      	mov	r7, r3
 8007e48:	bfbb      	ittet	lt
 8007e4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e4e:	461f      	movlt	r7, r3
 8007e50:	2300      	movge	r3, #0
 8007e52:	232d      	movlt	r3, #45	; 0x2d
 8007e54:	b088      	sub	sp, #32
 8007e56:	4614      	mov	r4, r2
 8007e58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e5c:	7013      	strb	r3, [r2, #0]
 8007e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007e64:	f023 0820 	bic.w	r8, r3, #32
 8007e68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e6c:	d005      	beq.n	8007e7a <__cvt+0x3a>
 8007e6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e72:	d100      	bne.n	8007e76 <__cvt+0x36>
 8007e74:	3501      	adds	r5, #1
 8007e76:	2302      	movs	r3, #2
 8007e78:	e000      	b.n	8007e7c <__cvt+0x3c>
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	aa07      	add	r2, sp, #28
 8007e7e:	9204      	str	r2, [sp, #16]
 8007e80:	aa06      	add	r2, sp, #24
 8007e82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007e86:	e9cd 3500 	strd	r3, r5, [sp]
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	f000 fd1b 	bl	80088c8 <_dtoa_r>
 8007e92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e96:	4606      	mov	r6, r0
 8007e98:	d102      	bne.n	8007ea0 <__cvt+0x60>
 8007e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e9c:	07db      	lsls	r3, r3, #31
 8007e9e:	d522      	bpl.n	8007ee6 <__cvt+0xa6>
 8007ea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ea4:	eb06 0905 	add.w	r9, r6, r5
 8007ea8:	d110      	bne.n	8007ecc <__cvt+0x8c>
 8007eaa:	7833      	ldrb	r3, [r6, #0]
 8007eac:	2b30      	cmp	r3, #48	; 0x30
 8007eae:	d10a      	bne.n	8007ec6 <__cvt+0x86>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f7f8 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8007ebc:	b918      	cbnz	r0, 8007ec6 <__cvt+0x86>
 8007ebe:	f1c5 0501 	rsb	r5, r5, #1
 8007ec2:	f8ca 5000 	str.w	r5, [sl]
 8007ec6:	f8da 3000 	ldr.w	r3, [sl]
 8007eca:	4499      	add	r9, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fd68 	bl	80009a8 <__aeabi_dcmpeq>
 8007ed8:	b108      	cbz	r0, 8007ede <__cvt+0x9e>
 8007eda:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ede:	2230      	movs	r2, #48	; 0x30
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	454b      	cmp	r3, r9
 8007ee4:	d307      	bcc.n	8007ef6 <__cvt+0xb6>
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	9b07      	ldr	r3, [sp, #28]
 8007eea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eec:	1b9b      	subs	r3, r3, r6
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	b008      	add	sp, #32
 8007ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	9107      	str	r1, [sp, #28]
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e7f0      	b.n	8007ee0 <__cvt+0xa0>

08007efe <__exponent>:
 8007efe:	4603      	mov	r3, r0
 8007f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f02:	2900      	cmp	r1, #0
 8007f04:	f803 2b02 	strb.w	r2, [r3], #2
 8007f08:	bfb6      	itet	lt
 8007f0a:	222d      	movlt	r2, #45	; 0x2d
 8007f0c:	222b      	movge	r2, #43	; 0x2b
 8007f0e:	4249      	neglt	r1, r1
 8007f10:	2909      	cmp	r1, #9
 8007f12:	7042      	strb	r2, [r0, #1]
 8007f14:	dd2b      	ble.n	8007f6e <__exponent+0x70>
 8007f16:	f10d 0407 	add.w	r4, sp, #7
 8007f1a:	46a4      	mov	ip, r4
 8007f1c:	270a      	movs	r7, #10
 8007f1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f22:	460a      	mov	r2, r1
 8007f24:	46a6      	mov	lr, r4
 8007f26:	fb07 1516 	mls	r5, r7, r6, r1
 8007f2a:	2a63      	cmp	r2, #99	; 0x63
 8007f2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007f30:	4631      	mov	r1, r6
 8007f32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f3a:	dcf0      	bgt.n	8007f1e <__exponent+0x20>
 8007f3c:	3130      	adds	r1, #48	; 0x30
 8007f3e:	f1ae 0502 	sub.w	r5, lr, #2
 8007f42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f46:	4629      	mov	r1, r5
 8007f48:	1c44      	adds	r4, r0, #1
 8007f4a:	4561      	cmp	r1, ip
 8007f4c:	d30a      	bcc.n	8007f64 <__exponent+0x66>
 8007f4e:	f10d 0209 	add.w	r2, sp, #9
 8007f52:	eba2 020e 	sub.w	r2, r2, lr
 8007f56:	4565      	cmp	r5, ip
 8007f58:	bf88      	it	hi
 8007f5a:	2200      	movhi	r2, #0
 8007f5c:	4413      	add	r3, r2
 8007f5e:	1a18      	subs	r0, r3, r0
 8007f60:	b003      	add	sp, #12
 8007f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f6c:	e7ed      	b.n	8007f4a <__exponent+0x4c>
 8007f6e:	2330      	movs	r3, #48	; 0x30
 8007f70:	3130      	adds	r1, #48	; 0x30
 8007f72:	7083      	strb	r3, [r0, #2]
 8007f74:	70c1      	strb	r1, [r0, #3]
 8007f76:	1d03      	adds	r3, r0, #4
 8007f78:	e7f1      	b.n	8007f5e <__exponent+0x60>
	...

08007f7c <_printf_float>:
 8007f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	b091      	sub	sp, #68	; 0x44
 8007f82:	460c      	mov	r4, r1
 8007f84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f88:	4616      	mov	r6, r2
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	f001 fa89 	bl	80094a4 <_localeconv_r>
 8007f92:	6803      	ldr	r3, [r0, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	9309      	str	r3, [sp, #36]	; 0x24
 8007f98:	f7f8 f8da 	bl	8000150 <strlen>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8007fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	f103 0208 	add.w	r2, r3, #8
 8007fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8007fb8:	f8c8 2000 	str.w	r2, [r8]
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fc4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007fc8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4b9c      	ldr	r3, [pc, #624]	; (8008248 <_printf_float+0x2cc>)
 8007fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fd8:	f7f8 fd18 	bl	8000a0c <__aeabi_dcmpun>
 8007fdc:	bb70      	cbnz	r0, 800803c <_printf_float+0xc0>
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4b98      	ldr	r3, [pc, #608]	; (8008248 <_printf_float+0x2cc>)
 8007fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe8:	f7f8 fcf2 	bl	80009d0 <__aeabi_dcmple>
 8007fec:	bb30      	cbnz	r0, 800803c <_printf_float+0xc0>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	f7f8 fce1 	bl	80009bc <__aeabi_dcmplt>
 8007ffa:	b110      	cbz	r0, 8008002 <_printf_float+0x86>
 8007ffc:	232d      	movs	r3, #45	; 0x2d
 8007ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008002:	4b92      	ldr	r3, [pc, #584]	; (800824c <_printf_float+0x2d0>)
 8008004:	4892      	ldr	r0, [pc, #584]	; (8008250 <_printf_float+0x2d4>)
 8008006:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800800a:	bf94      	ite	ls
 800800c:	4698      	movls	r8, r3
 800800e:	4680      	movhi	r8, r0
 8008010:	2303      	movs	r3, #3
 8008012:	f04f 0a00 	mov.w	sl, #0
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f02b 0304 	bic.w	r3, fp, #4
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	4633      	mov	r3, r6
 8008020:	4621      	mov	r1, r4
 8008022:	4628      	mov	r0, r5
 8008024:	9700      	str	r7, [sp, #0]
 8008026:	aa0f      	add	r2, sp, #60	; 0x3c
 8008028:	f000 f9d4 	bl	80083d4 <_printf_common>
 800802c:	3001      	adds	r0, #1
 800802e:	f040 8090 	bne.w	8008152 <_printf_float+0x1d6>
 8008032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008036:	b011      	add	sp, #68	; 0x44
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	4642      	mov	r2, r8
 800803e:	4653      	mov	r3, sl
 8008040:	4640      	mov	r0, r8
 8008042:	4651      	mov	r1, sl
 8008044:	f7f8 fce2 	bl	8000a0c <__aeabi_dcmpun>
 8008048:	b148      	cbz	r0, 800805e <_printf_float+0xe2>
 800804a:	f1ba 0f00 	cmp.w	sl, #0
 800804e:	bfb8      	it	lt
 8008050:	232d      	movlt	r3, #45	; 0x2d
 8008052:	4880      	ldr	r0, [pc, #512]	; (8008254 <_printf_float+0x2d8>)
 8008054:	bfb8      	it	lt
 8008056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800805a:	4b7f      	ldr	r3, [pc, #508]	; (8008258 <_printf_float+0x2dc>)
 800805c:	e7d3      	b.n	8008006 <_printf_float+0x8a>
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	d142      	bne.n	80080ee <_printf_float+0x172>
 8008068:	2306      	movs	r3, #6
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	9206      	str	r2, [sp, #24]
 8008070:	aa0e      	add	r2, sp, #56	; 0x38
 8008072:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008076:	aa0d      	add	r2, sp, #52	; 0x34
 8008078:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800807c:	9203      	str	r2, [sp, #12]
 800807e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008082:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	4642      	mov	r2, r8
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	4628      	mov	r0, r5
 8008090:	4653      	mov	r3, sl
 8008092:	910b      	str	r1, [sp, #44]	; 0x2c
 8008094:	f7ff fed4 	bl	8007e40 <__cvt>
 8008098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800809a:	4680      	mov	r8, r0
 800809c:	2947      	cmp	r1, #71	; 0x47
 800809e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080a0:	d108      	bne.n	80080b4 <_printf_float+0x138>
 80080a2:	1cc8      	adds	r0, r1, #3
 80080a4:	db02      	blt.n	80080ac <_printf_float+0x130>
 80080a6:	6863      	ldr	r3, [r4, #4]
 80080a8:	4299      	cmp	r1, r3
 80080aa:	dd40      	ble.n	800812e <_printf_float+0x1b2>
 80080ac:	f1a9 0902 	sub.w	r9, r9, #2
 80080b0:	fa5f f989 	uxtb.w	r9, r9
 80080b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080b8:	d81f      	bhi.n	80080fa <_printf_float+0x17e>
 80080ba:	464a      	mov	r2, r9
 80080bc:	3901      	subs	r1, #1
 80080be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080c2:	910d      	str	r1, [sp, #52]	; 0x34
 80080c4:	f7ff ff1b 	bl	8007efe <__exponent>
 80080c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ca:	4682      	mov	sl, r0
 80080cc:	1813      	adds	r3, r2, r0
 80080ce:	2a01      	cmp	r2, #1
 80080d0:	6123      	str	r3, [r4, #16]
 80080d2:	dc02      	bgt.n	80080da <_printf_float+0x15e>
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	07d2      	lsls	r2, r2, #31
 80080d8:	d501      	bpl.n	80080de <_printf_float+0x162>
 80080da:	3301      	adds	r3, #1
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d09b      	beq.n	800801e <_printf_float+0xa2>
 80080e6:	232d      	movs	r3, #45	; 0x2d
 80080e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ec:	e797      	b.n	800801e <_printf_float+0xa2>
 80080ee:	2947      	cmp	r1, #71	; 0x47
 80080f0:	d1bc      	bne.n	800806c <_printf_float+0xf0>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1ba      	bne.n	800806c <_printf_float+0xf0>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7b7      	b.n	800806a <_printf_float+0xee>
 80080fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80080fe:	d118      	bne.n	8008132 <_printf_float+0x1b6>
 8008100:	2900      	cmp	r1, #0
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	dd0b      	ble.n	800811e <_printf_float+0x1a2>
 8008106:	6121      	str	r1, [r4, #16]
 8008108:	b913      	cbnz	r3, 8008110 <_printf_float+0x194>
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	07d0      	lsls	r0, r2, #31
 800810e:	d502      	bpl.n	8008116 <_printf_float+0x19a>
 8008110:	3301      	adds	r3, #1
 8008112:	440b      	add	r3, r1
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	f04f 0a00 	mov.w	sl, #0
 800811a:	65a1      	str	r1, [r4, #88]	; 0x58
 800811c:	e7df      	b.n	80080de <_printf_float+0x162>
 800811e:	b913      	cbnz	r3, 8008126 <_printf_float+0x1aa>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	07d2      	lsls	r2, r2, #31
 8008124:	d501      	bpl.n	800812a <_printf_float+0x1ae>
 8008126:	3302      	adds	r3, #2
 8008128:	e7f4      	b.n	8008114 <_printf_float+0x198>
 800812a:	2301      	movs	r3, #1
 800812c:	e7f2      	b.n	8008114 <_printf_float+0x198>
 800812e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008134:	4299      	cmp	r1, r3
 8008136:	db05      	blt.n	8008144 <_printf_float+0x1c8>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	6121      	str	r1, [r4, #16]
 800813c:	07d8      	lsls	r0, r3, #31
 800813e:	d5ea      	bpl.n	8008116 <_printf_float+0x19a>
 8008140:	1c4b      	adds	r3, r1, #1
 8008142:	e7e7      	b.n	8008114 <_printf_float+0x198>
 8008144:	2900      	cmp	r1, #0
 8008146:	bfcc      	ite	gt
 8008148:	2201      	movgt	r2, #1
 800814a:	f1c1 0202 	rsble	r2, r1, #2
 800814e:	4413      	add	r3, r2
 8008150:	e7e0      	b.n	8008114 <_printf_float+0x198>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	055a      	lsls	r2, r3, #21
 8008156:	d407      	bmi.n	8008168 <_printf_float+0x1ec>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	4642      	mov	r2, r8
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	d12b      	bne.n	80081be <_printf_float+0x242>
 8008166:	e764      	b.n	8008032 <_printf_float+0xb6>
 8008168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800816c:	f240 80dd 	bls.w	800832a <_printf_float+0x3ae>
 8008170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008174:	2200      	movs	r2, #0
 8008176:	2300      	movs	r3, #0
 8008178:	f7f8 fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800817c:	2800      	cmp	r0, #0
 800817e:	d033      	beq.n	80081e8 <_printf_float+0x26c>
 8008180:	2301      	movs	r3, #1
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	4a35      	ldr	r2, [pc, #212]	; (800825c <_printf_float+0x2e0>)
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af51 	beq.w	8008032 <_printf_float+0xb6>
 8008190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008194:	429a      	cmp	r2, r3
 8008196:	db02      	blt.n	800819e <_printf_float+0x222>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07d8      	lsls	r0, r3, #31
 800819c:	d50f      	bpl.n	80081be <_printf_float+0x242>
 800819e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	f43f af42 	beq.w	8008032 <_printf_float+0xb6>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	f104 091a 	add.w	r9, r4, #26
 80081b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4543      	cmp	r3, r8
 80081bc:	dc09      	bgt.n	80081d2 <_printf_float+0x256>
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	079b      	lsls	r3, r3, #30
 80081c2:	f100 8102 	bmi.w	80083ca <_printf_float+0x44e>
 80081c6:	68e0      	ldr	r0, [r4, #12]
 80081c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081ca:	4298      	cmp	r0, r3
 80081cc:	bfb8      	it	lt
 80081ce:	4618      	movlt	r0, r3
 80081d0:	e731      	b.n	8008036 <_printf_float+0xba>
 80081d2:	2301      	movs	r3, #1
 80081d4:	464a      	mov	r2, r9
 80081d6:	4631      	mov	r1, r6
 80081d8:	4628      	mov	r0, r5
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f af28 	beq.w	8008032 <_printf_float+0xb6>
 80081e2:	f108 0801 	add.w	r8, r8, #1
 80081e6:	e7e6      	b.n	80081b6 <_printf_float+0x23a>
 80081e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dc38      	bgt.n	8008260 <_printf_float+0x2e4>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	4a19      	ldr	r2, [pc, #100]	; (800825c <_printf_float+0x2e0>)
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f af1a 	beq.w	8008032 <_printf_float+0xb6>
 80081fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008202:	4313      	orrs	r3, r2
 8008204:	d102      	bne.n	800820c <_printf_float+0x290>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	07d9      	lsls	r1, r3, #31
 800820a:	d5d8      	bpl.n	80081be <_printf_float+0x242>
 800820c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008210:	4631      	mov	r1, r6
 8008212:	4628      	mov	r0, r5
 8008214:	47b8      	blx	r7
 8008216:	3001      	adds	r0, #1
 8008218:	f43f af0b 	beq.w	8008032 <_printf_float+0xb6>
 800821c:	f04f 0900 	mov.w	r9, #0
 8008220:	f104 0a1a 	add.w	sl, r4, #26
 8008224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008226:	425b      	negs	r3, r3
 8008228:	454b      	cmp	r3, r9
 800822a:	dc01      	bgt.n	8008230 <_printf_float+0x2b4>
 800822c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822e:	e794      	b.n	800815a <_printf_float+0x1de>
 8008230:	2301      	movs	r3, #1
 8008232:	4652      	mov	r2, sl
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f aef9 	beq.w	8008032 <_printf_float+0xb6>
 8008240:	f109 0901 	add.w	r9, r9, #1
 8008244:	e7ee      	b.n	8008224 <_printf_float+0x2a8>
 8008246:	bf00      	nop
 8008248:	7fefffff 	.word	0x7fefffff
 800824c:	0800bbdc 	.word	0x0800bbdc
 8008250:	0800bbe0 	.word	0x0800bbe0
 8008254:	0800bbe8 	.word	0x0800bbe8
 8008258:	0800bbe4 	.word	0x0800bbe4
 800825c:	0800bbec 	.word	0x0800bbec
 8008260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008264:	429a      	cmp	r2, r3
 8008266:	bfa8      	it	ge
 8008268:	461a      	movge	r2, r3
 800826a:	2a00      	cmp	r2, #0
 800826c:	4691      	mov	r9, r2
 800826e:	dc37      	bgt.n	80082e0 <_printf_float+0x364>
 8008270:	f04f 0b00 	mov.w	fp, #0
 8008274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008278:	f104 021a 	add.w	r2, r4, #26
 800827c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008280:	ebaa 0309 	sub.w	r3, sl, r9
 8008284:	455b      	cmp	r3, fp
 8008286:	dc33      	bgt.n	80082f0 <_printf_float+0x374>
 8008288:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800828c:	429a      	cmp	r2, r3
 800828e:	db3b      	blt.n	8008308 <_printf_float+0x38c>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	07da      	lsls	r2, r3, #31
 8008294:	d438      	bmi.n	8008308 <_printf_float+0x38c>
 8008296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008298:	990d      	ldr	r1, [sp, #52]	; 0x34
 800829a:	eba2 030a 	sub.w	r3, r2, sl
 800829e:	eba2 0901 	sub.w	r9, r2, r1
 80082a2:	4599      	cmp	r9, r3
 80082a4:	bfa8      	it	ge
 80082a6:	4699      	movge	r9, r3
 80082a8:	f1b9 0f00 	cmp.w	r9, #0
 80082ac:	dc34      	bgt.n	8008318 <_printf_float+0x39c>
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b6:	f104 0a1a 	add.w	sl, r4, #26
 80082ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082be:	1a9b      	subs	r3, r3, r2
 80082c0:	eba3 0309 	sub.w	r3, r3, r9
 80082c4:	4543      	cmp	r3, r8
 80082c6:	f77f af7a 	ble.w	80081be <_printf_float+0x242>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4652      	mov	r2, sl
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f aeac 	beq.w	8008032 <_printf_float+0xb6>
 80082da:	f108 0801 	add.w	r8, r8, #1
 80082de:	e7ec      	b.n	80082ba <_printf_float+0x33e>
 80082e0:	4613      	mov	r3, r2
 80082e2:	4631      	mov	r1, r6
 80082e4:	4642      	mov	r2, r8
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	d1c0      	bne.n	8008270 <_printf_float+0x2f4>
 80082ee:	e6a0      	b.n	8008032 <_printf_float+0xb6>
 80082f0:	2301      	movs	r3, #1
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f ae99 	beq.w	8008032 <_printf_float+0xb6>
 8008300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008302:	f10b 0b01 	add.w	fp, fp, #1
 8008306:	e7b9      	b.n	800827c <_printf_float+0x300>
 8008308:	4631      	mov	r1, r6
 800830a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	d1bf      	bne.n	8008296 <_printf_float+0x31a>
 8008316:	e68c      	b.n	8008032 <_printf_float+0xb6>
 8008318:	464b      	mov	r3, r9
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	eb08 020a 	add.w	r2, r8, sl
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	d1c2      	bne.n	80082ae <_printf_float+0x332>
 8008328:	e683      	b.n	8008032 <_printf_float+0xb6>
 800832a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800832c:	2a01      	cmp	r2, #1
 800832e:	dc01      	bgt.n	8008334 <_printf_float+0x3b8>
 8008330:	07db      	lsls	r3, r3, #31
 8008332:	d537      	bpl.n	80083a4 <_printf_float+0x428>
 8008334:	2301      	movs	r3, #1
 8008336:	4642      	mov	r2, r8
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	f43f ae77 	beq.w	8008032 <_printf_float+0xb6>
 8008344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f ae6f 	beq.w	8008032 <_printf_float+0xb6>
 8008354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008358:	2200      	movs	r2, #0
 800835a:	2300      	movs	r3, #0
 800835c:	f7f8 fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8008360:	b9d8      	cbnz	r0, 800839a <_printf_float+0x41e>
 8008362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008364:	f108 0201 	add.w	r2, r8, #1
 8008368:	3b01      	subs	r3, #1
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	d10e      	bne.n	8008392 <_printf_float+0x416>
 8008374:	e65d      	b.n	8008032 <_printf_float+0xb6>
 8008376:	2301      	movs	r3, #1
 8008378:	464a      	mov	r2, r9
 800837a:	4631      	mov	r1, r6
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	3001      	adds	r0, #1
 8008382:	f43f ae56 	beq.w	8008032 <_printf_float+0xb6>
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838c:	3b01      	subs	r3, #1
 800838e:	4543      	cmp	r3, r8
 8008390:	dcf1      	bgt.n	8008376 <_printf_float+0x3fa>
 8008392:	4653      	mov	r3, sl
 8008394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008398:	e6e0      	b.n	800815c <_printf_float+0x1e0>
 800839a:	f04f 0800 	mov.w	r8, #0
 800839e:	f104 091a 	add.w	r9, r4, #26
 80083a2:	e7f2      	b.n	800838a <_printf_float+0x40e>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4642      	mov	r2, r8
 80083a8:	e7df      	b.n	800836a <_printf_float+0x3ee>
 80083aa:	2301      	movs	r3, #1
 80083ac:	464a      	mov	r2, r9
 80083ae:	4631      	mov	r1, r6
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b8      	blx	r7
 80083b4:	3001      	adds	r0, #1
 80083b6:	f43f ae3c 	beq.w	8008032 <_printf_float+0xb6>
 80083ba:	f108 0801 	add.w	r8, r8, #1
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083c2:	1a5b      	subs	r3, r3, r1
 80083c4:	4543      	cmp	r3, r8
 80083c6:	dcf0      	bgt.n	80083aa <_printf_float+0x42e>
 80083c8:	e6fd      	b.n	80081c6 <_printf_float+0x24a>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	f104 0919 	add.w	r9, r4, #25
 80083d2:	e7f4      	b.n	80083be <_printf_float+0x442>

080083d4 <_printf_common>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	4616      	mov	r6, r2
 80083da:	4699      	mov	r9, r3
 80083dc:	688a      	ldr	r2, [r1, #8]
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	4607      	mov	r7, r0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bfb8      	it	lt
 80083e6:	4613      	movlt	r3, r2
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083ee:	460c      	mov	r4, r1
 80083f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f4:	b10a      	cbz	r2, 80083fa <_printf_common+0x26>
 80083f6:	3301      	adds	r3, #1
 80083f8:	6033      	str	r3, [r6, #0]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	0699      	lsls	r1, r3, #26
 80083fe:	bf42      	ittt	mi
 8008400:	6833      	ldrmi	r3, [r6, #0]
 8008402:	3302      	addmi	r3, #2
 8008404:	6033      	strmi	r3, [r6, #0]
 8008406:	6825      	ldr	r5, [r4, #0]
 8008408:	f015 0506 	ands.w	r5, r5, #6
 800840c:	d106      	bne.n	800841c <_printf_common+0x48>
 800840e:	f104 0a19 	add.w	sl, r4, #25
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	6832      	ldr	r2, [r6, #0]
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc28      	bgt.n	800846e <_printf_common+0x9a>
 800841c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008420:	1e13      	subs	r3, r2, #0
 8008422:	6822      	ldr	r2, [r4, #0]
 8008424:	bf18      	it	ne
 8008426:	2301      	movne	r3, #1
 8008428:	0692      	lsls	r2, r2, #26
 800842a:	d42d      	bmi.n	8008488 <_printf_common+0xb4>
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008434:	47c0      	blx	r8
 8008436:	3001      	adds	r0, #1
 8008438:	d020      	beq.n	800847c <_printf_common+0xa8>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	68e5      	ldr	r5, [r4, #12]
 800843e:	f003 0306 	and.w	r3, r3, #6
 8008442:	2b04      	cmp	r3, #4
 8008444:	bf18      	it	ne
 8008446:	2500      	movne	r5, #0
 8008448:	6832      	ldr	r2, [r6, #0]
 800844a:	f04f 0600 	mov.w	r6, #0
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	bf08      	it	eq
 8008452:	1aad      	subeq	r5, r5, r2
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	bf08      	it	eq
 8008458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800845c:	4293      	cmp	r3, r2
 800845e:	bfc4      	itt	gt
 8008460:	1a9b      	subgt	r3, r3, r2
 8008462:	18ed      	addgt	r5, r5, r3
 8008464:	341a      	adds	r4, #26
 8008466:	42b5      	cmp	r5, r6
 8008468:	d11a      	bne.n	80084a0 <_printf_common+0xcc>
 800846a:	2000      	movs	r0, #0
 800846c:	e008      	b.n	8008480 <_printf_common+0xac>
 800846e:	2301      	movs	r3, #1
 8008470:	4652      	mov	r2, sl
 8008472:	4649      	mov	r1, r9
 8008474:	4638      	mov	r0, r7
 8008476:	47c0      	blx	r8
 8008478:	3001      	adds	r0, #1
 800847a:	d103      	bne.n	8008484 <_printf_common+0xb0>
 800847c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	3501      	adds	r5, #1
 8008486:	e7c4      	b.n	8008412 <_printf_common+0x3e>
 8008488:	2030      	movs	r0, #48	; 0x30
 800848a:	18e1      	adds	r1, r4, r3
 800848c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008496:	4422      	add	r2, r4
 8008498:	3302      	adds	r3, #2
 800849a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800849e:	e7c5      	b.n	800842c <_printf_common+0x58>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4622      	mov	r2, r4
 80084a4:	4649      	mov	r1, r9
 80084a6:	4638      	mov	r0, r7
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d0e6      	beq.n	800847c <_printf_common+0xa8>
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7d9      	b.n	8008466 <_printf_common+0x92>
	...

080084b4 <_printf_i>:
 80084b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	460c      	mov	r4, r1
 80084ba:	7e27      	ldrb	r7, [r4, #24]
 80084bc:	4691      	mov	r9, r2
 80084be:	2f78      	cmp	r7, #120	; 0x78
 80084c0:	4680      	mov	r8, r0
 80084c2:	469a      	mov	sl, r3
 80084c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ca:	d807      	bhi.n	80084dc <_printf_i+0x28>
 80084cc:	2f62      	cmp	r7, #98	; 0x62
 80084ce:	d80a      	bhi.n	80084e6 <_printf_i+0x32>
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	f000 80d9 	beq.w	8008688 <_printf_i+0x1d4>
 80084d6:	2f58      	cmp	r7, #88	; 0x58
 80084d8:	f000 80a4 	beq.w	8008624 <_printf_i+0x170>
 80084dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084e4:	e03a      	b.n	800855c <_printf_i+0xa8>
 80084e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ea:	2b15      	cmp	r3, #21
 80084ec:	d8f6      	bhi.n	80084dc <_printf_i+0x28>
 80084ee:	a001      	add	r0, pc, #4	; (adr r0, 80084f4 <_printf_i+0x40>)
 80084f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	08008561 	.word	0x08008561
 80084fc:	080084dd 	.word	0x080084dd
 8008500:	080084dd 	.word	0x080084dd
 8008504:	080084dd 	.word	0x080084dd
 8008508:	080084dd 	.word	0x080084dd
 800850c:	08008561 	.word	0x08008561
 8008510:	080084dd 	.word	0x080084dd
 8008514:	080084dd 	.word	0x080084dd
 8008518:	080084dd 	.word	0x080084dd
 800851c:	080084dd 	.word	0x080084dd
 8008520:	0800866f 	.word	0x0800866f
 8008524:	08008591 	.word	0x08008591
 8008528:	08008651 	.word	0x08008651
 800852c:	080084dd 	.word	0x080084dd
 8008530:	080084dd 	.word	0x080084dd
 8008534:	08008691 	.word	0x08008691
 8008538:	080084dd 	.word	0x080084dd
 800853c:	08008591 	.word	0x08008591
 8008540:	080084dd 	.word	0x080084dd
 8008544:	080084dd 	.word	0x080084dd
 8008548:	08008659 	.word	0x08008659
 800854c:	680b      	ldr	r3, [r1, #0]
 800854e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008552:	1d1a      	adds	r2, r3, #4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	600a      	str	r2, [r1, #0]
 8008558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800855c:	2301      	movs	r3, #1
 800855e:	e0a4      	b.n	80086aa <_printf_i+0x1f6>
 8008560:	6825      	ldr	r5, [r4, #0]
 8008562:	6808      	ldr	r0, [r1, #0]
 8008564:	062e      	lsls	r6, r5, #24
 8008566:	f100 0304 	add.w	r3, r0, #4
 800856a:	d50a      	bpl.n	8008582 <_printf_i+0xce>
 800856c:	6805      	ldr	r5, [r0, #0]
 800856e:	600b      	str	r3, [r1, #0]
 8008570:	2d00      	cmp	r5, #0
 8008572:	da03      	bge.n	800857c <_printf_i+0xc8>
 8008574:	232d      	movs	r3, #45	; 0x2d
 8008576:	426d      	negs	r5, r5
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857c:	230a      	movs	r3, #10
 800857e:	485e      	ldr	r0, [pc, #376]	; (80086f8 <_printf_i+0x244>)
 8008580:	e019      	b.n	80085b6 <_printf_i+0x102>
 8008582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008586:	6805      	ldr	r5, [r0, #0]
 8008588:	600b      	str	r3, [r1, #0]
 800858a:	bf18      	it	ne
 800858c:	b22d      	sxthne	r5, r5
 800858e:	e7ef      	b.n	8008570 <_printf_i+0xbc>
 8008590:	680b      	ldr	r3, [r1, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	1d18      	adds	r0, r3, #4
 8008596:	6008      	str	r0, [r1, #0]
 8008598:	0628      	lsls	r0, r5, #24
 800859a:	d501      	bpl.n	80085a0 <_printf_i+0xec>
 800859c:	681d      	ldr	r5, [r3, #0]
 800859e:	e002      	b.n	80085a6 <_printf_i+0xf2>
 80085a0:	0669      	lsls	r1, r5, #25
 80085a2:	d5fb      	bpl.n	800859c <_printf_i+0xe8>
 80085a4:	881d      	ldrh	r5, [r3, #0]
 80085a6:	2f6f      	cmp	r7, #111	; 0x6f
 80085a8:	bf0c      	ite	eq
 80085aa:	2308      	moveq	r3, #8
 80085ac:	230a      	movne	r3, #10
 80085ae:	4852      	ldr	r0, [pc, #328]	; (80086f8 <_printf_i+0x244>)
 80085b0:	2100      	movs	r1, #0
 80085b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085b6:	6866      	ldr	r6, [r4, #4]
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	bfa8      	it	ge
 80085bc:	6821      	ldrge	r1, [r4, #0]
 80085be:	60a6      	str	r6, [r4, #8]
 80085c0:	bfa4      	itt	ge
 80085c2:	f021 0104 	bicge.w	r1, r1, #4
 80085c6:	6021      	strge	r1, [r4, #0]
 80085c8:	b90d      	cbnz	r5, 80085ce <_printf_i+0x11a>
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d04d      	beq.n	800866a <_printf_i+0x1b6>
 80085ce:	4616      	mov	r6, r2
 80085d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085d4:	fb03 5711 	mls	r7, r3, r1, r5
 80085d8:	5dc7      	ldrb	r7, [r0, r7]
 80085da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085de:	462f      	mov	r7, r5
 80085e0:	42bb      	cmp	r3, r7
 80085e2:	460d      	mov	r5, r1
 80085e4:	d9f4      	bls.n	80085d0 <_printf_i+0x11c>
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d10b      	bne.n	8008602 <_printf_i+0x14e>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	07df      	lsls	r7, r3, #31
 80085ee:	d508      	bpl.n	8008602 <_printf_i+0x14e>
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	6861      	ldr	r1, [r4, #4]
 80085f4:	4299      	cmp	r1, r3
 80085f6:	bfde      	ittt	le
 80085f8:	2330      	movle	r3, #48	; 0x30
 80085fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085fe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008602:	1b92      	subs	r2, r2, r6
 8008604:	6122      	str	r2, [r4, #16]
 8008606:	464b      	mov	r3, r9
 8008608:	4621      	mov	r1, r4
 800860a:	4640      	mov	r0, r8
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	aa03      	add	r2, sp, #12
 8008612:	f7ff fedf 	bl	80083d4 <_printf_common>
 8008616:	3001      	adds	r0, #1
 8008618:	d14c      	bne.n	80086b4 <_printf_i+0x200>
 800861a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861e:	b004      	add	sp, #16
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	4834      	ldr	r0, [pc, #208]	; (80086f8 <_printf_i+0x244>)
 8008626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800862a:	680e      	ldr	r6, [r1, #0]
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008632:	061f      	lsls	r7, r3, #24
 8008634:	600e      	str	r6, [r1, #0]
 8008636:	d514      	bpl.n	8008662 <_printf_i+0x1ae>
 8008638:	07d9      	lsls	r1, r3, #31
 800863a:	bf44      	itt	mi
 800863c:	f043 0320 	orrmi.w	r3, r3, #32
 8008640:	6023      	strmi	r3, [r4, #0]
 8008642:	b91d      	cbnz	r5, 800864c <_printf_i+0x198>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f023 0320 	bic.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2310      	movs	r3, #16
 800864e:	e7af      	b.n	80085b0 <_printf_i+0xfc>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	f043 0320 	orr.w	r3, r3, #32
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	2378      	movs	r3, #120	; 0x78
 800865a:	4828      	ldr	r0, [pc, #160]	; (80086fc <_printf_i+0x248>)
 800865c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008660:	e7e3      	b.n	800862a <_printf_i+0x176>
 8008662:	065e      	lsls	r6, r3, #25
 8008664:	bf48      	it	mi
 8008666:	b2ad      	uxthmi	r5, r5
 8008668:	e7e6      	b.n	8008638 <_printf_i+0x184>
 800866a:	4616      	mov	r6, r2
 800866c:	e7bb      	b.n	80085e6 <_printf_i+0x132>
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	6826      	ldr	r6, [r4, #0]
 8008672:	1d1d      	adds	r5, r3, #4
 8008674:	6960      	ldr	r0, [r4, #20]
 8008676:	600d      	str	r5, [r1, #0]
 8008678:	0635      	lsls	r5, r6, #24
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	d501      	bpl.n	8008682 <_printf_i+0x1ce>
 800867e:	6018      	str	r0, [r3, #0]
 8008680:	e002      	b.n	8008688 <_printf_i+0x1d4>
 8008682:	0671      	lsls	r1, r6, #25
 8008684:	d5fb      	bpl.n	800867e <_printf_i+0x1ca>
 8008686:	8018      	strh	r0, [r3, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	4616      	mov	r6, r2
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	e7ba      	b.n	8008606 <_printf_i+0x152>
 8008690:	680b      	ldr	r3, [r1, #0]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	600a      	str	r2, [r1, #0]
 8008696:	681e      	ldr	r6, [r3, #0]
 8008698:	2100      	movs	r1, #0
 800869a:	4630      	mov	r0, r6
 800869c:	6862      	ldr	r2, [r4, #4]
 800869e:	f000 ff05 	bl	80094ac <memchr>
 80086a2:	b108      	cbz	r0, 80086a8 <_printf_i+0x1f4>
 80086a4:	1b80      	subs	r0, r0, r6
 80086a6:	6060      	str	r0, [r4, #4]
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	6123      	str	r3, [r4, #16]
 80086ac:	2300      	movs	r3, #0
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b2:	e7a8      	b.n	8008606 <_printf_i+0x152>
 80086b4:	4632      	mov	r2, r6
 80086b6:	4649      	mov	r1, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	47d0      	blx	sl
 80086be:	3001      	adds	r0, #1
 80086c0:	d0ab      	beq.n	800861a <_printf_i+0x166>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	079b      	lsls	r3, r3, #30
 80086c6:	d413      	bmi.n	80086f0 <_printf_i+0x23c>
 80086c8:	68e0      	ldr	r0, [r4, #12]
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	4298      	cmp	r0, r3
 80086ce:	bfb8      	it	lt
 80086d0:	4618      	movlt	r0, r3
 80086d2:	e7a4      	b.n	800861e <_printf_i+0x16a>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4632      	mov	r2, r6
 80086d8:	4649      	mov	r1, r9
 80086da:	4640      	mov	r0, r8
 80086dc:	47d0      	blx	sl
 80086de:	3001      	adds	r0, #1
 80086e0:	d09b      	beq.n	800861a <_printf_i+0x166>
 80086e2:	3501      	adds	r5, #1
 80086e4:	68e3      	ldr	r3, [r4, #12]
 80086e6:	9903      	ldr	r1, [sp, #12]
 80086e8:	1a5b      	subs	r3, r3, r1
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	dcf2      	bgt.n	80086d4 <_printf_i+0x220>
 80086ee:	e7eb      	b.n	80086c8 <_printf_i+0x214>
 80086f0:	2500      	movs	r5, #0
 80086f2:	f104 0619 	add.w	r6, r4, #25
 80086f6:	e7f5      	b.n	80086e4 <_printf_i+0x230>
 80086f8:	0800bbee 	.word	0x0800bbee
 80086fc:	0800bbff 	.word	0x0800bbff

08008700 <_sbrk_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	2300      	movs	r3, #0
 8008704:	4d05      	ldr	r5, [pc, #20]	; (800871c <_sbrk_r+0x1c>)
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7ff f9e2 	bl	8007ad4 <_sbrk>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_sbrk_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_sbrk_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	2000091c 	.word	0x2000091c

08008720 <_raise_r>:
 8008720:	291f      	cmp	r1, #31
 8008722:	b538      	push	{r3, r4, r5, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	d904      	bls.n	8008734 <_raise_r+0x14>
 800872a:	2316      	movs	r3, #22
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008736:	b112      	cbz	r2, 800873e <_raise_r+0x1e>
 8008738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800873c:	b94b      	cbnz	r3, 8008752 <_raise_r+0x32>
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f830 	bl	80087a4 <_getpid_r>
 8008744:	462a      	mov	r2, r5
 8008746:	4601      	mov	r1, r0
 8008748:	4620      	mov	r0, r4
 800874a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874e:	f000 b817 	b.w	8008780 <_kill_r>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00a      	beq.n	800876c <_raise_r+0x4c>
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	d103      	bne.n	8008762 <_raise_r+0x42>
 800875a:	2316      	movs	r3, #22
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	2001      	movs	r0, #1
 8008760:	e7e7      	b.n	8008732 <_raise_r+0x12>
 8008762:	2400      	movs	r4, #0
 8008764:	4628      	mov	r0, r5
 8008766:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800876a:	4798      	blx	r3
 800876c:	2000      	movs	r0, #0
 800876e:	e7e0      	b.n	8008732 <_raise_r+0x12>

08008770 <raise>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <raise+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f7ff bfd3 	b.w	8008720 <_raise_r>
 800877a:	bf00      	nop
 800877c:	2000007c 	.word	0x2000007c

08008780 <_kill_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	2300      	movs	r3, #0
 8008784:	4d06      	ldr	r5, [pc, #24]	; (80087a0 <_kill_r+0x20>)
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	f7ff f91e 	bl	80079ce <_kill>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d102      	bne.n	800879c <_kill_r+0x1c>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	b103      	cbz	r3, 800879c <_kill_r+0x1c>
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	bf00      	nop
 80087a0:	2000091c 	.word	0x2000091c

080087a4 <_getpid_r>:
 80087a4:	f7ff b90c 	b.w	80079c0 <_getpid>

080087a8 <quorem>:
 80087a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	6903      	ldr	r3, [r0, #16]
 80087ae:	690c      	ldr	r4, [r1, #16]
 80087b0:	4607      	mov	r7, r0
 80087b2:	42a3      	cmp	r3, r4
 80087b4:	f2c0 8083 	blt.w	80088be <quorem+0x116>
 80087b8:	3c01      	subs	r4, #1
 80087ba:	f100 0514 	add.w	r5, r0, #20
 80087be:	f101 0814 	add.w	r8, r1, #20
 80087c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d0:	3301      	adds	r3, #1
 80087d2:	429a      	cmp	r2, r3
 80087d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80087d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087e0:	d332      	bcc.n	8008848 <quorem+0xa0>
 80087e2:	f04f 0e00 	mov.w	lr, #0
 80087e6:	4640      	mov	r0, r8
 80087e8:	46ac      	mov	ip, r5
 80087ea:	46f2      	mov	sl, lr
 80087ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80087f0:	b293      	uxth	r3, r2
 80087f2:	fb06 e303 	mla	r3, r6, r3, lr
 80087f6:	0c12      	lsrs	r2, r2, #16
 80087f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087fc:	fb06 e202 	mla	r2, r6, r2, lr
 8008800:	b29b      	uxth	r3, r3
 8008802:	ebaa 0303 	sub.w	r3, sl, r3
 8008806:	f8dc a000 	ldr.w	sl, [ip]
 800880a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800880e:	fa1f fa8a 	uxth.w	sl, sl
 8008812:	4453      	add	r3, sl
 8008814:	fa1f fa82 	uxth.w	sl, r2
 8008818:	f8dc 2000 	ldr.w	r2, [ip]
 800881c:	4581      	cmp	r9, r0
 800881e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008826:	b29b      	uxth	r3, r3
 8008828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800882c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008830:	f84c 3b04 	str.w	r3, [ip], #4
 8008834:	d2da      	bcs.n	80087ec <quorem+0x44>
 8008836:	f855 300b 	ldr.w	r3, [r5, fp]
 800883a:	b92b      	cbnz	r3, 8008848 <quorem+0xa0>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	3b04      	subs	r3, #4
 8008840:	429d      	cmp	r5, r3
 8008842:	461a      	mov	r2, r3
 8008844:	d32f      	bcc.n	80088a6 <quorem+0xfe>
 8008846:	613c      	str	r4, [r7, #16]
 8008848:	4638      	mov	r0, r7
 800884a:	f001 f8c3 	bl	80099d4 <__mcmp>
 800884e:	2800      	cmp	r0, #0
 8008850:	db25      	blt.n	800889e <quorem+0xf6>
 8008852:	4628      	mov	r0, r5
 8008854:	f04f 0c00 	mov.w	ip, #0
 8008858:	3601      	adds	r6, #1
 800885a:	f858 1b04 	ldr.w	r1, [r8], #4
 800885e:	f8d0 e000 	ldr.w	lr, [r0]
 8008862:	b28b      	uxth	r3, r1
 8008864:	ebac 0303 	sub.w	r3, ip, r3
 8008868:	fa1f f28e 	uxth.w	r2, lr
 800886c:	4413      	add	r3, r2
 800886e:	0c0a      	lsrs	r2, r1, #16
 8008870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008878:	b29b      	uxth	r3, r3
 800887a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800887e:	45c1      	cmp	r9, r8
 8008880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008884:	f840 3b04 	str.w	r3, [r0], #4
 8008888:	d2e7      	bcs.n	800885a <quorem+0xb2>
 800888a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008892:	b922      	cbnz	r2, 800889e <quorem+0xf6>
 8008894:	3b04      	subs	r3, #4
 8008896:	429d      	cmp	r5, r3
 8008898:	461a      	mov	r2, r3
 800889a:	d30a      	bcc.n	80088b2 <quorem+0x10a>
 800889c:	613c      	str	r4, [r7, #16]
 800889e:	4630      	mov	r0, r6
 80088a0:	b003      	add	sp, #12
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	3b04      	subs	r3, #4
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	d1cb      	bne.n	8008846 <quorem+0x9e>
 80088ae:	3c01      	subs	r4, #1
 80088b0:	e7c6      	b.n	8008840 <quorem+0x98>
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1f0      	bne.n	800889c <quorem+0xf4>
 80088ba:	3c01      	subs	r4, #1
 80088bc:	e7eb      	b.n	8008896 <quorem+0xee>
 80088be:	2000      	movs	r0, #0
 80088c0:	e7ee      	b.n	80088a0 <quorem+0xf8>
 80088c2:	0000      	movs	r0, r0
 80088c4:	0000      	movs	r0, r0
	...

080088c8 <_dtoa_r>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	4616      	mov	r6, r2
 80088ce:	461f      	mov	r7, r3
 80088d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088d2:	b099      	sub	sp, #100	; 0x64
 80088d4:	4605      	mov	r5, r0
 80088d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80088de:	b974      	cbnz	r4, 80088fe <_dtoa_r+0x36>
 80088e0:	2010      	movs	r0, #16
 80088e2:	f7ff f9e1 	bl	8007ca8 <malloc>
 80088e6:	4602      	mov	r2, r0
 80088e8:	6268      	str	r0, [r5, #36]	; 0x24
 80088ea:	b920      	cbnz	r0, 80088f6 <_dtoa_r+0x2e>
 80088ec:	21ea      	movs	r1, #234	; 0xea
 80088ee:	4bae      	ldr	r3, [pc, #696]	; (8008ba8 <_dtoa_r+0x2e0>)
 80088f0:	48ae      	ldr	r0, [pc, #696]	; (8008bac <_dtoa_r+0x2e4>)
 80088f2:	f001 f985 	bl	8009c00 <__assert_func>
 80088f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088fa:	6004      	str	r4, [r0, #0]
 80088fc:	60c4      	str	r4, [r0, #12]
 80088fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	b151      	cbz	r1, 800891a <_dtoa_r+0x52>
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	2301      	movs	r3, #1
 8008908:	4093      	lsls	r3, r2
 800890a:	604a      	str	r2, [r1, #4]
 800890c:	608b      	str	r3, [r1, #8]
 800890e:	4628      	mov	r0, r5
 8008910:	f000 fe26 	bl	8009560 <_Bfree>
 8008914:	2200      	movs	r2, #0
 8008916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	1e3b      	subs	r3, r7, #0
 800891c:	bfaf      	iteee	ge
 800891e:	2300      	movge	r3, #0
 8008920:	2201      	movlt	r2, #1
 8008922:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008926:	9305      	strlt	r3, [sp, #20]
 8008928:	bfa8      	it	ge
 800892a:	f8c8 3000 	strge.w	r3, [r8]
 800892e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008932:	4b9f      	ldr	r3, [pc, #636]	; (8008bb0 <_dtoa_r+0x2e8>)
 8008934:	bfb8      	it	lt
 8008936:	f8c8 2000 	strlt.w	r2, [r8]
 800893a:	ea33 0309 	bics.w	r3, r3, r9
 800893e:	d119      	bne.n	8008974 <_dtoa_r+0xac>
 8008940:	f242 730f 	movw	r3, #9999	; 0x270f
 8008944:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800894c:	4333      	orrs	r3, r6
 800894e:	f000 8580 	beq.w	8009452 <_dtoa_r+0xb8a>
 8008952:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008954:	b953      	cbnz	r3, 800896c <_dtoa_r+0xa4>
 8008956:	4b97      	ldr	r3, [pc, #604]	; (8008bb4 <_dtoa_r+0x2ec>)
 8008958:	e022      	b.n	80089a0 <_dtoa_r+0xd8>
 800895a:	4b97      	ldr	r3, [pc, #604]	; (8008bb8 <_dtoa_r+0x2f0>)
 800895c:	9308      	str	r3, [sp, #32]
 800895e:	3308      	adds	r3, #8
 8008960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	9808      	ldr	r0, [sp, #32]
 8008966:	b019      	add	sp, #100	; 0x64
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	4b91      	ldr	r3, [pc, #580]	; (8008bb4 <_dtoa_r+0x2ec>)
 800896e:	9308      	str	r3, [sp, #32]
 8008970:	3303      	adds	r3, #3
 8008972:	e7f5      	b.n	8008960 <_dtoa_r+0x98>
 8008974:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008978:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800897c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	f7f8 f810 	bl	80009a8 <__aeabi_dcmpeq>
 8008988:	4680      	mov	r8, r0
 800898a:	b158      	cbz	r0, 80089a4 <_dtoa_r+0xdc>
 800898c:	2301      	movs	r3, #1
 800898e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8559 	beq.w	800944c <_dtoa_r+0xb84>
 800899a:	4888      	ldr	r0, [pc, #544]	; (8008bbc <_dtoa_r+0x2f4>)
 800899c:	6018      	str	r0, [r3, #0]
 800899e:	1e43      	subs	r3, r0, #1
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	e7df      	b.n	8008964 <_dtoa_r+0x9c>
 80089a4:	ab16      	add	r3, sp, #88	; 0x58
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	ab17      	add	r3, sp, #92	; 0x5c
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	4628      	mov	r0, r5
 80089ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089b2:	f001 f8bb 	bl	8009b2c <__d2b>
 80089b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089ba:	4682      	mov	sl, r0
 80089bc:	2c00      	cmp	r4, #0
 80089be:	d07e      	beq.n	8008abe <_dtoa_r+0x1f6>
 80089c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80089ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80089d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80089da:	2200      	movs	r2, #0
 80089dc:	4b78      	ldr	r3, [pc, #480]	; (8008bc0 <_dtoa_r+0x2f8>)
 80089de:	f7f7 fbc3 	bl	8000168 <__aeabi_dsub>
 80089e2:	a36b      	add	r3, pc, #428	; (adr r3, 8008b90 <_dtoa_r+0x2c8>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fd76 	bl	80004d8 <__aeabi_dmul>
 80089ec:	a36a      	add	r3, pc, #424	; (adr r3, 8008b98 <_dtoa_r+0x2d0>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fbbb 	bl	800016c <__adddf3>
 80089f6:	4606      	mov	r6, r0
 80089f8:	4620      	mov	r0, r4
 80089fa:	460f      	mov	r7, r1
 80089fc:	f7f7 fd02 	bl	8000404 <__aeabi_i2d>
 8008a00:	a367      	add	r3, pc, #412	; (adr r3, 8008ba0 <_dtoa_r+0x2d8>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fd67 	bl	80004d8 <__aeabi_dmul>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f7 fbab 	bl	800016c <__adddf3>
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	f7f8 f80d 	bl	8000a38 <__aeabi_d2iz>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4681      	mov	r9, r0
 8008a22:	2300      	movs	r3, #0
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 ffc8 	bl	80009bc <__aeabi_dcmplt>
 8008a2c:	b148      	cbz	r0, 8008a42 <_dtoa_r+0x17a>
 8008a2e:	4648      	mov	r0, r9
 8008a30:	f7f7 fce8 	bl	8000404 <__aeabi_i2d>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	f7f7 ffb6 	bl	80009a8 <__aeabi_dcmpeq>
 8008a3c:	b908      	cbnz	r0, 8008a42 <_dtoa_r+0x17a>
 8008a3e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a42:	f1b9 0f16 	cmp.w	r9, #22
 8008a46:	d857      	bhi.n	8008af8 <_dtoa_r+0x230>
 8008a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a4c:	4b5d      	ldr	r3, [pc, #372]	; (8008bc4 <_dtoa_r+0x2fc>)
 8008a4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 ffb1 	bl	80009bc <__aeabi_dcmplt>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d04e      	beq.n	8008afc <_dtoa_r+0x234>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a68:	1b1c      	subs	r4, r3, r4
 8008a6a:	1e63      	subs	r3, r4, #1
 8008a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6e:	bf49      	itett	mi
 8008a70:	f1c4 0301 	rsbmi	r3, r4, #1
 8008a74:	2300      	movpl	r3, #0
 8008a76:	9306      	strmi	r3, [sp, #24]
 8008a78:	2300      	movmi	r3, #0
 8008a7a:	bf54      	ite	pl
 8008a7c:	9306      	strpl	r3, [sp, #24]
 8008a7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008a80:	f1b9 0f00 	cmp.w	r9, #0
 8008a84:	db3c      	blt.n	8008b00 <_dtoa_r+0x238>
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a8c:	444b      	add	r3, r9
 8008a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a90:	2300      	movs	r3, #0
 8008a92:	930a      	str	r3, [sp, #40]	; 0x28
 8008a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d86c      	bhi.n	8008b74 <_dtoa_r+0x2ac>
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	bfc4      	itt	gt
 8008a9e:	3b04      	subgt	r3, #4
 8008aa0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aa4:	bfc8      	it	gt
 8008aa6:	2400      	movgt	r4, #0
 8008aa8:	f1a3 0302 	sub.w	r3, r3, #2
 8008aac:	bfd8      	it	le
 8008aae:	2401      	movle	r4, #1
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	f200 808b 	bhi.w	8008bcc <_dtoa_r+0x304>
 8008ab6:	e8df f003 	tbb	[pc, r3]
 8008aba:	4f2d      	.short	0x4f2d
 8008abc:	5b4d      	.short	0x5b4d
 8008abe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008ac2:	441c      	add	r4, r3
 8008ac4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	bfc3      	ittte	gt
 8008acc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ad0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008ad4:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ad8:	f1c3 0320 	rsble	r3, r3, #32
 8008adc:	bfc6      	itte	gt
 8008ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ae2:	4318      	orrgt	r0, r3
 8008ae4:	fa06 f003 	lslle.w	r0, r6, r3
 8008ae8:	f7f7 fc7c 	bl	80003e4 <__aeabi_ui2d>
 8008aec:	2301      	movs	r3, #1
 8008aee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008af2:	3c01      	subs	r4, #1
 8008af4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008af6:	e770      	b.n	80089da <_dtoa_r+0x112>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e7b3      	b.n	8008a64 <_dtoa_r+0x19c>
 8008afc:	900f      	str	r0, [sp, #60]	; 0x3c
 8008afe:	e7b2      	b.n	8008a66 <_dtoa_r+0x19e>
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	eba3 0309 	sub.w	r3, r3, r9
 8008b06:	9306      	str	r3, [sp, #24]
 8008b08:	f1c9 0300 	rsb	r3, r9, #0
 8008b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b0e:	2300      	movs	r3, #0
 8008b10:	930e      	str	r3, [sp, #56]	; 0x38
 8008b12:	e7bf      	b.n	8008a94 <_dtoa_r+0x1cc>
 8008b14:	2300      	movs	r3, #0
 8008b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dc59      	bgt.n	8008bd2 <_dtoa_r+0x30a>
 8008b1e:	f04f 0b01 	mov.w	fp, #1
 8008b22:	465b      	mov	r3, fp
 8008b24:	f8cd b008 	str.w	fp, [sp, #8]
 8008b28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b30:	6042      	str	r2, [r0, #4]
 8008b32:	2204      	movs	r2, #4
 8008b34:	f102 0614 	add.w	r6, r2, #20
 8008b38:	429e      	cmp	r6, r3
 8008b3a:	6841      	ldr	r1, [r0, #4]
 8008b3c:	d94f      	bls.n	8008bde <_dtoa_r+0x316>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fcce 	bl	80094e0 <_Balloc>
 8008b44:	9008      	str	r0, [sp, #32]
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d14d      	bne.n	8008be6 <_dtoa_r+0x31e>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b50:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <_dtoa_r+0x300>)
 8008b52:	e6cd      	b.n	80088f0 <_dtoa_r+0x28>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e7de      	b.n	8008b16 <_dtoa_r+0x24e>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b5e:	eb09 0b03 	add.w	fp, r9, r3
 8008b62:	f10b 0301 	add.w	r3, fp, #1
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	bfb8      	it	lt
 8008b6c:	2301      	movlt	r3, #1
 8008b6e:	e7dd      	b.n	8008b2c <_dtoa_r+0x264>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7f2      	b.n	8008b5a <_dtoa_r+0x292>
 8008b74:	2401      	movs	r4, #1
 8008b76:	2300      	movs	r3, #0
 8008b78:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b7a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b7c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008b80:	2200      	movs	r2, #0
 8008b82:	2312      	movs	r3, #18
 8008b84:	f8cd b008 	str.w	fp, [sp, #8]
 8008b88:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b8a:	e7cf      	b.n	8008b2c <_dtoa_r+0x264>
 8008b8c:	f3af 8000 	nop.w
 8008b90:	636f4361 	.word	0x636f4361
 8008b94:	3fd287a7 	.word	0x3fd287a7
 8008b98:	8b60c8b3 	.word	0x8b60c8b3
 8008b9c:	3fc68a28 	.word	0x3fc68a28
 8008ba0:	509f79fb 	.word	0x509f79fb
 8008ba4:	3fd34413 	.word	0x3fd34413
 8008ba8:	0800bc1d 	.word	0x0800bc1d
 8008bac:	0800bc34 	.word	0x0800bc34
 8008bb0:	7ff00000 	.word	0x7ff00000
 8008bb4:	0800bc19 	.word	0x0800bc19
 8008bb8:	0800bc10 	.word	0x0800bc10
 8008bbc:	0800bbed 	.word	0x0800bbed
 8008bc0:	3ff80000 	.word	0x3ff80000
 8008bc4:	0800bd30 	.word	0x0800bd30
 8008bc8:	0800bc93 	.word	0x0800bc93
 8008bcc:	2301      	movs	r3, #1
 8008bce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bd0:	e7d4      	b.n	8008b7c <_dtoa_r+0x2b4>
 8008bd2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	f8cd b008 	str.w	fp, [sp, #8]
 8008bdc:	e7a6      	b.n	8008b2c <_dtoa_r+0x264>
 8008bde:	3101      	adds	r1, #1
 8008be0:	6041      	str	r1, [r0, #4]
 8008be2:	0052      	lsls	r2, r2, #1
 8008be4:	e7a6      	b.n	8008b34 <_dtoa_r+0x26c>
 8008be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008be8:	9a08      	ldr	r2, [sp, #32]
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	2b0e      	cmp	r3, #14
 8008bf0:	f200 80a8 	bhi.w	8008d44 <_dtoa_r+0x47c>
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	f000 80a5 	beq.w	8008d44 <_dtoa_r+0x47c>
 8008bfa:	f1b9 0f00 	cmp.w	r9, #0
 8008bfe:	dd34      	ble.n	8008c6a <_dtoa_r+0x3a2>
 8008c00:	4a9a      	ldr	r2, [pc, #616]	; (8008e6c <_dtoa_r+0x5a4>)
 8008c02:	f009 030f 	and.w	r3, r9, #15
 8008c06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008c1a:	d016      	beq.n	8008c4a <_dtoa_r+0x382>
 8008c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c20:	4b93      	ldr	r3, [pc, #588]	; (8008e70 <_dtoa_r+0x5a8>)
 8008c22:	2703      	movs	r7, #3
 8008c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c28:	f7f7 fd80 	bl	800072c <__aeabi_ddiv>
 8008c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c30:	f004 040f 	and.w	r4, r4, #15
 8008c34:	4e8e      	ldr	r6, [pc, #568]	; (8008e70 <_dtoa_r+0x5a8>)
 8008c36:	b954      	cbnz	r4, 8008c4e <_dtoa_r+0x386>
 8008c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c40:	f7f7 fd74 	bl	800072c <__aeabi_ddiv>
 8008c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c48:	e029      	b.n	8008c9e <_dtoa_r+0x3d6>
 8008c4a:	2702      	movs	r7, #2
 8008c4c:	e7f2      	b.n	8008c34 <_dtoa_r+0x36c>
 8008c4e:	07e1      	lsls	r1, r4, #31
 8008c50:	d508      	bpl.n	8008c64 <_dtoa_r+0x39c>
 8008c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c5a:	f7f7 fc3d 	bl	80004d8 <__aeabi_dmul>
 8008c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c62:	3701      	adds	r7, #1
 8008c64:	1064      	asrs	r4, r4, #1
 8008c66:	3608      	adds	r6, #8
 8008c68:	e7e5      	b.n	8008c36 <_dtoa_r+0x36e>
 8008c6a:	f000 80a5 	beq.w	8008db8 <_dtoa_r+0x4f0>
 8008c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c72:	f1c9 0400 	rsb	r4, r9, #0
 8008c76:	4b7d      	ldr	r3, [pc, #500]	; (8008e6c <_dtoa_r+0x5a4>)
 8008c78:	f004 020f 	and.w	r2, r4, #15
 8008c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fc28 	bl	80004d8 <__aeabi_dmul>
 8008c88:	2702      	movs	r7, #2
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c90:	4e77      	ldr	r6, [pc, #476]	; (8008e70 <_dtoa_r+0x5a8>)
 8008c92:	1124      	asrs	r4, r4, #4
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	f040 8084 	bne.w	8008da2 <_dtoa_r+0x4da>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1d2      	bne.n	8008c44 <_dtoa_r+0x37c>
 8008c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 808b 	beq.w	8008dbc <_dtoa_r+0x4f4>
 8008ca6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008caa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4b6f      	ldr	r3, [pc, #444]	; (8008e74 <_dtoa_r+0x5ac>)
 8008cb6:	f7f7 fe81 	bl	80009bc <__aeabi_dcmplt>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d07e      	beq.n	8008dbc <_dtoa_r+0x4f4>
 8008cbe:	9b02      	ldr	r3, [sp, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d07b      	beq.n	8008dbc <_dtoa_r+0x4f4>
 8008cc4:	f1bb 0f00 	cmp.w	fp, #0
 8008cc8:	dd38      	ble.n	8008d3c <_dtoa_r+0x474>
 8008cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4b69      	ldr	r3, [pc, #420]	; (8008e78 <_dtoa_r+0x5b0>)
 8008cd2:	f7f7 fc01 	bl	80004d8 <__aeabi_dmul>
 8008cd6:	465c      	mov	r4, fp
 8008cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cdc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8008ce0:	3701      	adds	r7, #1
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f7f7 fb8e 	bl	8000404 <__aeabi_i2d>
 8008ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cec:	f7f7 fbf4 	bl	80004d8 <__aeabi_dmul>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4b62      	ldr	r3, [pc, #392]	; (8008e7c <_dtoa_r+0x5b4>)
 8008cf4:	f7f7 fa3a 	bl	800016c <__adddf3>
 8008cf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d00:	9611      	str	r6, [sp, #68]	; 0x44
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d15d      	bne.n	8008dc2 <_dtoa_r+0x4fa>
 8008d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4b5c      	ldr	r3, [pc, #368]	; (8008e80 <_dtoa_r+0x5b8>)
 8008d0e:	f7f7 fa2b 	bl	8000168 <__aeabi_dsub>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d1a:	4633      	mov	r3, r6
 8008d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d1e:	f7f7 fe6b 	bl	80009f8 <__aeabi_dcmpgt>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f040 829e 	bne.w	8009264 <_dtoa_r+0x99c>
 8008d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d32:	f7f7 fe43 	bl	80009bc <__aeabi_dcmplt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f040 8292 	bne.w	8009260 <_dtoa_r+0x998>
 8008d3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f2c0 8153 	blt.w	8008ff2 <_dtoa_r+0x72a>
 8008d4c:	f1b9 0f0e 	cmp.w	r9, #14
 8008d50:	f300 814f 	bgt.w	8008ff2 <_dtoa_r+0x72a>
 8008d54:	4b45      	ldr	r3, [pc, #276]	; (8008e6c <_dtoa_r+0x5a4>)
 8008d56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008d5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f280 80db 	bge.w	8008f20 <_dtoa_r+0x658>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f300 80d7 	bgt.w	8008f20 <_dtoa_r+0x658>
 8008d72:	f040 8274 	bne.w	800925e <_dtoa_r+0x996>
 8008d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4b40      	ldr	r3, [pc, #256]	; (8008e80 <_dtoa_r+0x5b8>)
 8008d7e:	f7f7 fbab 	bl	80004d8 <__aeabi_dmul>
 8008d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d86:	f7f7 fe2d 	bl	80009e4 <__aeabi_dcmpge>
 8008d8a:	9c02      	ldr	r4, [sp, #8]
 8008d8c:	4626      	mov	r6, r4
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f040 824a 	bne.w	8009228 <_dtoa_r+0x960>
 8008d94:	2331      	movs	r3, #49	; 0x31
 8008d96:	9f08      	ldr	r7, [sp, #32]
 8008d98:	f109 0901 	add.w	r9, r9, #1
 8008d9c:	f807 3b01 	strb.w	r3, [r7], #1
 8008da0:	e246      	b.n	8009230 <_dtoa_r+0x968>
 8008da2:	07e2      	lsls	r2, r4, #31
 8008da4:	d505      	bpl.n	8008db2 <_dtoa_r+0x4ea>
 8008da6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008daa:	f7f7 fb95 	bl	80004d8 <__aeabi_dmul>
 8008dae:	2301      	movs	r3, #1
 8008db0:	3701      	adds	r7, #1
 8008db2:	1064      	asrs	r4, r4, #1
 8008db4:	3608      	adds	r6, #8
 8008db6:	e76d      	b.n	8008c94 <_dtoa_r+0x3cc>
 8008db8:	2702      	movs	r7, #2
 8008dba:	e770      	b.n	8008c9e <_dtoa_r+0x3d6>
 8008dbc:	46c8      	mov	r8, r9
 8008dbe:	9c02      	ldr	r4, [sp, #8]
 8008dc0:	e78f      	b.n	8008ce2 <_dtoa_r+0x41a>
 8008dc2:	9908      	ldr	r1, [sp, #32]
 8008dc4:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <_dtoa_r+0x5a4>)
 8008dc6:	4421      	add	r1, r4
 8008dc8:	9112      	str	r1, [sp, #72]	; 0x48
 8008dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008dd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	d055      	beq.n	8008e88 <_dtoa_r+0x5c0>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	4929      	ldr	r1, [pc, #164]	; (8008e84 <_dtoa_r+0x5bc>)
 8008de0:	f7f7 fca4 	bl	800072c <__aeabi_ddiv>
 8008de4:	463b      	mov	r3, r7
 8008de6:	4632      	mov	r2, r6
 8008de8:	f7f7 f9be 	bl	8000168 <__aeabi_dsub>
 8008dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008df0:	9f08      	ldr	r7, [sp, #32]
 8008df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df6:	f7f7 fe1f 	bl	8000a38 <__aeabi_d2iz>
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	f7f7 fb02 	bl	8000404 <__aeabi_i2d>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e08:	f7f7 f9ae 	bl	8000168 <__aeabi_dsub>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	3430      	adds	r4, #48	; 0x30
 8008e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e1a:	f807 4b01 	strb.w	r4, [r7], #1
 8008e1e:	f7f7 fdcd 	bl	80009bc <__aeabi_dcmplt>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d174      	bne.n	8008f10 <_dtoa_r+0x648>
 8008e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	4911      	ldr	r1, [pc, #68]	; (8008e74 <_dtoa_r+0x5ac>)
 8008e2e:	f7f7 f99b 	bl	8000168 <__aeabi_dsub>
 8008e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e36:	f7f7 fdc1 	bl	80009bc <__aeabi_dcmplt>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	f040 80b6 	bne.w	8008fac <_dtoa_r+0x6e4>
 8008e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e42:	429f      	cmp	r7, r3
 8008e44:	f43f af7a 	beq.w	8008d3c <_dtoa_r+0x474>
 8008e48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <_dtoa_r+0x5b0>)
 8008e50:	f7f7 fb42 	bl	80004d8 <__aeabi_dmul>
 8008e54:	2200      	movs	r2, #0
 8008e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e5e:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <_dtoa_r+0x5b0>)
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e68:	e7c3      	b.n	8008df2 <_dtoa_r+0x52a>
 8008e6a:	bf00      	nop
 8008e6c:	0800bd30 	.word	0x0800bd30
 8008e70:	0800bd08 	.word	0x0800bd08
 8008e74:	3ff00000 	.word	0x3ff00000
 8008e78:	40240000 	.word	0x40240000
 8008e7c:	401c0000 	.word	0x401c0000
 8008e80:	40140000 	.word	0x40140000
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 fb24 	bl	80004d8 <__aeabi_dmul>
 8008e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e96:	9c08      	ldr	r4, [sp, #32]
 8008e98:	9314      	str	r3, [sp, #80]	; 0x50
 8008e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9e:	f7f7 fdcb 	bl	8000a38 <__aeabi_d2iz>
 8008ea2:	9015      	str	r0, [sp, #84]	; 0x54
 8008ea4:	f7f7 faae 	bl	8000404 <__aeabi_i2d>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb0:	f7f7 f95a 	bl	8000168 <__aeabi_dsub>
 8008eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	3330      	adds	r3, #48	; 0x30
 8008eba:	f804 3b01 	strb.w	r3, [r4], #1
 8008ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	d124      	bne.n	8008f14 <_dtoa_r+0x64c>
 8008eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ece:	4bb3      	ldr	r3, [pc, #716]	; (800919c <_dtoa_r+0x8d4>)
 8008ed0:	f7f7 f94c 	bl	800016c <__adddf3>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d162      	bne.n	8008faa <_dtoa_r+0x6e2>
 8008ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ee8:	2000      	movs	r0, #0
 8008eea:	49ac      	ldr	r1, [pc, #688]	; (800919c <_dtoa_r+0x8d4>)
 8008eec:	f7f7 f93c 	bl	8000168 <__aeabi_dsub>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 fd60 	bl	80009bc <__aeabi_dcmplt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f43f af1d 	beq.w	8008d3c <_dtoa_r+0x474>
 8008f02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f04:	1e7b      	subs	r3, r7, #1
 8008f06:	9314      	str	r3, [sp, #80]	; 0x50
 8008f08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008f0c:	2b30      	cmp	r3, #48	; 0x30
 8008f0e:	d0f8      	beq.n	8008f02 <_dtoa_r+0x63a>
 8008f10:	46c1      	mov	r9, r8
 8008f12:	e03a      	b.n	8008f8a <_dtoa_r+0x6c2>
 8008f14:	4ba2      	ldr	r3, [pc, #648]	; (80091a0 <_dtoa_r+0x8d8>)
 8008f16:	f7f7 fadf 	bl	80004d8 <__aeabi_dmul>
 8008f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1e:	e7bc      	b.n	8008e9a <_dtoa_r+0x5d2>
 8008f20:	9f08      	ldr	r7, [sp, #32]
 8008f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f2a:	f7f7 fbff 	bl	800072c <__aeabi_ddiv>
 8008f2e:	f7f7 fd83 	bl	8000a38 <__aeabi_d2iz>
 8008f32:	4604      	mov	r4, r0
 8008f34:	f7f7 fa66 	bl	8000404 <__aeabi_i2d>
 8008f38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f3c:	f7f7 facc 	bl	80004d8 <__aeabi_dmul>
 8008f40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f44:	460b      	mov	r3, r1
 8008f46:	4602      	mov	r2, r0
 8008f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f4c:	f7f7 f90c 	bl	8000168 <__aeabi_dsub>
 8008f50:	f807 6b01 	strb.w	r6, [r7], #1
 8008f54:	9e08      	ldr	r6, [sp, #32]
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	1bbe      	subs	r6, r7, r6
 8008f5a:	42b3      	cmp	r3, r6
 8008f5c:	d13a      	bne.n	8008fd4 <_dtoa_r+0x70c>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	f7f7 f903 	bl	800016c <__adddf3>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f72:	f7f7 fd41 	bl	80009f8 <__aeabi_dcmpgt>
 8008f76:	bb58      	cbnz	r0, 8008fd0 <_dtoa_r+0x708>
 8008f78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f80:	f7f7 fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8008f84:	b108      	cbz	r0, 8008f8a <_dtoa_r+0x6c2>
 8008f86:	07e1      	lsls	r1, r4, #31
 8008f88:	d422      	bmi.n	8008fd0 <_dtoa_r+0x708>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	f000 fae7 	bl	8009560 <_Bfree>
 8008f92:	2300      	movs	r3, #0
 8008f94:	703b      	strb	r3, [r7, #0]
 8008f96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f98:	f109 0001 	add.w	r0, r9, #1
 8008f9c:	6018      	str	r0, [r3, #0]
 8008f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f43f acdf 	beq.w	8008964 <_dtoa_r+0x9c>
 8008fa6:	601f      	str	r7, [r3, #0]
 8008fa8:	e4dc      	b.n	8008964 <_dtoa_r+0x9c>
 8008faa:	4627      	mov	r7, r4
 8008fac:	463b      	mov	r3, r7
 8008fae:	461f      	mov	r7, r3
 8008fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb4:	2a39      	cmp	r2, #57	; 0x39
 8008fb6:	d107      	bne.n	8008fc8 <_dtoa_r+0x700>
 8008fb8:	9a08      	ldr	r2, [sp, #32]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d1f7      	bne.n	8008fae <_dtoa_r+0x6e6>
 8008fbe:	2230      	movs	r2, #48	; 0x30
 8008fc0:	9908      	ldr	r1, [sp, #32]
 8008fc2:	f108 0801 	add.w	r8, r8, #1
 8008fc6:	700a      	strb	r2, [r1, #0]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	3201      	adds	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e79f      	b.n	8008f10 <_dtoa_r+0x648>
 8008fd0:	46c8      	mov	r8, r9
 8008fd2:	e7eb      	b.n	8008fac <_dtoa_r+0x6e4>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4b72      	ldr	r3, [pc, #456]	; (80091a0 <_dtoa_r+0x8d8>)
 8008fd8:	f7f7 fa7e 	bl	80004d8 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f7f7 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d098      	beq.n	8008f22 <_dtoa_r+0x65a>
 8008ff0:	e7cb      	b.n	8008f8a <_dtoa_r+0x6c2>
 8008ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	f000 80cd 	beq.w	8009194 <_dtoa_r+0x8cc>
 8008ffa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ffc:	2a01      	cmp	r2, #1
 8008ffe:	f300 80af 	bgt.w	8009160 <_dtoa_r+0x898>
 8009002:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009004:	2a00      	cmp	r2, #0
 8009006:	f000 80a7 	beq.w	8009158 <_dtoa_r+0x890>
 800900a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800900e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009010:	9f06      	ldr	r7, [sp, #24]
 8009012:	9a06      	ldr	r2, [sp, #24]
 8009014:	2101      	movs	r1, #1
 8009016:	441a      	add	r2, r3
 8009018:	9206      	str	r2, [sp, #24]
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	4628      	mov	r0, r5
 800901e:	441a      	add	r2, r3
 8009020:	9209      	str	r2, [sp, #36]	; 0x24
 8009022:	f000 fb57 	bl	80096d4 <__i2b>
 8009026:	4606      	mov	r6, r0
 8009028:	2f00      	cmp	r7, #0
 800902a:	dd0c      	ble.n	8009046 <_dtoa_r+0x77e>
 800902c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902e:	2b00      	cmp	r3, #0
 8009030:	dd09      	ble.n	8009046 <_dtoa_r+0x77e>
 8009032:	42bb      	cmp	r3, r7
 8009034:	bfa8      	it	ge
 8009036:	463b      	movge	r3, r7
 8009038:	9a06      	ldr	r2, [sp, #24]
 800903a:	1aff      	subs	r7, r7, r3
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	9206      	str	r2, [sp, #24]
 8009040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009048:	b1f3      	cbz	r3, 8009088 <_dtoa_r+0x7c0>
 800904a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80a9 	beq.w	80091a4 <_dtoa_r+0x8dc>
 8009052:	2c00      	cmp	r4, #0
 8009054:	dd10      	ble.n	8009078 <_dtoa_r+0x7b0>
 8009056:	4631      	mov	r1, r6
 8009058:	4622      	mov	r2, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fbf4 	bl	8009848 <__pow5mult>
 8009060:	4652      	mov	r2, sl
 8009062:	4601      	mov	r1, r0
 8009064:	4606      	mov	r6, r0
 8009066:	4628      	mov	r0, r5
 8009068:	f000 fb4a 	bl	8009700 <__multiply>
 800906c:	4680      	mov	r8, r0
 800906e:	4651      	mov	r1, sl
 8009070:	4628      	mov	r0, r5
 8009072:	f000 fa75 	bl	8009560 <_Bfree>
 8009076:	46c2      	mov	sl, r8
 8009078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907a:	1b1a      	subs	r2, r3, r4
 800907c:	d004      	beq.n	8009088 <_dtoa_r+0x7c0>
 800907e:	4651      	mov	r1, sl
 8009080:	4628      	mov	r0, r5
 8009082:	f000 fbe1 	bl	8009848 <__pow5mult>
 8009086:	4682      	mov	sl, r0
 8009088:	2101      	movs	r1, #1
 800908a:	4628      	mov	r0, r5
 800908c:	f000 fb22 	bl	80096d4 <__i2b>
 8009090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009092:	4604      	mov	r4, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	f340 8087 	ble.w	80091a8 <_dtoa_r+0x8e0>
 800909a:	461a      	mov	r2, r3
 800909c:	4601      	mov	r1, r0
 800909e:	4628      	mov	r0, r5
 80090a0:	f000 fbd2 	bl	8009848 <__pow5mult>
 80090a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090a6:	4604      	mov	r4, r0
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	f340 8080 	ble.w	80091ae <_dtoa_r+0x8e6>
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090b8:	6918      	ldr	r0, [r3, #16]
 80090ba:	f000 fabd 	bl	8009638 <__hi0bits>
 80090be:	f1c0 0020 	rsb	r0, r0, #32
 80090c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c4:	4418      	add	r0, r3
 80090c6:	f010 001f 	ands.w	r0, r0, #31
 80090ca:	f000 8092 	beq.w	80091f2 <_dtoa_r+0x92a>
 80090ce:	f1c0 0320 	rsb	r3, r0, #32
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	f340 808a 	ble.w	80091ec <_dtoa_r+0x924>
 80090d8:	f1c0 001c 	rsb	r0, r0, #28
 80090dc:	9b06      	ldr	r3, [sp, #24]
 80090de:	4407      	add	r7, r0
 80090e0:	4403      	add	r3, r0
 80090e2:	9306      	str	r3, [sp, #24]
 80090e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e6:	4403      	add	r3, r0
 80090e8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dd05      	ble.n	80090fc <_dtoa_r+0x834>
 80090f0:	4651      	mov	r1, sl
 80090f2:	461a      	mov	r2, r3
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 fc01 	bl	80098fc <__lshift>
 80090fa:	4682      	mov	sl, r0
 80090fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dd05      	ble.n	800910e <_dtoa_r+0x846>
 8009102:	4621      	mov	r1, r4
 8009104:	461a      	mov	r2, r3
 8009106:	4628      	mov	r0, r5
 8009108:	f000 fbf8 	bl	80098fc <__lshift>
 800910c:	4604      	mov	r4, r0
 800910e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d070      	beq.n	80091f6 <_dtoa_r+0x92e>
 8009114:	4621      	mov	r1, r4
 8009116:	4650      	mov	r0, sl
 8009118:	f000 fc5c 	bl	80099d4 <__mcmp>
 800911c:	2800      	cmp	r0, #0
 800911e:	da6a      	bge.n	80091f6 <_dtoa_r+0x92e>
 8009120:	2300      	movs	r3, #0
 8009122:	4651      	mov	r1, sl
 8009124:	220a      	movs	r2, #10
 8009126:	4628      	mov	r0, r5
 8009128:	f000 fa3c 	bl	80095a4 <__multadd>
 800912c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912e:	4682      	mov	sl, r0
 8009130:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8193 	beq.w	8009460 <_dtoa_r+0xb98>
 800913a:	4631      	mov	r1, r6
 800913c:	2300      	movs	r3, #0
 800913e:	220a      	movs	r2, #10
 8009140:	4628      	mov	r0, r5
 8009142:	f000 fa2f 	bl	80095a4 <__multadd>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	4606      	mov	r6, r0
 800914c:	f300 8093 	bgt.w	8009276 <_dtoa_r+0x9ae>
 8009150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009152:	2b02      	cmp	r3, #2
 8009154:	dc57      	bgt.n	8009206 <_dtoa_r+0x93e>
 8009156:	e08e      	b.n	8009276 <_dtoa_r+0x9ae>
 8009158:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800915a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800915e:	e756      	b.n	800900e <_dtoa_r+0x746>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	1e5c      	subs	r4, r3, #1
 8009164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009166:	42a3      	cmp	r3, r4
 8009168:	bfb7      	itett	lt
 800916a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800916c:	1b1c      	subge	r4, r3, r4
 800916e:	1ae2      	sublt	r2, r4, r3
 8009170:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009172:	bfbe      	ittt	lt
 8009174:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009176:	189b      	addlt	r3, r3, r2
 8009178:	930e      	strlt	r3, [sp, #56]	; 0x38
 800917a:	9b02      	ldr	r3, [sp, #8]
 800917c:	bfb8      	it	lt
 800917e:	2400      	movlt	r4, #0
 8009180:	2b00      	cmp	r3, #0
 8009182:	bfbb      	ittet	lt
 8009184:	9b06      	ldrlt	r3, [sp, #24]
 8009186:	9a02      	ldrlt	r2, [sp, #8]
 8009188:	9f06      	ldrge	r7, [sp, #24]
 800918a:	1a9f      	sublt	r7, r3, r2
 800918c:	bfac      	ite	ge
 800918e:	9b02      	ldrge	r3, [sp, #8]
 8009190:	2300      	movlt	r3, #0
 8009192:	e73e      	b.n	8009012 <_dtoa_r+0x74a>
 8009194:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009196:	9f06      	ldr	r7, [sp, #24]
 8009198:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800919a:	e745      	b.n	8009028 <_dtoa_r+0x760>
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	40240000 	.word	0x40240000
 80091a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091a6:	e76a      	b.n	800907e <_dtoa_r+0x7b6>
 80091a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	dc19      	bgt.n	80091e2 <_dtoa_r+0x91a>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	b9bb      	cbnz	r3, 80091e2 <_dtoa_r+0x91a>
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b8:	b99b      	cbnz	r3, 80091e2 <_dtoa_r+0x91a>
 80091ba:	9b05      	ldr	r3, [sp, #20]
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	0d1b      	lsrs	r3, r3, #20
 80091c2:	051b      	lsls	r3, r3, #20
 80091c4:	b183      	cbz	r3, 80091e8 <_dtoa_r+0x920>
 80091c6:	f04f 0801 	mov.w	r8, #1
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	3301      	adds	r3, #1
 80091ce:	9306      	str	r3, [sp, #24]
 80091d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d2:	3301      	adds	r3, #1
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f af6a 	bne.w	80090b2 <_dtoa_r+0x7ea>
 80091de:	2001      	movs	r0, #1
 80091e0:	e76f      	b.n	80090c2 <_dtoa_r+0x7fa>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	e7f6      	b.n	80091d6 <_dtoa_r+0x90e>
 80091e8:	4698      	mov	r8, r3
 80091ea:	e7f4      	b.n	80091d6 <_dtoa_r+0x90e>
 80091ec:	f43f af7d 	beq.w	80090ea <_dtoa_r+0x822>
 80091f0:	4618      	mov	r0, r3
 80091f2:	301c      	adds	r0, #28
 80091f4:	e772      	b.n	80090dc <_dtoa_r+0x814>
 80091f6:	9b02      	ldr	r3, [sp, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc36      	bgt.n	800926a <_dtoa_r+0x9a2>
 80091fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091fe:	2b02      	cmp	r3, #2
 8009200:	dd33      	ble.n	800926a <_dtoa_r+0x9a2>
 8009202:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009206:	f1bb 0f00 	cmp.w	fp, #0
 800920a:	d10d      	bne.n	8009228 <_dtoa_r+0x960>
 800920c:	4621      	mov	r1, r4
 800920e:	465b      	mov	r3, fp
 8009210:	2205      	movs	r2, #5
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f9c6 	bl	80095a4 <__multadd>
 8009218:	4601      	mov	r1, r0
 800921a:	4604      	mov	r4, r0
 800921c:	4650      	mov	r0, sl
 800921e:	f000 fbd9 	bl	80099d4 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	f73f adb6 	bgt.w	8008d94 <_dtoa_r+0x4cc>
 8009228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800922a:	9f08      	ldr	r7, [sp, #32]
 800922c:	ea6f 0903 	mvn.w	r9, r3
 8009230:	f04f 0800 	mov.w	r8, #0
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 f992 	bl	8009560 <_Bfree>
 800923c:	2e00      	cmp	r6, #0
 800923e:	f43f aea4 	beq.w	8008f8a <_dtoa_r+0x6c2>
 8009242:	f1b8 0f00 	cmp.w	r8, #0
 8009246:	d005      	beq.n	8009254 <_dtoa_r+0x98c>
 8009248:	45b0      	cmp	r8, r6
 800924a:	d003      	beq.n	8009254 <_dtoa_r+0x98c>
 800924c:	4641      	mov	r1, r8
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f986 	bl	8009560 <_Bfree>
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	f000 f982 	bl	8009560 <_Bfree>
 800925c:	e695      	b.n	8008f8a <_dtoa_r+0x6c2>
 800925e:	2400      	movs	r4, #0
 8009260:	4626      	mov	r6, r4
 8009262:	e7e1      	b.n	8009228 <_dtoa_r+0x960>
 8009264:	46c1      	mov	r9, r8
 8009266:	4626      	mov	r6, r4
 8009268:	e594      	b.n	8008d94 <_dtoa_r+0x4cc>
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80fc 	beq.w	800946e <_dtoa_r+0xba6>
 8009276:	2f00      	cmp	r7, #0
 8009278:	dd05      	ble.n	8009286 <_dtoa_r+0x9be>
 800927a:	4631      	mov	r1, r6
 800927c:	463a      	mov	r2, r7
 800927e:	4628      	mov	r0, r5
 8009280:	f000 fb3c 	bl	80098fc <__lshift>
 8009284:	4606      	mov	r6, r0
 8009286:	f1b8 0f00 	cmp.w	r8, #0
 800928a:	d05c      	beq.n	8009346 <_dtoa_r+0xa7e>
 800928c:	4628      	mov	r0, r5
 800928e:	6871      	ldr	r1, [r6, #4]
 8009290:	f000 f926 	bl	80094e0 <_Balloc>
 8009294:	4607      	mov	r7, r0
 8009296:	b928      	cbnz	r0, 80092a4 <_dtoa_r+0x9dc>
 8009298:	4602      	mov	r2, r0
 800929a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800929e:	4b7e      	ldr	r3, [pc, #504]	; (8009498 <_dtoa_r+0xbd0>)
 80092a0:	f7ff bb26 	b.w	80088f0 <_dtoa_r+0x28>
 80092a4:	6932      	ldr	r2, [r6, #16]
 80092a6:	f106 010c 	add.w	r1, r6, #12
 80092aa:	3202      	adds	r2, #2
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	300c      	adds	r0, #12
 80092b0:	f7fe fd0a 	bl	8007cc8 <memcpy>
 80092b4:	2201      	movs	r2, #1
 80092b6:	4639      	mov	r1, r7
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 fb1f 	bl	80098fc <__lshift>
 80092be:	46b0      	mov	r8, r6
 80092c0:	4606      	mov	r6, r0
 80092c2:	9b08      	ldr	r3, [sp, #32]
 80092c4:	3301      	adds	r3, #1
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	445b      	add	r3, fp
 80092cc:	930a      	str	r3, [sp, #40]	; 0x28
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	9309      	str	r3, [sp, #36]	; 0x24
 80092d6:	9b02      	ldr	r3, [sp, #8]
 80092d8:	4621      	mov	r1, r4
 80092da:	4650      	mov	r0, sl
 80092dc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80092e0:	f7ff fa62 	bl	80087a8 <quorem>
 80092e4:	4603      	mov	r3, r0
 80092e6:	4641      	mov	r1, r8
 80092e8:	3330      	adds	r3, #48	; 0x30
 80092ea:	9004      	str	r0, [sp, #16]
 80092ec:	4650      	mov	r0, sl
 80092ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f0:	f000 fb70 	bl	80099d4 <__mcmp>
 80092f4:	4632      	mov	r2, r6
 80092f6:	9006      	str	r0, [sp, #24]
 80092f8:	4621      	mov	r1, r4
 80092fa:	4628      	mov	r0, r5
 80092fc:	f000 fb86 	bl	8009a0c <__mdiff>
 8009300:	68c2      	ldr	r2, [r0, #12]
 8009302:	4607      	mov	r7, r0
 8009304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009306:	bb02      	cbnz	r2, 800934a <_dtoa_r+0xa82>
 8009308:	4601      	mov	r1, r0
 800930a:	4650      	mov	r0, sl
 800930c:	f000 fb62 	bl	80099d4 <__mcmp>
 8009310:	4602      	mov	r2, r0
 8009312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009314:	4639      	mov	r1, r7
 8009316:	4628      	mov	r0, r5
 8009318:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800931c:	f000 f920 	bl	8009560 <_Bfree>
 8009320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009324:	9f02      	ldr	r7, [sp, #8]
 8009326:	ea43 0102 	orr.w	r1, r3, r2
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	430b      	orrs	r3, r1
 800932e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009330:	d10d      	bne.n	800934e <_dtoa_r+0xa86>
 8009332:	2b39      	cmp	r3, #57	; 0x39
 8009334:	d027      	beq.n	8009386 <_dtoa_r+0xabe>
 8009336:	9a06      	ldr	r2, [sp, #24]
 8009338:	2a00      	cmp	r2, #0
 800933a:	dd01      	ble.n	8009340 <_dtoa_r+0xa78>
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	3331      	adds	r3, #49	; 0x31
 8009340:	f88b 3000 	strb.w	r3, [fp]
 8009344:	e776      	b.n	8009234 <_dtoa_r+0x96c>
 8009346:	4630      	mov	r0, r6
 8009348:	e7b9      	b.n	80092be <_dtoa_r+0x9f6>
 800934a:	2201      	movs	r2, #1
 800934c:	e7e2      	b.n	8009314 <_dtoa_r+0xa4c>
 800934e:	9906      	ldr	r1, [sp, #24]
 8009350:	2900      	cmp	r1, #0
 8009352:	db04      	blt.n	800935e <_dtoa_r+0xa96>
 8009354:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009356:	4301      	orrs	r1, r0
 8009358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935a:	4301      	orrs	r1, r0
 800935c:	d120      	bne.n	80093a0 <_dtoa_r+0xad8>
 800935e:	2a00      	cmp	r2, #0
 8009360:	ddee      	ble.n	8009340 <_dtoa_r+0xa78>
 8009362:	4651      	mov	r1, sl
 8009364:	2201      	movs	r2, #1
 8009366:	4628      	mov	r0, r5
 8009368:	9302      	str	r3, [sp, #8]
 800936a:	f000 fac7 	bl	80098fc <__lshift>
 800936e:	4621      	mov	r1, r4
 8009370:	4682      	mov	sl, r0
 8009372:	f000 fb2f 	bl	80099d4 <__mcmp>
 8009376:	2800      	cmp	r0, #0
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	dc02      	bgt.n	8009382 <_dtoa_r+0xaba>
 800937c:	d1e0      	bne.n	8009340 <_dtoa_r+0xa78>
 800937e:	07da      	lsls	r2, r3, #31
 8009380:	d5de      	bpl.n	8009340 <_dtoa_r+0xa78>
 8009382:	2b39      	cmp	r3, #57	; 0x39
 8009384:	d1da      	bne.n	800933c <_dtoa_r+0xa74>
 8009386:	2339      	movs	r3, #57	; 0x39
 8009388:	f88b 3000 	strb.w	r3, [fp]
 800938c:	463b      	mov	r3, r7
 800938e:	461f      	mov	r7, r3
 8009390:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009394:	3b01      	subs	r3, #1
 8009396:	2a39      	cmp	r2, #57	; 0x39
 8009398:	d050      	beq.n	800943c <_dtoa_r+0xb74>
 800939a:	3201      	adds	r2, #1
 800939c:	701a      	strb	r2, [r3, #0]
 800939e:	e749      	b.n	8009234 <_dtoa_r+0x96c>
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	dd03      	ble.n	80093ac <_dtoa_r+0xae4>
 80093a4:	2b39      	cmp	r3, #57	; 0x39
 80093a6:	d0ee      	beq.n	8009386 <_dtoa_r+0xabe>
 80093a8:	3301      	adds	r3, #1
 80093aa:	e7c9      	b.n	8009340 <_dtoa_r+0xa78>
 80093ac:	9a02      	ldr	r2, [sp, #8]
 80093ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093b4:	428a      	cmp	r2, r1
 80093b6:	d02a      	beq.n	800940e <_dtoa_r+0xb46>
 80093b8:	4651      	mov	r1, sl
 80093ba:	2300      	movs	r3, #0
 80093bc:	220a      	movs	r2, #10
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 f8f0 	bl	80095a4 <__multadd>
 80093c4:	45b0      	cmp	r8, r6
 80093c6:	4682      	mov	sl, r0
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	f04f 020a 	mov.w	r2, #10
 80093d0:	4641      	mov	r1, r8
 80093d2:	4628      	mov	r0, r5
 80093d4:	d107      	bne.n	80093e6 <_dtoa_r+0xb1e>
 80093d6:	f000 f8e5 	bl	80095a4 <__multadd>
 80093da:	4680      	mov	r8, r0
 80093dc:	4606      	mov	r6, r0
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	e777      	b.n	80092d6 <_dtoa_r+0xa0e>
 80093e6:	f000 f8dd 	bl	80095a4 <__multadd>
 80093ea:	4631      	mov	r1, r6
 80093ec:	4680      	mov	r8, r0
 80093ee:	2300      	movs	r3, #0
 80093f0:	220a      	movs	r2, #10
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 f8d6 	bl	80095a4 <__multadd>
 80093f8:	4606      	mov	r6, r0
 80093fa:	e7f0      	b.n	80093de <_dtoa_r+0xb16>
 80093fc:	f1bb 0f00 	cmp.w	fp, #0
 8009400:	bfcc      	ite	gt
 8009402:	465f      	movgt	r7, fp
 8009404:	2701      	movle	r7, #1
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	9a08      	ldr	r2, [sp, #32]
 800940c:	4417      	add	r7, r2
 800940e:	4651      	mov	r1, sl
 8009410:	2201      	movs	r2, #1
 8009412:	4628      	mov	r0, r5
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	f000 fa71 	bl	80098fc <__lshift>
 800941a:	4621      	mov	r1, r4
 800941c:	4682      	mov	sl, r0
 800941e:	f000 fad9 	bl	80099d4 <__mcmp>
 8009422:	2800      	cmp	r0, #0
 8009424:	dcb2      	bgt.n	800938c <_dtoa_r+0xac4>
 8009426:	d102      	bne.n	800942e <_dtoa_r+0xb66>
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	07db      	lsls	r3, r3, #31
 800942c:	d4ae      	bmi.n	800938c <_dtoa_r+0xac4>
 800942e:	463b      	mov	r3, r7
 8009430:	461f      	mov	r7, r3
 8009432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009436:	2a30      	cmp	r2, #48	; 0x30
 8009438:	d0fa      	beq.n	8009430 <_dtoa_r+0xb68>
 800943a:	e6fb      	b.n	8009234 <_dtoa_r+0x96c>
 800943c:	9a08      	ldr	r2, [sp, #32]
 800943e:	429a      	cmp	r2, r3
 8009440:	d1a5      	bne.n	800938e <_dtoa_r+0xac6>
 8009442:	2331      	movs	r3, #49	; 0x31
 8009444:	f109 0901 	add.w	r9, r9, #1
 8009448:	7013      	strb	r3, [r2, #0]
 800944a:	e6f3      	b.n	8009234 <_dtoa_r+0x96c>
 800944c:	4b13      	ldr	r3, [pc, #76]	; (800949c <_dtoa_r+0xbd4>)
 800944e:	f7ff baa7 	b.w	80089a0 <_dtoa_r+0xd8>
 8009452:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009454:	2b00      	cmp	r3, #0
 8009456:	f47f aa80 	bne.w	800895a <_dtoa_r+0x92>
 800945a:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <_dtoa_r+0xbd8>)
 800945c:	f7ff baa0 	b.w	80089a0 <_dtoa_r+0xd8>
 8009460:	f1bb 0f00 	cmp.w	fp, #0
 8009464:	dc03      	bgt.n	800946e <_dtoa_r+0xba6>
 8009466:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009468:	2b02      	cmp	r3, #2
 800946a:	f73f aecc 	bgt.w	8009206 <_dtoa_r+0x93e>
 800946e:	9f08      	ldr	r7, [sp, #32]
 8009470:	4621      	mov	r1, r4
 8009472:	4650      	mov	r0, sl
 8009474:	f7ff f998 	bl	80087a8 <quorem>
 8009478:	9a08      	ldr	r2, [sp, #32]
 800947a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800947e:	f807 3b01 	strb.w	r3, [r7], #1
 8009482:	1aba      	subs	r2, r7, r2
 8009484:	4593      	cmp	fp, r2
 8009486:	ddb9      	ble.n	80093fc <_dtoa_r+0xb34>
 8009488:	4651      	mov	r1, sl
 800948a:	2300      	movs	r3, #0
 800948c:	220a      	movs	r2, #10
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f888 	bl	80095a4 <__multadd>
 8009494:	4682      	mov	sl, r0
 8009496:	e7eb      	b.n	8009470 <_dtoa_r+0xba8>
 8009498:	0800bc93 	.word	0x0800bc93
 800949c:	0800bbec 	.word	0x0800bbec
 80094a0:	0800bc10 	.word	0x0800bc10

080094a4 <_localeconv_r>:
 80094a4:	4800      	ldr	r0, [pc, #0]	; (80094a8 <_localeconv_r+0x4>)
 80094a6:	4770      	bx	lr
 80094a8:	200001d0 	.word	0x200001d0

080094ac <memchr>:
 80094ac:	4603      	mov	r3, r0
 80094ae:	b510      	push	{r4, lr}
 80094b0:	b2c9      	uxtb	r1, r1
 80094b2:	4402      	add	r2, r0
 80094b4:	4293      	cmp	r3, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	d101      	bne.n	80094be <memchr+0x12>
 80094ba:	2000      	movs	r0, #0
 80094bc:	e003      	b.n	80094c6 <memchr+0x1a>
 80094be:	7804      	ldrb	r4, [r0, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	428c      	cmp	r4, r1
 80094c4:	d1f6      	bne.n	80094b4 <memchr+0x8>
 80094c6:	bd10      	pop	{r4, pc}

080094c8 <__malloc_lock>:
 80094c8:	4801      	ldr	r0, [pc, #4]	; (80094d0 <__malloc_lock+0x8>)
 80094ca:	f000 bbca 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 80094ce:	bf00      	nop
 80094d0:	20000924 	.word	0x20000924

080094d4 <__malloc_unlock>:
 80094d4:	4801      	ldr	r0, [pc, #4]	; (80094dc <__malloc_unlock+0x8>)
 80094d6:	f000 bbc5 	b.w	8009c64 <__retarget_lock_release_recursive>
 80094da:	bf00      	nop
 80094dc:	20000924 	.word	0x20000924

080094e0 <_Balloc>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094e4:	4604      	mov	r4, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	b976      	cbnz	r6, 8009508 <_Balloc+0x28>
 80094ea:	2010      	movs	r0, #16
 80094ec:	f7fe fbdc 	bl	8007ca8 <malloc>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6260      	str	r0, [r4, #36]	; 0x24
 80094f4:	b920      	cbnz	r0, 8009500 <_Balloc+0x20>
 80094f6:	2166      	movs	r1, #102	; 0x66
 80094f8:	4b17      	ldr	r3, [pc, #92]	; (8009558 <_Balloc+0x78>)
 80094fa:	4818      	ldr	r0, [pc, #96]	; (800955c <_Balloc+0x7c>)
 80094fc:	f000 fb80 	bl	8009c00 <__assert_func>
 8009500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009504:	6006      	str	r6, [r0, #0]
 8009506:	60c6      	str	r6, [r0, #12]
 8009508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800950a:	68f3      	ldr	r3, [r6, #12]
 800950c:	b183      	cbz	r3, 8009530 <_Balloc+0x50>
 800950e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009516:	b9b8      	cbnz	r0, 8009548 <_Balloc+0x68>
 8009518:	2101      	movs	r1, #1
 800951a:	fa01 f605 	lsl.w	r6, r1, r5
 800951e:	1d72      	adds	r2, r6, #5
 8009520:	4620      	mov	r0, r4
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	f000 fb5e 	bl	8009be4 <_calloc_r>
 8009528:	b160      	cbz	r0, 8009544 <_Balloc+0x64>
 800952a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800952e:	e00e      	b.n	800954e <_Balloc+0x6e>
 8009530:	2221      	movs	r2, #33	; 0x21
 8009532:	2104      	movs	r1, #4
 8009534:	4620      	mov	r0, r4
 8009536:	f000 fb55 	bl	8009be4 <_calloc_r>
 800953a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800953c:	60f0      	str	r0, [r6, #12]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e4      	bne.n	800950e <_Balloc+0x2e>
 8009544:	2000      	movs	r0, #0
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	6802      	ldr	r2, [r0, #0]
 800954a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800954e:	2300      	movs	r3, #0
 8009550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009554:	e7f7      	b.n	8009546 <_Balloc+0x66>
 8009556:	bf00      	nop
 8009558:	0800bc1d 	.word	0x0800bc1d
 800955c:	0800bca4 	.word	0x0800bca4

08009560 <_Bfree>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b976      	cbnz	r6, 8009588 <_Bfree+0x28>
 800956a:	2010      	movs	r0, #16
 800956c:	f7fe fb9c 	bl	8007ca8 <malloc>
 8009570:	4602      	mov	r2, r0
 8009572:	6268      	str	r0, [r5, #36]	; 0x24
 8009574:	b920      	cbnz	r0, 8009580 <_Bfree+0x20>
 8009576:	218a      	movs	r1, #138	; 0x8a
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <_Bfree+0x3c>)
 800957a:	4809      	ldr	r0, [pc, #36]	; (80095a0 <_Bfree+0x40>)
 800957c:	f000 fb40 	bl	8009c00 <__assert_func>
 8009580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009584:	6006      	str	r6, [r0, #0]
 8009586:	60c6      	str	r6, [r0, #12]
 8009588:	b13c      	cbz	r4, 800959a <_Bfree+0x3a>
 800958a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800958c:	6862      	ldr	r2, [r4, #4]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009594:	6021      	str	r1, [r4, #0]
 8009596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	0800bc1d 	.word	0x0800bc1d
 80095a0:	0800bca4 	.word	0x0800bca4

080095a4 <__multadd>:
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	4698      	mov	r8, r3
 80095aa:	460c      	mov	r4, r1
 80095ac:	2300      	movs	r3, #0
 80095ae:	690e      	ldr	r6, [r1, #16]
 80095b0:	4607      	mov	r7, r0
 80095b2:	f101 0014 	add.w	r0, r1, #20
 80095b6:	6805      	ldr	r5, [r0, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	b2a9      	uxth	r1, r5
 80095bc:	fb02 8101 	mla	r1, r2, r1, r8
 80095c0:	0c2d      	lsrs	r5, r5, #16
 80095c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095c6:	fb02 c505 	mla	r5, r2, r5, ip
 80095ca:	b289      	uxth	r1, r1
 80095cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095d0:	429e      	cmp	r6, r3
 80095d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095d6:	f840 1b04 	str.w	r1, [r0], #4
 80095da:	dcec      	bgt.n	80095b6 <__multadd+0x12>
 80095dc:	f1b8 0f00 	cmp.w	r8, #0
 80095e0:	d022      	beq.n	8009628 <__multadd+0x84>
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	42b3      	cmp	r3, r6
 80095e6:	dc19      	bgt.n	800961c <__multadd+0x78>
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	4638      	mov	r0, r7
 80095ec:	3101      	adds	r1, #1
 80095ee:	f7ff ff77 	bl	80094e0 <_Balloc>
 80095f2:	4605      	mov	r5, r0
 80095f4:	b928      	cbnz	r0, 8009602 <__multadd+0x5e>
 80095f6:	4602      	mov	r2, r0
 80095f8:	21b5      	movs	r1, #181	; 0xb5
 80095fa:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <__multadd+0x8c>)
 80095fc:	480d      	ldr	r0, [pc, #52]	; (8009634 <__multadd+0x90>)
 80095fe:	f000 faff 	bl	8009c00 <__assert_func>
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	f104 010c 	add.w	r1, r4, #12
 8009608:	3202      	adds	r2, #2
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	300c      	adds	r0, #12
 800960e:	f7fe fb5b 	bl	8007cc8 <memcpy>
 8009612:	4621      	mov	r1, r4
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff ffa3 	bl	8009560 <_Bfree>
 800961a:	462c      	mov	r4, r5
 800961c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009620:	3601      	adds	r6, #1
 8009622:	f8c3 8014 	str.w	r8, [r3, #20]
 8009626:	6126      	str	r6, [r4, #16]
 8009628:	4620      	mov	r0, r4
 800962a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962e:	bf00      	nop
 8009630:	0800bc93 	.word	0x0800bc93
 8009634:	0800bca4 	.word	0x0800bca4

08009638 <__hi0bits>:
 8009638:	0c02      	lsrs	r2, r0, #16
 800963a:	0412      	lsls	r2, r2, #16
 800963c:	4603      	mov	r3, r0
 800963e:	b9ca      	cbnz	r2, 8009674 <__hi0bits+0x3c>
 8009640:	0403      	lsls	r3, r0, #16
 8009642:	2010      	movs	r0, #16
 8009644:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009648:	bf04      	itt	eq
 800964a:	021b      	lsleq	r3, r3, #8
 800964c:	3008      	addeq	r0, #8
 800964e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009652:	bf04      	itt	eq
 8009654:	011b      	lsleq	r3, r3, #4
 8009656:	3004      	addeq	r0, #4
 8009658:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800965c:	bf04      	itt	eq
 800965e:	009b      	lsleq	r3, r3, #2
 8009660:	3002      	addeq	r0, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	db05      	blt.n	8009672 <__hi0bits+0x3a>
 8009666:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800966a:	f100 0001 	add.w	r0, r0, #1
 800966e:	bf08      	it	eq
 8009670:	2020      	moveq	r0, #32
 8009672:	4770      	bx	lr
 8009674:	2000      	movs	r0, #0
 8009676:	e7e5      	b.n	8009644 <__hi0bits+0xc>

08009678 <__lo0bits>:
 8009678:	6803      	ldr	r3, [r0, #0]
 800967a:	4602      	mov	r2, r0
 800967c:	f013 0007 	ands.w	r0, r3, #7
 8009680:	d00b      	beq.n	800969a <__lo0bits+0x22>
 8009682:	07d9      	lsls	r1, r3, #31
 8009684:	d422      	bmi.n	80096cc <__lo0bits+0x54>
 8009686:	0798      	lsls	r0, r3, #30
 8009688:	bf49      	itett	mi
 800968a:	085b      	lsrmi	r3, r3, #1
 800968c:	089b      	lsrpl	r3, r3, #2
 800968e:	2001      	movmi	r0, #1
 8009690:	6013      	strmi	r3, [r2, #0]
 8009692:	bf5c      	itt	pl
 8009694:	2002      	movpl	r0, #2
 8009696:	6013      	strpl	r3, [r2, #0]
 8009698:	4770      	bx	lr
 800969a:	b299      	uxth	r1, r3
 800969c:	b909      	cbnz	r1, 80096a2 <__lo0bits+0x2a>
 800969e:	2010      	movs	r0, #16
 80096a0:	0c1b      	lsrs	r3, r3, #16
 80096a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096a6:	bf04      	itt	eq
 80096a8:	0a1b      	lsreq	r3, r3, #8
 80096aa:	3008      	addeq	r0, #8
 80096ac:	0719      	lsls	r1, r3, #28
 80096ae:	bf04      	itt	eq
 80096b0:	091b      	lsreq	r3, r3, #4
 80096b2:	3004      	addeq	r0, #4
 80096b4:	0799      	lsls	r1, r3, #30
 80096b6:	bf04      	itt	eq
 80096b8:	089b      	lsreq	r3, r3, #2
 80096ba:	3002      	addeq	r0, #2
 80096bc:	07d9      	lsls	r1, r3, #31
 80096be:	d403      	bmi.n	80096c8 <__lo0bits+0x50>
 80096c0:	085b      	lsrs	r3, r3, #1
 80096c2:	f100 0001 	add.w	r0, r0, #1
 80096c6:	d003      	beq.n	80096d0 <__lo0bits+0x58>
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	4770      	bx	lr
 80096cc:	2000      	movs	r0, #0
 80096ce:	4770      	bx	lr
 80096d0:	2020      	movs	r0, #32
 80096d2:	4770      	bx	lr

080096d4 <__i2b>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	460c      	mov	r4, r1
 80096d8:	2101      	movs	r1, #1
 80096da:	f7ff ff01 	bl	80094e0 <_Balloc>
 80096de:	4602      	mov	r2, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__i2b+0x1a>
 80096e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096e6:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <__i2b+0x24>)
 80096e8:	4804      	ldr	r0, [pc, #16]	; (80096fc <__i2b+0x28>)
 80096ea:	f000 fa89 	bl	8009c00 <__assert_func>
 80096ee:	2301      	movs	r3, #1
 80096f0:	6144      	str	r4, [r0, #20]
 80096f2:	6103      	str	r3, [r0, #16]
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	0800bc93 	.word	0x0800bc93
 80096fc:	0800bca4 	.word	0x0800bca4

08009700 <__multiply>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	4614      	mov	r4, r2
 8009706:	690a      	ldr	r2, [r1, #16]
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	460d      	mov	r5, r1
 800970c:	429a      	cmp	r2, r3
 800970e:	bfbe      	ittt	lt
 8009710:	460b      	movlt	r3, r1
 8009712:	4625      	movlt	r5, r4
 8009714:	461c      	movlt	r4, r3
 8009716:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800971a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800971e:	68ab      	ldr	r3, [r5, #8]
 8009720:	6869      	ldr	r1, [r5, #4]
 8009722:	eb0a 0709 	add.w	r7, sl, r9
 8009726:	42bb      	cmp	r3, r7
 8009728:	b085      	sub	sp, #20
 800972a:	bfb8      	it	lt
 800972c:	3101      	addlt	r1, #1
 800972e:	f7ff fed7 	bl	80094e0 <_Balloc>
 8009732:	b930      	cbnz	r0, 8009742 <__multiply+0x42>
 8009734:	4602      	mov	r2, r0
 8009736:	f240 115d 	movw	r1, #349	; 0x15d
 800973a:	4b41      	ldr	r3, [pc, #260]	; (8009840 <__multiply+0x140>)
 800973c:	4841      	ldr	r0, [pc, #260]	; (8009844 <__multiply+0x144>)
 800973e:	f000 fa5f 	bl	8009c00 <__assert_func>
 8009742:	f100 0614 	add.w	r6, r0, #20
 8009746:	4633      	mov	r3, r6
 8009748:	2200      	movs	r2, #0
 800974a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800974e:	4543      	cmp	r3, r8
 8009750:	d31e      	bcc.n	8009790 <__multiply+0x90>
 8009752:	f105 0c14 	add.w	ip, r5, #20
 8009756:	f104 0314 	add.w	r3, r4, #20
 800975a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800975e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009762:	9202      	str	r2, [sp, #8]
 8009764:	ebac 0205 	sub.w	r2, ip, r5
 8009768:	3a15      	subs	r2, #21
 800976a:	f022 0203 	bic.w	r2, r2, #3
 800976e:	3204      	adds	r2, #4
 8009770:	f105 0115 	add.w	r1, r5, #21
 8009774:	458c      	cmp	ip, r1
 8009776:	bf38      	it	cc
 8009778:	2204      	movcc	r2, #4
 800977a:	9201      	str	r2, [sp, #4]
 800977c:	9a02      	ldr	r2, [sp, #8]
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d808      	bhi.n	8009796 <__multiply+0x96>
 8009784:	2f00      	cmp	r7, #0
 8009786:	dc55      	bgt.n	8009834 <__multiply+0x134>
 8009788:	6107      	str	r7, [r0, #16]
 800978a:	b005      	add	sp, #20
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	f843 2b04 	str.w	r2, [r3], #4
 8009794:	e7db      	b.n	800974e <__multiply+0x4e>
 8009796:	f8b3 a000 	ldrh.w	sl, [r3]
 800979a:	f1ba 0f00 	cmp.w	sl, #0
 800979e:	d020      	beq.n	80097e2 <__multiply+0xe2>
 80097a0:	46b1      	mov	r9, r6
 80097a2:	2200      	movs	r2, #0
 80097a4:	f105 0e14 	add.w	lr, r5, #20
 80097a8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80097ac:	f8d9 b000 	ldr.w	fp, [r9]
 80097b0:	b2a1      	uxth	r1, r4
 80097b2:	fa1f fb8b 	uxth.w	fp, fp
 80097b6:	fb0a b101 	mla	r1, sl, r1, fp
 80097ba:	4411      	add	r1, r2
 80097bc:	f8d9 2000 	ldr.w	r2, [r9]
 80097c0:	0c24      	lsrs	r4, r4, #16
 80097c2:	0c12      	lsrs	r2, r2, #16
 80097c4:	fb0a 2404 	mla	r4, sl, r4, r2
 80097c8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80097cc:	b289      	uxth	r1, r1
 80097ce:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80097d2:	45f4      	cmp	ip, lr
 80097d4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80097d8:	f849 1b04 	str.w	r1, [r9], #4
 80097dc:	d8e4      	bhi.n	80097a8 <__multiply+0xa8>
 80097de:	9901      	ldr	r1, [sp, #4]
 80097e0:	5072      	str	r2, [r6, r1]
 80097e2:	9a03      	ldr	r2, [sp, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	d01f      	beq.n	8009830 <__multiply+0x130>
 80097f0:	46b6      	mov	lr, r6
 80097f2:	f04f 0a00 	mov.w	sl, #0
 80097f6:	6834      	ldr	r4, [r6, #0]
 80097f8:	f105 0114 	add.w	r1, r5, #20
 80097fc:	880a      	ldrh	r2, [r1, #0]
 80097fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009802:	b2a4      	uxth	r4, r4
 8009804:	fb09 b202 	mla	r2, r9, r2, fp
 8009808:	4492      	add	sl, r2
 800980a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800980e:	f84e 4b04 	str.w	r4, [lr], #4
 8009812:	f851 4b04 	ldr.w	r4, [r1], #4
 8009816:	f8be 2000 	ldrh.w	r2, [lr]
 800981a:	0c24      	lsrs	r4, r4, #16
 800981c:	fb09 2404 	mla	r4, r9, r4, r2
 8009820:	458c      	cmp	ip, r1
 8009822:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009826:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800982a:	d8e7      	bhi.n	80097fc <__multiply+0xfc>
 800982c:	9a01      	ldr	r2, [sp, #4]
 800982e:	50b4      	str	r4, [r6, r2]
 8009830:	3604      	adds	r6, #4
 8009832:	e7a3      	b.n	800977c <__multiply+0x7c>
 8009834:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1a5      	bne.n	8009788 <__multiply+0x88>
 800983c:	3f01      	subs	r7, #1
 800983e:	e7a1      	b.n	8009784 <__multiply+0x84>
 8009840:	0800bc93 	.word	0x0800bc93
 8009844:	0800bca4 	.word	0x0800bca4

08009848 <__pow5mult>:
 8009848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4615      	mov	r5, r2
 800984e:	f012 0203 	ands.w	r2, r2, #3
 8009852:	4606      	mov	r6, r0
 8009854:	460f      	mov	r7, r1
 8009856:	d007      	beq.n	8009868 <__pow5mult+0x20>
 8009858:	4c25      	ldr	r4, [pc, #148]	; (80098f0 <__pow5mult+0xa8>)
 800985a:	3a01      	subs	r2, #1
 800985c:	2300      	movs	r3, #0
 800985e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009862:	f7ff fe9f 	bl	80095a4 <__multadd>
 8009866:	4607      	mov	r7, r0
 8009868:	10ad      	asrs	r5, r5, #2
 800986a:	d03d      	beq.n	80098e8 <__pow5mult+0xa0>
 800986c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800986e:	b97c      	cbnz	r4, 8009890 <__pow5mult+0x48>
 8009870:	2010      	movs	r0, #16
 8009872:	f7fe fa19 	bl	8007ca8 <malloc>
 8009876:	4602      	mov	r2, r0
 8009878:	6270      	str	r0, [r6, #36]	; 0x24
 800987a:	b928      	cbnz	r0, 8009888 <__pow5mult+0x40>
 800987c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009880:	4b1c      	ldr	r3, [pc, #112]	; (80098f4 <__pow5mult+0xac>)
 8009882:	481d      	ldr	r0, [pc, #116]	; (80098f8 <__pow5mult+0xb0>)
 8009884:	f000 f9bc 	bl	8009c00 <__assert_func>
 8009888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800988c:	6004      	str	r4, [r0, #0]
 800988e:	60c4      	str	r4, [r0, #12]
 8009890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009898:	b94c      	cbnz	r4, 80098ae <__pow5mult+0x66>
 800989a:	f240 2171 	movw	r1, #625	; 0x271
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ff18 	bl	80096d4 <__i2b>
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	f04f 0900 	mov.w	r9, #0
 80098b2:	07eb      	lsls	r3, r5, #31
 80098b4:	d50a      	bpl.n	80098cc <__pow5mult+0x84>
 80098b6:	4639      	mov	r1, r7
 80098b8:	4622      	mov	r2, r4
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ff20 	bl	8009700 <__multiply>
 80098c0:	4680      	mov	r8, r0
 80098c2:	4639      	mov	r1, r7
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff fe4b 	bl	8009560 <_Bfree>
 80098ca:	4647      	mov	r7, r8
 80098cc:	106d      	asrs	r5, r5, #1
 80098ce:	d00b      	beq.n	80098e8 <__pow5mult+0xa0>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	b938      	cbnz	r0, 80098e4 <__pow5mult+0x9c>
 80098d4:	4622      	mov	r2, r4
 80098d6:	4621      	mov	r1, r4
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff ff11 	bl	8009700 <__multiply>
 80098de:	6020      	str	r0, [r4, #0]
 80098e0:	f8c0 9000 	str.w	r9, [r0]
 80098e4:	4604      	mov	r4, r0
 80098e6:	e7e4      	b.n	80098b2 <__pow5mult+0x6a>
 80098e8:	4638      	mov	r0, r7
 80098ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ee:	bf00      	nop
 80098f0:	0800bdf8 	.word	0x0800bdf8
 80098f4:	0800bc1d 	.word	0x0800bc1d
 80098f8:	0800bca4 	.word	0x0800bca4

080098fc <__lshift>:
 80098fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	4607      	mov	r7, r0
 8009904:	4691      	mov	r9, r2
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	6849      	ldr	r1, [r1, #4]
 800990a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009914:	f108 0601 	add.w	r6, r8, #1
 8009918:	42b3      	cmp	r3, r6
 800991a:	db0b      	blt.n	8009934 <__lshift+0x38>
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff fddf 	bl	80094e0 <_Balloc>
 8009922:	4605      	mov	r5, r0
 8009924:	b948      	cbnz	r0, 800993a <__lshift+0x3e>
 8009926:	4602      	mov	r2, r0
 8009928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800992c:	4b27      	ldr	r3, [pc, #156]	; (80099cc <__lshift+0xd0>)
 800992e:	4828      	ldr	r0, [pc, #160]	; (80099d0 <__lshift+0xd4>)
 8009930:	f000 f966 	bl	8009c00 <__assert_func>
 8009934:	3101      	adds	r1, #1
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	e7ee      	b.n	8009918 <__lshift+0x1c>
 800993a:	2300      	movs	r3, #0
 800993c:	f100 0114 	add.w	r1, r0, #20
 8009940:	f100 0210 	add.w	r2, r0, #16
 8009944:	4618      	mov	r0, r3
 8009946:	4553      	cmp	r3, sl
 8009948:	db33      	blt.n	80099b2 <__lshift+0xb6>
 800994a:	6920      	ldr	r0, [r4, #16]
 800994c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009950:	f104 0314 	add.w	r3, r4, #20
 8009954:	f019 091f 	ands.w	r9, r9, #31
 8009958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800995c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009960:	d02b      	beq.n	80099ba <__lshift+0xbe>
 8009962:	468a      	mov	sl, r1
 8009964:	2200      	movs	r2, #0
 8009966:	f1c9 0e20 	rsb	lr, r9, #32
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	fa00 f009 	lsl.w	r0, r0, r9
 8009970:	4302      	orrs	r2, r0
 8009972:	f84a 2b04 	str.w	r2, [sl], #4
 8009976:	f853 2b04 	ldr.w	r2, [r3], #4
 800997a:	459c      	cmp	ip, r3
 800997c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009980:	d8f3      	bhi.n	800996a <__lshift+0x6e>
 8009982:	ebac 0304 	sub.w	r3, ip, r4
 8009986:	3b15      	subs	r3, #21
 8009988:	f023 0303 	bic.w	r3, r3, #3
 800998c:	3304      	adds	r3, #4
 800998e:	f104 0015 	add.w	r0, r4, #21
 8009992:	4584      	cmp	ip, r0
 8009994:	bf38      	it	cc
 8009996:	2304      	movcc	r3, #4
 8009998:	50ca      	str	r2, [r1, r3]
 800999a:	b10a      	cbz	r2, 80099a0 <__lshift+0xa4>
 800999c:	f108 0602 	add.w	r6, r8, #2
 80099a0:	3e01      	subs	r6, #1
 80099a2:	4638      	mov	r0, r7
 80099a4:	4621      	mov	r1, r4
 80099a6:	612e      	str	r6, [r5, #16]
 80099a8:	f7ff fdda 	bl	8009560 <_Bfree>
 80099ac:	4628      	mov	r0, r5
 80099ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099b6:	3301      	adds	r3, #1
 80099b8:	e7c5      	b.n	8009946 <__lshift+0x4a>
 80099ba:	3904      	subs	r1, #4
 80099bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c0:	459c      	cmp	ip, r3
 80099c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80099c6:	d8f9      	bhi.n	80099bc <__lshift+0xc0>
 80099c8:	e7ea      	b.n	80099a0 <__lshift+0xa4>
 80099ca:	bf00      	nop
 80099cc:	0800bc93 	.word	0x0800bc93
 80099d0:	0800bca4 	.word	0x0800bca4

080099d4 <__mcmp>:
 80099d4:	4603      	mov	r3, r0
 80099d6:	690a      	ldr	r2, [r1, #16]
 80099d8:	6900      	ldr	r0, [r0, #16]
 80099da:	b530      	push	{r4, r5, lr}
 80099dc:	1a80      	subs	r0, r0, r2
 80099de:	d10d      	bne.n	80099fc <__mcmp+0x28>
 80099e0:	3314      	adds	r3, #20
 80099e2:	3114      	adds	r1, #20
 80099e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099f4:	4295      	cmp	r5, r2
 80099f6:	d002      	beq.n	80099fe <__mcmp+0x2a>
 80099f8:	d304      	bcc.n	8009a04 <__mcmp+0x30>
 80099fa:	2001      	movs	r0, #1
 80099fc:	bd30      	pop	{r4, r5, pc}
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	d3f4      	bcc.n	80099ec <__mcmp+0x18>
 8009a02:	e7fb      	b.n	80099fc <__mcmp+0x28>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a08:	e7f8      	b.n	80099fc <__mcmp+0x28>
	...

08009a0c <__mdiff>:
 8009a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	4606      	mov	r6, r0
 8009a14:	4611      	mov	r1, r2
 8009a16:	4620      	mov	r0, r4
 8009a18:	4692      	mov	sl, r2
 8009a1a:	f7ff ffdb 	bl	80099d4 <__mcmp>
 8009a1e:	1e05      	subs	r5, r0, #0
 8009a20:	d111      	bne.n	8009a46 <__mdiff+0x3a>
 8009a22:	4629      	mov	r1, r5
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff fd5b 	bl	80094e0 <_Balloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__mdiff+0x2e>
 8009a2e:	f240 2132 	movw	r1, #562	; 0x232
 8009a32:	4b3c      	ldr	r3, [pc, #240]	; (8009b24 <__mdiff+0x118>)
 8009a34:	483c      	ldr	r0, [pc, #240]	; (8009b28 <__mdiff+0x11c>)
 8009a36:	f000 f8e3 	bl	8009c00 <__assert_func>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a40:	4610      	mov	r0, r2
 8009a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	bfa4      	itt	ge
 8009a48:	4653      	movge	r3, sl
 8009a4a:	46a2      	movge	sl, r4
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009a52:	bfa6      	itte	ge
 8009a54:	461c      	movge	r4, r3
 8009a56:	2500      	movge	r5, #0
 8009a58:	2501      	movlt	r5, #1
 8009a5a:	f7ff fd41 	bl	80094e0 <_Balloc>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	b918      	cbnz	r0, 8009a6a <__mdiff+0x5e>
 8009a62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a66:	4b2f      	ldr	r3, [pc, #188]	; (8009b24 <__mdiff+0x118>)
 8009a68:	e7e4      	b.n	8009a34 <__mdiff+0x28>
 8009a6a:	f100 0814 	add.w	r8, r0, #20
 8009a6e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009a72:	60c5      	str	r5, [r0, #12]
 8009a74:	f04f 0c00 	mov.w	ip, #0
 8009a78:	f10a 0514 	add.w	r5, sl, #20
 8009a7c:	f10a 0010 	add.w	r0, sl, #16
 8009a80:	46c2      	mov	sl, r8
 8009a82:	6926      	ldr	r6, [r4, #16]
 8009a84:	f104 0914 	add.w	r9, r4, #20
 8009a88:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a90:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a98:	fa1f f18b 	uxth.w	r1, fp
 8009a9c:	4461      	add	r1, ip
 8009a9e:	fa1f fc83 	uxth.w	ip, r3
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	eba1 010c 	sub.w	r1, r1, ip
 8009aa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009aac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ab0:	b289      	uxth	r1, r1
 8009ab2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ab6:	454e      	cmp	r6, r9
 8009ab8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009abc:	f84a 3b04 	str.w	r3, [sl], #4
 8009ac0:	d8e6      	bhi.n	8009a90 <__mdiff+0x84>
 8009ac2:	1b33      	subs	r3, r6, r4
 8009ac4:	3b15      	subs	r3, #21
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	3415      	adds	r4, #21
 8009acc:	3304      	adds	r3, #4
 8009ace:	42a6      	cmp	r6, r4
 8009ad0:	bf38      	it	cc
 8009ad2:	2304      	movcc	r3, #4
 8009ad4:	441d      	add	r5, r3
 8009ad6:	4443      	add	r3, r8
 8009ad8:	461e      	mov	r6, r3
 8009ada:	462c      	mov	r4, r5
 8009adc:	4574      	cmp	r4, lr
 8009ade:	d30e      	bcc.n	8009afe <__mdiff+0xf2>
 8009ae0:	f10e 0103 	add.w	r1, lr, #3
 8009ae4:	1b49      	subs	r1, r1, r5
 8009ae6:	f021 0103 	bic.w	r1, r1, #3
 8009aea:	3d03      	subs	r5, #3
 8009aec:	45ae      	cmp	lr, r5
 8009aee:	bf38      	it	cc
 8009af0:	2100      	movcc	r1, #0
 8009af2:	4419      	add	r1, r3
 8009af4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009af8:	b18b      	cbz	r3, 8009b1e <__mdiff+0x112>
 8009afa:	6117      	str	r7, [r2, #16]
 8009afc:	e7a0      	b.n	8009a40 <__mdiff+0x34>
 8009afe:	f854 8b04 	ldr.w	r8, [r4], #4
 8009b02:	fa1f f188 	uxth.w	r1, r8
 8009b06:	4461      	add	r1, ip
 8009b08:	1408      	asrs	r0, r1, #16
 8009b0a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009b0e:	b289      	uxth	r1, r1
 8009b10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b18:	f846 1b04 	str.w	r1, [r6], #4
 8009b1c:	e7de      	b.n	8009adc <__mdiff+0xd0>
 8009b1e:	3f01      	subs	r7, #1
 8009b20:	e7e8      	b.n	8009af4 <__mdiff+0xe8>
 8009b22:	bf00      	nop
 8009b24:	0800bc93 	.word	0x0800bc93
 8009b28:	0800bca4 	.word	0x0800bca4

08009b2c <__d2b>:
 8009b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b30:	2101      	movs	r1, #1
 8009b32:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009b36:	4690      	mov	r8, r2
 8009b38:	461d      	mov	r5, r3
 8009b3a:	f7ff fcd1 	bl	80094e0 <_Balloc>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	b930      	cbnz	r0, 8009b50 <__d2b+0x24>
 8009b42:	4602      	mov	r2, r0
 8009b44:	f240 310a 	movw	r1, #778	; 0x30a
 8009b48:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <__d2b+0xb0>)
 8009b4a:	4825      	ldr	r0, [pc, #148]	; (8009be0 <__d2b+0xb4>)
 8009b4c:	f000 f858 	bl	8009c00 <__assert_func>
 8009b50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009b54:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009b58:	bb2d      	cbnz	r5, 8009ba6 <__d2b+0x7a>
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8009b60:	d026      	beq.n	8009bb0 <__d2b+0x84>
 8009b62:	4668      	mov	r0, sp
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	f7ff fd87 	bl	8009678 <__lo0bits>
 8009b6a:	9900      	ldr	r1, [sp, #0]
 8009b6c:	b1f0      	cbz	r0, 8009bac <__d2b+0x80>
 8009b6e:	9a01      	ldr	r2, [sp, #4]
 8009b70:	f1c0 0320 	rsb	r3, r0, #32
 8009b74:	fa02 f303 	lsl.w	r3, r2, r3
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	40c2      	lsrs	r2, r0
 8009b7c:	6163      	str	r3, [r4, #20]
 8009b7e:	9201      	str	r2, [sp, #4]
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bf14      	ite	ne
 8009b86:	2102      	movne	r1, #2
 8009b88:	2101      	moveq	r1, #1
 8009b8a:	61a3      	str	r3, [r4, #24]
 8009b8c:	6121      	str	r1, [r4, #16]
 8009b8e:	b1c5      	cbz	r5, 8009bc2 <__d2b+0x96>
 8009b90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b94:	4405      	add	r5, r0
 8009b96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b9a:	603d      	str	r5, [r7, #0]
 8009b9c:	6030      	str	r0, [r6, #0]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	b002      	add	sp, #8
 8009ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009baa:	e7d6      	b.n	8009b5a <__d2b+0x2e>
 8009bac:	6161      	str	r1, [r4, #20]
 8009bae:	e7e7      	b.n	8009b80 <__d2b+0x54>
 8009bb0:	a801      	add	r0, sp, #4
 8009bb2:	f7ff fd61 	bl	8009678 <__lo0bits>
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	6121      	str	r1, [r4, #16]
 8009bbc:	6163      	str	r3, [r4, #20]
 8009bbe:	3020      	adds	r0, #32
 8009bc0:	e7e5      	b.n	8009b8e <__d2b+0x62>
 8009bc2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009bc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bca:	6038      	str	r0, [r7, #0]
 8009bcc:	6918      	ldr	r0, [r3, #16]
 8009bce:	f7ff fd33 	bl	8009638 <__hi0bits>
 8009bd2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009bd6:	6031      	str	r1, [r6, #0]
 8009bd8:	e7e1      	b.n	8009b9e <__d2b+0x72>
 8009bda:	bf00      	nop
 8009bdc:	0800bc93 	.word	0x0800bc93
 8009be0:	0800bca4 	.word	0x0800bca4

08009be4 <_calloc_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	fb02 f501 	mul.w	r5, r2, r1
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7fe f8ce 	bl	8007d8c <_malloc_r>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	b118      	cbz	r0, 8009bfc <_calloc_r+0x18>
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	f7fe f874 	bl	8007ce4 <memset>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}

08009c00 <__assert_func>:
 8009c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c02:	4614      	mov	r4, r2
 8009c04:	461a      	mov	r2, r3
 8009c06:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <__assert_func+0x2c>)
 8009c08:	4605      	mov	r5, r0
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68d8      	ldr	r0, [r3, #12]
 8009c0e:	b14c      	cbz	r4, 8009c24 <__assert_func+0x24>
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <__assert_func+0x30>)
 8009c12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c16:	9100      	str	r1, [sp, #0]
 8009c18:	462b      	mov	r3, r5
 8009c1a:	4906      	ldr	r1, [pc, #24]	; (8009c34 <__assert_func+0x34>)
 8009c1c:	f000 f80e 	bl	8009c3c <fiprintf>
 8009c20:	f7fe f810 	bl	8007c44 <abort>
 8009c24:	4b04      	ldr	r3, [pc, #16]	; (8009c38 <__assert_func+0x38>)
 8009c26:	461c      	mov	r4, r3
 8009c28:	e7f3      	b.n	8009c12 <__assert_func+0x12>
 8009c2a:	bf00      	nop
 8009c2c:	2000007c 	.word	0x2000007c
 8009c30:	0800be04 	.word	0x0800be04
 8009c34:	0800be11 	.word	0x0800be11
 8009c38:	0800be3f 	.word	0x0800be3f

08009c3c <fiprintf>:
 8009c3c:	b40e      	push	{r1, r2, r3}
 8009c3e:	b503      	push	{r0, r1, lr}
 8009c40:	4601      	mov	r1, r0
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	4805      	ldr	r0, [pc, #20]	; (8009c5c <fiprintf+0x20>)
 8009c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	f000 f843 	bl	8009cd8 <_vfiprintf_r>
 8009c52:	b002      	add	sp, #8
 8009c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c58:	b003      	add	sp, #12
 8009c5a:	4770      	bx	lr
 8009c5c:	2000007c 	.word	0x2000007c

08009c60 <__retarget_lock_init_recursive>:
 8009c60:	4770      	bx	lr

08009c62 <__retarget_lock_acquire_recursive>:
 8009c62:	4770      	bx	lr

08009c64 <__retarget_lock_release_recursive>:
 8009c64:	4770      	bx	lr

08009c66 <__ascii_mbtowc>:
 8009c66:	b082      	sub	sp, #8
 8009c68:	b901      	cbnz	r1, 8009c6c <__ascii_mbtowc+0x6>
 8009c6a:	a901      	add	r1, sp, #4
 8009c6c:	b142      	cbz	r2, 8009c80 <__ascii_mbtowc+0x1a>
 8009c6e:	b14b      	cbz	r3, 8009c84 <__ascii_mbtowc+0x1e>
 8009c70:	7813      	ldrb	r3, [r2, #0]
 8009c72:	600b      	str	r3, [r1, #0]
 8009c74:	7812      	ldrb	r2, [r2, #0]
 8009c76:	1e10      	subs	r0, r2, #0
 8009c78:	bf18      	it	ne
 8009c7a:	2001      	movne	r0, #1
 8009c7c:	b002      	add	sp, #8
 8009c7e:	4770      	bx	lr
 8009c80:	4610      	mov	r0, r2
 8009c82:	e7fb      	b.n	8009c7c <__ascii_mbtowc+0x16>
 8009c84:	f06f 0001 	mvn.w	r0, #1
 8009c88:	e7f8      	b.n	8009c7c <__ascii_mbtowc+0x16>

08009c8a <__sfputc_r>:
 8009c8a:	6893      	ldr	r3, [r2, #8]
 8009c8c:	b410      	push	{r4}
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	6093      	str	r3, [r2, #8]
 8009c94:	da07      	bge.n	8009ca6 <__sfputc_r+0x1c>
 8009c96:	6994      	ldr	r4, [r2, #24]
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	db01      	blt.n	8009ca0 <__sfputc_r+0x16>
 8009c9c:	290a      	cmp	r1, #10
 8009c9e:	d102      	bne.n	8009ca6 <__sfputc_r+0x1c>
 8009ca0:	bc10      	pop	{r4}
 8009ca2:	f000 b949 	b.w	8009f38 <__swbuf_r>
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	1c58      	adds	r0, r3, #1
 8009caa:	6010      	str	r0, [r2, #0]
 8009cac:	7019      	strb	r1, [r3, #0]
 8009cae:	4608      	mov	r0, r1
 8009cb0:	bc10      	pop	{r4}
 8009cb2:	4770      	bx	lr

08009cb4 <__sfputs_r>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460f      	mov	r7, r1
 8009cba:	4614      	mov	r4, r2
 8009cbc:	18d5      	adds	r5, r2, r3
 8009cbe:	42ac      	cmp	r4, r5
 8009cc0:	d101      	bne.n	8009cc6 <__sfputs_r+0x12>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e007      	b.n	8009cd6 <__sfputs_r+0x22>
 8009cc6:	463a      	mov	r2, r7
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cce:	f7ff ffdc 	bl	8009c8a <__sfputc_r>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	d1f3      	bne.n	8009cbe <__sfputs_r+0xa>
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cd8 <_vfiprintf_r>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	460d      	mov	r5, r1
 8009cde:	4614      	mov	r4, r2
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	b09d      	sub	sp, #116	; 0x74
 8009ce6:	b118      	cbz	r0, 8009cf0 <_vfiprintf_r+0x18>
 8009ce8:	6983      	ldr	r3, [r0, #24]
 8009cea:	b90b      	cbnz	r3, 8009cf0 <_vfiprintf_r+0x18>
 8009cec:	f000 fb0c 	bl	800a308 <__sinit>
 8009cf0:	4b89      	ldr	r3, [pc, #548]	; (8009f18 <_vfiprintf_r+0x240>)
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	d11b      	bne.n	8009d2e <_vfiprintf_r+0x56>
 8009cf6:	6875      	ldr	r5, [r6, #4]
 8009cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cfa:	07d9      	lsls	r1, r3, #31
 8009cfc:	d405      	bmi.n	8009d0a <_vfiprintf_r+0x32>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	059a      	lsls	r2, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_vfiprintf_r+0x32>
 8009d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d06:	f7ff ffac 	bl	8009c62 <__retarget_lock_acquire_recursive>
 8009d0a:	89ab      	ldrh	r3, [r5, #12]
 8009d0c:	071b      	lsls	r3, r3, #28
 8009d0e:	d501      	bpl.n	8009d14 <_vfiprintf_r+0x3c>
 8009d10:	692b      	ldr	r3, [r5, #16]
 8009d12:	b9eb      	cbnz	r3, 8009d50 <_vfiprintf_r+0x78>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4630      	mov	r0, r6
 8009d18:	f000 f96e 	bl	8009ff8 <__swsetup_r>
 8009d1c:	b1c0      	cbz	r0, 8009d50 <_vfiprintf_r+0x78>
 8009d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d20:	07dc      	lsls	r4, r3, #31
 8009d22:	d50e      	bpl.n	8009d42 <_vfiprintf_r+0x6a>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d28:	b01d      	add	sp, #116	; 0x74
 8009d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2e:	4b7b      	ldr	r3, [pc, #492]	; (8009f1c <_vfiprintf_r+0x244>)
 8009d30:	429d      	cmp	r5, r3
 8009d32:	d101      	bne.n	8009d38 <_vfiprintf_r+0x60>
 8009d34:	68b5      	ldr	r5, [r6, #8]
 8009d36:	e7df      	b.n	8009cf8 <_vfiprintf_r+0x20>
 8009d38:	4b79      	ldr	r3, [pc, #484]	; (8009f20 <_vfiprintf_r+0x248>)
 8009d3a:	429d      	cmp	r5, r3
 8009d3c:	bf08      	it	eq
 8009d3e:	68f5      	ldreq	r5, [r6, #12]
 8009d40:	e7da      	b.n	8009cf8 <_vfiprintf_r+0x20>
 8009d42:	89ab      	ldrh	r3, [r5, #12]
 8009d44:	0598      	lsls	r0, r3, #22
 8009d46:	d4ed      	bmi.n	8009d24 <_vfiprintf_r+0x4c>
 8009d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d4a:	f7ff ff8b 	bl	8009c64 <__retarget_lock_release_recursive>
 8009d4e:	e7e9      	b.n	8009d24 <_vfiprintf_r+0x4c>
 8009d50:	2300      	movs	r3, #0
 8009d52:	9309      	str	r3, [sp, #36]	; 0x24
 8009d54:	2320      	movs	r3, #32
 8009d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d5a:	2330      	movs	r3, #48	; 0x30
 8009d5c:	f04f 0901 	mov.w	r9, #1
 8009d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009f24 <_vfiprintf_r+0x24c>
 8009d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d6c:	4623      	mov	r3, r4
 8009d6e:	469a      	mov	sl, r3
 8009d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d74:	b10a      	cbz	r2, 8009d7a <_vfiprintf_r+0xa2>
 8009d76:	2a25      	cmp	r2, #37	; 0x25
 8009d78:	d1f9      	bne.n	8009d6e <_vfiprintf_r+0x96>
 8009d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d7e:	d00b      	beq.n	8009d98 <_vfiprintf_r+0xc0>
 8009d80:	465b      	mov	r3, fp
 8009d82:	4622      	mov	r2, r4
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7ff ff94 	bl	8009cb4 <__sfputs_r>
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f000 80aa 	beq.w	8009ee6 <_vfiprintf_r+0x20e>
 8009d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d94:	445a      	add	r2, fp
 8009d96:	9209      	str	r2, [sp, #36]	; 0x24
 8009d98:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 80a2 	beq.w	8009ee6 <_vfiprintf_r+0x20e>
 8009da2:	2300      	movs	r3, #0
 8009da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dac:	f10a 0a01 	add.w	sl, sl, #1
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9307      	str	r3, [sp, #28]
 8009db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009db8:	931a      	str	r3, [sp, #104]	; 0x68
 8009dba:	4654      	mov	r4, sl
 8009dbc:	2205      	movs	r2, #5
 8009dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc2:	4858      	ldr	r0, [pc, #352]	; (8009f24 <_vfiprintf_r+0x24c>)
 8009dc4:	f7ff fb72 	bl	80094ac <memchr>
 8009dc8:	9a04      	ldr	r2, [sp, #16]
 8009dca:	b9d8      	cbnz	r0, 8009e04 <_vfiprintf_r+0x12c>
 8009dcc:	06d1      	lsls	r1, r2, #27
 8009dce:	bf44      	itt	mi
 8009dd0:	2320      	movmi	r3, #32
 8009dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd6:	0713      	lsls	r3, r2, #28
 8009dd8:	bf44      	itt	mi
 8009dda:	232b      	movmi	r3, #43	; 0x2b
 8009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de0:	f89a 3000 	ldrb.w	r3, [sl]
 8009de4:	2b2a      	cmp	r3, #42	; 0x2a
 8009de6:	d015      	beq.n	8009e14 <_vfiprintf_r+0x13c>
 8009de8:	4654      	mov	r4, sl
 8009dea:	2000      	movs	r0, #0
 8009dec:	f04f 0c0a 	mov.w	ip, #10
 8009df0:	9a07      	ldr	r2, [sp, #28]
 8009df2:	4621      	mov	r1, r4
 8009df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009df8:	3b30      	subs	r3, #48	; 0x30
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	d94e      	bls.n	8009e9c <_vfiprintf_r+0x1c4>
 8009dfe:	b1b0      	cbz	r0, 8009e2e <_vfiprintf_r+0x156>
 8009e00:	9207      	str	r2, [sp, #28]
 8009e02:	e014      	b.n	8009e2e <_vfiprintf_r+0x156>
 8009e04:	eba0 0308 	sub.w	r3, r0, r8
 8009e08:	fa09 f303 	lsl.w	r3, r9, r3
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	46a2      	mov	sl, r4
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	e7d2      	b.n	8009dba <_vfiprintf_r+0xe2>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	1d19      	adds	r1, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	9103      	str	r1, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfbb      	ittet	lt
 8009e20:	425b      	neglt	r3, r3
 8009e22:	f042 0202 	orrlt.w	r2, r2, #2
 8009e26:	9307      	strge	r3, [sp, #28]
 8009e28:	9307      	strlt	r3, [sp, #28]
 8009e2a:	bfb8      	it	lt
 8009e2c:	9204      	strlt	r2, [sp, #16]
 8009e2e:	7823      	ldrb	r3, [r4, #0]
 8009e30:	2b2e      	cmp	r3, #46	; 0x2e
 8009e32:	d10c      	bne.n	8009e4e <_vfiprintf_r+0x176>
 8009e34:	7863      	ldrb	r3, [r4, #1]
 8009e36:	2b2a      	cmp	r3, #42	; 0x2a
 8009e38:	d135      	bne.n	8009ea6 <_vfiprintf_r+0x1ce>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	3402      	adds	r4, #2
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9203      	str	r2, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bfb8      	it	lt
 8009e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f34 <_vfiprintf_r+0x25c>
 8009e52:	2203      	movs	r2, #3
 8009e54:	4650      	mov	r0, sl
 8009e56:	7821      	ldrb	r1, [r4, #0]
 8009e58:	f7ff fb28 	bl	80094ac <memchr>
 8009e5c:	b140      	cbz	r0, 8009e70 <_vfiprintf_r+0x198>
 8009e5e:	2340      	movs	r3, #64	; 0x40
 8009e60:	eba0 000a 	sub.w	r0, r0, sl
 8009e64:	fa03 f000 	lsl.w	r0, r3, r0
 8009e68:	9b04      	ldr	r3, [sp, #16]
 8009e6a:	3401      	adds	r4, #1
 8009e6c:	4303      	orrs	r3, r0
 8009e6e:	9304      	str	r3, [sp, #16]
 8009e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e74:	2206      	movs	r2, #6
 8009e76:	482c      	ldr	r0, [pc, #176]	; (8009f28 <_vfiprintf_r+0x250>)
 8009e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e7c:	f7ff fb16 	bl	80094ac <memchr>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d03f      	beq.n	8009f04 <_vfiprintf_r+0x22c>
 8009e84:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <_vfiprintf_r+0x254>)
 8009e86:	bb1b      	cbnz	r3, 8009ed0 <_vfiprintf_r+0x1f8>
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	3307      	adds	r3, #7
 8009e8c:	f023 0307 	bic.w	r3, r3, #7
 8009e90:	3308      	adds	r3, #8
 8009e92:	9303      	str	r3, [sp, #12]
 8009e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e96:	443b      	add	r3, r7
 8009e98:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9a:	e767      	b.n	8009d6c <_vfiprintf_r+0x94>
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea4:	e7a5      	b.n	8009df2 <_vfiprintf_r+0x11a>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f04f 0c0a 	mov.w	ip, #10
 8009eac:	4619      	mov	r1, r3
 8009eae:	3401      	adds	r4, #1
 8009eb0:	9305      	str	r3, [sp, #20]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eb8:	3a30      	subs	r2, #48	; 0x30
 8009eba:	2a09      	cmp	r2, #9
 8009ebc:	d903      	bls.n	8009ec6 <_vfiprintf_r+0x1ee>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c5      	beq.n	8009e4e <_vfiprintf_r+0x176>
 8009ec2:	9105      	str	r1, [sp, #20]
 8009ec4:	e7c3      	b.n	8009e4e <_vfiprintf_r+0x176>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	2301      	movs	r3, #1
 8009eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ece:	e7f0      	b.n	8009eb2 <_vfiprintf_r+0x1da>
 8009ed0:	ab03      	add	r3, sp, #12
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <_vfiprintf_r+0x258>)
 8009eda:	a904      	add	r1, sp, #16
 8009edc:	f7fe f84e 	bl	8007f7c <_printf_float>
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	1c78      	adds	r0, r7, #1
 8009ee4:	d1d6      	bne.n	8009e94 <_vfiprintf_r+0x1bc>
 8009ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee8:	07d9      	lsls	r1, r3, #31
 8009eea:	d405      	bmi.n	8009ef8 <_vfiprintf_r+0x220>
 8009eec:	89ab      	ldrh	r3, [r5, #12]
 8009eee:	059a      	lsls	r2, r3, #22
 8009ef0:	d402      	bmi.n	8009ef8 <_vfiprintf_r+0x220>
 8009ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef4:	f7ff feb6 	bl	8009c64 <__retarget_lock_release_recursive>
 8009ef8:	89ab      	ldrh	r3, [r5, #12]
 8009efa:	065b      	lsls	r3, r3, #25
 8009efc:	f53f af12 	bmi.w	8009d24 <_vfiprintf_r+0x4c>
 8009f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f02:	e711      	b.n	8009d28 <_vfiprintf_r+0x50>
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	462a      	mov	r2, r5
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	4b08      	ldr	r3, [pc, #32]	; (8009f30 <_vfiprintf_r+0x258>)
 8009f0e:	a904      	add	r1, sp, #16
 8009f10:	f7fe fad0 	bl	80084b4 <_printf_i>
 8009f14:	e7e4      	b.n	8009ee0 <_vfiprintf_r+0x208>
 8009f16:	bf00      	nop
 8009f18:	0800bf7c 	.word	0x0800bf7c
 8009f1c:	0800bf9c 	.word	0x0800bf9c
 8009f20:	0800bf5c 	.word	0x0800bf5c
 8009f24:	0800be4a 	.word	0x0800be4a
 8009f28:	0800be54 	.word	0x0800be54
 8009f2c:	08007f7d 	.word	0x08007f7d
 8009f30:	08009cb5 	.word	0x08009cb5
 8009f34:	0800be50 	.word	0x0800be50

08009f38 <__swbuf_r>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	460e      	mov	r6, r1
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b118      	cbz	r0, 8009f4a <__swbuf_r+0x12>
 8009f42:	6983      	ldr	r3, [r0, #24]
 8009f44:	b90b      	cbnz	r3, 8009f4a <__swbuf_r+0x12>
 8009f46:	f000 f9df 	bl	800a308 <__sinit>
 8009f4a:	4b21      	ldr	r3, [pc, #132]	; (8009fd0 <__swbuf_r+0x98>)
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	d12b      	bne.n	8009fa8 <__swbuf_r+0x70>
 8009f50:	686c      	ldr	r4, [r5, #4]
 8009f52:	69a3      	ldr	r3, [r4, #24]
 8009f54:	60a3      	str	r3, [r4, #8]
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	071a      	lsls	r2, r3, #28
 8009f5a:	d52f      	bpl.n	8009fbc <__swbuf_r+0x84>
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	b36b      	cbz	r3, 8009fbc <__swbuf_r+0x84>
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	b2f6      	uxtb	r6, r6
 8009f66:	1ac0      	subs	r0, r0, r3
 8009f68:	6963      	ldr	r3, [r4, #20]
 8009f6a:	4637      	mov	r7, r6
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	dc04      	bgt.n	8009f7a <__swbuf_r+0x42>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f934 	bl	800a1e0 <_fflush_r>
 8009f78:	bb30      	cbnz	r0, 8009fc8 <__swbuf_r+0x90>
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	60a3      	str	r3, [r4, #8]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	701e      	strb	r6, [r3, #0]
 8009f8a:	6963      	ldr	r3, [r4, #20]
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	d004      	beq.n	8009f9a <__swbuf_r+0x62>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	07db      	lsls	r3, r3, #31
 8009f94:	d506      	bpl.n	8009fa4 <__swbuf_r+0x6c>
 8009f96:	2e0a      	cmp	r6, #10
 8009f98:	d104      	bne.n	8009fa4 <__swbuf_r+0x6c>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 f91f 	bl	800a1e0 <_fflush_r>
 8009fa2:	b988      	cbnz	r0, 8009fc8 <__swbuf_r+0x90>
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <__swbuf_r+0x9c>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <__swbuf_r+0x7a>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7cf      	b.n	8009f52 <__swbuf_r+0x1a>
 8009fb2:	4b09      	ldr	r3, [pc, #36]	; (8009fd8 <__swbuf_r+0xa0>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7ca      	b.n	8009f52 <__swbuf_r+0x1a>
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 f81a 	bl	8009ff8 <__swsetup_r>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d0cb      	beq.n	8009f60 <__swbuf_r+0x28>
 8009fc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009fcc:	e7ea      	b.n	8009fa4 <__swbuf_r+0x6c>
 8009fce:	bf00      	nop
 8009fd0:	0800bf7c 	.word	0x0800bf7c
 8009fd4:	0800bf9c 	.word	0x0800bf9c
 8009fd8:	0800bf5c 	.word	0x0800bf5c

08009fdc <__ascii_wctomb>:
 8009fdc:	4603      	mov	r3, r0
 8009fde:	4608      	mov	r0, r1
 8009fe0:	b141      	cbz	r1, 8009ff4 <__ascii_wctomb+0x18>
 8009fe2:	2aff      	cmp	r2, #255	; 0xff
 8009fe4:	d904      	bls.n	8009ff0 <__ascii_wctomb+0x14>
 8009fe6:	228a      	movs	r2, #138	; 0x8a
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	4770      	bx	lr
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	700a      	strb	r2, [r1, #0]
 8009ff4:	4770      	bx	lr
	...

08009ff8 <__swsetup_r>:
 8009ff8:	4b32      	ldr	r3, [pc, #200]	; (800a0c4 <__swsetup_r+0xcc>)
 8009ffa:	b570      	push	{r4, r5, r6, lr}
 8009ffc:	681d      	ldr	r5, [r3, #0]
 8009ffe:	4606      	mov	r6, r0
 800a000:	460c      	mov	r4, r1
 800a002:	b125      	cbz	r5, 800a00e <__swsetup_r+0x16>
 800a004:	69ab      	ldr	r3, [r5, #24]
 800a006:	b913      	cbnz	r3, 800a00e <__swsetup_r+0x16>
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 f97d 	bl	800a308 <__sinit>
 800a00e:	4b2e      	ldr	r3, [pc, #184]	; (800a0c8 <__swsetup_r+0xd0>)
 800a010:	429c      	cmp	r4, r3
 800a012:	d10f      	bne.n	800a034 <__swsetup_r+0x3c>
 800a014:	686c      	ldr	r4, [r5, #4]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a01c:	0719      	lsls	r1, r3, #28
 800a01e:	d42c      	bmi.n	800a07a <__swsetup_r+0x82>
 800a020:	06dd      	lsls	r5, r3, #27
 800a022:	d411      	bmi.n	800a048 <__swsetup_r+0x50>
 800a024:	2309      	movs	r3, #9
 800a026:	6033      	str	r3, [r6, #0]
 800a028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	e03e      	b.n	800a0b2 <__swsetup_r+0xba>
 800a034:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <__swsetup_r+0xd4>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d101      	bne.n	800a03e <__swsetup_r+0x46>
 800a03a:	68ac      	ldr	r4, [r5, #8]
 800a03c:	e7eb      	b.n	800a016 <__swsetup_r+0x1e>
 800a03e:	4b24      	ldr	r3, [pc, #144]	; (800a0d0 <__swsetup_r+0xd8>)
 800a040:	429c      	cmp	r4, r3
 800a042:	bf08      	it	eq
 800a044:	68ec      	ldreq	r4, [r5, #12]
 800a046:	e7e6      	b.n	800a016 <__swsetup_r+0x1e>
 800a048:	0758      	lsls	r0, r3, #29
 800a04a:	d512      	bpl.n	800a072 <__swsetup_r+0x7a>
 800a04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a04e:	b141      	cbz	r1, 800a062 <__swsetup_r+0x6a>
 800a050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a054:	4299      	cmp	r1, r3
 800a056:	d002      	beq.n	800a05e <__swsetup_r+0x66>
 800a058:	4630      	mov	r0, r6
 800a05a:	f7fd fe4b 	bl	8007cf4 <_free_r>
 800a05e:	2300      	movs	r3, #0
 800a060:	6363      	str	r3, [r4, #52]	; 0x34
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	2300      	movs	r3, #0
 800a06c:	6063      	str	r3, [r4, #4]
 800a06e:	6923      	ldr	r3, [r4, #16]
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	f043 0308 	orr.w	r3, r3, #8
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	b94b      	cbnz	r3, 800a092 <__swsetup_r+0x9a>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a088:	d003      	beq.n	800a092 <__swsetup_r+0x9a>
 800a08a:	4621      	mov	r1, r4
 800a08c:	4630      	mov	r0, r6
 800a08e:	f000 f9fd 	bl	800a48c <__smakebuf_r>
 800a092:	89a0      	ldrh	r0, [r4, #12]
 800a094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a098:	f010 0301 	ands.w	r3, r0, #1
 800a09c:	d00a      	beq.n	800a0b4 <__swsetup_r+0xbc>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60a3      	str	r3, [r4, #8]
 800a0a2:	6963      	ldr	r3, [r4, #20]
 800a0a4:	425b      	negs	r3, r3
 800a0a6:	61a3      	str	r3, [r4, #24]
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	b943      	cbnz	r3, 800a0be <__swsetup_r+0xc6>
 800a0ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0b0:	d1ba      	bne.n	800a028 <__swsetup_r+0x30>
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	0781      	lsls	r1, r0, #30
 800a0b6:	bf58      	it	pl
 800a0b8:	6963      	ldrpl	r3, [r4, #20]
 800a0ba:	60a3      	str	r3, [r4, #8]
 800a0bc:	e7f4      	b.n	800a0a8 <__swsetup_r+0xb0>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	e7f7      	b.n	800a0b2 <__swsetup_r+0xba>
 800a0c2:	bf00      	nop
 800a0c4:	2000007c 	.word	0x2000007c
 800a0c8:	0800bf7c 	.word	0x0800bf7c
 800a0cc:	0800bf9c 	.word	0x0800bf9c
 800a0d0:	0800bf5c 	.word	0x0800bf5c

0800a0d4 <__sflush_r>:
 800a0d4:	898a      	ldrh	r2, [r1, #12]
 800a0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0da:	4605      	mov	r5, r0
 800a0dc:	0710      	lsls	r0, r2, #28
 800a0de:	460c      	mov	r4, r1
 800a0e0:	d458      	bmi.n	800a194 <__sflush_r+0xc0>
 800a0e2:	684b      	ldr	r3, [r1, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dc05      	bgt.n	800a0f4 <__sflush_r+0x20>
 800a0e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	dc02      	bgt.n	800a0f4 <__sflush_r+0x20>
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d0f9      	beq.n	800a0ee <__sflush_r+0x1a>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a100:	682f      	ldr	r7, [r5, #0]
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	d032      	beq.n	800a16c <__sflush_r+0x98>
 800a106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	075a      	lsls	r2, r3, #29
 800a10c:	d505      	bpl.n	800a11a <__sflush_r+0x46>
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	1ac0      	subs	r0, r0, r3
 800a112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a114:	b10b      	cbz	r3, 800a11a <__sflush_r+0x46>
 800a116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a118:	1ac0      	subs	r0, r0, r3
 800a11a:	2300      	movs	r3, #0
 800a11c:	4602      	mov	r2, r0
 800a11e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a120:	4628      	mov	r0, r5
 800a122:	6a21      	ldr	r1, [r4, #32]
 800a124:	47b0      	blx	r6
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	d106      	bne.n	800a13a <__sflush_r+0x66>
 800a12c:	6829      	ldr	r1, [r5, #0]
 800a12e:	291d      	cmp	r1, #29
 800a130:	d82c      	bhi.n	800a18c <__sflush_r+0xb8>
 800a132:	4a2a      	ldr	r2, [pc, #168]	; (800a1dc <__sflush_r+0x108>)
 800a134:	40ca      	lsrs	r2, r1
 800a136:	07d6      	lsls	r6, r2, #31
 800a138:	d528      	bpl.n	800a18c <__sflush_r+0xb8>
 800a13a:	2200      	movs	r2, #0
 800a13c:	6062      	str	r2, [r4, #4]
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	04d9      	lsls	r1, r3, #19
 800a142:	6022      	str	r2, [r4, #0]
 800a144:	d504      	bpl.n	800a150 <__sflush_r+0x7c>
 800a146:	1c42      	adds	r2, r0, #1
 800a148:	d101      	bne.n	800a14e <__sflush_r+0x7a>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	b903      	cbnz	r3, 800a150 <__sflush_r+0x7c>
 800a14e:	6560      	str	r0, [r4, #84]	; 0x54
 800a150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a152:	602f      	str	r7, [r5, #0]
 800a154:	2900      	cmp	r1, #0
 800a156:	d0ca      	beq.n	800a0ee <__sflush_r+0x1a>
 800a158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a15c:	4299      	cmp	r1, r3
 800a15e:	d002      	beq.n	800a166 <__sflush_r+0x92>
 800a160:	4628      	mov	r0, r5
 800a162:	f7fd fdc7 	bl	8007cf4 <_free_r>
 800a166:	2000      	movs	r0, #0
 800a168:	6360      	str	r0, [r4, #52]	; 0x34
 800a16a:	e7c1      	b.n	800a0f0 <__sflush_r+0x1c>
 800a16c:	6a21      	ldr	r1, [r4, #32]
 800a16e:	2301      	movs	r3, #1
 800a170:	4628      	mov	r0, r5
 800a172:	47b0      	blx	r6
 800a174:	1c41      	adds	r1, r0, #1
 800a176:	d1c7      	bne.n	800a108 <__sflush_r+0x34>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0c4      	beq.n	800a108 <__sflush_r+0x34>
 800a17e:	2b1d      	cmp	r3, #29
 800a180:	d001      	beq.n	800a186 <__sflush_r+0xb2>
 800a182:	2b16      	cmp	r3, #22
 800a184:	d101      	bne.n	800a18a <__sflush_r+0xb6>
 800a186:	602f      	str	r7, [r5, #0]
 800a188:	e7b1      	b.n	800a0ee <__sflush_r+0x1a>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	e7ad      	b.n	800a0f0 <__sflush_r+0x1c>
 800a194:	690f      	ldr	r7, [r1, #16]
 800a196:	2f00      	cmp	r7, #0
 800a198:	d0a9      	beq.n	800a0ee <__sflush_r+0x1a>
 800a19a:	0793      	lsls	r3, r2, #30
 800a19c:	bf18      	it	ne
 800a19e:	2300      	movne	r3, #0
 800a1a0:	680e      	ldr	r6, [r1, #0]
 800a1a2:	bf08      	it	eq
 800a1a4:	694b      	ldreq	r3, [r1, #20]
 800a1a6:	eba6 0807 	sub.w	r8, r6, r7
 800a1aa:	600f      	str	r7, [r1, #0]
 800a1ac:	608b      	str	r3, [r1, #8]
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	dd9c      	ble.n	800a0ee <__sflush_r+0x1a>
 800a1b4:	4643      	mov	r3, r8
 800a1b6:	463a      	mov	r2, r7
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	6a21      	ldr	r1, [r4, #32]
 800a1bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1be:	47b0      	blx	r6
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	dc06      	bgt.n	800a1d2 <__sflush_r+0xfe>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	e78e      	b.n	800a0f0 <__sflush_r+0x1c>
 800a1d2:	4407      	add	r7, r0
 800a1d4:	eba8 0800 	sub.w	r8, r8, r0
 800a1d8:	e7e9      	b.n	800a1ae <__sflush_r+0xda>
 800a1da:	bf00      	nop
 800a1dc:	20400001 	.word	0x20400001

0800a1e0 <_fflush_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	690b      	ldr	r3, [r1, #16]
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	b913      	cbnz	r3, 800a1f0 <_fflush_r+0x10>
 800a1ea:	2500      	movs	r5, #0
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	b118      	cbz	r0, 800a1fa <_fflush_r+0x1a>
 800a1f2:	6983      	ldr	r3, [r0, #24]
 800a1f4:	b90b      	cbnz	r3, 800a1fa <_fflush_r+0x1a>
 800a1f6:	f000 f887 	bl	800a308 <__sinit>
 800a1fa:	4b14      	ldr	r3, [pc, #80]	; (800a24c <_fflush_r+0x6c>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	d11b      	bne.n	800a238 <_fflush_r+0x58>
 800a200:	686c      	ldr	r4, [r5, #4]
 800a202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0ef      	beq.n	800a1ea <_fflush_r+0xa>
 800a20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a20c:	07d0      	lsls	r0, r2, #31
 800a20e:	d404      	bmi.n	800a21a <_fflush_r+0x3a>
 800a210:	0599      	lsls	r1, r3, #22
 800a212:	d402      	bmi.n	800a21a <_fflush_r+0x3a>
 800a214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a216:	f7ff fd24 	bl	8009c62 <__retarget_lock_acquire_recursive>
 800a21a:	4628      	mov	r0, r5
 800a21c:	4621      	mov	r1, r4
 800a21e:	f7ff ff59 	bl	800a0d4 <__sflush_r>
 800a222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a224:	4605      	mov	r5, r0
 800a226:	07da      	lsls	r2, r3, #31
 800a228:	d4e0      	bmi.n	800a1ec <_fflush_r+0xc>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	059b      	lsls	r3, r3, #22
 800a22e:	d4dd      	bmi.n	800a1ec <_fflush_r+0xc>
 800a230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a232:	f7ff fd17 	bl	8009c64 <__retarget_lock_release_recursive>
 800a236:	e7d9      	b.n	800a1ec <_fflush_r+0xc>
 800a238:	4b05      	ldr	r3, [pc, #20]	; (800a250 <_fflush_r+0x70>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d101      	bne.n	800a242 <_fflush_r+0x62>
 800a23e:	68ac      	ldr	r4, [r5, #8]
 800a240:	e7df      	b.n	800a202 <_fflush_r+0x22>
 800a242:	4b04      	ldr	r3, [pc, #16]	; (800a254 <_fflush_r+0x74>)
 800a244:	429c      	cmp	r4, r3
 800a246:	bf08      	it	eq
 800a248:	68ec      	ldreq	r4, [r5, #12]
 800a24a:	e7da      	b.n	800a202 <_fflush_r+0x22>
 800a24c:	0800bf7c 	.word	0x0800bf7c
 800a250:	0800bf9c 	.word	0x0800bf9c
 800a254:	0800bf5c 	.word	0x0800bf5c

0800a258 <std>:
 800a258:	2300      	movs	r3, #0
 800a25a:	b510      	push	{r4, lr}
 800a25c:	4604      	mov	r4, r0
 800a25e:	e9c0 3300 	strd	r3, r3, [r0]
 800a262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a266:	6083      	str	r3, [r0, #8]
 800a268:	8181      	strh	r1, [r0, #12]
 800a26a:	6643      	str	r3, [r0, #100]	; 0x64
 800a26c:	81c2      	strh	r2, [r0, #14]
 800a26e:	6183      	str	r3, [r0, #24]
 800a270:	4619      	mov	r1, r3
 800a272:	2208      	movs	r2, #8
 800a274:	305c      	adds	r0, #92	; 0x5c
 800a276:	f7fd fd35 	bl	8007ce4 <memset>
 800a27a:	4b05      	ldr	r3, [pc, #20]	; (800a290 <std+0x38>)
 800a27c:	6224      	str	r4, [r4, #32]
 800a27e:	6263      	str	r3, [r4, #36]	; 0x24
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <std+0x3c>)
 800a282:	62a3      	str	r3, [r4, #40]	; 0x28
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <std+0x40>)
 800a286:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <std+0x44>)
 800a28a:	6323      	str	r3, [r4, #48]	; 0x30
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	bf00      	nop
 800a290:	0800a50d 	.word	0x0800a50d
 800a294:	0800a52f 	.word	0x0800a52f
 800a298:	0800a567 	.word	0x0800a567
 800a29c:	0800a58b 	.word	0x0800a58b

0800a2a0 <_cleanup_r>:
 800a2a0:	4901      	ldr	r1, [pc, #4]	; (800a2a8 <_cleanup_r+0x8>)
 800a2a2:	f000 b8af 	b.w	800a404 <_fwalk_reent>
 800a2a6:	bf00      	nop
 800a2a8:	0800a1e1 	.word	0x0800a1e1

0800a2ac <__sfmoreglue>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	2568      	movs	r5, #104	; 0x68
 800a2b0:	1e4a      	subs	r2, r1, #1
 800a2b2:	4355      	muls	r5, r2
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2ba:	f7fd fd67 	bl	8007d8c <_malloc_r>
 800a2be:	4604      	mov	r4, r0
 800a2c0:	b140      	cbz	r0, 800a2d4 <__sfmoreglue+0x28>
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	e9c0 1600 	strd	r1, r6, [r0]
 800a2c8:	300c      	adds	r0, #12
 800a2ca:	60a0      	str	r0, [r4, #8]
 800a2cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2d0:	f7fd fd08 	bl	8007ce4 <memset>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}

0800a2d8 <__sfp_lock_acquire>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__sfp_lock_acquire+0x8>)
 800a2da:	f7ff bcc2 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20000928 	.word	0x20000928

0800a2e4 <__sfp_lock_release>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__sfp_lock_release+0x8>)
 800a2e6:	f7ff bcbd 	b.w	8009c64 <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20000928 	.word	0x20000928

0800a2f0 <__sinit_lock_acquire>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__sinit_lock_acquire+0x8>)
 800a2f2:	f7ff bcb6 	b.w	8009c62 <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	20000923 	.word	0x20000923

0800a2fc <__sinit_lock_release>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	; (800a304 <__sinit_lock_release+0x8>)
 800a2fe:	f7ff bcb1 	b.w	8009c64 <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	20000923 	.word	0x20000923

0800a308 <__sinit>:
 800a308:	b510      	push	{r4, lr}
 800a30a:	4604      	mov	r4, r0
 800a30c:	f7ff fff0 	bl	800a2f0 <__sinit_lock_acquire>
 800a310:	69a3      	ldr	r3, [r4, #24]
 800a312:	b11b      	cbz	r3, 800a31c <__sinit+0x14>
 800a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a318:	f7ff bff0 	b.w	800a2fc <__sinit_lock_release>
 800a31c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a320:	6523      	str	r3, [r4, #80]	; 0x50
 800a322:	4b13      	ldr	r3, [pc, #76]	; (800a370 <__sinit+0x68>)
 800a324:	4a13      	ldr	r2, [pc, #76]	; (800a374 <__sinit+0x6c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	62a2      	str	r2, [r4, #40]	; 0x28
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	bf08      	it	eq
 800a32e:	2301      	moveq	r3, #1
 800a330:	4620      	mov	r0, r4
 800a332:	bf08      	it	eq
 800a334:	61a3      	streq	r3, [r4, #24]
 800a336:	f000 f81f 	bl	800a378 <__sfp>
 800a33a:	6060      	str	r0, [r4, #4]
 800a33c:	4620      	mov	r0, r4
 800a33e:	f000 f81b 	bl	800a378 <__sfp>
 800a342:	60a0      	str	r0, [r4, #8]
 800a344:	4620      	mov	r0, r4
 800a346:	f000 f817 	bl	800a378 <__sfp>
 800a34a:	2200      	movs	r2, #0
 800a34c:	2104      	movs	r1, #4
 800a34e:	60e0      	str	r0, [r4, #12]
 800a350:	6860      	ldr	r0, [r4, #4]
 800a352:	f7ff ff81 	bl	800a258 <std>
 800a356:	2201      	movs	r2, #1
 800a358:	2109      	movs	r1, #9
 800a35a:	68a0      	ldr	r0, [r4, #8]
 800a35c:	f7ff ff7c 	bl	800a258 <std>
 800a360:	2202      	movs	r2, #2
 800a362:	2112      	movs	r1, #18
 800a364:	68e0      	ldr	r0, [r4, #12]
 800a366:	f7ff ff77 	bl	800a258 <std>
 800a36a:	2301      	movs	r3, #1
 800a36c:	61a3      	str	r3, [r4, #24]
 800a36e:	e7d1      	b.n	800a314 <__sinit+0xc>
 800a370:	0800bbd8 	.word	0x0800bbd8
 800a374:	0800a2a1 	.word	0x0800a2a1

0800a378 <__sfp>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4607      	mov	r7, r0
 800a37c:	f7ff ffac 	bl	800a2d8 <__sfp_lock_acquire>
 800a380:	4b1e      	ldr	r3, [pc, #120]	; (800a3fc <__sfp+0x84>)
 800a382:	681e      	ldr	r6, [r3, #0]
 800a384:	69b3      	ldr	r3, [r6, #24]
 800a386:	b913      	cbnz	r3, 800a38e <__sfp+0x16>
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff ffbd 	bl	800a308 <__sinit>
 800a38e:	3648      	adds	r6, #72	; 0x48
 800a390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a394:	3b01      	subs	r3, #1
 800a396:	d503      	bpl.n	800a3a0 <__sfp+0x28>
 800a398:	6833      	ldr	r3, [r6, #0]
 800a39a:	b30b      	cbz	r3, 800a3e0 <__sfp+0x68>
 800a39c:	6836      	ldr	r6, [r6, #0]
 800a39e:	e7f7      	b.n	800a390 <__sfp+0x18>
 800a3a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3a4:	b9d5      	cbnz	r5, 800a3dc <__sfp+0x64>
 800a3a6:	4b16      	ldr	r3, [pc, #88]	; (800a400 <__sfp+0x88>)
 800a3a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3ac:	60e3      	str	r3, [r4, #12]
 800a3ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a3b0:	f7ff fc56 	bl	8009c60 <__retarget_lock_init_recursive>
 800a3b4:	f7ff ff96 	bl	800a2e4 <__sfp_lock_release>
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3c4:	6025      	str	r5, [r4, #0]
 800a3c6:	61a5      	str	r5, [r4, #24]
 800a3c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3cc:	f7fd fc8a 	bl	8007ce4 <memset>
 800a3d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3d8:	4620      	mov	r0, r4
 800a3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3dc:	3468      	adds	r4, #104	; 0x68
 800a3de:	e7d9      	b.n	800a394 <__sfp+0x1c>
 800a3e0:	2104      	movs	r1, #4
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	f7ff ff62 	bl	800a2ac <__sfmoreglue>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	6030      	str	r0, [r6, #0]
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1d5      	bne.n	800a39c <__sfp+0x24>
 800a3f0:	f7ff ff78 	bl	800a2e4 <__sfp_lock_release>
 800a3f4:	230c      	movs	r3, #12
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	e7ee      	b.n	800a3d8 <__sfp+0x60>
 800a3fa:	bf00      	nop
 800a3fc:	0800bbd8 	.word	0x0800bbd8
 800a400:	ffff0001 	.word	0xffff0001

0800a404 <_fwalk_reent>:
 800a404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a408:	4606      	mov	r6, r0
 800a40a:	4688      	mov	r8, r1
 800a40c:	2700      	movs	r7, #0
 800a40e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a416:	f1b9 0901 	subs.w	r9, r9, #1
 800a41a:	d505      	bpl.n	800a428 <_fwalk_reent+0x24>
 800a41c:	6824      	ldr	r4, [r4, #0]
 800a41e:	2c00      	cmp	r4, #0
 800a420:	d1f7      	bne.n	800a412 <_fwalk_reent+0xe>
 800a422:	4638      	mov	r0, r7
 800a424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a428:	89ab      	ldrh	r3, [r5, #12]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d907      	bls.n	800a43e <_fwalk_reent+0x3a>
 800a42e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a432:	3301      	adds	r3, #1
 800a434:	d003      	beq.n	800a43e <_fwalk_reent+0x3a>
 800a436:	4629      	mov	r1, r5
 800a438:	4630      	mov	r0, r6
 800a43a:	47c0      	blx	r8
 800a43c:	4307      	orrs	r7, r0
 800a43e:	3568      	adds	r5, #104	; 0x68
 800a440:	e7e9      	b.n	800a416 <_fwalk_reent+0x12>

0800a442 <__swhatbuf_r>:
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	460e      	mov	r6, r1
 800a446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44a:	4614      	mov	r4, r2
 800a44c:	2900      	cmp	r1, #0
 800a44e:	461d      	mov	r5, r3
 800a450:	b096      	sub	sp, #88	; 0x58
 800a452:	da07      	bge.n	800a464 <__swhatbuf_r+0x22>
 800a454:	2300      	movs	r3, #0
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	89b3      	ldrh	r3, [r6, #12]
 800a45a:	061a      	lsls	r2, r3, #24
 800a45c:	d410      	bmi.n	800a480 <__swhatbuf_r+0x3e>
 800a45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a462:	e00e      	b.n	800a482 <__swhatbuf_r+0x40>
 800a464:	466a      	mov	r2, sp
 800a466:	f000 f8b7 	bl	800a5d8 <_fstat_r>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	dbf2      	blt.n	800a454 <__swhatbuf_r+0x12>
 800a46e:	9a01      	ldr	r2, [sp, #4]
 800a470:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a474:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a478:	425a      	negs	r2, r3
 800a47a:	415a      	adcs	r2, r3
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	e7ee      	b.n	800a45e <__swhatbuf_r+0x1c>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	2000      	movs	r0, #0
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	b016      	add	sp, #88	; 0x58
 800a488:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a48c <__smakebuf_r>:
 800a48c:	898b      	ldrh	r3, [r1, #12]
 800a48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a490:	079d      	lsls	r5, r3, #30
 800a492:	4606      	mov	r6, r0
 800a494:	460c      	mov	r4, r1
 800a496:	d507      	bpl.n	800a4a8 <__smakebuf_r+0x1c>
 800a498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	6163      	str	r3, [r4, #20]
 800a4a4:	b002      	add	sp, #8
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	466a      	mov	r2, sp
 800a4aa:	ab01      	add	r3, sp, #4
 800a4ac:	f7ff ffc9 	bl	800a442 <__swhatbuf_r>
 800a4b0:	9900      	ldr	r1, [sp, #0]
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7fd fc69 	bl	8007d8c <_malloc_r>
 800a4ba:	b948      	cbnz	r0, 800a4d0 <__smakebuf_r+0x44>
 800a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c0:	059a      	lsls	r2, r3, #22
 800a4c2:	d4ef      	bmi.n	800a4a4 <__smakebuf_r+0x18>
 800a4c4:	f023 0303 	bic.w	r3, r3, #3
 800a4c8:	f043 0302 	orr.w	r3, r3, #2
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	e7e3      	b.n	800a498 <__smakebuf_r+0xc>
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <__smakebuf_r+0x7c>)
 800a4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	6020      	str	r0, [r4, #0]
 800a4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	6120      	str	r0, [r4, #16]
 800a4e2:	6163      	str	r3, [r4, #20]
 800a4e4:	9b01      	ldr	r3, [sp, #4]
 800a4e6:	b15b      	cbz	r3, 800a500 <__smakebuf_r+0x74>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ee:	f000 f885 	bl	800a5fc <_isatty_r>
 800a4f2:	b128      	cbz	r0, 800a500 <__smakebuf_r+0x74>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	89a0      	ldrh	r0, [r4, #12]
 800a502:	4305      	orrs	r5, r0
 800a504:	81a5      	strh	r5, [r4, #12]
 800a506:	e7cd      	b.n	800a4a4 <__smakebuf_r+0x18>
 800a508:	0800a2a1 	.word	0x0800a2a1

0800a50c <__sread>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	460c      	mov	r4, r1
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	f000 f894 	bl	800a640 <_read_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	bfab      	itete	ge
 800a51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a51e:	89a3      	ldrhlt	r3, [r4, #12]
 800a520:	181b      	addge	r3, r3, r0
 800a522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a526:	bfac      	ite	ge
 800a528:	6563      	strge	r3, [r4, #84]	; 0x54
 800a52a:	81a3      	strhlt	r3, [r4, #12]
 800a52c:	bd10      	pop	{r4, pc}

0800a52e <__swrite>:
 800a52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	461f      	mov	r7, r3
 800a534:	898b      	ldrh	r3, [r1, #12]
 800a536:	4605      	mov	r5, r0
 800a538:	05db      	lsls	r3, r3, #23
 800a53a:	460c      	mov	r4, r1
 800a53c:	4616      	mov	r6, r2
 800a53e:	d505      	bpl.n	800a54c <__swrite+0x1e>
 800a540:	2302      	movs	r3, #2
 800a542:	2200      	movs	r2, #0
 800a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a548:	f000 f868 	bl	800a61c <_lseek_r>
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	4632      	mov	r2, r6
 800a550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	4628      	mov	r0, r5
 800a558:	463b      	mov	r3, r7
 800a55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	f000 b817 	b.w	800a594 <_write_r>

0800a566 <__sseek>:
 800a566:	b510      	push	{r4, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56e:	f000 f855 	bl	800a61c <_lseek_r>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	bf15      	itete	ne
 800a578:	6560      	strne	r0, [r4, #84]	; 0x54
 800a57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a582:	81a3      	strheq	r3, [r4, #12]
 800a584:	bf18      	it	ne
 800a586:	81a3      	strhne	r3, [r4, #12]
 800a588:	bd10      	pop	{r4, pc}

0800a58a <__sclose>:
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 b813 	b.w	800a5b8 <_close_r>
	...

0800a594 <_write_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	2200      	movs	r2, #0
 800a59e:	4d05      	ldr	r5, [pc, #20]	; (800a5b4 <_write_r+0x20>)
 800a5a0:	602a      	str	r2, [r5, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f7fd fa4a 	bl	8007a3c <_write>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_write_r+0x1e>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_write_r+0x1e>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	2000091c 	.word	0x2000091c

0800a5b8 <_close_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4d05      	ldr	r5, [pc, #20]	; (800a5d4 <_close_r+0x1c>)
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	f7fd fa56 	bl	8007a74 <_close>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_close_r+0x1a>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_close_r+0x1a>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	2000091c 	.word	0x2000091c

0800a5d8 <_fstat_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4d06      	ldr	r5, [pc, #24]	; (800a5f8 <_fstat_r+0x20>)
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	f7fd fa50 	bl	8007a8a <_fstat>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d102      	bne.n	800a5f4 <_fstat_r+0x1c>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	b103      	cbz	r3, 800a5f4 <_fstat_r+0x1c>
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	bf00      	nop
 800a5f8:	2000091c 	.word	0x2000091c

0800a5fc <_isatty_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	2300      	movs	r3, #0
 800a600:	4d05      	ldr	r5, [pc, #20]	; (800a618 <_isatty_r+0x1c>)
 800a602:	4604      	mov	r4, r0
 800a604:	4608      	mov	r0, r1
 800a606:	602b      	str	r3, [r5, #0]
 800a608:	f7fd fa4e 	bl	8007aa8 <_isatty>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_isatty_r+0x1a>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_isatty_r+0x1a>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	2000091c 	.word	0x2000091c

0800a61c <_lseek_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	2200      	movs	r2, #0
 800a626:	4d05      	ldr	r5, [pc, #20]	; (800a63c <_lseek_r+0x20>)
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7fd fa46 	bl	8007abc <_lseek>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_lseek_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_lseek_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	2000091c 	.word	0x2000091c

0800a640 <_read_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	4611      	mov	r1, r2
 800a648:	2200      	movs	r2, #0
 800a64a:	4d05      	ldr	r5, [pc, #20]	; (800a660 <_read_r+0x20>)
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7fd f9d7 	bl	8007a02 <_read>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_read_r+0x1e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_read_r+0x1e>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	2000091c 	.word	0x2000091c

0800a664 <_init>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	bf00      	nop
 800a668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66a:	bc08      	pop	{r3}
 800a66c:	469e      	mov	lr, r3
 800a66e:	4770      	bx	lr

0800a670 <_fini>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr
